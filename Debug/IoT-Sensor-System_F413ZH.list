
IoT-Sensor-System_F413ZH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800b3b0  0800b3b0  0001b3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbbc  0800bbbc  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbbc  0800bbbc  0001bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc4  0800bbc4  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800bbcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000240  0800be0c  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800be0c  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dc2  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ab  00000000  00000000  00031032  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e24  00000000  00000000  00034ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbc7  00000000  00000000  000579c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce91b  00000000  00000000  0006358b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  00131f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b398 	.word	0x0800b398

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	0800b398 	.word	0x0800b398

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000422:	f1a4 0401 	sub.w	r4, r4, #1
 8000426:	d1e9      	bne.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2f>:
 8000c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c14:	bf24      	itt	cs
 8000c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1e:	d90d      	bls.n	8000c3c <__aeabi_d2f+0x30>
 8000c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c34:	bf08      	it	eq
 8000c36:	f020 0001 	biceq.w	r0, r0, #1
 8000c3a:	4770      	bx	lr
 8000c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c40:	d121      	bne.n	8000c86 <__aeabi_d2f+0x7a>
 8000c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c46:	bfbc      	itt	lt
 8000c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	4770      	bxlt	lr
 8000c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c56:	f1c2 0218 	rsb	r2, r2, #24
 8000c5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c62:	fa20 f002 	lsr.w	r0, r0, r2
 8000c66:	bf18      	it	ne
 8000c68:	f040 0001 	orrne.w	r0, r0, #1
 8000c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c78:	ea40 000c 	orr.w	r0, r0, ip
 8000c7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c84:	e7cc      	b.n	8000c20 <__aeabi_d2f+0x14>
 8000c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8a:	d107      	bne.n	8000c9c <__aeabi_d2f+0x90>
 8000c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c90:	bf1e      	ittt	ne
 8000c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9a:	4770      	bxne	lr
 8000c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc0:	f000 b972 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9e08      	ldr	r6, [sp, #32]
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4688      	mov	r8, r1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d14b      	bne.n	8000d82 <__udivmoddi4+0xa6>
 8000cea:	428a      	cmp	r2, r1
 8000cec:	4615      	mov	r5, r2
 8000cee:	d967      	bls.n	8000dc0 <__udivmoddi4+0xe4>
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0720 	rsb	r7, r2, #32
 8000cfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000d02:	4095      	lsls	r5, r2
 8000d04:	ea47 0803 	orr.w	r8, r7, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d14:	fa1f fc85 	uxth.w	ip, r5
 8000d18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d20:	fb07 f10c 	mul.w	r1, r7, ip
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x60>
 8000d28:	18eb      	adds	r3, r5, r3
 8000d2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2e:	f080 811b 	bcs.w	8000f68 <__udivmoddi4+0x28c>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 8118 	bls.w	8000f68 <__udivmoddi4+0x28c>
 8000d38:	3f02      	subs	r7, #2
 8000d3a:	442b      	add	r3, r5
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x8c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x290>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x290>
 8000d64:	3802      	subs	r0, #2
 8000d66:	442c      	add	r4, r5
 8000d68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	2700      	movs	r7, #0
 8000d72:	b11e      	cbz	r6, 8000d7c <__udivmoddi4+0xa0>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xbe>
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	f000 80eb 	beq.w	8000f62 <__udivmoddi4+0x286>
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d92:	4638      	mov	r0, r7
 8000d94:	4639      	mov	r1, r7
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f783 	clz	r7, r3
 8000d9e:	2f00      	cmp	r7, #0
 8000da0:	d147      	bne.n	8000e32 <__udivmoddi4+0x156>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd0>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2c4>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa0>
 8000dba:	e9c6 4800 	strd	r4, r8, [r6]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xe8>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 808f 	bne.w	8000eec <__udivmoddi4+0x210>
 8000dce:	1b49      	subs	r1, r1, r5
 8000dd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd4:	fa1f f885 	uxth.w	r8, r5
 8000dd8:	2701      	movs	r7, #1
 8000dda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dde:	0c23      	lsrs	r3, r4, #16
 8000de0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x124>
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x122>
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2bc>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1a59      	subs	r1, r3, r1
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x14c>
 8000e18:	192c      	adds	r4, r5, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x14a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80b6 	bhi.w	8000f92 <__udivmoddi4+0x2b6>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e79f      	b.n	8000d72 <__udivmoddi4+0x96>
 8000e32:	f1c7 0c20 	rsb	ip, r7, #32
 8000e36:	40bb      	lsls	r3, r7
 8000e38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e40:	fa01 f407 	lsl.w	r4, r1, r7
 8000e44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e50:	4325      	orrs	r5, r4
 8000e52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e56:	0c2c      	lsrs	r4, r5, #16
 8000e58:	fb08 3319 	mls	r3, r8, r9, r3
 8000e5c:	fa1f fa8e 	uxth.w	sl, lr
 8000e60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e64:	fb09 f40a 	mul.w	r4, r9, sl
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b0>
 8000e74:	eb1e 0303 	adds.w	r3, lr, r3
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	f080 8087 	bcs.w	8000f8e <__udivmoddi4+0x2b2>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f240 8084 	bls.w	8000f8e <__udivmoddi4+0x2b2>
 8000e86:	f1a9 0902 	sub.w	r9, r9, #2
 8000e8a:	4473      	add	r3, lr
 8000e8c:	1b1b      	subs	r3, r3, r4
 8000e8e:	b2ad      	uxth	r5, r5
 8000e90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e94:	fb08 3310 	mls	r3, r8, r0, r3
 8000e98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ea0:	45a2      	cmp	sl, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1da>
 8000ea4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eac:	d26b      	bcs.n	8000f86 <__udivmoddi4+0x2aa>
 8000eae:	45a2      	cmp	sl, r4
 8000eb0:	d969      	bls.n	8000f86 <__udivmoddi4+0x2aa>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4474      	add	r4, lr
 8000eb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	454c      	cmp	r4, r9
 8000ec4:	46c2      	mov	sl, r8
 8000ec6:	464b      	mov	r3, r9
 8000ec8:	d354      	bcc.n	8000f74 <__udivmoddi4+0x298>
 8000eca:	d051      	beq.n	8000f70 <__udivmoddi4+0x294>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d069      	beq.n	8000fa4 <__udivmoddi4+0x2c8>
 8000ed0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000edc:	40fd      	lsrs	r5, r7
 8000ede:	40fc      	lsrs	r4, r7
 8000ee0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee8:	2700      	movs	r7, #0
 8000eea:	e747      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef4:	4095      	lsls	r5, r2
 8000ef6:	fa01 f002 	lsl.w	r0, r1, r2
 8000efa:	fa21 f303 	lsr.w	r3, r1, r3
 8000efe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f02:	4338      	orrs	r0, r7
 8000f04:	0c01      	lsrs	r1, r0, #16
 8000f06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f0a:	fa1f f885 	uxth.w	r8, r5
 8000f0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f16:	fb07 f308 	mul.w	r3, r7, r8
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x256>
 8000f22:	1869      	adds	r1, r5, r1
 8000f24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f28:	d22f      	bcs.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d92d      	bls.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2e:	3f02      	subs	r7, #2
 8000f30:	4429      	add	r1, r5
 8000f32:	1acb      	subs	r3, r1, r3
 8000f34:	b281      	uxth	r1, r0
 8000f36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb00 f308 	mul.w	r3, r0, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d907      	bls.n	8000f5a <__udivmoddi4+0x27e>
 8000f4a:	1869      	adds	r1, r5, r1
 8000f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f50:	d217      	bcs.n	8000f82 <__udivmoddi4+0x2a6>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d915      	bls.n	8000f82 <__udivmoddi4+0x2a6>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4429      	add	r1, r5
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f60:	e73b      	b.n	8000dda <__udivmoddi4+0xfe>
 8000f62:	4637      	mov	r7, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e709      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000f68:	4607      	mov	r7, r0
 8000f6a:	e6e7      	b.n	8000d3c <__udivmoddi4+0x60>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x8c>
 8000f70:	4541      	cmp	r1, r8
 8000f72:	d2ab      	bcs.n	8000ecc <__udivmoddi4+0x1f0>
 8000f74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f78:	eb69 020e 	sbc.w	r2, r9, lr
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	4613      	mov	r3, r2
 8000f80:	e7a4      	b.n	8000ecc <__udivmoddi4+0x1f0>
 8000f82:	4660      	mov	r0, ip
 8000f84:	e7e9      	b.n	8000f5a <__udivmoddi4+0x27e>
 8000f86:	4618      	mov	r0, r3
 8000f88:	e795      	b.n	8000eb6 <__udivmoddi4+0x1da>
 8000f8a:	4667      	mov	r7, ip
 8000f8c:	e7d1      	b.n	8000f32 <__udivmoddi4+0x256>
 8000f8e:	4681      	mov	r9, r0
 8000f90:	e77c      	b.n	8000e8c <__udivmoddi4+0x1b0>
 8000f92:	3802      	subs	r0, #2
 8000f94:	442c      	add	r4, r5
 8000f96:	e747      	b.n	8000e28 <__udivmoddi4+0x14c>
 8000f98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f9c:	442b      	add	r3, r5
 8000f9e:	e72f      	b.n	8000e00 <__udivmoddi4+0x124>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xda>
 8000fa4:	4637      	mov	r7, r6
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0xa0>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8000fb2:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f001 ff52 	bl	8002e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f908 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 fb3e 	bl	800163c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc0:	f000 fb1c 	bl	80015fc <MX_DMA_Init>
  MX_RTC_Init();
 8000fc4:	f000 f9bc 	bl	8001340 <MX_RTC_Init>
  MX_UART4_Init();
 8000fc8:	f000 fa14 	bl	80013f4 <MX_UART4_Init>
  MX_UART5_Init();
 8000fcc:	f000 fa3c 	bl	8001448 <MX_UART5_Init>
  MX_UART7_Init();
 8000fd0:	f000 fa64 	bl	800149c <MX_UART7_Init>
  MX_UART8_Init();
 8000fd4:	f000 fa8c 	bl	80014f0 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000fd8:	f000 fab4 	bl	8001544 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fdc:	f000 fae4 	bl	80015a8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f980 	bl	80012e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000fe4:	4864      	ldr	r0, [pc, #400]	; (8001178 <main+0x1cc>)
 8000fe6:	f001 fe73 	bl	8002cd0 <RetargetInit>
  memcpy(ESP32.SSID, _SSID, strlen(_SSID));
 8000fea:	220e      	movs	r2, #14
 8000fec:	4963      	ldr	r1, [pc, #396]	; (800117c <main+0x1d0>)
 8000fee:	4864      	ldr	r0, [pc, #400]	; (8001180 <main+0x1d4>)
 8000ff0:	f006 f988 	bl	8007304 <memcpy>
  memcpy(ESP32.Pass, _PASS, strlen(_PASS));
 8000ff4:	220d      	movs	r2, #13
 8000ff6:	4963      	ldr	r1, [pc, #396]	; (8001184 <main+0x1d8>)
 8000ff8:	4863      	ldr	r0, [pc, #396]	; (8001188 <main+0x1dc>)
 8000ffa:	f006 f983 	bl	8007304 <memcpy>
  ESP32.IO.IO_Receive = Receive_Func;
 8000ffe:	4b60      	ldr	r3, [pc, #384]	; (8001180 <main+0x1d4>)
 8001000:	4a62      	ldr	r2, [pc, #392]	; (800118c <main+0x1e0>)
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
  ESP32.IO.IO_Transmit = Transmit_Func;
 8001004:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <main+0x1d4>)
 8001006:	4a62      	ldr	r2, [pc, #392]	; (8001190 <main+0x1e4>)
 8001008:	649a      	str	r2, [r3, #72]	; 0x48

  printf("----------START PROGRAM----------\r\n");
 800100a:	4862      	ldr	r0, [pc, #392]	; (8001194 <main+0x1e8>)
 800100c:	f007 f8f2 	bl	80081f4 <puts>
  Sensor_1.uart_itf = &huart4;
 8001010:	4b61      	ldr	r3, [pc, #388]	; (8001198 <main+0x1ec>)
 8001012:	4a62      	ldr	r2, [pc, #392]	; (800119c <main+0x1f0>)
 8001014:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_1);
 8001016:	4860      	ldr	r0, [pc, #384]	; (8001198 <main+0x1ec>)
 8001018:	f001 fc02 	bl	8002820 <Sensor_Init>

  Sensor_2.uart_itf = &huart5;
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <main+0x1f4>)
 800101e:	4a61      	ldr	r2, [pc, #388]	; (80011a4 <main+0x1f8>)
 8001020:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_2);
 8001022:	485f      	ldr	r0, [pc, #380]	; (80011a0 <main+0x1f4>)
 8001024:	f001 fbfc 	bl	8002820 <Sensor_Init>

  Sensor_3.uart_itf = &huart7;
 8001028:	4b5f      	ldr	r3, [pc, #380]	; (80011a8 <main+0x1fc>)
 800102a:	4a60      	ldr	r2, [pc, #384]	; (80011ac <main+0x200>)
 800102c:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_3);
 800102e:	485e      	ldr	r0, [pc, #376]	; (80011a8 <main+0x1fc>)
 8001030:	f001 fbf6 	bl	8002820 <Sensor_Init>

  Sensor_4.uart_itf = &huart8;
 8001034:	4b5e      	ldr	r3, [pc, #376]	; (80011b0 <main+0x204>)
 8001036:	4a5f      	ldr	r2, [pc, #380]	; (80011b4 <main+0x208>)
 8001038:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_4);
 800103a:	485d      	ldr	r0, [pc, #372]	; (80011b0 <main+0x204>)
 800103c:	f001 fbf0 	bl	8002820 <Sensor_Init>

  HT_Sensor.interface = &hi2c1;
 8001040:	4b5d      	ldr	r3, [pc, #372]	; (80011b8 <main+0x20c>)
 8001042:	4a5e      	ldr	r2, [pc, #376]	; (80011bc <main+0x210>)
 8001044:	601a      	str	r2, [r3, #0]
  SHTC3_Init(&HT_Sensor);
 8001046:	485c      	ldr	r0, [pc, #368]	; (80011b8 <main+0x20c>)
 8001048:	f001 fd59 	bl	8002afe <SHTC3_Init>

  ESP32_Init(&ESP32);
 800104c:	484c      	ldr	r0, [pc, #304]	; (8001180 <main+0x1d4>)
 800104e:	f001 f8c1 	bl	80021d4 <ESP32_Init>
  ESP32_MQTT_Connect(&ESP32, "client_id");
 8001052:	495b      	ldr	r1, [pc, #364]	; (80011c0 <main+0x214>)
 8001054:	484a      	ldr	r0, [pc, #296]	; (8001180 <main+0x1d4>)
 8001056:	f001 f93d 	bl	80022d4 <ESP32_MQTT_Connect>
  Network_time_t network_time = ESP32_GetTime();
 800105a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fa7a 	bl	8002558 <ESP32_GetTime>

  RTC_TimeTypeDef sTime = {0};
 8001064:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  sTime.Hours	= network_time.hour;
 8001074:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8001078:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
  sTime.Minutes	= network_time.min;
 800107c:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 8001080:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
  sTime.Seconds	= network_time.sec;
 8001084:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 8001088:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286

  RTC_DateTypeDef sDate = {0};
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
  sDate.Month	= network_time.month;
 8001092:	f897 3299 	ldrb.w	r3, [r7, #665]	; 0x299
 8001096:	f887 3281 	strb.w	r3, [r7, #641]	; 0x281
  sDate.Date	= network_time.day;
 800109a:	f897 329a 	ldrb.w	r3, [r7, #666]	; 0x29a
 800109e:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
  sDate.Year	= network_time.year - 2000;
 80010a2:	f897 3298 	ldrb.w	r3, [r7, #664]	; 0x298
 80010a6:	3330      	adds	r3, #48	; 0x30
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010ae:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4843      	ldr	r0, [pc, #268]	; (80011c4 <main+0x218>)
 80010b8:	f004 fd7b 	bl	8005bb2 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010bc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	483f      	ldr	r0, [pc, #252]	; (80011c4 <main+0x218>)
 80010c6:	f004 fe8f 	bl	8005de8 <HAL_RTC_SetDate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t time_str[128] = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	461a      	mov	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f006 f921 	bl	800731a <memset>
	  Get_Time_Format(time_str, sizeof(time_str), 9);
 80010d8:	463b      	mov	r3, r7
 80010da:	2209      	movs	r2, #9
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fbfc 	bl	80018dc <Get_Time_Format>

	  Sensor_Get_Value(&Sensor_1);
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <main+0x1ec>)
 80010e6:	f001 fc09 	bl	80028fc <Sensor_Get_Value>
	  Sensor_Get_Value(&Sensor_2);
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <main+0x1f4>)
 80010ec:	f001 fc06 	bl	80028fc <Sensor_Get_Value>
	  Sensor_Get_Value(&Sensor_3);
 80010f0:	482d      	ldr	r0, [pc, #180]	; (80011a8 <main+0x1fc>)
 80010f2:	f001 fc03 	bl	80028fc <Sensor_Get_Value>
	  Sensor_Get_Value(&Sensor_4);
 80010f6:	482e      	ldr	r0, [pc, #184]	; (80011b0 <main+0x204>)
 80010f8:	f001 fc00 	bl	80028fc <Sensor_Get_Value>
	  SHTC3_Measurement(&HT_Sensor);
 80010fc:	482e      	ldr	r0, [pc, #184]	; (80011b8 <main+0x20c>)
 80010fe:	f001 fd1b 	bl	8002b38 <SHTC3_Measurement>

	  char data2send[512] = {0};
 8001102:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001106:	4618      	mov	r0, r3
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	461a      	mov	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	f006 f903 	bl	800731a <memset>
	  Format_Data(Sensor_1, Sensor_2, Sensor_3, Sensor_4, HT_Sensor, data2send, time_str);
 8001114:	4e20      	ldr	r6, [pc, #128]	; (8001198 <main+0x1ec>)
 8001116:	463b      	mov	r3, r7
 8001118:	9315      	str	r3, [sp, #84]	; 0x54
 800111a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800111e:	9314      	str	r3, [sp, #80]	; 0x50
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <main+0x20c>)
 8001122:	ac10      	add	r4, sp, #64	; 0x40
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	c407      	stmia	r4!, {r0, r1, r2}
 8001128:	7023      	strb	r3, [r4, #0]
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <main+0x204>)
 800112c:	ac0b      	add	r4, sp, #44	; 0x2c
 800112e:	461d      	mov	r5, r3
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <main+0x1fc>)
 800113a:	ac06      	add	r4, sp, #24
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <main+0x1f4>)
 8001148:	ac01      	add	r4, sp, #4
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	6023      	str	r3, [r4, #0]
 8001154:	6933      	ldr	r3, [r6, #16]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800115c:	f000 fc28 	bl	80019b0 <Format_Data>
	  ESP32_MQTT_Public(&ESP32, "IoTSensorUnit", data2send);
 8001160:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001164:	461a      	mov	r2, r3
 8001166:	4918      	ldr	r1, [pc, #96]	; (80011c8 <main+0x21c>)
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <main+0x1d4>)
 800116a:	f001 f8f1 	bl	8002350 <ESP32_MQTT_Public>

	  HAL_Delay(60000);
 800116e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001172:	f001 fee5 	bl	8002f40 <HAL_Delay>
  {
 8001176:	e7a8      	b.n	80010ca <main+0x11e>
 8001178:	200005e4 	.word	0x200005e4
 800117c:	0800b3b0 	.word	0x0800b3b0
 8001180:	2000025c 	.word	0x2000025c
 8001184:	0800b3c0 	.word	0x0800b3c0
 8001188:	2000027c 	.word	0x2000027c
 800118c:	080016c5 	.word	0x080016c5
 8001190:	080018a5 	.word	0x080018a5
 8001194:	0800b3d0 	.word	0x0800b3d0
 8001198:	200004ac 	.word	0x200004ac
 800119c:	20000718 	.word	0x20000718
 80011a0:	200004c0 	.word	0x200004c0
 80011a4:	20000678 	.word	0x20000678
 80011a8:	200004d4 	.word	0x200004d4
 80011ac:	200005a4 	.word	0x200005a4
 80011b0:	200004e8 	.word	0x200004e8
 80011b4:	200006d8 	.word	0x200006d8
 80011b8:	200004fc 	.word	0x200004fc
 80011bc:	20000624 	.word	0x20000624
 80011c0:	0800b3f4 	.word	0x0800b3f4
 80011c4:	200006b8 	.word	0x200006b8
 80011c8:	0800b400 	.word	0x0800b400

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0aa      	sub	sp, #168	; 0xa8
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d6:	2234      	movs	r2, #52	; 0x34
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 f89d 	bl	800731a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2258      	movs	r2, #88	; 0x58
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f006 f88e 	bl	800731a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <SystemClock_Config+0x110>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a35      	ldr	r2, [pc, #212]	; (80012dc <SystemClock_Config+0x110>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <SystemClock_Config+0x110>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <SystemClock_Config+0x114>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <SystemClock_Config+0x114>)
 8001224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <SystemClock_Config+0x114>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001236:	230a      	movs	r3, #10
 8001238:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	2301      	movs	r3, #1
 800123c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001246:	2301      	movs	r3, #1
 8001248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001258:	2310      	movs	r3, #16
 800125a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 800125e:	23c8      	movs	r3, #200	; 0xc8
 8001260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800127a:	4618      	mov	r0, r3
 800127c:	f004 f9c6 	bl	800560c <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001286:	f000 fc51 	bl	8001b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012a4:	2103      	movs	r1, #3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd58 	bl	8004d5c <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80012b2:	f000 fc3b 	bl	8001b2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012b6:	2308      	movs	r3, #8
 80012b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 ff15 	bl	80050f4 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80012d0:	f000 fc2c 	bl	8001b2c <Error_Handler>
  }
}
 80012d4:	bf00      	nop
 80012d6:	37a8      	adds	r7, #168	; 0xa8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f002 fc63 	bl	8003bec <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fbfe 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000624 	.word	0x20000624
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_RTC_Init+0xac>)
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <MX_RTC_Init+0xb0>)
 800135c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_RTC_Init+0xac>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_RTC_Init+0xac>)
 8001366:	227f      	movs	r2, #127	; 0x7f
 8001368:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_RTC_Init+0xac>)
 800136c:	22ff      	movs	r2, #255	; 0xff
 800136e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_RTC_Init+0xac>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_RTC_Init+0xac>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_RTC_Init+0xac>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <MX_RTC_Init+0xac>)
 8001384:	f004 fb84 	bl	8005a90 <HAL_RTC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 fbcd 	bl	8001b2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001396:	2300      	movs	r3, #0
 8001398:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800139a:	2300      	movs	r3, #0
 800139c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	480f      	ldr	r0, [pc, #60]	; (80013ec <MX_RTC_Init+0xac>)
 80013ae:	f004 fc00 	bl	8005bb2 <HAL_RTC_SetTime>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 fbb8 	bl	8001b2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013bc:	2301      	movs	r3, #1
 80013be:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013c0:	2301      	movs	r3, #1
 80013c2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_RTC_Init+0xac>)
 80013d4:	f004 fd08 	bl	8005de8 <HAL_RTC_SetDate>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013de:	f000 fba5 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200006b8 	.word	0x200006b8
 80013f0:	40002800 	.word	0x40002800

080013f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_UART4_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_UART4_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_UART4_Init+0x4c>)
 8001400:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001404:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_UART4_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_UART4_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_UART4_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_UART4_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_UART4_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_UART4_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_UART4_Init+0x4c>)
 800142c:	f004 fe62 	bl	80060f4 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 fb79 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000718 	.word	0x20000718
 8001444:	40004c00 	.word	0x40004c00

08001448 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_UART5_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_UART5_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_UART5_Init+0x4c>)
 8001454:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001458:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_UART5_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_UART5_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_UART5_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_UART5_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_UART5_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_UART5_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_UART5_Init+0x4c>)
 8001480:	f004 fe38 	bl	80060f4 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 fb4f 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000678 	.word	0x20000678
 8001498:	40005000 	.word	0x40005000

0800149c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_UART7_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 38400;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014ac:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_UART7_Init+0x4c>)
 80014d4:	f004 fe0e 	bl	80060f4 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 fb25 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200005a4 	.word	0x200005a4
 80014ec:	40007800 	.word	0x40007800

080014f0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_UART8_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_UART8_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_UART8_Init+0x4c>)
 80014fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001500:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_UART8_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_UART8_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_UART8_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_UART8_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_UART8_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_UART8_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_UART8_Init+0x4c>)
 8001528:	f004 fde4 	bl	80060f4 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 fafb 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200006d8 	.word	0x200006d8
 8001540:	40007c00 	.word	0x40007c00

08001544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_USART2_UART_Init+0x58>)
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_USART2_UART_Init+0x5c>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_USART2_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_USART2_UART_Init+0x58>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <MX_USART2_UART_Init+0x58>)
 800157c:	f004 fdba 	bl	80060f4 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 fad1 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  HAL_UART_Receive_DMA(&huart2,  ESP32.IO.buffer, BUFFER_SIZE);
 800158a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x60>)
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <MX_USART2_UART_Init+0x58>)
 8001592:	f004 ff3b 	bl	800640c <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000758 	.word	0x20000758
 80015a0:	40004400 	.word	0x40004400
 80015a4:	200002a8 	.word	0x200002a8

080015a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART3_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015e0:	f004 fd88 	bl	80060f4 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f000 fa9f 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200005e4 	.word	0x200005e4
 80015f8:	40004800 	.word	0x40004800

080015fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_DMA_Init+0x3c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <MX_DMA_Init+0x3c>)
 800160c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_DMA_Init+0x3c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2010      	movs	r0, #16
 8001624:	f001 fd89 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001628:	2010      	movs	r0, #16
 800162a:	f001 fda2 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <MX_GPIO_Init+0x84>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_GPIO_Init+0x84>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_GPIO_Init+0x84>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_GPIO_Init+0x84>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <MX_GPIO_Init+0x84>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_GPIO_Init+0x84>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <Receive_Func>:

/* USER CODE BEGIN 4 */

int16_t Receive_Func( uint8_t *buffer, uint16_t buffer_size, uint32_t time_out)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	6018      	str	r0, [r3, #0]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f107 030a 	add.w	r3, r7, #10
 80016da:	460a      	mov	r2, r1
 80016dc:	801a      	strh	r2, [r3, #0]
	uint32_t timeout = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	memset(buffer, 0, buffer_size);
 80016e4:	f107 030a 	add.w	r3, r7, #10
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2100      	movs	r1, #0
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f005 fe12 	bl	800731a <memset>
	uint16_t read_index = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	do
	{
		uint8_t check_buff[BUFFER_SIZE] = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4618      	mov	r0, r3
 8001702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001706:	461a      	mov	r2, r3
 8001708:	2100      	movs	r1, #0
 800170a:	f005 fe06 	bl	800731a <memset>
		uint8_t cnt=0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
		read_index = ESP32.IO.read_pos;
 8001714:	4b5d      	ldr	r3, [pc, #372]	; (800188c <Receive_Func+0x1c8>)
 8001716:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 800171a:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222

		do
		{
			check_buff[cnt++] = ESP32.IO.buffer[read_index];
 800171e:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 8001722:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	f887 1221 	strb.w	r1, [r7, #545]	; 0x221
 800172c:	4619      	mov	r1, r3
 800172e:	4b57      	ldr	r3, [pc, #348]	; (800188c <Receive_Func+0x1c8>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001736:	b2da      	uxtb	r2, r3
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	545a      	strb	r2, [r3, r1]
			if(++read_index>=BUFFER_SIZE)
 800173e:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001742:	3301      	adds	r3, #1
 8001744:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 8001748:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800174c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001750:	d302      	bcc.n	8001758 <Receive_Func+0x94>
				read_index = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
		}while(ESP32.IO.buffer[read_index] != 0);
 8001758:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <Receive_Func+0x1c8>)
 800175e:	4413      	add	r3, r2
 8001760:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1d9      	bne.n	800171e <Receive_Func+0x5a>

		//if((strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nOK\r\n")!=0)||(strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nERROR\r\n")!=0))
		if((strstr((char*)check_buff, "\r\nOK")!=0)||(strstr((char*)check_buff, "ERROR")!=0)
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4948      	ldr	r1, [pc, #288]	; (8001890 <Receive_Func+0x1cc>)
 8001770:	4618      	mov	r0, r3
 8001772:	f006 fe15 	bl	80083a0 <strstr>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <Receive_Func+0xee>
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4944      	ldr	r1, [pc, #272]	; (8001894 <Receive_Func+0x1d0>)
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fe0c 	bl	80083a0 <strstr>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d111      	bne.n	80017b2 <Receive_Func+0xee>
				||(strstr((char*)check_buff, "ready")!=0)||(strstr((char*)check_buff, "+MQTTPUB:OK")!=0))
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4941      	ldr	r1, [pc, #260]	; (8001898 <Receive_Func+0x1d4>)
 8001794:	4618      	mov	r0, r3
 8001796:	f006 fe03 	bl	80083a0 <strstr>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d108      	bne.n	80017b2 <Receive_Func+0xee>
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	493d      	ldr	r1, [pc, #244]	; (800189c <Receive_Func+0x1d8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fdfa 	bl	80083a0 <strstr>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d055      	beq.n	800185e <Receive_Func+0x19a>
		{
			uint8_t index = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
			memcpy(buffer, check_buff, cnt);
 80017b8:	f897 2221 	ldrb.w	r2, [r7, #545]	; 0x221
 80017bc:	f107 0114 	add.w	r1, r7, #20
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f005 fd9d 	bl	8007304 <memcpy>
			for(int i = 0; i < cnt; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80017d0:	e02b      	b.n	800182a <Receive_Func+0x166>
			{
				int temp = ((ESP32.IO.read_pos + i)<BUFFER_SIZE)?(ESP32.IO.read_pos + i):((ESP32.IO.read_pos + i)-BUFFER_SIZE);
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <Receive_Func+0x1c8>)
 80017d4:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80017e0:	4413      	add	r3, r2
 80017e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e6:	da08      	bge.n	80017fa <Receive_Func+0x136>
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <Receive_Func+0x1c8>)
 80017ea:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80017f6:	4413      	add	r3, r2
 80017f8:	e009      	b.n	800180e <Receive_Func+0x14a>
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <Receive_Func+0x1c8>)
 80017fc:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001808:	4413      	add	r3, r2
 800180a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800180e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				ESP32.IO.buffer[temp] = 0;
 8001812:	4a1e      	ldr	r2, [pc, #120]	; (800188c <Receive_Func+0x1c8>)
 8001814:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001818:	4413      	add	r3, r2
 800181a:	334c      	adds	r3, #76	; 0x4c
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < cnt; i++)
 8001820:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001824:	3301      	adds	r3, #1
 8001826:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800182a:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800182e:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001832:	429a      	cmp	r2, r3
 8001834:	dbcd      	blt.n	80017d2 <Receive_Func+0x10e>
			}
			printf("[debug]: %s--position: %d\r\n", buffer, ESP32.IO.read_pos);
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <Receive_Func+0x1c8>)
 8001838:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <Receive_Func+0x1dc>)
 8001848:	f006 fc60 	bl	800810c <iprintf>
			ESP32.IO.read_pos = read_index;
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <Receive_Func+0x1c8>)
 800184e:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001852:	f8a2 324c 	strh.w	r3, [r2, #588]	; 0x24c
			return index;
 8001856:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 800185a:	b21b      	sxth	r3, r3
 800185c:	e011      	b.n	8001882 <Receive_Func+0x1be>
		}

		if(++timeout >= time_out)
 800185e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001862:	3301      	adds	r3, #1
 8001864:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d302      	bcc.n	800187a <Receive_Func+0x1b6>
			return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e003      	b.n	8001882 <Receive_Func+0x1be>
		HAL_Delay(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f001 fb60 	bl	8002f40 <HAL_Delay>
	{
 8001880:	e73c      	b.n	80016fc <Receive_Func+0x38>
	}while(1);
}
 8001882:	4618      	mov	r0, r3
 8001884:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000025c 	.word	0x2000025c
 8001890:	0800b410 	.word	0x0800b410
 8001894:	0800b418 	.word	0x0800b418
 8001898:	0800b420 	.word	0x0800b420
 800189c:	0800b428 	.word	0x0800b428
 80018a0:	0800b434 	.word	0x0800b434

080018a4 <Transmit_Func>:

int16_t Transmit_Func( uint8_t *data, uint16_t data_size)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = HAL_UART_Transmit(&huart2, data, data_size, HAL_MAX_DELAY);
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <Transmit_Func+0x34>)
 80018ba:	f004 fc68 	bl	800618e <HAL_UART_Transmit>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
	if(res != HAL_OK)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <Transmit_Func+0x2a>
		return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	e000      	b.n	80018d0 <Transmit_Func+0x2c>
	else
		return 0;
 80018ce:	2300      	movs	r3, #0

}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000758 	.word	0x20000758

080018dc <Get_Time_Format>:

void Get_Time_Format(uint8_t* time_str, int size ,int timeZone)
{
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	b09b      	sub	sp, #108	; 0x6c
 80018e0:	af06      	add	r7, sp, #24
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef stime = {0};
 80018e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sdate = {0};
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 80018fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4828      	ldr	r0, [pc, #160]	; (80019a8 <Get_Time_Format+0xcc>)
 8001906:	f004 fa11 	bl	8005d2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 800190a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	4825      	ldr	r0, [pc, #148]	; (80019a8 <Get_Time_Format+0xcc>)
 8001914:	f004 fb0f 	bl	8005f36 <HAL_RTC_GetDate>

	struct tm proc_time = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2224      	movs	r2, #36	; 0x24
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f005 fcfa 	bl	800731a <memset>

	proc_time.tm_year = 2000 + sdate.Year - 1900;
 8001926:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800192a:	3364      	adds	r3, #100	; 0x64
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
	proc_time.tm_mon = sdate.Month - 1;
 800192e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001932:	3b01      	subs	r3, #1
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
	proc_time.tm_mday = sdate.Date;
 8001936:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800193a:	623b      	str	r3, [r7, #32]
	proc_time.tm_hour = stime.Hours;
 800193c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001940:	61fb      	str	r3, [r7, #28]
	proc_time.tm_min = stime.Minutes;
 8001942:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001946:	61bb      	str	r3, [r7, #24]
	proc_time.tm_sec = stime.Seconds;
 8001948:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800194c:	617b      	str	r3, [r7, #20]

	mktime(&proc_time);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fdc4 	bl	80074e0 <mktime>
	proc_time.tm_hour += timeZone;
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	61fb      	str	r3, [r7, #28]
	mktime(&proc_time);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fdbb 	bl	80074e0 <mktime>
	//2021-01-12 12:00:00+09
	memset(time_str, 0, size);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	461a      	mov	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f005 fcd2 	bl	800731a <memset>
	sprintf(time_str, "%.4d-%.2d-%.2d %.2d:%.2d:%.2d+%.2d:00", (int)proc_time.tm_year + 1900, (int)proc_time.tm_mon + 1
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	1c5e      	adds	r6, r3, #1
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	687c      	ldr	r4, [r7, #4]
 800198a:	9404      	str	r4, [sp, #16]
 800198c:	9003      	str	r0, [sp, #12]
 800198e:	9102      	str	r1, [sp, #8]
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4633      	mov	r3, r6
 8001996:	462a      	mov	r2, r5
 8001998:	4904      	ldr	r1, [pc, #16]	; (80019ac <Get_Time_Format+0xd0>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f006 fce0 	bl	8008360 <siprintf>
	, (int)proc_time.tm_mday, (int)proc_time.tm_hour, (int)proc_time.tm_min, (int)proc_time.tm_sec, timeZone);
}
 80019a0:	bf00      	nop
 80019a2:	3754      	adds	r7, #84	; 0x54
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a8:	200006b8 	.word	0x200006b8
 80019ac:	0800b450 	.word	0x0800b450

080019b0 <Format_Data>:

void Format_Data(Sensor_t Sensor_1,Sensor_t Sensor_2,Sensor_t Sensor_3,Sensor_t Sensor_4, SHTC3_Sensor_t HT_Sensor,char* data_format, char* time_str)
{
 80019b0:	b084      	sub	sp, #16
 80019b2:	b5b0      	push	{r4, r5, r7, lr}
 80019b4:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	f507 648d 	add.w	r4, r7, #1128	; 0x468
 80019be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor_t Sensors[4] = {Sensor_1, Sensor_2, Sensor_3, Sensor_4};
 80019c2:	f207 4404 	addw	r4, r7, #1028	; 0x404
 80019c6:	f507 658d 	add.w	r5, r7, #1128	; 0x468
 80019ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 80019d6:	f207 457c 	addw	r5, r7, #1148	; 0x47c
 80019da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	f207 442c 	addw	r4, r7, #1068	; 0x42c
 80019e6:	f507 6592 	add.w	r5, r7, #1168	; 0x490
 80019ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	6023      	str	r3, [r4, #0]
 80019f2:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 80019f6:	f207 45a4 	addw	r5, r7, #1188	; 0x4a4
 80019fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	6023      	str	r3, [r4, #0]
	char* sensor_value[256] = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4618      	mov	r0, r3
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f005 fc84 	bl	800731a <memset>
	if(HT_Sensor.connection == shtc3_connected)
 8001a12:	f897 34bc 	ldrb.w	r3, [r7, #1212]	; 0x4bc
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d11d      	bne.n	8001a56 <Format_Data+0xa6>
	{
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Temp",HT_Sensor.data.tem);
 8001a1a:	f8d7 34bd 	ldr.w	r3, [r7, #1213]	; 0x4bd
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fdc4 	bl	80005ac <__aeabi_f2d>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	1d3a      	adds	r2, r7, #4
 8001a2a:	1d38      	adds	r0, r7, #4
 8001a2c:	e9cd 3400 	strd	r3, r4, [sp]
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <Format_Data+0x15c>)
 8001a32:	4937      	ldr	r1, [pc, #220]	; (8001b10 <Format_Data+0x160>)
 8001a34:	f006 fc94 	bl	8008360 <siprintf>
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Rh",HT_Sensor.data.hum);
 8001a38:	f8d7 34c1 	ldr.w	r3, [r7, #1217]	; 0x4c1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fdb5 	bl	80005ac <__aeabi_f2d>
 8001a42:	4603      	mov	r3, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	1d3a      	adds	r2, r7, #4
 8001a48:	1d38      	adds	r0, r7, #4
 8001a4a:	e9cd 3400 	strd	r3, r4, [sp]
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <Format_Data+0x164>)
 8001a50:	492f      	ldr	r1, [pc, #188]	; (8001b10 <Format_Data+0x160>)
 8001a52:	f006 fc85 	bl	8008360 <siprintf>
	}

	for(int i = 0; i < 4; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001a5c:	e03d      	b.n	8001ada <Format_Data+0x12a>
	{
		if(Sensors[i].isConnected == connected)
 8001a5e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b54      	subs	r3, #84	; 0x54
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d12b      	bne.n	8001ad0 <Format_Data+0x120>
		{
			sprintf(sensor_value, "%s\t\t\"%s\":%.1f", sensor_value, Sensors[i].name, Sensors[i].value);
 8001a78:	f207 4104 	addw	r1, r7, #1028	; 0x404
 8001a7c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	1c5d      	adds	r5, r3, #1
 8001a8c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b48      	subs	r3, #72	; 0x48
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd82 	bl	80005ac <__aeabi_f2d>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	1d3a      	adds	r2, r7, #4
 8001aae:	1d38      	adds	r0, r7, #4
 8001ab0:	e9cd 3400 	strd	r3, r4, [sp]
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	4918      	ldr	r1, [pc, #96]	; (8001b18 <Format_Data+0x168>)
 8001ab8:	f006 fc52 	bl	8008360 <siprintf>
			if(i<(4-1))
 8001abc:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	dc05      	bgt.n	8001ad0 <Format_Data+0x120>
				sprintf(sensor_value,"%s,\r\n", sensor_value);
 8001ac4:	1d3a      	adds	r2, r7, #4
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4914      	ldr	r1, [pc, #80]	; (8001b1c <Format_Data+0x16c>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 fc48 	bl	8008360 <siprintf>
	for(int i = 0; i < 4; i++)
 8001ad0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001ada:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	ddbd      	ble.n	8001a5e <Format_Data+0xae>
		}
	}

	sprintf(data_format, "{\r\n\t\"time\":\"%s\",\r\n\t\"product type\":\"%s\",\r\n\t\"number\":\"%s\",\r\n\t\"value\":\r\n\t{\r\n%s\r\n\t}\r\n}",
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <Format_Data+0x170>)
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <Format_Data+0x174>)
 8001aec:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8001af0:	490d      	ldr	r1, [pc, #52]	; (8001b28 <Format_Data+0x178>)
 8001af2:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 8001af6:	f006 fc33 	bl	8008360 <siprintf>
			time_str, PRODUCT_TYPE, NUMBER, sensor_value);
}
 8001afa:	bf00      	nop
 8001afc:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b06:	b004      	add	sp, #16
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	0800b478 	.word	0x0800b478
 8001b10:	0800b480 	.word	0x0800b480
 8001b14:	0800b494 	.word	0x0800b494
 8001b18:	0800b498 	.word	0x0800b498
 8001b1c:	0800b4a8 	.word	0x0800b4a8
 8001b20:	0800b514 	.word	0x0800b514
 8001b24:	0800b4b0 	.word	0x0800b4b0
 8001b28:	0800b4c0 	.word	0x0800b4c0

08001b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <Error_Handler+0x6>

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_I2C_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12b      	bne.n	8001bfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <HAL_I2C_MspInit+0x8c>)
 8001bde:	f001 fe73 	bl	80038c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_RTC_MspInit+0x24>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RTC_MspInit+0x28>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40002800 	.word	0x40002800
 8001c3c:	42470e3c 	.word	0x42470e3c

08001c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a98      	ldr	r2, [pc, #608]	; (8001ec0 <HAL_UART_MspInit+0x280>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12c      	bne.n	8001cbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c66:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a96      	ldr	r2, [pc, #600]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a8f      	ldr	r2, [pc, #572]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001caa:	2308      	movs	r3, #8
 8001cac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4884      	ldr	r0, [pc, #528]	; (8001ec8 <HAL_UART_MspInit+0x288>)
 8001cb6:	f001 fe07 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cba:	e167      	b.n	8001f8c <HAL_UART_MspInit+0x34c>
  else if(huart->Instance==UART5)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a82      	ldr	r2, [pc, #520]	; (8001ecc <HAL_UART_MspInit+0x28c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12d      	bne.n	8001d22 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cca:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a7d      	ldr	r2, [pc, #500]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001d10:	230b      	movs	r3, #11
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	486d      	ldr	r0, [pc, #436]	; (8001ed0 <HAL_UART_MspInit+0x290>)
 8001d1c:	f001 fdd4 	bl	80038c8 <HAL_GPIO_Init>
}
 8001d20:	e134      	b.n	8001f8c <HAL_UART_MspInit+0x34c>
  else if(huart->Instance==UART7)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6b      	ldr	r2, [pc, #428]	; (8001ed4 <HAL_UART_MspInit+0x294>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12c      	bne.n	8001d86 <HAL_UART_MspInit+0x146>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001d74:	2308      	movs	r3, #8
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4856      	ldr	r0, [pc, #344]	; (8001ed8 <HAL_UART_MspInit+0x298>)
 8001d80:	f001 fda2 	bl	80038c8 <HAL_GPIO_Init>
}
 8001d84:	e102      	b.n	8001f8c <HAL_UART_MspInit+0x34c>
  else if(huart->Instance==UART8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a54      	ldr	r2, [pc, #336]	; (8001edc <HAL_UART_MspInit+0x29c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12d      	bne.n	8001dec <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001da8:	623b      	str	r3, [r7, #32]
 8001daa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a43      	ldr	r2, [pc, #268]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001db6:	f043 0320 	orr.w	r3, r3, #32
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de2:	4619      	mov	r1, r3
 8001de4:	483c      	ldr	r0, [pc, #240]	; (8001ed8 <HAL_UART_MspInit+0x298>)
 8001de6:	f001 fd6f 	bl	80038c8 <HAL_GPIO_Init>
}
 8001dea:	e0cf      	b.n	8001f8c <HAL_UART_MspInit+0x34c>
  else if(huart->Instance==USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3b      	ldr	r2, [pc, #236]	; (8001ee0 <HAL_UART_MspInit+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d17a      	bne.n	8001eec <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_UART_MspInit+0x284>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e46:	4619      	mov	r1, r3
 8001e48:	481f      	ldr	r0, [pc, #124]	; (8001ec8 <HAL_UART_MspInit+0x288>)
 8001e4a:	f001 fd3d 	bl	80038c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_UART_MspInit+0x2a8>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e90:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001e92:	f001 f989 	bl	80031a8 <HAL_DMA_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001e9c:	f7ff fe46 	bl	8001b2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_UART_MspInit+0x2a4>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2026      	movs	r0, #38	; 0x26
 8001eb2:	f001 f942 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb6:	2026      	movs	r0, #38	; 0x26
 8001eb8:	f001 f95b 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8001ebc:	e066      	b.n	8001f8c <HAL_UART_MspInit+0x34c>
 8001ebe:	bf00      	nop
 8001ec0:	40004c00 	.word	0x40004c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40005000 	.word	0x40005000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40007800 	.word	0x40007800
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40007c00 	.word	0x40007c00
 8001ee0:	40004400 	.word	0x40004400
 8001ee4:	20000544 	.word	0x20000544
 8001ee8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_UART_MspInit+0x354>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d14a      	bne.n	8001f8c <HAL_UART_MspInit+0x34c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_UART_MspInit+0x358>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f62:	4619      	mov	r1, r3
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <HAL_UART_MspInit+0x35c>)
 8001f66:	f001 fcaf 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_UART_MspInit+0x360>)
 8001f88:	f001 fc9e 	bl	80038c8 <HAL_GPIO_Init>
}
 8001f8c:	bf00      	nop
 8001f8e:	3750      	adds	r7, #80	; 0x50
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 ff86 	bl	8002f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA1_Stream5_IRQHandler+0x10>)
 8001ffe:	f001 f9fb 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000544 	.word	0x20000544

0800200c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(++ESP32.IO.write_pos>BUFFER_SIZE)
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <USART2_IRQHandler+0x34>)
 8002012:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8002016:	3301      	adds	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <USART2_IRQHandler+0x34>)
 800201c:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <USART2_IRQHandler+0x34>)
 8002022:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8002026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202a:	d903      	bls.n	8002034 <USART2_IRQHandler+0x28>
		ESP32.IO.write_pos = 0;
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <USART2_IRQHandler+0x34>)
 800202e:	2200      	movs	r2, #0
 8002030:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <USART2_IRQHandler+0x38>)
 8002036:	f004 fa69 	bl	800650c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000025c 	.word	0x2000025c
 8002044:	20000758 	.word	0x20000758

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f005 f91a 	bl	80072b0 <__errno>
 800207c:	4602      	mov	r2, r0
 800207e:	230c      	movs	r3, #12
 8002080:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20050000 	.word	0x20050000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	2000050c 	.word	0x2000050c
 80020b0:	200007a8 	.word	0x200007a8

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <SystemInit+0x28>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <SystemInit+0x28>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SystemInit+0x28>)
 80020ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ce:	609a      	str	r2, [r3, #8]
#endif
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80020e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020e6:	e003      	b.n	80020f0 <LoopCopyDataInit>

080020e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ee:	3104      	adds	r1, #4

080020f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020f8:	d3f6      	bcc.n	80020e8 <CopyDataInit>
  ldr  r2, =_sbss
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020fc:	e002      	b.n	8002104 <LoopFillZerobss>

080020fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80020fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002100:	f842 3b04 	str.w	r3, [r2], #4

08002104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002108:	d3f9      	bcc.n	80020fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800210a:	f7ff ffd3 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210e:	f005 f8d5 	bl	80072bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7fe ff4b 	bl	8000fac <main>
  bx  lr    
 8002116:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002118:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800211c:	0800bbcc 	.word	0x0800bbcc
  ldr  r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002124:	20000240 	.word	0x20000240
  ldr  r2, =_sbss
 8002128:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 800212c:	200007a4 	.word	0x200007a4

08002130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC_IRQHandler>
	...

08002134 <ESP32_SendCommand>:

Network_t *Network = {0};


static Network_Status_t ESP32_SendCommand(uint8_t* cmd)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800213a:	af00      	add	r7, sp, #0
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	6018      	str	r0, [r3, #0]

	int16_t res = Network->IO.IO_Transmit(cmd, strlen((char*)cmd));
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <ESP32_SendCommand+0x94>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f7fe f869 	bl	8000220 <strlen>
 800214e:	4603      	mov	r3, r0
 8002150:	b29a      	uxth	r2, r3
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4611      	mov	r1, r2
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	47a0      	blx	r4
 800215a:	4603      	mov	r3, r0
 800215c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4618      	mov	r0, r3
 8002166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216a:	461a      	mov	r2, r3
 800216c:	2100      	movs	r1, #0
 800216e:	f005 f8d4 	bl	800731a <memset>

	if(res >=0 )
 8002172:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 8002176:	2b00      	cmp	r3, #0
 8002178:	db1f      	blt.n	80021ba <ESP32_SendCommand+0x86>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <ESP32_SendCommand+0x94>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f107 000c 	add.w	r0, r7, #12
 8002184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218c:	4798      	blx	r3
 800218e:	4603      	mov	r3, r0
 8002190:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		if(res >=0 )
 8002194:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 8002198:	2b00      	cmp	r3, #0
 800219a:	db01      	blt.n	80021a0 <ESP32_SendCommand+0x6c>
		{
			//ESP_DEBUG(recv_buff);
			return NETWORK_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e00d      	b.n	80021bc <ESP32_SendCommand+0x88>
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 80021a0:	480a      	ldr	r0, [pc, #40]	; (80021cc <ESP32_SendCommand+0x98>)
 80021a2:	f005 ffb3 	bl	800810c <iprintf>
			ESP_DEBUG(recv_buff);
 80021a6:	480a      	ldr	r0, [pc, #40]	; (80021d0 <ESP32_SendCommand+0x9c>)
 80021a8:	f005 ffb0 	bl	800810c <iprintf>
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4618      	mov	r0, r3
 80021b2:	f005 ffab 	bl	800810c <iprintf>
			return NETWORK_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <ESP32_SendCommand+0x88>
		}

	}
	return NETWORK_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000510 	.word	0x20000510
 80021cc:	0800b524 	.word	0x0800b524
 80021d0:	0800b530 	.word	0x0800b530

080021d4 <ESP32_Init>:


Network_Status_t ESP32_Init(Network_t *network)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b094      	sub	sp, #80	; 0x50
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	Network = network;
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <ESP32_Init+0xc8>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]

	ESP32_SendCommand((uint8_t*)"AT+RST\r\n"); 						//Reset ESP32
 80021e2:	482f      	ldr	r0, [pc, #188]	; (80022a0 <ESP32_Init+0xcc>)
 80021e4:	f7ff ffa6 	bl	8002134 <ESP32_SendCommand>
	ESP32_SendCommand((uint8_t*)"ATE0\r\n"); 						//turn off echo
 80021e8:	482e      	ldr	r0, [pc, #184]	; (80022a4 <ESP32_Init+0xd0>)
 80021ea:	f7ff ffa3 	bl	8002134 <ESP32_SendCommand>
	Network_Status_t res = ESP32_SendCommand((uint8_t*)"AT\r\n");	//test with AT command
 80021ee:	482e      	ldr	r0, [pc, #184]	; (80022a8 <ESP32_Init+0xd4>)
 80021f0:	f7ff ffa0 	bl	8002134 <ESP32_SendCommand>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(res == NETWORK_OK )
 80021fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d147      	bne.n	8002292 <ESP32_Init+0xbe>
	{
		ESP_DEBUG("Set Station mode\r\n");
 8002202:	482a      	ldr	r0, [pc, #168]	; (80022ac <ESP32_Init+0xd8>)
 8002204:	f005 ff82 	bl	800810c <iprintf>
 8002208:	4829      	ldr	r0, [pc, #164]	; (80022b0 <ESP32_Init+0xdc>)
 800220a:	f005 fff3 	bl	80081f4 <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CWMODE=1\r\n")>=0)
 800220e:	4829      	ldr	r0, [pc, #164]	; (80022b4 <ESP32_Init+0xe0>)
 8002210:	f7ff ff90 	bl	8002134 <ESP32_SendCommand>
		{
			ESP_DEBUG("Connect wifi with ssid: %s, pass: %s\r\n",  Network->SSID, Network->Pass);
 8002214:	4825      	ldr	r0, [pc, #148]	; (80022ac <ESP32_Init+0xd8>)
 8002216:	f005 ff79 	bl	800810c <iprintf>
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <ESP32_Init+0xc8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <ESP32_Init+0xc8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3320      	adds	r3, #32
 8002226:	461a      	mov	r2, r3
 8002228:	4823      	ldr	r0, [pc, #140]	; (80022b8 <ESP32_Init+0xe4>)
 800222a:	f005 ff6f 	bl	800810c <iprintf>
			uint8_t cmd[64] = {0};
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f005 f86f 	bl	800731a <memset>
			sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", Network->SSID, Network->Pass);
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <ESP32_Init+0xc8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <ESP32_Init+0xc8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3320      	adds	r3, #32
 8002248:	f107 000c 	add.w	r0, r7, #12
 800224c:	491b      	ldr	r1, [pc, #108]	; (80022bc <ESP32_Init+0xe8>)
 800224e:	f006 f887 	bl	8008360 <siprintf>
			if(ESP32_SendCommand(cmd)<0)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff6c 	bl	8002134 <ESP32_SendCommand>
		else
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config SSL\r\n");
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <ESP32_Init+0xd8>)
 800225e:	f005 ff55 	bl	800810c <iprintf>
 8002262:	4817      	ldr	r0, [pc, #92]	; (80022c0 <ESP32_Init+0xec>)
 8002264:	f005 ffc6 	bl	80081f4 <puts>
		if(ESP32_SendCommand("AT+CIPSSLCCONF=3,0,0\r\n")<0)
 8002268:	4816      	ldr	r0, [pc, #88]	; (80022c4 <ESP32_Init+0xf0>)
 800226a:	f7ff ff63 	bl	8002134 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config mode\r\n");
 800226e:	480f      	ldr	r0, [pc, #60]	; (80022ac <ESP32_Init+0xd8>)
 8002270:	f005 ff4c 	bl	800810c <iprintf>
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <ESP32_Init+0xf4>)
 8002276:	f005 ffbd 	bl	80081f4 <puts>
		if(ESP32_SendCommand("AT+CWMODE=1\r\n")<0)
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <ESP32_Init+0xe0>)
 800227c:	f7ff ff5a 	bl	8002134 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config time server\r\n");
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <ESP32_Init+0xd8>)
 8002282:	f005 ff43 	bl	800810c <iprintf>
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <ESP32_Init+0xf8>)
 8002288:	f005 ffb4 	bl	80081f4 <puts>
		if(ESP32_SendCommand("AT+CIPSNTPCFG=1,0,\"sg.pool.ntp.org\"\r\n")<0)
 800228c:	4810      	ldr	r0, [pc, #64]	; (80022d0 <ESP32_Init+0xfc>)
 800228e:	f7ff ff51 	bl	8002134 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

	}
	return NETWORK_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3750      	adds	r7, #80	; 0x50
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000510 	.word	0x20000510
 80022a0:	0800b538 	.word	0x0800b538
 80022a4:	0800b544 	.word	0x0800b544
 80022a8:	0800b54c 	.word	0x0800b54c
 80022ac:	0800b530 	.word	0x0800b530
 80022b0:	0800b554 	.word	0x0800b554
 80022b4:	0800b568 	.word	0x0800b568
 80022b8:	0800b578 	.word	0x0800b578
 80022bc:	0800b5a0 	.word	0x0800b5a0
 80022c0:	0800b5b8 	.word	0x0800b5b8
 80022c4:	0800b5c4 	.word	0x0800b5c4
 80022c8:	0800b5dc 	.word	0x0800b5dc
 80022cc:	0800b5ec 	.word	0x0800b5ec
 80022d0:	0800b600 	.word	0x0800b600

080022d4 <ESP32_MQTT_Connect>:

Network_Status_t ESP32_MQTT_Connect(Network_t *network, uint8_t* client_id)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0a2      	sub	sp, #136	; 0x88
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	uint8_t esp_cmd[128] = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 f817 	bl	800731a <memset>
	ESP_DEBUG("Set TLS: ");
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <ESP32_MQTT_Connect+0x64>)
 80022ee:	f005 ff0d 	bl	800810c <iprintf>
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <ESP32_MQTT_Connect+0x68>)
 80022f4:	f005 ff0a 	bl	800810c <iprintf>
	sprintf(esp_cmd, "AT+MQTTUSERCFG=0,4,\"%s\",\"espressif\",\"1234567890\",0,0,\"\"\r\n", client_id);
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4910      	ldr	r1, [pc, #64]	; (8002340 <ESP32_MQTT_Connect+0x6c>)
 8002300:	4618      	mov	r0, r3
 8002302:	f006 f82d 	bl	8008360 <siprintf>
	if(ESP32_SendCommand(esp_cmd)<0)
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff12 	bl	8002134 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <ESP32_MQTT_Connect+0x70>)
 8002312:	f005 ff6f 	bl	80081f4 <puts>
	ESP_DEBUG("Connect to IoT AWS: ");
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <ESP32_MQTT_Connect+0x64>)
 8002318:	f005 fef8 	bl	800810c <iprintf>
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <ESP32_MQTT_Connect+0x74>)
 800231e:	f005 fef5 	bl	800810c <iprintf>
//	if(ESP32_SendCommand("AT+MQTTCONN=0,\"as76wtq33csyg-ats.iot.ap-southeast-1.amazonaws.com\",8883,1\r\n")<0)
	if(ESP32_SendCommand("AT+MQTTCONN=0,\"a2m7a41bhehfuw-ats.iot.us-east-2.amazonaws.com\",8883,1\r\n")<0)
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <ESP32_MQTT_Connect+0x78>)
 8002324:	f7ff ff06 	bl	8002134 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <ESP32_MQTT_Connect+0x70>)
 800232a:	f005 ff63 	bl	80081f4 <puts>
	return NETWORK_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3788      	adds	r7, #136	; 0x88
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	0800b530 	.word	0x0800b530
 800233c:	0800b628 	.word	0x0800b628
 8002340:	0800b634 	.word	0x0800b634
 8002344:	0800b670 	.word	0x0800b670
 8002348:	0800b674 	.word	0x0800b674
 800234c:	0800b68c 	.word	0x0800b68c

08002350 <ESP32_MQTT_Public>:

Network_Status_t ESP32_MQTT_Public(Network_t *network, uint8_t* topic, uint8_t* message)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002356:	af00      	add	r7, sp, #0
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	6019      	str	r1, [r3, #0]
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	601a      	str	r2, [r3, #0]
	uint8_t esp_cmd[1024] = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	4618      	mov	r0, r3
 800236e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002372:	461a      	mov	r2, r3
 8002374:	2100      	movs	r1, #0
 8002376:	f004 ffd0 	bl	800731a <memset>

	//sprintf(esp_cmd, "AT+MQTTPUB=0,\"%s\",\"%s\",1,0\r\n", topic, message);
	sprintf(esp_cmd, "AT+MQTTPUBRAW=0,\"%s\",%d,1,0\r\n", topic, strlen(message));
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f7fd ff4f 	bl	8000220 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	f107 0208 	add.w	r2, r7, #8
 8002388:	f107 0010 	add.w	r0, r7, #16
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4913      	ldr	r1, [pc, #76]	; (80023dc <ESP32_MQTT_Public+0x8c>)
 8002390:	f005 ffe6 	bl	8008360 <siprintf>
	ESP_DEBUG("[PUBLIC]: %s\r\n", esp_cmd);
 8002394:	4812      	ldr	r0, [pc, #72]	; (80023e0 <ESP32_MQTT_Public+0x90>)
 8002396:	f005 feb9 	bl	800810c <iprintf>
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4619      	mov	r1, r3
 80023a0:	4810      	ldr	r0, [pc, #64]	; (80023e4 <ESP32_MQTT_Public+0x94>)
 80023a2:	f005 feb3 	bl	800810c <iprintf>

	if(ESP32_SendCommand(esp_cmd)<0)
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fec2 	bl	8002134 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	ESP_DEBUG("[PUBLIC]: topic: %s, message: %s\r\n", topic, message);
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <ESP32_MQTT_Public+0x90>)
 80023b2:	f005 feab 	bl	800810c <iprintf>
 80023b6:	1d3a      	adds	r2, r7, #4
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <ESP32_MQTT_Public+0x98>)
 80023c2:	f005 fea3 	bl	800810c <iprintf>

	if(ESP32_SendCommand(message)<0)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7ff feb3 	bl	8002134 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	return NETWORK_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	0800b6d4 	.word	0x0800b6d4
 80023e0:	0800b530 	.word	0x0800b530
 80023e4:	0800b6f4 	.word	0x0800b6f4
 80023e8:	0800b704 	.word	0x0800b704

080023ec <standard_string_time>:
static void standard_string_time(uint8_t* time_str)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	int index = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

	do
	{
		if(time_str[index] == 0)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d014      	beq.n	800242e <standard_string_time+0x42>
		{
			break;
		}
		else if ((time_str[index] < '0')||(time_str[index] > '9'))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b2f      	cmp	r3, #47	; 0x2f
 800240e:	d905      	bls.n	800241c <standard_string_time+0x30>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b39      	cmp	r3, #57	; 0x39
 800241a:	d904      	bls.n	8002426 <standard_string_time+0x3a>
		{
			time_str[index] = '0';
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	2230      	movs	r2, #48	; 0x30
 8002424:	701a      	strb	r2, [r3, #0]
		}
		index++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
		if(time_str[index] == 0)
 800242c:	e7e4      	b.n	80023f8 <standard_string_time+0xc>
			break;
 800242e:	bf00      	nop
	}while(1);

}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <month_encode>:
static uint8_t month_encode(uint8_t* month_str)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	if(strstr((char*)(char*)month_str, "Jan"))
 8002444:	4938      	ldr	r1, [pc, #224]	; (8002528 <month_encode+0xec>)
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f005 ffaa 	bl	80083a0 <strstr>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <month_encode+0x1a>
		return 1;
 8002452:	2301      	movs	r3, #1
 8002454:	e063      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Feb"))
 8002456:	4935      	ldr	r1, [pc, #212]	; (800252c <month_encode+0xf0>)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f005 ffa1 	bl	80083a0 <strstr>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <month_encode+0x2c>
		return 2;
 8002464:	2302      	movs	r3, #2
 8002466:	e05a      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Mar"))
 8002468:	4931      	ldr	r1, [pc, #196]	; (8002530 <month_encode+0xf4>)
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f005 ff98 	bl	80083a0 <strstr>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <month_encode+0x3e>
		return 3;
 8002476:	2303      	movs	r3, #3
 8002478:	e051      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Apr"))
 800247a:	492e      	ldr	r1, [pc, #184]	; (8002534 <month_encode+0xf8>)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f005 ff8f 	bl	80083a0 <strstr>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <month_encode+0x50>
		return 4;
 8002488:	2304      	movs	r3, #4
 800248a:	e048      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "May"))
 800248c:	492a      	ldr	r1, [pc, #168]	; (8002538 <month_encode+0xfc>)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f005 ff86 	bl	80083a0 <strstr>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <month_encode+0x62>
		return 5;
 800249a:	2305      	movs	r3, #5
 800249c:	e03f      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jun"))
 800249e:	4927      	ldr	r1, [pc, #156]	; (800253c <month_encode+0x100>)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f005 ff7d 	bl	80083a0 <strstr>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <month_encode+0x74>
		return 6;
 80024ac:	2306      	movs	r3, #6
 80024ae:	e036      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jul"))
 80024b0:	4923      	ldr	r1, [pc, #140]	; (8002540 <month_encode+0x104>)
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 ff74 	bl	80083a0 <strstr>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <month_encode+0x86>
		return 7;
 80024be:	2307      	movs	r3, #7
 80024c0:	e02d      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Aug"))
 80024c2:	4920      	ldr	r1, [pc, #128]	; (8002544 <month_encode+0x108>)
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f005 ff6b 	bl	80083a0 <strstr>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <month_encode+0x98>
		return 8;
 80024d0:	2308      	movs	r3, #8
 80024d2:	e024      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Sep"))
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <month_encode+0x10c>)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 ff62 	bl	80083a0 <strstr>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <month_encode+0xaa>
		return 9;
 80024e2:	2309      	movs	r3, #9
 80024e4:	e01b      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Oct"))
 80024e6:	4919      	ldr	r1, [pc, #100]	; (800254c <month_encode+0x110>)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f005 ff59 	bl	80083a0 <strstr>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <month_encode+0xbc>
		return 10;
 80024f4:	230a      	movs	r3, #10
 80024f6:	e012      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Nov"))
 80024f8:	4915      	ldr	r1, [pc, #84]	; (8002550 <month_encode+0x114>)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f005 ff50 	bl	80083a0 <strstr>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <month_encode+0xce>
		return 11;
 8002506:	230b      	movs	r3, #11
 8002508:	e009      	b.n	800251e <month_encode+0xe2>
	else if(strstr((char*)month_str, "Dec"))
 800250a:	4912      	ldr	r1, [pc, #72]	; (8002554 <month_encode+0x118>)
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f005 ff47 	bl	80083a0 <strstr>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <month_encode+0xe0>
		return 12;
 8002518:	230c      	movs	r3, #12
 800251a:	e000      	b.n	800251e <month_encode+0xe2>
	else
		return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	0800b728 	.word	0x0800b728
 800252c:	0800b72c 	.word	0x0800b72c
 8002530:	0800b730 	.word	0x0800b730
 8002534:	0800b734 	.word	0x0800b734
 8002538:	0800b738 	.word	0x0800b738
 800253c:	0800b73c 	.word	0x0800b73c
 8002540:	0800b740 	.word	0x0800b740
 8002544:	0800b744 	.word	0x0800b744
 8002548:	0800b748 	.word	0x0800b748
 800254c:	0800b74c 	.word	0x0800b74c
 8002550:	0800b750 	.word	0x0800b750
 8002554:	0800b754 	.word	0x0800b754

08002558 <ESP32_GetTime>:

Network_time_t ESP32_GetTime()
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 800255e:	af04      	add	r7, sp, #16
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	6018      	str	r0, [r3, #0]
	uint8_t esp_cmd[256] = {0};
 8002564:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002568:	4618      	mov	r0, r3
 800256a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256e:	461a      	mov	r2, r3
 8002570:	2100      	movs	r1, #0
 8002572:	f004 fed2 	bl	800731a <memset>
	Network_time_t result = {0};
 8002576:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	809a      	strh	r2, [r3, #4]
	sprintf((char*)esp_cmd, "AT+CIPSNTPTIME?\r\n");
 8002580:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002584:	4aa0      	ldr	r2, [pc, #640]	; (8002808 <ESP32_GetTime+0x2b0>)
 8002586:	461c      	mov	r4, r3
 8002588:	4615      	mov	r5, r2
 800258a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	8023      	strh	r3, [r4, #0]
	int16_t res = Network->IO.IO_Transmit(esp_cmd, strlen((char*)esp_cmd));
 8002592:	4b9e      	ldr	r3, [pc, #632]	; (800280c <ESP32_GetTime+0x2b4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002598:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fe3f 	bl	8000220 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	47a0      	blx	r4
 80025b0:	4603      	mov	r3, r0
 80025b2:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 80025b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ba:	4618      	mov	r0, r3
 80025bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c0:	461a      	mov	r2, r3
 80025c2:	2100      	movs	r1, #0
 80025c4:	f004 fea9 	bl	800731a <memset>

	if(res >=0 )
 80025c8:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db1c      	blt.n	800260a <ESP32_GetTime+0xb2>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 80025d0:	4b8e      	ldr	r3, [pc, #568]	; (800280c <ESP32_GetTime+0x2b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80025da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e2:	4798      	blx	r3
 80025e4:	4603      	mov	r3, r0
 80025e6:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
		if(res >=0 )
 80025ea:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da0b      	bge.n	800260a <ESP32_GetTime+0xb2>
		{
			//ESP_DEBUG(recv_buff);
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 80025f2:	4887      	ldr	r0, [pc, #540]	; (8002810 <ESP32_GetTime+0x2b8>)
 80025f4:	f005 fd8a 	bl	800810c <iprintf>
			return result;
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002600:	6810      	ldr	r0, [r2, #0]
 8002602:	6018      	str	r0, [r3, #0]
 8002604:	8892      	ldrh	r2, [r2, #4]
 8002606:	809a      	strh	r2, [r3, #4]
 8002608:	e0f8      	b.n	80027fc <ESP32_GetTime+0x2a4>
		}
	}
	char* time_str = strstr((char*)recv_buff, "+CIPSNTPTIME:");
 800260a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260e:	4981      	ldr	r1, [pc, #516]	; (8002814 <ESP32_GetTime+0x2bc>)
 8002610:	4618      	mov	r0, r3
 8002612:	f005 fec5 	bl	80083a0 <strstr>
 8002616:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
	uint8_t day_str[3] 	= {0};
 800261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261e:	2100      	movs	r1, #0
 8002620:	460a      	mov	r2, r1
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	460a      	mov	r2, r1
 8002626:	709a      	strb	r2, [r3, #2]
	uint8_t month_str[4]= {0};
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
	uint8_t year_str[5] = {0};
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	711a      	strb	r2, [r3, #4]

	uint8_t hour_str[3] = {0};
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	2100      	movs	r1, #0
 8002640:	460a      	mov	r2, r1
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	460a      	mov	r2, r1
 8002646:	709a      	strb	r2, [r3, #2]
	uint8_t min_str[3] 	= {0};
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	2100      	movs	r1, #0
 800264e:	460a      	mov	r2, r1
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	460a      	mov	r2, r1
 8002654:	709a      	strb	r2, [r3, #2]
	uint8_t sec_str[3]	= {0};
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2100      	movs	r1, #0
 800265c:	460a      	mov	r2, r1
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	460a      	mov	r2, r1
 8002662:	709a      	strb	r2, [r3, #2]

	memcpy(hour_str, time_str+24, 2);
 8002664:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002668:	3318      	adds	r3, #24
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	801a      	strh	r2, [r3, #0]
	memcpy(min_str, time_str+27, 2);
 8002674:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002678:	331b      	adds	r3, #27
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29a      	uxth	r2, r3
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	801a      	strh	r2, [r3, #0]
	memcpy(sec_str, time_str+30, 2);
 8002684:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002688:	331e      	adds	r3, #30
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29a      	uxth	r2, r3
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	801a      	strh	r2, [r3, #0]

	memcpy(day_str, time_str+21, 2);
 8002694:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002698:	3315      	adds	r3, #21
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29a      	uxth	r2, r3
 800269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a2:	801a      	strh	r2, [r3, #0]
	memcpy(month_str, time_str+17, 3);
 80026a4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80026a8:	f103 0111 	add.w	r1, r3, #17
 80026ac:	f107 0320 	add.w	r3, r7, #32
 80026b0:	2203      	movs	r2, #3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fe26 	bl	8007304 <memcpy>
	memcpy(year_str, time_str+33, 4);
 80026b8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80026bc:	3321      	adds	r3, #33	; 0x21
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f107 0318 	add.w	r3, r7, #24
 80026c6:	601a      	str	r2, [r3, #0]

	standard_string_time(hour_str);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe8d 	bl	80023ec <standard_string_time>
	standard_string_time(min_str);
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fe88 	bl	80023ec <standard_string_time>
	standard_string_time(sec_str);
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe83 	bl	80023ec <standard_string_time>

	standard_string_time(day_str);
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe7e 	bl	80023ec <standard_string_time>
	standard_string_time(year_str);
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fe79 	bl	80023ec <standard_string_time>

	uint8_t day_num = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	uint8_t month_num = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint16_t year_num = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	uint8_t hour_num = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	uint8_t min_num = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	uint8_t sec_num = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

	day_num = atoi((char*)day_str);
 800271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fdc0 	bl	80072a8 <atoi>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	month_num = month_encode(month_str);
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fe82 	bl	800243c <month_encode>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	year_num = atoi(year_str);
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fdb0 	bl	80072a8 <atoi>
 8002748:	4603      	mov	r3, r0
 800274a:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	hour_num = atoi(hour_str);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fda8 	bl	80072a8 <atoi>
 8002758:	4603      	mov	r3, r0
 800275a:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	min_num = atoi(min_str);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f004 fda0 	bl	80072a8 <atoi>
 8002768:	4603      	mov	r3, r0
 800276a:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	sec_num = atoi(sec_str);
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fd98 	bl	80072a8 <atoi>
 8002778:	4603      	mov	r3, r0
 800277a:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
	ESP_DEBUG("TIME: %d/%d/%d, %d:%d:%d\r\n", day_num, month_num, year_num, hour_num, min_num, sec_num);
 800277e:	4826      	ldr	r0, [pc, #152]	; (8002818 <ESP32_GetTime+0x2c0>)
 8002780:	f005 fcc4 	bl	800810c <iprintf>
 8002784:	f897 0337 	ldrb.w	r0, [r7, #823]	; 0x337
 8002788:	f897 4336 	ldrb.w	r4, [r7, #822]	; 0x336
 800278c:	f8b7 5334 	ldrh.w	r5, [r7, #820]	; 0x334
 8002790:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002794:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002798:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 800279c:	9102      	str	r1, [sp, #8]
 800279e:	9201      	str	r2, [sp, #4]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	462b      	mov	r3, r5
 80027a4:	4622      	mov	r2, r4
 80027a6:	4601      	mov	r1, r0
 80027a8:	481c      	ldr	r0, [pc, #112]	; (800281c <ESP32_GetTime+0x2c4>)
 80027aa:	f005 fcaf 	bl	800810c <iprintf>

	result.year		=	year_num;
 80027ae:	f8b7 3334 	ldrh.w	r3, [r7, #820]	; 0x334
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027b8:	701a      	strb	r2, [r3, #0]
	result.month	=	month_num;
 80027ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027be:	f897 2336 	ldrb.w	r2, [r7, #822]	; 0x336
 80027c2:	705a      	strb	r2, [r3, #1]
	result.day		= 	day_num;
 80027c4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027c8:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 80027cc:	709a      	strb	r2, [r3, #2]

	result.hour		=	hour_num;
 80027ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027d2:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 80027d6:	70da      	strb	r2, [r3, #3]
	result.min		=	min_num;
 80027d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027dc:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 80027e0:	711a      	strb	r2, [r3, #4]
	result.sec		=	sec_num;
 80027e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80027e6:	f897 2331 	ldrb.w	r2, [r7, #817]	; 0x331
 80027ea:	715a      	strb	r2, [r3, #5]
	return result;
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80027f4:	6810      	ldr	r0, [r2, #0]
 80027f6:	6018      	str	r0, [r3, #0]
 80027f8:	8892      	ldrh	r2, [r2, #4]
 80027fa:	809a      	strh	r2, [r3, #4]
}
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	f507 7750 	add.w	r7, r7, #832	; 0x340
 8002804:	46bd      	mov	sp, r7
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	0800b758 	.word	0x0800b758
 800280c:	20000510 	.word	0x20000510
 8002810:	0800b524 	.word	0x0800b524
 8002814:	0800b76c 	.word	0x0800b76c
 8002818:	0800b530 	.word	0x0800b530
 800281c:	0800b77c 	.word	0x0800b77c

08002820 <Sensor_Init>:
#include "RL78_Sensor.h"

Sensor_status_t Sensor_Init(Sensor_t* sensor)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	uint8_t temp_buff[12] = {0};
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
	if(Sensor_Send_Command(sensor, PING_CMD)!=Sensor_OK)
 8002834:	2155      	movs	r1, #85	; 0x55
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ee 	bl	8002a18 <Sensor_Send_Command>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d001      	beq.n	8002846 <Sensor_Init+0x26>
		return Sensor_ERROR;
 8002842:	2300      	movs	r3, #0
 8002844:	e054      	b.n	80028f0 <Sensor_Init+0xd0>
	uint8_t try_get_name = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	77fb      	strb	r3, [r7, #31]
	do
	{
		uint8_t try_connect = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	77bb      	strb	r3, [r7, #30]
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 800284e:	e00a      	b.n	8002866 <Sensor_Init+0x46>
		{
			if(++try_connect>=TRY_TIME_CONNECT)
 8002850:	7fbb      	ldrb	r3, [r7, #30]
 8002852:	3301      	adds	r3, #1
 8002854:	77bb      	strb	r3, [r7, #30]
 8002856:	7fbb      	ldrb	r3, [r7, #30]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d904      	bls.n	8002866 <Sensor_Init+0x46>
			{
				sensor->isConnected = unconnected;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
				return Sensor_ERROR;
 8002862:	2300      	movs	r3, #0
 8002864:	e044      	b.n	80028f0 <Sensor_Init+0xd0>
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 8002866:	f107 010c 	add.w	r1, r7, #12
 800286a:	2364      	movs	r3, #100	; 0x64
 800286c:	220c      	movs	r2, #12
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8ea 	bl	8002a48 <Sensor_Recv_Respond>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	d1ea      	bne.n	8002850 <Sensor_Init+0x30>
			}
		}
		if((temp_buff[1] <= strlen(&temp_buff[2]))&&(temp_buff[1] <=10))
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	461c      	mov	r4, r3
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	3302      	adds	r3, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fccb 	bl	8000220 <strlen>
 800288a:	4603      	mov	r3, r0
 800288c:	429c      	cmp	r4, r3
 800288e:	d825      	bhi.n	80028dc <Sensor_Init+0xbc>
 8002890:	7b7b      	ldrb	r3, [r7, #13]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d822      	bhi.n	80028dc <Sensor_Init+0xbc>
		{
			for(int i = 0; i < temp_buff[1]; i++)
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e00f      	b.n	80028bc <Sensor_Init+0x9c>
			{
				sensor->name[i] = temp_buff[2+i];
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	3302      	adds	r3, #2
 80028a0:	f107 0220 	add.w	r2, r7, #32
 80028a4:	4413      	add	r3, r2
 80028a6:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4413      	add	r3, r2
 80028b0:	3301      	adds	r3, #1
 80028b2:	460a      	mov	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < temp_buff[1]; i++)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	7b7b      	ldrb	r3, [r7, #13]
 80028be:	461a      	mov	r2, r3
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	dbea      	blt.n	800289c <Sensor_Init+0x7c>
			}
			printf("[Sensor]:name: %s\r\n", sensor->name);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4619      	mov	r1, r3
 80028cc:	480a      	ldr	r0, [pc, #40]	; (80028f8 <Sensor_Init+0xd8>)
 80028ce:	f005 fc1d 	bl	800810c <iprintf>
			sensor->isConnected = connected;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
			return Sensor_OK;
 80028d8:	2301      	movs	r3, #1
 80028da:	e009      	b.n	80028f0 <Sensor_Init+0xd0>
		}
	}while(++try_get_name < TRY_TIME_GET_NAME);
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
 80028de:	3301      	adds	r3, #1
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	7ffb      	ldrb	r3, [r7, #31]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d9b0      	bls.n	800284a <Sensor_Init+0x2a>
	
	sensor->isConnected = unconnected;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	return Sensor_ERROR;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3724      	adds	r7, #36	; 0x24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	0800b798 	.word	0x0800b798

080028fc <Sensor_Get_Value>:

Sensor_status_t Sensor_Get_Value(Sensor_t* sensor)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	if(Sensor_Send_Command(sensor, WAKEUP_CMD)!= Sensor_OK)
 8002904:	21c0      	movs	r1, #192	; 0xc0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f886 	bl	8002a18 <Sensor_Send_Command>
 800290c:	4603      	mov	r3, r0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <Sensor_Get_Value+0x1a>
		return Sensor_ERROR;
 8002912:	2300      	movs	r3, #0
 8002914:	e033      	b.n	800297e <Sensor_Get_Value+0x82>
	uint8_t temp = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
	if(Sensor_Recv_Respond(sensor,&temp, sizeof(temp), 60000)!= Sensor_OK)
 800291a:	f107 010f 	add.w	r1, r7, #15
 800291e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002922:	2201      	movs	r2, #1
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f88f 	bl	8002a48 <Sensor_Recv_Respond>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <Sensor_Get_Value+0x38>
		return Sensor_ERROR; 
 8002930:	2300      	movs	r3, #0
 8002932:	e024      	b.n	800297e <Sensor_Get_Value+0x82>
		
	if(Sensor_Send_Command(sensor, GETVALUE_CMD)!= Sensor_OK)
 8002934:	21aa      	movs	r1, #170	; 0xaa
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f86e 	bl	8002a18 <Sensor_Send_Command>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <Sensor_Get_Value+0x4a>
		return Sensor_ERROR;
 8002942:	2300      	movs	r3, #0
 8002944:	e01b      	b.n	800297e <Sensor_Get_Value+0x82>
	data_raw_t data_raw = {0};
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	2100      	movs	r1, #0
 800294c:	460a      	mov	r2, r1
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	460a      	mov	r2, r1
 8002952:	709a      	strb	r2, [r3, #2]
	if(Sensor_Recv_Respond(sensor, &data_raw, sizeof(data_raw), 100) != Sensor_OK)
 8002954:	f107 010c 	add.w	r1, r7, #12
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	2203      	movs	r2, #3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f873 	bl	8002a48 <Sensor_Recv_Respond>
 8002962:	4603      	mov	r3, r0
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <Sensor_Get_Value+0x70>
		return Sensor_ERROR; 
 8002968:	2300      	movs	r3, #0
 800296a:	e008      	b.n	800297e <Sensor_Get_Value+0x82>
	sensor->value = Pare_Data(data_raw);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f80b 	bl	8002988 <Pare_Data>
 8002972:	eef0 7a40 	vmov.f32	s15, s0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	edc3 7a03 	vstr	s15, [r3, #12]
	return Sensor_OK;
 800297c:	2301      	movs	r3, #1
	
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <Pare_Data>:

static float Pare_Data(data_raw_t data_raw)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	float result = 0.0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
	uint16_t value_interger = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	817b      	strh	r3, [r7, #10]
	uint8_t value_decimal = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	727b      	strb	r3, [r7, #9]
	
	value_interger	= (data_raw.data>>4)&(0x0fff);
 800299e:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	817b      	strh	r3, [r7, #10]
	value_decimal	= (data_raw.data)&(0x0f);
 80029a8:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	727b      	strb	r3, [r7, #9]
	
	result = (float)value_interger + (float)value_decimal/(10.0);
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c0:	ee17 0a90 	vmov	r0, s15
 80029c4:	f7fd fdf2 	bl	80005ac <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	7a7b      	ldrb	r3, [r7, #9]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	ee17 0a90 	vmov	r0, s15
 80029da:	f7fd fde7 	bl	80005ac <__aeabi_f2d>
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <Pare_Data+0x8c>)
 80029e4:	f7fd ff64 	bl	80008b0 <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fc7e 	bl	80002f0 <__adddf3>
 80029f4:	4603      	mov	r3, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	4618      	mov	r0, r3
 80029fa:	4621      	mov	r1, r4
 80029fc:	f7fe f906 	bl	8000c0c <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]
	
	return result;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	ee07 3a90 	vmov	s15, r3
}
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdb0      	pop	{r4, r5, r7, pc}
 8002a14:	40240000 	.word	0x40240000

08002a18 <Sensor_Send_Command>:

static Sensor_status_t Sensor_Send_Command(Sensor_t* sensor, uint8_t command)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
	if(HAL_UART_Transmit(sensor->uart_itf, &command, 1, HAL_MAX_DELAY) == HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6918      	ldr	r0, [r3, #16]
 8002a28:	1cf9      	adds	r1, r7, #3
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f003 fbad 	bl	800618e <HAL_UART_Transmit>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <Sensor_Send_Command+0x26>
		return Sensor_OK;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <Sensor_Send_Command+0x28>
	else
		return Sensor_ERROR;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <Sensor_Recv_Respond>:

static Sensor_status_t Sensor_Recv_Respond(Sensor_t* sensor, uint8_t* buff, uint8_t buffSize, uint16_t timeOut)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	460b      	mov	r3, r1
 8002a58:	71fb      	strb	r3, [r7, #7]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef res = HAL_UART_Receive(sensor->uart_itf, buff, buffSize, timeOut);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6918      	ldr	r0, [r3, #16]
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	f003 fc29 	bl	80062c0 <HAL_UART_Receive>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_ERROR)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <Sensor_Recv_Respond+0x34>
		return Sensor_OK;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <Sensor_Recv_Respond+0x36>
	else
		return Sensor_ERROR;
 8002a7c:	2300      	movs	r3, #0

}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <crc8>:
#ifndef SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#define SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#include "SHTC3_Driver.h"

static uint8_t crc8(uint8_t *data, uint8_t len)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xff;
 8002a92:	23ff      	movs	r3, #255	; 0xff
 8002a94:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0, j = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73bb      	strb	r3, [r7, #14]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < len; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73bb      	strb	r3, [r7, #14]
 8002aa2:	e021      	b.n	8002ae8 <crc8+0x62>
        crc ^= data[i];
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	4053      	eors	r3, r2
 8002ab0:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	737b      	strb	r3, [r7, #13]
 8002ab6:	e011      	b.n	8002adc <crc8+0x56>
            if ((crc & 0x80) != 0)
 8002ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da07      	bge.n	8002ad0 <crc8+0x4a>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e002      	b.n	8002ad6 <crc8+0x50>
            else
                crc <<= 1;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	737b      	strb	r3, [r7, #13]
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d9ea      	bls.n	8002ab8 <crc8+0x32>
    for (i = 0; i < len; i++) {
 8002ae2:	7bbb      	ldrb	r3, [r7, #14]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	73bb      	strb	r3, [r7, #14]
 8002ae8:	7bba      	ldrb	r2, [r7, #14]
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3d9      	bcc.n	8002aa4 <crc8+0x1e>
        }
    }
    return crc;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <SHTC3_Init>:

SHTC3_Status_t SHTC3_Init(SHTC3_Sensor_t *sensor)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 3, 1000) == HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	2203      	movs	r2, #3
 8002b10:	2170      	movs	r1, #112	; 0x70
 8002b12:	f001 fcc7 	bl	80044a4 <HAL_I2C_IsDeviceReady>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <SHTC3_Init+0x28>
	{
		sensor->connection=shtc3_connected;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	711a      	strb	r2, [r3, #4]
		return SHTC3_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e003      	b.n	8002b2e <SHTC3_Init+0x30>
	}
	else
	{
		sensor->connection=shtc3_disconnected;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	711a      	strb	r2, [r3, #4]
		return SHTC3_ERROR;
 8002b2c:	2301      	movs	r3, #1
	}
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <SHTC3_Measurement>:

SHTC3_Status_t SHTC3_Measurement(SHTC3_Sensor_t *sensor)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
	uint8_t weekup_cmd[2] = {0x35, 0x17};
 8002b40:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <SHTC3_Measurement+0x188>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	833b      	strh	r3, [r7, #24]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, weekup_cmd, sizeof(weekup_cmd), 5000)!=HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	f107 0218 	add.w	r2, r7, #24
 8002b4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2302      	movs	r3, #2
 8002b56:	2170      	movs	r1, #112	; 0x70
 8002b58:	f001 f980 	bl	8003e5c <HAL_I2C_Master_Transmit>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SHTC3_Measurement+0x2e>
		return SHTC3_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0a4      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	uint8_t measure_cmd[2] = {0x35, 0x17};
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <SHTC3_Measurement+0x188>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	82bb      	strh	r3, [r7, #20]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, measure_cmd, sizeof(measure_cmd), 5000)!=HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	f107 0214 	add.w	r2, r7, #20
 8002b74:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	2170      	movs	r1, #112	; 0x70
 8002b7e:	f001 f96d 	bl	8003e5c <HAL_I2C_Master_Transmit>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <SHTC3_Measurement+0x54>
			return SHTC3_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e091      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	while(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 1, 1000) != HAL_OK);
 8002b8c:	bf00      	nop
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	2201      	movs	r2, #1
 8002b98:	2170      	movs	r1, #112	; 0x70
 8002b9a:	f001 fc83 	bl	80044a4 <HAL_I2C_IsDeviceReady>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f4      	bne.n	8002b8e <SHTC3_Measurement+0x56>
	uint8_t data_raw[6] = {0};
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	809a      	strh	r2, [r3, #4]
	if(HAL_I2C_Master_Receive(sensor->interface, SHTC3_ADDR, data_raw, sizeof(data_raw), 5000)!=HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	f107 020c 	add.w	r2, r7, #12
 8002bb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2306      	movs	r3, #6
 8002bbe:	2170      	movs	r1, #112	; 0x70
 8002bc0:	f001 fa4a 	bl	8004058 <HAL_I2C_Master_Receive>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SHTC3_Measurement+0x96>
			return SHTC3_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e070      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	if(crc8(&data_raw[0], 2)!=data_raw[2])
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff56 	bl	8002a86 <crc8>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <SHTC3_Measurement+0xb0>
		return SHTC3_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e063      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	if(crc8(&data_raw[3], 2)!=data_raw[5])
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	3303      	adds	r3, #3
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff48 	bl	8002a86 <crc8>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	7c7b      	ldrb	r3, [r7, #17]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <SHTC3_Measurement+0xcc>
		return SHTC3_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e055      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	uint8_t sleep_cmd[2] = {0xB0, 0x98};
 8002c04:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <SHTC3_Measurement+0x18c>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, sleep_cmd, sizeof(sleep_cmd), 5000)!=HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f107 0208 	add.w	r2, r7, #8
 8002c12:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	2170      	movs	r1, #112	; 0x70
 8002c1c:	f001 f91e 	bl	8003e5c <HAL_I2C_Master_Transmit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <SHTC3_Measurement+0xf2>
		return SHTC3_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e042      	b.n	8002cb0 <SHTC3_Measurement+0x178>
	uint16_t Rh = (data_raw[0]<<8) | (data_raw[1]);
 8002c2a:	7b3b      	ldrb	r3, [r7, #12]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	7b7b      	ldrb	r3, [r7, #13]
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	83fb      	strh	r3, [r7, #30]
	uint16_t Rt = (data_raw[3]<<8) | (data_raw[4]);
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	7c3b      	ldrb	r3, [r7, #16]
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	83bb      	strh	r3, [r7, #28]
	sensor->data.hum = ((float)(Rh*100))/(65535.0);
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	2264      	movs	r2, #100	; 0x64
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c5a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002cc8 <SHTC3_Measurement+0x190>
 8002c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edc3 7a03 	vstr	s15, [r3, #12]
	sensor->data.tem = ((float)(Rt*175))/(65535.0) - 45.0;
 8002c68:	8bbb      	ldrh	r3, [r7, #28]
 8002c6a:	22af      	movs	r2, #175	; 0xaf
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c78:	ee17 0a90 	vmov	r0, s15
 8002c7c:	f7fd fc96 	bl	80005ac <__aeabi_f2d>
 8002c80:	a30d      	add	r3, pc, #52	; (adr r3, 8002cb8 <SHTC3_Measurement+0x180>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fe13 	bl	80008b0 <__aeabi_ddiv>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	4621      	mov	r1, r4
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <SHTC3_Measurement+0x194>)
 8002c98:	f7fd fb28 	bl	80002ec <__aeabi_dsub>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	f7fd ffb2 	bl	8000c0c <__aeabi_d2f>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]
	return SHTC3_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3724      	adds	r7, #36	; 0x24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	00000000 	.word	0x00000000
 8002cbc:	40efffe0 	.word	0x40efffe0
 8002cc0:	0800b7ac 	.word	0x0800b7ac
 8002cc4:	0800b7b0 	.word	0x0800b7b0
 8002cc8:	477fff00 	.word	0x477fff00
 8002ccc:	40468000 	.word	0x40468000

08002cd0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <RetargetInit+0x28>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <RetargetInit+0x2c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6898      	ldr	r0, [r3, #8]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f005 fa8b 	bl	8008204 <setvbuf>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000798 	.word	0x20000798
 8002cfc:	2000000c 	.word	0x2000000c

08002d00 <_isatty>:

int _isatty(int fd) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db04      	blt.n	8002d18 <_isatty+0x18>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	dc01      	bgt.n	8002d18 <_isatty+0x18>
    return 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e005      	b.n	8002d24 <_isatty+0x24>

  errno = EBADF;
 8002d18:	f004 faca 	bl	80072b0 <__errno>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	2309      	movs	r3, #9
 8002d20:	6013      	str	r3, [r2, #0]
  return 0;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_write>:

int _write(int fd, char* ptr, int len) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d002      	beq.n	8002d44 <_write+0x18>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d111      	bne.n	8002d68 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <_write+0x54>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	f003 fa1c 	bl	800618e <HAL_UART_Transmit>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <_write+0x38>
      return len;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	e008      	b.n	8002d76 <_write+0x4a>
    else
      return EIO;
 8002d64:	2305      	movs	r3, #5
 8002d66:	e006      	b.n	8002d76 <_write+0x4a>
  }
  errno = EBADF;
 8002d68:	f004 faa2 	bl	80072b0 <__errno>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	2309      	movs	r3, #9
 8002d70:	6013      	str	r3, [r2, #0]
  return -1;
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000798 	.word	0x20000798

08002d84 <_close>:

int _close(int fd) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db04      	blt.n	8002d9c <_close+0x18>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	dc01      	bgt.n	8002d9c <_close+0x18>
    return 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e006      	b.n	8002daa <_close+0x26>

  errno = EBADF;
 8002d9c:	f004 fa88 	bl	80072b0 <__errno>
 8002da0:	4602      	mov	r2, r0
 8002da2:	2309      	movs	r3, #9
 8002da4:	6013      	str	r3, [r2, #0]
  return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002dbe:	f004 fa77 	bl	80072b0 <__errno>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	2309      	movs	r3, #9
 8002dc6:	6013      	str	r3, [r2, #0]
  return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_read>:

int _read(int fd, char* ptr, int len) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d110      	bne.n	8002e08 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <_read+0x4c>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	2201      	movs	r2, #1
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	f003 fa65 	bl	80062c0 <HAL_UART_Receive>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <_read+0x30>
      return 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e008      	b.n	8002e16 <_read+0x42>
    else
      return EIO;
 8002e04:	2305      	movs	r3, #5
 8002e06:	e006      	b.n	8002e16 <_read+0x42>
  }
  errno = EBADF;
 8002e08:	f004 fa52 	bl	80072b0 <__errno>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	2309      	movs	r3, #9
 8002e10:	6013      	str	r3, [r2, #0]
  return -1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000798 	.word	0x20000798

08002e24 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db08      	blt.n	8002e46 <_fstat+0x22>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	dc05      	bgt.n	8002e46 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e40:	605a      	str	r2, [r3, #4]
    return 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e005      	b.n	8002e52 <_fstat+0x2e>
  }

  errno = EBADF;
 8002e46:	f004 fa33 	bl	80072b0 <__errno>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	6013      	str	r3, [r2, #0]
  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <HAL_Init+0x40>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <HAL_Init+0x40>)
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <HAL_Init+0x40>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e84:	2003      	movs	r0, #3
 8002e86:	f000 f94d 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f000 f808 	bl	8002ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e90:	f7fe fe50 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00

08002ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x54>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_InitTick+0x58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f965 	bl	800318e <HAL_SYSTICK_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00e      	b.n	8002eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d80a      	bhi.n	8002eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f000 f92d 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee0:	4a06      	ldr	r2, [pc, #24]	; (8002efc <HAL_InitTick+0x5c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000008 	.word	0x20000008
 8002f24:	2000079c 	.word	0x2000079c

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000079c 	.word	0x2000079c

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_Delay+0x40>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000008 	.word	0x20000008

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60d3      	str	r3, [r2, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff29 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff3e 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff31 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff feb8 	bl	8002f28 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e099      	b.n	80032f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e4:	e00f      	b.n	8003206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e6:	f7ff fe9f 	bl	8002f28 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d908      	bls.n	8003206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e078      	b.n	80032f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e8      	bne.n	80031e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_DMA_Init+0x158>)
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b04      	cmp	r3, #4
 800325e:	d107      	bne.n	8003270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0307 	bic.w	r3, r3, #7
 8003286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b04      	cmp	r3, #4
 8003298:	d117      	bne.n	80032ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fa91 	bl	80037d4 <DMA_CheckFifoParam>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032c6:	2301      	movs	r3, #1
 80032c8:	e016      	b.n	80032f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa48 	bl	8003768 <DMA_CalcBaseAndBitshift>
 80032d8:	4603      	mov	r3, r0
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	223f      	movs	r2, #63	; 0x3f
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	e010803f 	.word	0xe010803f

08003304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_DMA_Start_IT+0x26>
 8003326:	2302      	movs	r3, #2
 8003328:	e040      	b.n	80033ac <HAL_DMA_Start_IT+0xa8>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d12f      	bne.n	800339e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f9da 	bl	800370c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	223f      	movs	r2, #63	; 0x3f
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0216 	orr.w	r2, r2, #22
 8003372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e005      	b.n	80033aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00c      	b.n	80033ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2205      	movs	r2, #5
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003404:	4b92      	ldr	r3, [pc, #584]	; (8003650 <HAL_DMA_IRQHandler+0x258>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a92      	ldr	r2, [pc, #584]	; (8003654 <HAL_DMA_IRQHandler+0x25c>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2208      	movs	r2, #8
 8003424:	409a      	lsls	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2201      	movs	r2, #1
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2204      	movs	r2, #4
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2204      	movs	r2, #4
 80034be:	409a      	lsls	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2210      	movs	r2, #16
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d043      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	2210      	movs	r2, #16
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d018      	beq.n	800353a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e01f      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e016      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0208 	bic.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2220      	movs	r2, #32
 800356e:	409a      	lsls	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 808e 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8086 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2220      	movs	r2, #32
 8003590:	409a      	lsls	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d136      	bne.n	8003610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0216 	bic.w	r2, r2, #22
 80035b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x1da>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0208 	bic.w	r2, r2, #8
 80035e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	223f      	movs	r2, #63	; 0x3f
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	2b00      	cmp	r3, #0
 8003604:	d07d      	beq.n	8003702 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
        }
        return;
 800360e:	e078      	b.n	8003702 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	2b00      	cmp	r3, #0
 8003632:	d030      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e02b      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d027      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e022      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
 8003650:	20000000 	.word	0x20000000
 8003654:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0210 	bic.w	r2, r2, #16
 8003674:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	2b00      	cmp	r3, #0
 800369c:	d032      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2205      	movs	r2, #5
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d307      	bcc.n	80036de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f2      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x2ca>
 80036dc:	e000      	b.n	80036e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e000      	b.n	8003704 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003702:	bf00      	nop
    }
  }
}
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d108      	bne.n	800374c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b10      	subs	r3, #16
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <DMA_CalcBaseAndBitshift+0x64>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d909      	bls.n	80037aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
 80037a8:	e007      	b.n	80037ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	aaaaaaab 	.word	0xaaaaaaab
 80037d0:	0800b7d8 	.word	0x0800b7d8

080037d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d855      	bhi.n	80038a0 <DMA_CheckFifoParam+0xcc>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <DMA_CheckFifoParam+0x28>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381f 	.word	0x0800381f
 8003804:	0800380d 	.word	0x0800380d
 8003808:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e042      	b.n	80038a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003826:	d13f      	bne.n	80038a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e03c      	b.n	80038a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d121      	bne.n	800387c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d836      	bhi.n	80038ac <DMA_CheckFifoParam+0xd8>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <DMA_CheckFifoParam+0x70>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	0800385b 	.word	0x0800385b
 800384c:	08003855 	.word	0x08003855
 8003850:	0800386d 	.word	0x0800386d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e02f      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d024      	beq.n	80038b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386a:	e021      	b.n	80038b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d11e      	bne.n	80038b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387a:	e01b      	b.n	80038b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <DMA_CheckFifoParam+0xb4>
 8003882:	2b03      	cmp	r3, #3
 8003884:	d003      	beq.n	800388e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003886:	e018      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e015      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e00b      	b.n	80038b8 <DMA_CheckFifoParam+0xe4>
      break;
 80038a0:	bf00      	nop
 80038a2:	e00a      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e008      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a8:	bf00      	nop
 80038aa:	e006      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;   
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b8:	bf00      	nop
    }
  } 
  
  return status; 
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e165      	b.n	8003bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8154 	bne.w	8003baa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d00b      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003916:	2b11      	cmp	r3, #17
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b12      	cmp	r3, #18
 8003920:	d130      	bne.n	8003984 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 0201 	and.w	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0xfc>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b12      	cmp	r3, #18
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80ae 	beq.w	8003baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a5b      	ldr	r2, [pc, #364]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4e      	ldr	r2, [pc, #312]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d025      	beq.n	8003ae2 <HAL_GPIO_Init+0x21a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4d      	ldr	r2, [pc, #308]	; (8003bd0 <HAL_GPIO_Init+0x308>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <HAL_GPIO_Init+0x216>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4c      	ldr	r2, [pc, #304]	; (8003bd4 <HAL_GPIO_Init+0x30c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x212>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4b      	ldr	r2, [pc, #300]	; (8003bd8 <HAL_GPIO_Init+0x310>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x20e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_GPIO_Init+0x314>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_GPIO_Init+0x318>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x206>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a48      	ldr	r2, [pc, #288]	; (8003be4 <HAL_GPIO_Init+0x31c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x202>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af4:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b50:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f ae96 	bls.w	80038e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e11f      	b.n	8003e3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd ffb6 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c50:	f001 fa28 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a7b      	ldr	r2, [pc, #492]	; (8003e48 <HAL_I2C_Init+0x25c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d807      	bhi.n	8003c70 <HAL_I2C_Init+0x84>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a7a      	ldr	r2, [pc, #488]	; (8003e4c <HAL_I2C_Init+0x260>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e006      	b.n	8003c7e <HAL_I2C_Init+0x92>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_I2C_Init+0x264>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0db      	b.n	8003e3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a72      	ldr	r2, [pc, #456]	; (8003e54 <HAL_I2C_Init+0x268>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a64      	ldr	r2, [pc, #400]	; (8003e48 <HAL_I2C_Init+0x25c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <HAL_I2C_Init+0xd4>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e009      	b.n	8003cd4 <HAL_I2C_Init+0xe8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <HAL_I2C_Init+0x26c>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4956      	ldr	r1, [pc, #344]	; (8003e48 <HAL_I2C_Init+0x25c>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d80d      	bhi.n	8003d10 <HAL_I2C_Init+0x124>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e59      	subs	r1, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	bf38      	it	cc
 8003d0c:	2304      	movcc	r3, #4
 8003d0e:	e04f      	b.n	8003db0 <HAL_I2C_Init+0x1c4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <HAL_I2C_Init+0x150>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e012      	b.n	8003d62 <HAL_I2C_Init+0x176>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e58      	subs	r0, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	0099      	lsls	r1, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Init+0x17e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e022      	b.n	8003db0 <HAL_I2C_Init+0x1c4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <HAL_I2C_Init+0x1a4>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e58      	subs	r0, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	440b      	add	r3, r1
 8003d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	e00f      	b.n	8003db0 <HAL_I2C_Init+0x1c4>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e58      	subs	r0, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	0099      	lsls	r1, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	6809      	ldr	r1, [r1, #0]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6911      	ldr	r1, [r2, #16]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	4311      	orrs	r1, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	000186a0 	.word	0x000186a0
 8003e4c:	001e847f 	.word	0x001e847f
 8003e50:	003d08ff 	.word	0x003d08ff
 8003e54:	431bde83 	.word	0x431bde83
 8003e58:	10624dd3 	.word	0x10624dd3

08003e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	460b      	mov	r3, r1
 8003e6a:	817b      	strh	r3, [r7, #10]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff f85a 	bl	8002f28 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	f040 80e0 	bne.w	8004044 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2319      	movs	r3, #25
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4970      	ldr	r1, [pc, #448]	; (8004050 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fd86 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0d3      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_I2C_Master_Transmit+0x50>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0cc      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d007      	beq.n	8003ed2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2221      	movs	r2, #33	; 0x21
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2210      	movs	r2, #16
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	893a      	ldrh	r2, [r7, #8]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f14:	8979      	ldrh	r1, [r7, #10]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fbf0 	bl	8004700 <I2C_MasterRequestWrite>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e08d      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f40:	e066      	b.n	8004010 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	6a39      	ldr	r1, [r7, #32]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fe00 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06b      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_I2C_Master_Transmit+0x188>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	6a39      	ldr	r1, [r7, #32]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fdf0 	bl	8004bce <I2C_WaitOnBTFFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d107      	bne.n	800400c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01a      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d194      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000

08004058 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
 8004068:	4613      	mov	r3, r2
 800406a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7fe ff5c 	bl	8002f28 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 820b 	bne.w	8004496 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2319      	movs	r3, #25
 8004086:	2201      	movs	r2, #1
 8004088:	497c      	ldr	r1, [pc, #496]	; (800427c <HAL_I2C_Master_Receive+0x224>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fc88 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	e1fe      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2C_Master_Receive+0x50>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e1f7      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d007      	beq.n	80040ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2222      	movs	r2, #34	; 0x22
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2210      	movs	r2, #16
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a5c      	ldr	r2, [pc, #368]	; (8004280 <HAL_I2C_Master_Receive+0x228>)
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004110:	8979      	ldrh	r1, [r7, #10]
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fb74 	bl	8004804 <I2C_MasterRequestRead>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1b8      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d113      	bne.n	8004156 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e18c      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11b      	bne.n	8004196 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e16c      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	2b02      	cmp	r3, #2
 800419c:	d11b      	bne.n	80041d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	e14c      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041fc:	e138      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	2b03      	cmp	r3, #3
 8004204:	f200 80f1 	bhi.w	80043ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b01      	cmp	r3, #1
 800420e:	d123      	bne.n	8004258 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fd1b 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e139      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004256:	e10b      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b02      	cmp	r3, #2
 800425e:	d14e      	bne.n	80042fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_I2C_Master_Receive+0x22c>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fb98 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e10e      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
 800427a:	bf00      	nop
 800427c:	00100002 	.word	0x00100002
 8004280:	ffff0000 	.word	0xffff0000
 8004284:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042fc:	e0b8      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	4966      	ldr	r1, [pc, #408]	; (80044a0 <HAL_I2C_Master_Receive+0x448>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fb49 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0bf      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	494f      	ldr	r1, [pc, #316]	; (80044a0 <HAL_I2C_Master_Receive+0x448>)
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fb1b 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e091      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e8:	e042      	b.n	8004470 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fc2e 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e04c      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d118      	bne.n	8004470 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f aec2 	bne.w	80041fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00010004 	.word	0x00010004

080044a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7fe fd38 	bl	8002f28 <HAL_GetTick>
 80044b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	f040 8111 	bne.w	80046ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2319      	movs	r3, #25
 80044d2:	2201      	movs	r2, #1
 80044d4:	4988      	ldr	r1, [pc, #544]	; (80046f8 <HAL_I2C_IsDeviceReady+0x254>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa62 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
 80044e4:	e104      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_I2C_IsDeviceReady+0x50>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e0fd      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d007      	beq.n	800451a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2224      	movs	r2, #36	; 0x24
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a70      	ldr	r2, [pc, #448]	; (80046fc <HAL_I2C_IsDeviceReady+0x258>)
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fa20 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d103      	bne.n	800457e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0b6      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004582:	897b      	ldrh	r3, [r7, #10]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004590:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004592:	f7fe fcc9 	bl	8002f28 <HAL_GetTick>
 8004596:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045c6:	e025      	b.n	8004614 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fe fcae 	bl	8002f28 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <HAL_I2C_IsDeviceReady+0x13a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	22a0      	movs	r2, #160	; 0xa0
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2ba0      	cmp	r3, #160	; 0xa0
 800461e:	d005      	beq.n	800462c <HAL_I2C_IsDeviceReady+0x188>
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_I2C_IsDeviceReady+0x188>
 8004626:	7dbb      	ldrb	r3, [r7, #22]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0cd      	beq.n	80045c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d129      	bne.n	8004696 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2319      	movs	r3, #25
 800466e:	2201      	movs	r2, #1
 8004670:	4921      	ldr	r1, [pc, #132]	; (80046f8 <HAL_I2C_IsDeviceReady+0x254>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f994 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e036      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e02c      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2319      	movs	r3, #25
 80046b6:	2201      	movs	r2, #1
 80046b8:	490f      	ldr	r1, [pc, #60]	; (80046f8 <HAL_I2C_IsDeviceReady+0x254>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f970 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e012      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3301      	adds	r3, #1
 80046ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f4ff af32 	bcc.w	800453e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00100002 	.word	0x00100002
 80046fc:	ffff0000 	.word	0xffff0000

08004700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d006      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d003      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b12      	cmp	r3, #18
 8004742:	d107      	bne.n	8004754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f91d 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d103      	bne.n	8004784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e035      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004790:	d108      	bne.n	80047a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	e01b      	b.n	80047dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	11db      	asrs	r3, r3, #7
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 030f 	orn	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <I2C_MasterRequestWrite+0xfc>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f943 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e010      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <I2C_MasterRequestWrite+0x100>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f933 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010008 	.word	0x00010008
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	460b      	mov	r3, r1
 8004812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b11      	cmp	r3, #17
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f893 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e079      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e05f      	b.n	8004978 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4930      	ldr	r1, [pc, #192]	; (8004998 <I2C_MasterRequestRead+0x194>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8b9 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e054      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <I2C_MasterRequestRead+0x198>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8a9 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e044      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f831 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d103      	bne.n	800495c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e017      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	11db      	asrs	r3, r3, #7
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0306 	and.w	r3, r3, #6
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f063 030e 	orn	r3, r3, #14
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4907      	ldr	r1, [pc, #28]	; (800499c <I2C_MasterRequestRead+0x198>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f865 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	00010008 	.word	0x00010008
 800499c:	00010002 	.word	0x00010002

080049a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b0:	e025      	b.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d021      	beq.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe fab5 	bl	8002f28 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e023      	b.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10d      	bne.n	8004a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	e00c      	b.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0b6      	beq.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5c:	e051      	b.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d123      	bne.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e046      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d021      	beq.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe fa33 	bl	8002f28 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e020      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10c      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	43da      	mvns	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e00b      	b.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d18d      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b58:	e02d      	b.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f8ce 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02d      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d021      	beq.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe f9d9 	bl	8002f28 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d1ca      	bne.n	8004b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bda:	e02d      	b.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f88d 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02d      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d021      	beq.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fe f998 	bl	8002f28 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e007      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d1ca      	bne.n	8004bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	e042      	b.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d119      	bne.n	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e029      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fe f942 	bl	8002f28 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d1b5      	bne.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	d11b      	bne.n	8004d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0cc      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d70:	4b68      	ldr	r3, [pc, #416]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d90c      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0b8      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a58      	ldr	r2, [pc, #352]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc8:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	494d      	ldr	r1, [pc, #308]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d044      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d119      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e067      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3a:	4b37      	ldr	r3, [pc, #220]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4934      	ldr	r1, [pc, #208]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e4c:	f7fe f86c 	bl	8002f28 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e54:	f7fe f868 	bl	8002f28 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e04f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 020c 	and.w	r2, r3, #12
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1eb      	bne.n	8004e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d20c      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e032      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4916      	ldr	r1, [pc, #88]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ee2:	f000 f821 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1c8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fd ffcc 	bl	8002ea0 <HAL_InitTick>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023c00 	.word	0x40023c00
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800b7c0 	.word	0x0800b7c0
 8004f20:	20000000 	.word	0x20000000
 8004f24:	20000004 	.word	0x20000004

08004f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	2300      	movs	r3, #0
 8004f38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3e:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d007      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x32>
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d008      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x38>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f040 808d 	bne.w	800506e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f56:	60bb      	str	r3, [r7, #8]
       break;
 8004f58:	e08c      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5a:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f5c:	60bb      	str	r3, [r7, #8]
      break;
 8004f5e:	e089      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f60:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6a:	4b45      	ldr	r3, [pc, #276]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d023      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b42      	ldr	r3, [pc, #264]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	f04f 0400 	mov.w	r4, #0
 8004f80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	ea03 0501 	and.w	r5, r3, r1
 8004f8c:	ea04 0602 	and.w	r6, r4, r2
 8004f90:	4a3d      	ldr	r2, [pc, #244]	; (8005088 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f92:	fb02 f106 	mul.w	r1, r2, r6
 8004f96:	2200      	movs	r2, #0
 8004f98:	fb02 f205 	mul.w	r2, r2, r5
 8004f9c:	440a      	add	r2, r1
 8004f9e:	493a      	ldr	r1, [pc, #232]	; (8005088 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fa0:	fba5 0101 	umull	r0, r1, r5, r1
 8004fa4:	1853      	adds	r3, r2, r1
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f04f 0400 	mov.w	r4, #0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7fb fe7b 	bl	8000cac <__aeabi_uldivmod>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e049      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b30      	ldr	r3, [pc, #192]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	ea03 0501 	and.w	r5, r3, r1
 8004fd4:	ea04 0602 	and.w	r6, r4, r2
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4632      	mov	r2, r6
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	0154      	lsls	r4, r2, #5
 8004fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fea:	014b      	lsls	r3, r1, #5
 8004fec:	4619      	mov	r1, r3
 8004fee:	4622      	mov	r2, r4
 8004ff0:	1b49      	subs	r1, r1, r5
 8004ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	0194      	lsls	r4, r2, #6
 8005000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005004:	018b      	lsls	r3, r1, #6
 8005006:	1a5b      	subs	r3, r3, r1
 8005008:	eb64 0402 	sbc.w	r4, r4, r2
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	00e2      	lsls	r2, r4, #3
 8005016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800501a:	00d9      	lsls	r1, r3, #3
 800501c:	460b      	mov	r3, r1
 800501e:	4614      	mov	r4, r2
 8005020:	195b      	adds	r3, r3, r5
 8005022:	eb44 0406 	adc.w	r4, r4, r6
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	02a2      	lsls	r2, r4, #10
 8005030:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005034:	0299      	lsls	r1, r3, #10
 8005036:	460b      	mov	r3, r1
 8005038:	4614      	mov	r4, r2
 800503a:	4618      	mov	r0, r3
 800503c:	4621      	mov	r1, r4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	461a      	mov	r2, r3
 8005046:	4623      	mov	r3, r4
 8005048:	f7fb fe30 	bl	8000cac <__aeabi_uldivmod>
 800504c:	4603      	mov	r3, r0
 800504e:	460c      	mov	r4, r1
 8005050:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_GetSysClockFreq+0x158>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	3301      	adds	r3, #1
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	60bb      	str	r3, [r7, #8]
      break;
 800506c:	e002      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005070:	60bb      	str	r3, [r7, #8]
      break;
 8005072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005074:	68bb      	ldr	r3, [r7, #8]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800
 8005084:	00f42400 	.word	0x00f42400
 8005088:	017d7840 	.word	0x017d7840

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000000 	.word	0x20000000

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4601      	mov	r1, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ba:	5cd3      	ldrb	r3, [r2, r3]
 80050bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800b7d0 	.word	0x0800b7d0

080050cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050d0:	f7ff ffdc 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050d4:	4601      	mov	r1, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0b5b      	lsrs	r3, r3, #13
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800b7d0 	.word	0x0800b7d0

080050f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005118:	4b7a      	ldr	r3, [pc, #488]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800511a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4977      	ldr	r1, [pc, #476]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8005136:	2301      	movs	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d010      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005146:	4b6f      	ldr	r3, [pc, #444]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	496b      	ldr	r1, [pc, #428]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005164:	2301      	movs	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d022      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005174:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005182:	4960      	ldr	r1, [pc, #384]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519e:	d10c      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80051a0:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	4954      	ldr	r1, [pc, #336]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d022      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80051c6:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	494b      	ldr	r1, [pc, #300]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80051e4:	2301      	movs	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051f0:	d10c      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	3b01      	subs	r3, #1
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	493f      	ldr	r1, [pc, #252]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 808a 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	4b39      	ldr	r3, [pc, #228]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	4a38      	ldr	r2, [pc, #224]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6413      	str	r3, [r2, #64]	; 0x40
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a33      	ldr	r2, [pc, #204]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fd fe71 	bl	8002f28 <HAL_GetTick>
 8005246:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fd fe6d 	bl	8002f28 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1d1      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005268:	4b26      	ldr	r3, [pc, #152]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	429a      	cmp	r2, r3
 8005284:	d028      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005290:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d114      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052ae:	f7fd fe3b 	bl	8002f28 <HAL_GetTick>
 80052b2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b4:	e00a      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fd fe37 	bl	8002f28 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e199      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ee      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e4:	d114      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fa:	4902      	ldr	r1, [pc, #8]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]
 8005300:	e00c      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	40007000 	.word	0x40007000
 800530c:	42470e40 	.word	0x42470e40
 8005310:	4b89      	ldr	r3, [pc, #548]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a88      	ldr	r2, [pc, #544]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	4b86      	ldr	r3, [pc, #536]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800531e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	4983      	ldr	r1, [pc, #524]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800532a:	4313      	orrs	r3, r2
 800532c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005340:	4b7e      	ldr	r3, [pc, #504]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005342:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005350:	4b79      	ldr	r3, [pc, #484]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4976      	ldr	r1, [pc, #472]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005372:	4b71      	ldr	r3, [pc, #452]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005378:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	496d      	ldr	r1, [pc, #436]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005390:	d101      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	4961      	ldr	r1, [pc, #388]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d004      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	f040 80c6 	bne.w	8005554 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053c8:	4b5d      	ldr	r3, [pc, #372]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ce:	f7fd fdab 	bl	8002f28 <HAL_GetTick>
 80053d2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053d6:	f7fd fda7 	bl	8002f28 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e10b      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e8:	4b53      	ldr	r3, [pc, #332]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80053f4:	4a53      	ldr	r2, [pc, #332]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fa:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d019      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005438:	d00e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005442:	2b00      	cmp	r3, #0
 8005444:	d019      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d115      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005456:	d110      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	019b      	lsls	r3, r3, #6
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	4931      	ldr	r1, [pc, #196]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d026      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d122      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	431a      	orrs	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	071b      	lsls	r3, r3, #28
 80054c8:	491b      	ldr	r1, [pc, #108]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d6:	f023 021f 	bic.w	r2, r3, #31
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	3b01      	subs	r3, #1
 80054e0:	4915      	ldr	r1, [pc, #84]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	071b      	lsls	r3, r3, #28
 800550e:	490a      	ldr	r1, [pc, #40]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800551c:	f7fd fd04 	bl	8002f28 <HAL_GetTick>
 8005520:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005522:	e011      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005524:	f7fd fd00 	bl	8002f28 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d90a      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e064      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	424711e0 	.word	0x424711e0
 8005540:	42470068 	.word	0x42470068
 8005544:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0e7      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005560:	4b29      	ldr	r3, [pc, #164]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	4926      	ldr	r1, [pc, #152]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	491d      	ldr	r1, [pc, #116]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80055a4:	4b18      	ldr	r3, [pc, #96]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	4915      	ldr	r1, [pc, #84]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	4904      	ldr	r1, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800

0800560c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d075      	beq.n	8005710 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005624:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b04      	cmp	r3, #4
 800562e:	d00c      	beq.n	800564a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005630:	4b9f      	ldr	r3, [pc, #636]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005638:	2b08      	cmp	r3, #8
 800563a:	d112      	bne.n	8005662 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563c:	4b9c      	ldr	r3, [pc, #624]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005648:	d10b      	bne.n	8005662 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564a:	4b99      	ldr	r3, [pc, #612]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d05b      	beq.n	800570e <HAL_RCC_OscConfig+0x102>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d157      	bne.n	800570e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e20b      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566a:	d106      	bne.n	800567a <HAL_RCC_OscConfig+0x6e>
 800566c:	4b90      	ldr	r3, [pc, #576]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8f      	ldr	r2, [pc, #572]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e01d      	b.n	80056b6 <HAL_RCC_OscConfig+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x92>
 8005684:	4b8a      	ldr	r3, [pc, #552]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a89      	ldr	r2, [pc, #548]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800568a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b87      	ldr	r3, [pc, #540]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a86      	ldr	r2, [pc, #536]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	e00b      	b.n	80056b6 <HAL_RCC_OscConfig+0xaa>
 800569e:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a83      	ldr	r2, [pc, #524]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a80      	ldr	r2, [pc, #512]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80056b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fc33 	bl	8002f28 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c6:	f7fd fc2f 	bl	8002f28 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	; 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1d0      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d8:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0xba>
 80056e4:	e014      	b.n	8005710 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd fc1f 	bl	8002f28 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ee:	f7fd fc1b 	bl	8002f28 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b64      	cmp	r3, #100	; 0x64
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e1bc      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005700:	4b6b      	ldr	r3, [pc, #428]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0xe2>
 800570c:	e000      	b.n	8005710 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d063      	beq.n	80057e4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800571c:	4b64      	ldr	r3, [pc, #400]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005728:	4b61      	ldr	r3, [pc, #388]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005730:	2b08      	cmp	r3, #8
 8005732:	d11c      	bne.n	800576e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005734:	4b5e      	ldr	r3, [pc, #376]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d116      	bne.n	800576e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005740:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x14c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e190      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4952      	ldr	r1, [pc, #328]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576c:	e03a      	b.n	80057e4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005776:	4b4f      	ldr	r3, [pc, #316]	; (80058b4 <HAL_RCC_OscConfig+0x2a8>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fbd4 	bl	8002f28 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fd fbd0 	bl	8002f28 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e171      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	493f      	ldr	r1, [pc, #252]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
 80057b6:	e015      	b.n	80057e4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <HAL_RCC_OscConfig+0x2a8>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fd fbb3 	bl	8002f28 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057c6:	f7fd fbaf 	bl	8002f28 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e150      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d8:	4b35      	ldr	r3, [pc, #212]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d030      	beq.n	8005852 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCC_OscConfig+0x2ac>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fd fb93 	bl	8002f28 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005806:	f7fd fb8f 	bl	8002f28 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e130      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x1fa>
 8005824:	e015      	b.n	8005852 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fd fb7c 	bl	8002f28 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005834:	f7fd fb78 	bl	8002f28 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e119      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 809f 	beq.w	800599e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	6413      	str	r3, [r2, #64]	; 0x40
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCC_OscConfig+0x2a4>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <HAL_RCC_OscConfig+0x2b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d120      	bne.n	80058de <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <HAL_RCC_OscConfig+0x2b0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a06      	ldr	r2, [pc, #24]	; (80058bc <HAL_RCC_OscConfig+0x2b0>)
 80058a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a8:	f7fd fb3e 	bl	8002f28 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	e010      	b.n	80058d2 <HAL_RCC_OscConfig+0x2c6>
 80058b0:	40023800 	.word	0x40023800
 80058b4:	42470000 	.word	0x42470000
 80058b8:	42470e80 	.word	0x42470e80
 80058bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fd fb32 	bl	8002f28 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e0d3      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <HAL_RCC_OscConfig+0x478>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d106      	bne.n	80058f4 <HAL_RCC_OscConfig+0x2e8>
 80058e6:	4b68      	ldr	r3, [pc, #416]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a67      	ldr	r2, [pc, #412]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	e01c      	b.n	800592e <HAL_RCC_OscConfig+0x322>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d10c      	bne.n	8005916 <HAL_RCC_OscConfig+0x30a>
 80058fc:	4b62      	ldr	r3, [pc, #392]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a61      	ldr	r2, [pc, #388]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005902:	f043 0304 	orr.w	r3, r3, #4
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	4b5f      	ldr	r3, [pc, #380]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a5e      	ldr	r2, [pc, #376]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e00b      	b.n	800592e <HAL_RCC_OscConfig+0x322>
 8005916:	4b5c      	ldr	r3, [pc, #368]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	4a5b      	ldr	r2, [pc, #364]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005928:	f023 0304 	bic.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fd faf7 	bl	8002f28 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd faf3 	bl	8002f28 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e092      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005954:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ee      	beq.n	800593e <HAL_RCC_OscConfig+0x332>
 8005960:	e014      	b.n	800598c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fd fae1 	bl	8002f28 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd fadd 	bl	8002f28 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e07c      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005980:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ee      	bne.n	800596a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d068      	beq.n	8005a78 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059a6:	4b38      	ldr	r3, [pc, #224]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d060      	beq.n	8005a74 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d145      	bne.n	8005a46 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <HAL_RCC_OscConfig+0x480>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd fab2 	bl	8002f28 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fd faae 	bl	8002f28 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	491d      	ldr	r1, [pc, #116]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <HAL_RCC_OscConfig+0x480>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fd fa83 	bl	8002f28 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fd fa7f 	bl	8002f28 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e020      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x41a>
 8005a44:	e018      	b.n	8005a78 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <HAL_RCC_OscConfig+0x480>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fd fa6c 	bl	8002f28 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a54:	f7fd fa68 	bl	8002f28 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e009      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a66:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_RCC_OscConfig+0x47c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x448>
 8005a72:	e001      	b.n	8005a78 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40007000 	.word	0x40007000
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	42470060 	.word	0x42470060

08005a90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e083      	b.n	8005baa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7f5b      	ldrb	r3, [r3, #29]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc f8ae 	bl	8001c14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	22ca      	movs	r2, #202	; 0xca
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2253      	movs	r2, #83	; 0x53
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 faa8 	bl	8006024 <RTC_EnterInitMode>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e05e      	b.n	8005baa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68d2      	ldr	r2, [r2, #12]
 8005b26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6919      	ldr	r1, [r3, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	041a      	lsls	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10e      	bne.n	8005b78 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa3a 	bl	8005fd4 <HAL_RTC_WaitForSynchro>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	22ff      	movs	r2, #255	; 0xff
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2204      	movs	r2, #4
 8005b72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e018      	b.n	8005baa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	22ff      	movs	r2, #255	; 0xff
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bb2:	b590      	push	{r4, r7, lr}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	7f1b      	ldrb	r3, [r3, #28]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_RTC_SetTime+0x1c>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0aa      	b.n	8005d24 <HAL_RTC_SetTime+0x172>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d126      	bne.n	8005c2e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fa3f 	bl	800607c <RTC_ByteToBcd2>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa38 	bl	800607c <RTC_ByteToBcd2>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c10:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	789b      	ldrb	r3, [r3, #2]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fa30 	bl	800607c <RTC_ByteToBcd2>
 8005c1c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e018      	b.n	8005c60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c4e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	78db      	ldrb	r3, [r3, #3]
 8005c5a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	22ca      	movs	r2, #202	; 0xca
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2253      	movs	r2, #83	; 0x53
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f9d7 	bl	8006024 <RTC_EnterInitMode>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	22ff      	movs	r2, #255	; 0xff
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2204      	movs	r2, #4
 8005c88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e047      	b.n	8005d24 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ca2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d111      	bne.n	8005d0e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f972 	bl	8005fd4 <HAL_RTC_WaitForSynchro>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	22ff      	movs	r2, #255	; 0xff
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2204      	movs	r2, #4
 8005d02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00a      	b.n	8005d24 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	22ff      	movs	r2, #255	; 0xff
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d22:	2300      	movs	r3, #0
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd90      	pop	{r4, r7, pc}

08005d2c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 f983 	bl	80060b8 <RTC_Bcd2ToByte>
 8005db2:	4603      	mov	r3, r0
 8005db4:	461a      	mov	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f97a 	bl	80060b8 <RTC_Bcd2ToByte>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	789b      	ldrb	r3, [r3, #2]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f971 	bl	80060b8 <RTC_Bcd2ToByte>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	7f1b      	ldrb	r3, [r3, #28]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_RTC_SetDate+0x1c>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e094      	b.n	8005f2e <HAL_RTC_SetDate+0x146>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10e      	bne.n	8005e34 <HAL_RTC_SetDate+0x4c>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	f023 0310 	bic.w	r3, r3, #16
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	330a      	adds	r3, #10
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11c      	bne.n	8005e74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	78db      	ldrb	r3, [r3, #3]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f91c 	bl	800607c <RTC_ByteToBcd2>
 8005e44:	4603      	mov	r3, r0
 8005e46:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f915 	bl	800607c <RTC_ByteToBcd2>
 8005e52:	4603      	mov	r3, r0
 8005e54:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e56:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	789b      	ldrb	r3, [r3, #2]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f90d 	bl	800607c <RTC_ByteToBcd2>
 8005e62:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e64:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e00e      	b.n	8005e92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	78db      	ldrb	r3, [r3, #3]
 8005e78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	22ca      	movs	r2, #202	; 0xca
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2253      	movs	r2, #83	; 0x53
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f8be 	bl	8006024 <RTC_EnterInitMode>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	22ff      	movs	r2, #255	; 0xff
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e033      	b.n	8005f2e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ed4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d111      	bne.n	8005f18 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f86d 	bl	8005fd4 <HAL_RTC_WaitForSynchro>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e00a      	b.n	8005f2e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}

08005f36 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	0b5b      	lsrs	r3, r3, #13
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11a      	bne.n	8005fca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f88d 	bl	80060b8 <RTC_Bcd2ToByte>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f884 	bl	80060b8 <RTC_Bcd2ToByte>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	789b      	ldrb	r3, [r3, #2]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f87b 	bl	80060b8 <RTC_Bcd2ToByte>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff0:	f7fc ff9a 	bl	8002f28 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ff6:	e009      	b.n	800600c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ff8:	f7fc ff96 	bl	8002f28 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006006:	d901      	bls.n	800600c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e007      	b.n	800601c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0ee      	beq.n	8005ff8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d119      	bne.n	8006072 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006048:	f7fc ff6e 	bl	8002f28 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800604e:	e009      	b.n	8006064 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006050:	f7fc ff6a 	bl	8002f28 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605e:	d901      	bls.n	8006064 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e007      	b.n	8006074 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0ee      	beq.n	8006050 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800608a:	e005      	b.n	8006098 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	3b0a      	subs	r3, #10
 8006096:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d8f6      	bhi.n	800608c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b2db      	uxtb	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	b2db      	uxtb	r3, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e03f      	b.n	8006186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fb fd90 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	; 0x24
 8006124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fd1d 	bl	8006b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800614c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800615c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800616c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b088      	sub	sp, #32
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	f040 8083 	bne.w	80062b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Transmit+0x2e>
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e07b      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UART_Transmit+0x40>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e074      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2221      	movs	r2, #33	; 0x21
 80061e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061e4:	f7fc fea0 	bl	8002f28 <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80061fe:	e042      	b.n	8006286 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	d122      	bne.n	800625e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fb26 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e042      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006244:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3302      	adds	r3, #2
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	e017      	b.n	8006286 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3301      	adds	r3, #1
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	e013      	b.n	8006286 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fb03 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e01f      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	60ba      	str	r2, [r7, #8]
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1b7      	bne.n	8006200 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 faea 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e006      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b20      	cmp	r3, #32
 80062de:	f040 8090 	bne.w	8006402 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_UART_Receive+0x2e>
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e088      	b.n	8006404 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_UART_Receive+0x40>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e081      	b.n	8006404 <HAL_UART_Receive+0x144>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2222      	movs	r2, #34	; 0x22
 8006312:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006316:	f7fc fe07 	bl	8002f28 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006330:	e05c      	b.n	80063ec <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006348:	d12b      	bne.n	80063a2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	2120      	movs	r1, #32
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fa8d 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e04f      	b.n	8006404 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10c      	bne.n	800638a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637c:	b29a      	uxth	r2, r3
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	3302      	adds	r3, #2
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	e030      	b.n	80063ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b29b      	uxth	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	b29a      	uxth	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3301      	adds	r3, #1
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	e024      	b.n	80063ec <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2120      	movs	r1, #32
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fa61 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e023      	b.n	8006404 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d108      	bne.n	80063d6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	60ba      	str	r2, [r7, #8]
 80063d0:	b2ca      	uxtb	r2, r1
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e00a      	b.n	80063ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d19d      	bne.n	8006332 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b20      	cmp	r3, #32
 8006424:	d166      	bne.n	80064f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_Receive_DMA+0x26>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e05f      	b.n	80064f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Receive_DMA+0x38>
 8006440:	2302      	movs	r3, #2
 8006442:	e058      	b.n	80064f6 <HAL_UART_Receive_DMA+0xea>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2222      	movs	r2, #34	; 0x22
 8006462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	4a25      	ldr	r2, [pc, #148]	; (8006500 <HAL_UART_Receive_DMA+0xf4>)
 800646c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_UART_Receive_DMA+0xf8>)
 8006474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	4a23      	ldr	r2, [pc, #140]	; (8006508 <HAL_UART_Receive_DMA+0xfc>)
 800647c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	2200      	movs	r2, #0
 8006484:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	f7fc ff31 	bl	8003304 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	0800675d 	.word	0x0800675d
 8006504:	080067c5 	.word	0x080067c5
 8006508:	080067e1 	.word	0x080067e1

0800650c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa8c 	bl	8006a74 <UART_Receive_IT>
      return;
 800655c:	e0d1      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80b0 	beq.w	80066c6 <HAL_UART_IRQHandler+0x1ba>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_UART_IRQHandler+0x70>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80a5 	beq.w	80066c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	f043 0202 	orr.w	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	f043 0204 	orr.w	r2, r3, #4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <HAL_UART_IRQHandler+0xfa>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_UART_IRQHandler+0xee>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	f043 0208 	orr.w	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d078      	beq.n	8006700 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_UART_IRQHandler+0x11c>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa26 	bl	8006a74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_UART_IRQHandler+0x144>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d031      	beq.n	80066b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f96f 	bl	8006934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d123      	bne.n	80066ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006672:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <HAL_UART_IRQHandler+0x1fc>)
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	4618      	mov	r0, r3
 800668a:	f7fc fe93 	bl	80033b4 <HAL_DMA_Abort_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d016      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800669e:	4610      	mov	r0, r2
 80066a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	e00e      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f84f 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066aa:	e00a      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f84b 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	e006      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f847 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066c0:	e01e      	b.n	8006700 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c2:	bf00      	nop
    return;
 80066c4:	e01c      	b.n	8006700 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_IRQHandler+0x1d6>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f95c 	bl	8006998 <UART_Transmit_IT>
    return;
 80066e0:	e00f      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_UART_IRQHandler+0x1f6>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9a4 	bl	8006a44 <UART_EndTransmit_IT>
    return;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006700:	bf00      	nop
  }
}
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	08006971 	.word	0x08006971

0800670c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11e      	bne.n	80067b6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ac:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff ffb2 	bl	8006720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7ff ffae 	bl	8006734 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b21      	cmp	r3, #33	; 0x21
 8006812:	d108      	bne.n	8006826 <UART_DMAError+0x46>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006820:	68b8      	ldr	r0, [r7, #8]
 8006822:	f000 f871 	bl	8006908 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b22      	cmp	r3, #34	; 0x22
 8006846:	d108      	bne.n	800685a <UART_DMAError+0x7a>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f000 f86d 	bl	8006934 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	f043 0210 	orr.w	r2, r3, #16
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	f7ff ff6e 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006884:	e02c      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d028      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006894:	f7fc fb48 	bl	8002f28 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d21d      	bcs.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e00f      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d0c3      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800691e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800694a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fedc 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b21      	cmp	r3, #33	; 0x21
 80069aa:	d144      	bne.n	8006a36 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d11a      	bne.n	80069ec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]
 80069de:	e00e      	b.n	80069fe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]
 80069ea:	e008      	b.n	80069fe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6211      	str	r1, [r2, #32]
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10f      	bne.n	8006a32 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fe51 	bl	800670c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b22      	cmp	r3, #34	; 0x22
 8006a86:	d171      	bne.n	8006b6c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a90:	d123      	bne.n	8006ada <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10e      	bne.n	8006abe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
 8006abc:	e029      	b.n	8006b12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad8:	e01b      	b.n	8006b12 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6858      	ldr	r0, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6291      	str	r1, [r2, #40]	; 0x28
 8006af2:	b2c2      	uxtb	r2, r0
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e00c      	b.n	8006b12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	1c58      	adds	r0, r3, #1
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	6288      	str	r0, [r1, #40]	; 0x28
 8006b0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d120      	bne.n	8006b68 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0220 	bic.w	r2, r2, #32
 8006b34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fdde 	bl	8006720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e002      	b.n	8006b6e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bba:	f023 030c 	bic.w	r3, r3, #12
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	f040 8199 	bne.w	8006f1c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4ac6      	ldr	r2, [pc, #792]	; (8006f08 <UART_SetConfig+0x390>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00f      	beq.n	8006c14 <UART_SetConfig+0x9c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4ac4      	ldr	r2, [pc, #784]	; (8006f0c <UART_SetConfig+0x394>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00a      	beq.n	8006c14 <UART_SetConfig+0x9c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4ac3      	ldr	r2, [pc, #780]	; (8006f10 <UART_SetConfig+0x398>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d005      	beq.n	8006c14 <UART_SetConfig+0x9c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4ac1      	ldr	r2, [pc, #772]	; (8006f14 <UART_SetConfig+0x39c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f040 80bd 	bne.w	8006d8e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fe fa5a 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8006c18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	f04f 0600 	mov.w	r6, #0
 8006c22:	46a8      	mov	r8, r5
 8006c24:	46b1      	mov	r9, r6
 8006c26:	eb18 0308 	adds.w	r3, r8, r8
 8006c2a:	eb49 0409 	adc.w	r4, r9, r9
 8006c2e:	4698      	mov	r8, r3
 8006c30:	46a1      	mov	r9, r4
 8006c32:	eb18 0805 	adds.w	r8, r8, r5
 8006c36:	eb49 0906 	adc.w	r9, r9, r6
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c4e:	4688      	mov	r8, r1
 8006c50:	4691      	mov	r9, r2
 8006c52:	eb18 0005 	adds.w	r0, r8, r5
 8006c56:	eb49 0106 	adc.w	r1, r9, r6
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	461d      	mov	r5, r3
 8006c60:	f04f 0600 	mov.w	r6, #0
 8006c64:	196b      	adds	r3, r5, r5
 8006c66:	eb46 0406 	adc.w	r4, r6, r6
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	f7fa f81d 	bl	8000cac <__aeabi_uldivmod>
 8006c72:	4603      	mov	r3, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	461a      	mov	r2, r3
 8006c78:	4ba7      	ldr	r3, [pc, #668]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	461d      	mov	r5, r3
 8006c88:	f04f 0600 	mov.w	r6, #0
 8006c8c:	46a9      	mov	r9, r5
 8006c8e:	46b2      	mov	sl, r6
 8006c90:	eb19 0309 	adds.w	r3, r9, r9
 8006c94:	eb4a 040a 	adc.w	r4, sl, sl
 8006c98:	4699      	mov	r9, r3
 8006c9a:	46a2      	mov	sl, r4
 8006c9c:	eb19 0905 	adds.w	r9, r9, r5
 8006ca0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb8:	4689      	mov	r9, r1
 8006cba:	4692      	mov	sl, r2
 8006cbc:	eb19 0005 	adds.w	r0, r9, r5
 8006cc0:	eb4a 0106 	adc.w	r1, sl, r6
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	461d      	mov	r5, r3
 8006cca:	f04f 0600 	mov.w	r6, #0
 8006cce:	196b      	adds	r3, r5, r5
 8006cd0:	eb46 0406 	adc.w	r4, r6, r6
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	f7f9 ffe8 	bl	8000cac <__aeabi_uldivmod>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b8d      	ldr	r3, [pc, #564]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	2164      	movs	r1, #100	; 0x64
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	3332      	adds	r3, #50	; 0x32
 8006cf6:	4a88      	ldr	r2, [pc, #544]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d04:	4498      	add	r8, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	461d      	mov	r5, r3
 8006d0a:	f04f 0600 	mov.w	r6, #0
 8006d0e:	46a9      	mov	r9, r5
 8006d10:	46b2      	mov	sl, r6
 8006d12:	eb19 0309 	adds.w	r3, r9, r9
 8006d16:	eb4a 040a 	adc.w	r4, sl, sl
 8006d1a:	4699      	mov	r9, r3
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	eb19 0905 	adds.w	r9, r9, r5
 8006d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d26:	f04f 0100 	mov.w	r1, #0
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d3a:	4689      	mov	r9, r1
 8006d3c:	4692      	mov	sl, r2
 8006d3e:	eb19 0005 	adds.w	r0, r9, r5
 8006d42:	eb4a 0106 	adc.w	r1, sl, r6
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	f04f 0600 	mov.w	r6, #0
 8006d50:	196b      	adds	r3, r5, r5
 8006d52:	eb46 0406 	adc.w	r4, r6, r6
 8006d56:	461a      	mov	r2, r3
 8006d58:	4623      	mov	r3, r4
 8006d5a:	f7f9 ffa7 	bl	8000cac <__aeabi_uldivmod>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	460c      	mov	r4, r1
 8006d62:	461a      	mov	r2, r3
 8006d64:	4b6c      	ldr	r3, [pc, #432]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006d66:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2164      	movs	r1, #100	; 0x64
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	3332      	adds	r3, #50	; 0x32
 8006d78:	4a67      	ldr	r2, [pc, #412]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	f003 0207 	and.w	r2, r3, #7
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4442      	add	r2, r8
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	e27d      	b.n	800728a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d8e:	f7fe f989 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8006d92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	461d      	mov	r5, r3
 8006d98:	f04f 0600 	mov.w	r6, #0
 8006d9c:	46a8      	mov	r8, r5
 8006d9e:	46b1      	mov	r9, r6
 8006da0:	eb18 0308 	adds.w	r3, r8, r8
 8006da4:	eb49 0409 	adc.w	r4, r9, r9
 8006da8:	4698      	mov	r8, r3
 8006daa:	46a1      	mov	r9, r4
 8006dac:	eb18 0805 	adds.w	r8, r8, r5
 8006db0:	eb49 0906 	adc.w	r9, r9, r6
 8006db4:	f04f 0100 	mov.w	r1, #0
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dc8:	4688      	mov	r8, r1
 8006dca:	4691      	mov	r9, r2
 8006dcc:	eb18 0005 	adds.w	r0, r8, r5
 8006dd0:	eb49 0106 	adc.w	r1, r9, r6
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	461d      	mov	r5, r3
 8006dda:	f04f 0600 	mov.w	r6, #0
 8006dde:	196b      	adds	r3, r5, r5
 8006de0:	eb46 0406 	adc.w	r4, r6, r6
 8006de4:	461a      	mov	r2, r3
 8006de6:	4623      	mov	r3, r4
 8006de8:	f7f9 ff60 	bl	8000cac <__aeabi_uldivmod>
 8006dec:	4603      	mov	r3, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	461a      	mov	r2, r3
 8006df2:	4b49      	ldr	r3, [pc, #292]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006df4:	fba3 2302 	umull	r2, r3, r3, r2
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	461d      	mov	r5, r3
 8006e02:	f04f 0600 	mov.w	r6, #0
 8006e06:	46a9      	mov	r9, r5
 8006e08:	46b2      	mov	sl, r6
 8006e0a:	eb19 0309 	adds.w	r3, r9, r9
 8006e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8006e12:	4699      	mov	r9, r3
 8006e14:	46a2      	mov	sl, r4
 8006e16:	eb19 0905 	adds.w	r9, r9, r5
 8006e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e1e:	f04f 0100 	mov.w	r1, #0
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e32:	4689      	mov	r9, r1
 8006e34:	4692      	mov	sl, r2
 8006e36:	eb19 0005 	adds.w	r0, r9, r5
 8006e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	461d      	mov	r5, r3
 8006e44:	f04f 0600 	mov.w	r6, #0
 8006e48:	196b      	adds	r3, r5, r5
 8006e4a:	eb46 0406 	adc.w	r4, r6, r6
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4623      	mov	r3, r4
 8006e52:	f7f9 ff2b 	bl	8000cac <__aeabi_uldivmod>
 8006e56:	4603      	mov	r3, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2164      	movs	r1, #100	; 0x64
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	3332      	adds	r3, #50	; 0x32
 8006e70:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e7e:	4498      	add	r8, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	461d      	mov	r5, r3
 8006e84:	f04f 0600 	mov.w	r6, #0
 8006e88:	46a9      	mov	r9, r5
 8006e8a:	46b2      	mov	sl, r6
 8006e8c:	eb19 0309 	adds.w	r3, r9, r9
 8006e90:	eb4a 040a 	adc.w	r4, sl, sl
 8006e94:	4699      	mov	r9, r3
 8006e96:	46a2      	mov	sl, r4
 8006e98:	eb19 0905 	adds.w	r9, r9, r5
 8006e9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eb4:	4689      	mov	r9, r1
 8006eb6:	4692      	mov	sl, r2
 8006eb8:	eb19 0005 	adds.w	r0, r9, r5
 8006ebc:	eb4a 0106 	adc.w	r1, sl, r6
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	f04f 0600 	mov.w	r6, #0
 8006eca:	196b      	adds	r3, r5, r5
 8006ecc:	eb46 0406 	adc.w	r4, r6, r6
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	f7f9 feea 	bl	8000cac <__aeabi_uldivmod>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <UART_SetConfig+0x3a0>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	f003 0207 	and.w	r2, r3, #7
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4442      	add	r2, r8
 8006f04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f06:	e1c0      	b.n	800728a <UART_SetConfig+0x712>
 8006f08:	40011000 	.word	0x40011000
 8006f0c:	40011400 	.word	0x40011400
 8006f10:	40011800 	.word	0x40011800
 8006f14:	40011c00 	.word	0x40011c00
 8006f18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4adc      	ldr	r2, [pc, #880]	; (8007294 <UART_SetConfig+0x71c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <UART_SetConfig+0x3ce>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4adb      	ldr	r2, [pc, #876]	; (8007298 <UART_SetConfig+0x720>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00a      	beq.n	8006f46 <UART_SetConfig+0x3ce>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4ad9      	ldr	r2, [pc, #868]	; (800729c <UART_SetConfig+0x724>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d005      	beq.n	8006f46 <UART_SetConfig+0x3ce>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4ad8      	ldr	r2, [pc, #864]	; (80072a0 <UART_SetConfig+0x728>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	f040 80d1 	bne.w	80070e8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f46:	f7fe f8c1 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8006f4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	469a      	mov	sl, r3
 8006f50:	f04f 0b00 	mov.w	fp, #0
 8006f54:	46d0      	mov	r8, sl
 8006f56:	46d9      	mov	r9, fp
 8006f58:	eb18 0308 	adds.w	r3, r8, r8
 8006f5c:	eb49 0409 	adc.w	r4, r9, r9
 8006f60:	4698      	mov	r8, r3
 8006f62:	46a1      	mov	r9, r4
 8006f64:	eb18 080a 	adds.w	r8, r8, sl
 8006f68:	eb49 090b 	adc.w	r9, r9, fp
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f80:	4688      	mov	r8, r1
 8006f82:	4691      	mov	r9, r2
 8006f84:	eb1a 0508 	adds.w	r5, sl, r8
 8006f88:	eb4b 0609 	adc.w	r6, fp, r9
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4619      	mov	r1, r3
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	f04f 0400 	mov.w	r4, #0
 8006f9e:	0094      	lsls	r4, r2, #2
 8006fa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4623      	mov	r3, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	4631      	mov	r1, r6
 8006fae:	f7f9 fe7d 	bl	8000cac <__aeabi_uldivmod>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4bba      	ldr	r3, [pc, #744]	; (80072a4 <UART_SetConfig+0x72c>)
 8006fba:	fba3 2302 	umull	r2, r3, r3, r2
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	469b      	mov	fp, r3
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	46d9      	mov	r9, fp
 8006fce:	46e2      	mov	sl, ip
 8006fd0:	eb19 0309 	adds.w	r3, r9, r9
 8006fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8006fd8:	4699      	mov	r9, r3
 8006fda:	46a2      	mov	sl, r4
 8006fdc:	eb19 090b 	adds.w	r9, r9, fp
 8006fe0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ff8:	4689      	mov	r9, r1
 8006ffa:	4692      	mov	sl, r2
 8006ffc:	eb1b 0509 	adds.w	r5, fp, r9
 8007000:	eb4c 060a 	adc.w	r6, ip, sl
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4619      	mov	r1, r3
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f04f 0400 	mov.w	r4, #0
 8007016:	0094      	lsls	r4, r2, #2
 8007018:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800701c:	008b      	lsls	r3, r1, #2
 800701e:	461a      	mov	r2, r3
 8007020:	4623      	mov	r3, r4
 8007022:	4628      	mov	r0, r5
 8007024:	4631      	mov	r1, r6
 8007026:	f7f9 fe41 	bl	8000cac <__aeabi_uldivmod>
 800702a:	4603      	mov	r3, r0
 800702c:	460c      	mov	r4, r1
 800702e:	461a      	mov	r2, r3
 8007030:	4b9c      	ldr	r3, [pc, #624]	; (80072a4 <UART_SetConfig+0x72c>)
 8007032:	fba3 1302 	umull	r1, r3, r3, r2
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	2164      	movs	r1, #100	; 0x64
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	3332      	adds	r3, #50	; 0x32
 8007044:	4a97      	ldr	r2, [pc, #604]	; (80072a4 <UART_SetConfig+0x72c>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007050:	4498      	add	r8, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	469b      	mov	fp, r3
 8007056:	f04f 0c00 	mov.w	ip, #0
 800705a:	46d9      	mov	r9, fp
 800705c:	46e2      	mov	sl, ip
 800705e:	eb19 0309 	adds.w	r3, r9, r9
 8007062:	eb4a 040a 	adc.w	r4, sl, sl
 8007066:	4699      	mov	r9, r3
 8007068:	46a2      	mov	sl, r4
 800706a:	eb19 090b 	adds.w	r9, r9, fp
 800706e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007072:	f04f 0100 	mov.w	r1, #0
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800707e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007086:	4689      	mov	r9, r1
 8007088:	4692      	mov	sl, r2
 800708a:	eb1b 0509 	adds.w	r5, fp, r9
 800708e:	eb4c 060a 	adc.w	r6, ip, sl
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	f04f 0400 	mov.w	r4, #0
 80070a4:	0094      	lsls	r4, r2, #2
 80070a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070aa:	008b      	lsls	r3, r1, #2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4623      	mov	r3, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	4631      	mov	r1, r6
 80070b4:	f7f9 fdfa 	bl	8000cac <__aeabi_uldivmod>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	461a      	mov	r2, r3
 80070be:	4b79      	ldr	r3, [pc, #484]	; (80072a4 <UART_SetConfig+0x72c>)
 80070c0:	fba3 1302 	umull	r1, r3, r3, r2
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	2164      	movs	r1, #100	; 0x64
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	3332      	adds	r3, #50	; 0x32
 80070d2:	4a74      	ldr	r2, [pc, #464]	; (80072a4 <UART_SetConfig+0x72c>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f003 020f 	and.w	r2, r3, #15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4442      	add	r2, r8
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	e0d0      	b.n	800728a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fd ffdc 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 80070ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	469a      	mov	sl, r3
 80070f2:	f04f 0b00 	mov.w	fp, #0
 80070f6:	46d0      	mov	r8, sl
 80070f8:	46d9      	mov	r9, fp
 80070fa:	eb18 0308 	adds.w	r3, r8, r8
 80070fe:	eb49 0409 	adc.w	r4, r9, r9
 8007102:	4698      	mov	r8, r3
 8007104:	46a1      	mov	r9, r4
 8007106:	eb18 080a 	adds.w	r8, r8, sl
 800710a:	eb49 090b 	adc.w	r9, r9, fp
 800710e:	f04f 0100 	mov.w	r1, #0
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800711a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800711e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007122:	4688      	mov	r8, r1
 8007124:	4691      	mov	r9, r2
 8007126:	eb1a 0508 	adds.w	r5, sl, r8
 800712a:	eb4b 0609 	adc.w	r6, fp, r9
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	4619      	mov	r1, r3
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	f04f 0400 	mov.w	r4, #0
 8007140:	0094      	lsls	r4, r2, #2
 8007142:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007146:	008b      	lsls	r3, r1, #2
 8007148:	461a      	mov	r2, r3
 800714a:	4623      	mov	r3, r4
 800714c:	4628      	mov	r0, r5
 800714e:	4631      	mov	r1, r6
 8007150:	f7f9 fdac 	bl	8000cac <__aeabi_uldivmod>
 8007154:	4603      	mov	r3, r0
 8007156:	460c      	mov	r4, r1
 8007158:	461a      	mov	r2, r3
 800715a:	4b52      	ldr	r3, [pc, #328]	; (80072a4 <UART_SetConfig+0x72c>)
 800715c:	fba3 2302 	umull	r2, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	469b      	mov	fp, r3
 800716a:	f04f 0c00 	mov.w	ip, #0
 800716e:	46d9      	mov	r9, fp
 8007170:	46e2      	mov	sl, ip
 8007172:	eb19 0309 	adds.w	r3, r9, r9
 8007176:	eb4a 040a 	adc.w	r4, sl, sl
 800717a:	4699      	mov	r9, r3
 800717c:	46a2      	mov	sl, r4
 800717e:	eb19 090b 	adds.w	r9, r9, fp
 8007182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800719a:	4689      	mov	r9, r1
 800719c:	4692      	mov	sl, r2
 800719e:	eb1b 0509 	adds.w	r5, fp, r9
 80071a2:	eb4c 060a 	adc.w	r6, ip, sl
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	0094      	lsls	r4, r2, #2
 80071ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071be:	008b      	lsls	r3, r1, #2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	4631      	mov	r1, r6
 80071c8:	f7f9 fd70 	bl	8000cac <__aeabi_uldivmod>
 80071cc:	4603      	mov	r3, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	461a      	mov	r2, r3
 80071d2:	4b34      	ldr	r3, [pc, #208]	; (80072a4 <UART_SetConfig+0x72c>)
 80071d4:	fba3 1302 	umull	r1, r3, r3, r2
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	2164      	movs	r1, #100	; 0x64
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	3332      	adds	r3, #50	; 0x32
 80071e6:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <UART_SetConfig+0x72c>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071f2:	4498      	add	r8, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	469b      	mov	fp, r3
 80071f8:	f04f 0c00 	mov.w	ip, #0
 80071fc:	46d9      	mov	r9, fp
 80071fe:	46e2      	mov	sl, ip
 8007200:	eb19 0309 	adds.w	r3, r9, r9
 8007204:	eb4a 040a 	adc.w	r4, sl, sl
 8007208:	4699      	mov	r9, r3
 800720a:	46a2      	mov	sl, r4
 800720c:	eb19 090b 	adds.w	r9, r9, fp
 8007210:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007214:	f04f 0100 	mov.w	r1, #0
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007228:	4689      	mov	r9, r1
 800722a:	4692      	mov	sl, r2
 800722c:	eb1b 0509 	adds.w	r5, fp, r9
 8007230:	eb4c 060a 	adc.w	r6, ip, sl
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4619      	mov	r1, r3
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	f04f 0400 	mov.w	r4, #0
 8007246:	0094      	lsls	r4, r2, #2
 8007248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800724c:	008b      	lsls	r3, r1, #2
 800724e:	461a      	mov	r2, r3
 8007250:	4623      	mov	r3, r4
 8007252:	4628      	mov	r0, r5
 8007254:	4631      	mov	r1, r6
 8007256:	f7f9 fd29 	bl	8000cac <__aeabi_uldivmod>
 800725a:	4603      	mov	r3, r0
 800725c:	460c      	mov	r4, r1
 800725e:	461a      	mov	r2, r3
 8007260:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <UART_SetConfig+0x72c>)
 8007262:	fba3 1302 	umull	r1, r3, r3, r2
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	2164      	movs	r1, #100	; 0x64
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	3332      	adds	r3, #50	; 0x32
 8007274:	4a0b      	ldr	r2, [pc, #44]	; (80072a4 <UART_SetConfig+0x72c>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4442      	add	r2, r8
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	e7ff      	b.n	800728a <UART_SetConfig+0x712>
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	40011000 	.word	0x40011000
 8007298:	40011400 	.word	0x40011400
 800729c:	40011800 	.word	0x40011800
 80072a0:	40011c00 	.word	0x40011c00
 80072a4:	51eb851f 	.word	0x51eb851f

080072a8 <atoi>:
 80072a8:	220a      	movs	r2, #10
 80072aa:	2100      	movs	r1, #0
 80072ac:	f001 b920 	b.w	80084f0 <strtol>

080072b0 <__errno>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <__errno+0x8>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000000c 	.word	0x2000000c

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4e0d      	ldr	r6, [pc, #52]	; (80072f4 <__libc_init_array+0x38>)
 80072c0:	4c0d      	ldr	r4, [pc, #52]	; (80072f8 <__libc_init_array+0x3c>)
 80072c2:	1ba4      	subs	r4, r4, r6
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	2500      	movs	r5, #0
 80072c8:	42a5      	cmp	r5, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	4e0b      	ldr	r6, [pc, #44]	; (80072fc <__libc_init_array+0x40>)
 80072ce:	4c0c      	ldr	r4, [pc, #48]	; (8007300 <__libc_init_array+0x44>)
 80072d0:	f004 f862 	bl	800b398 <_init>
 80072d4:	1ba4      	subs	r4, r4, r6
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	2500      	movs	r5, #0
 80072da:	42a5      	cmp	r5, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072e4:	4798      	blx	r3
 80072e6:	3501      	adds	r5, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ee:	4798      	blx	r3
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	0800bbc4 	.word	0x0800bbc4
 80072f8:	0800bbc4 	.word	0x0800bbc4
 80072fc:	0800bbc4 	.word	0x0800bbc4
 8007300:	0800bbc8 	.word	0x0800bbc8

08007304 <memcpy>:
 8007304:	b510      	push	{r4, lr}
 8007306:	1e43      	subs	r3, r0, #1
 8007308:	440a      	add	r2, r1
 800730a:	4291      	cmp	r1, r2
 800730c:	d100      	bne.n	8007310 <memcpy+0xc>
 800730e:	bd10      	pop	{r4, pc}
 8007310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007318:	e7f7      	b.n	800730a <memcpy+0x6>

0800731a <memset>:
 800731a:	4402      	add	r2, r0
 800731c:	4603      	mov	r3, r0
 800731e:	4293      	cmp	r3, r2
 8007320:	d100      	bne.n	8007324 <memset+0xa>
 8007322:	4770      	bx	lr
 8007324:	f803 1b01 	strb.w	r1, [r3], #1
 8007328:	e7f9      	b.n	800731e <memset+0x4>
	...

0800732c <validate_structure>:
 800732c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800732e:	6801      	ldr	r1, [r0, #0]
 8007330:	293b      	cmp	r1, #59	; 0x3b
 8007332:	4604      	mov	r4, r0
 8007334:	d911      	bls.n	800735a <validate_structure+0x2e>
 8007336:	223c      	movs	r2, #60	; 0x3c
 8007338:	4668      	mov	r0, sp
 800733a:	f001 fbdd 	bl	8008af8 <div>
 800733e:	9a01      	ldr	r2, [sp, #4]
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	9900      	ldr	r1, [sp, #0]
 8007344:	2a00      	cmp	r2, #0
 8007346:	440b      	add	r3, r1
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	bfbb      	ittet	lt
 800734c:	323c      	addlt	r2, #60	; 0x3c
 800734e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007352:	6022      	strge	r2, [r4, #0]
 8007354:	6022      	strlt	r2, [r4, #0]
 8007356:	bfb8      	it	lt
 8007358:	6063      	strlt	r3, [r4, #4]
 800735a:	6861      	ldr	r1, [r4, #4]
 800735c:	293b      	cmp	r1, #59	; 0x3b
 800735e:	d911      	bls.n	8007384 <validate_structure+0x58>
 8007360:	223c      	movs	r2, #60	; 0x3c
 8007362:	4668      	mov	r0, sp
 8007364:	f001 fbc8 	bl	8008af8 <div>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	9900      	ldr	r1, [sp, #0]
 800736e:	2a00      	cmp	r2, #0
 8007370:	440b      	add	r3, r1
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	bfbb      	ittet	lt
 8007376:	323c      	addlt	r2, #60	; 0x3c
 8007378:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800737c:	6062      	strge	r2, [r4, #4]
 800737e:	6062      	strlt	r2, [r4, #4]
 8007380:	bfb8      	it	lt
 8007382:	60a3      	strlt	r3, [r4, #8]
 8007384:	68a1      	ldr	r1, [r4, #8]
 8007386:	2917      	cmp	r1, #23
 8007388:	d911      	bls.n	80073ae <validate_structure+0x82>
 800738a:	2218      	movs	r2, #24
 800738c:	4668      	mov	r0, sp
 800738e:	f001 fbb3 	bl	8008af8 <div>
 8007392:	9a01      	ldr	r2, [sp, #4]
 8007394:	68e3      	ldr	r3, [r4, #12]
 8007396:	9900      	ldr	r1, [sp, #0]
 8007398:	2a00      	cmp	r2, #0
 800739a:	440b      	add	r3, r1
 800739c:	60e3      	str	r3, [r4, #12]
 800739e:	bfbb      	ittet	lt
 80073a0:	3218      	addlt	r2, #24
 80073a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80073a6:	60a2      	strge	r2, [r4, #8]
 80073a8:	60a2      	strlt	r2, [r4, #8]
 80073aa:	bfb8      	it	lt
 80073ac:	60e3      	strlt	r3, [r4, #12]
 80073ae:	6921      	ldr	r1, [r4, #16]
 80073b0:	290b      	cmp	r1, #11
 80073b2:	d911      	bls.n	80073d8 <validate_structure+0xac>
 80073b4:	220c      	movs	r2, #12
 80073b6:	4668      	mov	r0, sp
 80073b8:	f001 fb9e 	bl	8008af8 <div>
 80073bc:	9a01      	ldr	r2, [sp, #4]
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	9900      	ldr	r1, [sp, #0]
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	440b      	add	r3, r1
 80073c6:	6163      	str	r3, [r4, #20]
 80073c8:	bfbb      	ittet	lt
 80073ca:	320c      	addlt	r2, #12
 80073cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80073d0:	6122      	strge	r2, [r4, #16]
 80073d2:	6122      	strlt	r2, [r4, #16]
 80073d4:	bfb8      	it	lt
 80073d6:	6163      	strlt	r3, [r4, #20]
 80073d8:	6963      	ldr	r3, [r4, #20]
 80073da:	0799      	lsls	r1, r3, #30
 80073dc:	d120      	bne.n	8007420 <validate_structure+0xf4>
 80073de:	2164      	movs	r1, #100	; 0x64
 80073e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80073e4:	fb01 3212 	mls	r2, r1, r2, r3
 80073e8:	b9e2      	cbnz	r2, 8007424 <validate_structure+0xf8>
 80073ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80073ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073f2:	fb93 f2f1 	sdiv	r2, r3, r1
 80073f6:	fb01 3312 	mls	r3, r1, r2, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf14      	ite	ne
 80073fe:	231c      	movne	r3, #28
 8007400:	231d      	moveq	r3, #29
 8007402:	68e2      	ldr	r2, [r4, #12]
 8007404:	2a00      	cmp	r2, #0
 8007406:	dc0f      	bgt.n	8007428 <validate_structure+0xfc>
 8007408:	4f34      	ldr	r7, [pc, #208]	; (80074dc <validate_structure+0x1b0>)
 800740a:	260b      	movs	r6, #11
 800740c:	2064      	movs	r0, #100	; 0x64
 800740e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007412:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007416:	f1bc 0f00 	cmp.w	ip, #0
 800741a:	dd14      	ble.n	8007446 <validate_structure+0x11a>
 800741c:	b003      	add	sp, #12
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007420:	231c      	movs	r3, #28
 8007422:	e7ee      	b.n	8007402 <validate_structure+0xd6>
 8007424:	231d      	movs	r3, #29
 8007426:	e7ec      	b.n	8007402 <validate_structure+0xd6>
 8007428:	4f2c      	ldr	r7, [pc, #176]	; (80074dc <validate_structure+0x1b0>)
 800742a:	f04f 0c00 	mov.w	ip, #0
 800742e:	2564      	movs	r5, #100	; 0x64
 8007430:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8007434:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007438:	2a01      	cmp	r2, #1
 800743a:	d02f      	beq.n	800749c <validate_structure+0x170>
 800743c:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007440:	4281      	cmp	r1, r0
 8007442:	dc2e      	bgt.n	80074a2 <validate_structure+0x176>
 8007444:	e7ea      	b.n	800741c <validate_structure+0xf0>
 8007446:	6921      	ldr	r1, [r4, #16]
 8007448:	3901      	subs	r1, #1
 800744a:	6121      	str	r1, [r4, #16]
 800744c:	3101      	adds	r1, #1
 800744e:	d114      	bne.n	800747a <validate_structure+0x14e>
 8007450:	6963      	ldr	r3, [r4, #20]
 8007452:	1e59      	subs	r1, r3, #1
 8007454:	078a      	lsls	r2, r1, #30
 8007456:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800745a:	d117      	bne.n	800748c <validate_structure+0x160>
 800745c:	fb91 f2f0 	sdiv	r2, r1, r0
 8007460:	fb00 1112 	mls	r1, r0, r2, r1
 8007464:	b9a1      	cbnz	r1, 8007490 <validate_structure+0x164>
 8007466:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800746a:	fb93 f2f5 	sdiv	r2, r3, r5
 800746e:	fb05 3312 	mls	r3, r5, r2, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf14      	ite	ne
 8007476:	231c      	movne	r3, #28
 8007478:	231d      	moveq	r3, #29
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	2a01      	cmp	r2, #1
 800747e:	bf14      	ite	ne
 8007480:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007484:	461a      	moveq	r2, r3
 8007486:	4462      	add	r2, ip
 8007488:	60e2      	str	r2, [r4, #12]
 800748a:	e7c2      	b.n	8007412 <validate_structure+0xe6>
 800748c:	231c      	movs	r3, #28
 800748e:	e7f4      	b.n	800747a <validate_structure+0x14e>
 8007490:	231d      	movs	r3, #29
 8007492:	e7f2      	b.n	800747a <validate_structure+0x14e>
 8007494:	231c      	movs	r3, #28
 8007496:	e7cd      	b.n	8007434 <validate_structure+0x108>
 8007498:	231d      	movs	r3, #29
 800749a:	e7cb      	b.n	8007434 <validate_structure+0x108>
 800749c:	428b      	cmp	r3, r1
 800749e:	dabd      	bge.n	800741c <validate_structure+0xf0>
 80074a0:	4618      	mov	r0, r3
 80074a2:	3201      	adds	r2, #1
 80074a4:	1a09      	subs	r1, r1, r0
 80074a6:	2a0c      	cmp	r2, #12
 80074a8:	60e1      	str	r1, [r4, #12]
 80074aa:	6122      	str	r2, [r4, #16]
 80074ac:	d1c2      	bne.n	8007434 <validate_structure+0x108>
 80074ae:	6963      	ldr	r3, [r4, #20]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	0791      	lsls	r1, r2, #30
 80074b4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80074b8:	d1ec      	bne.n	8007494 <validate_structure+0x168>
 80074ba:	fb92 f1f5 	sdiv	r1, r2, r5
 80074be:	fb05 2211 	mls	r2, r5, r1, r2
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d1e8      	bne.n	8007498 <validate_structure+0x16c>
 80074c6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80074ca:	fb93 f2f6 	sdiv	r2, r3, r6
 80074ce:	fb06 3312 	mls	r3, r6, r2, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf14      	ite	ne
 80074d6:	231c      	movne	r3, #28
 80074d8:	231d      	moveq	r3, #29
 80074da:	e7ab      	b.n	8007434 <validate_structure+0x108>
 80074dc:	0800b7e4 	.word	0x0800b7e4

080074e0 <mktime>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	b089      	sub	sp, #36	; 0x24
 80074e6:	4606      	mov	r6, r0
 80074e8:	f002 fb1c 	bl	8009b24 <__gettzinfo>
 80074ec:	4680      	mov	r8, r0
 80074ee:	4630      	mov	r0, r6
 80074f0:	f7ff ff1c 	bl	800732c <validate_structure>
 80074f4:	e9d6 3000 	ldrd	r3, r0, [r6]
 80074f8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80074fc:	fb0a 3a00 	mla	sl, sl, r0, r3
 8007500:	68b0      	ldr	r0, [r6, #8]
 8007502:	4abe      	ldr	r2, [pc, #760]	; (80077fc <mktime+0x31c>)
 8007504:	6975      	ldr	r5, [r6, #20]
 8007506:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800750a:	fb03 aa00 	mla	sl, r3, r0, sl
 800750e:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8007512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007516:	3c01      	subs	r4, #1
 8007518:	2b01      	cmp	r3, #1
 800751a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800751e:	4414      	add	r4, r2
 8007520:	dd11      	ble.n	8007546 <mktime+0x66>
 8007522:	07a9      	lsls	r1, r5, #30
 8007524:	d10f      	bne.n	8007546 <mktime+0x66>
 8007526:	2264      	movs	r2, #100	; 0x64
 8007528:	fb95 f3f2 	sdiv	r3, r5, r2
 800752c:	fb02 5313 	mls	r3, r2, r3, r5
 8007530:	b943      	cbnz	r3, 8007544 <mktime+0x64>
 8007532:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8007536:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800753a:	fb91 f3f2 	sdiv	r3, r1, r2
 800753e:	fb02 1313 	mls	r3, r2, r3, r1
 8007542:	b903      	cbnz	r3, 8007546 <mktime+0x66>
 8007544:	3401      	adds	r4, #1
 8007546:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 800754a:	3310      	adds	r3, #16
 800754c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007550:	4293      	cmp	r3, r2
 8007552:	61f4      	str	r4, [r6, #28]
 8007554:	f200 8179 	bhi.w	800784a <mktime+0x36a>
 8007558:	2d46      	cmp	r5, #70	; 0x46
 800755a:	f340 8084 	ble.w	8007666 <mktime+0x186>
 800755e:	2346      	movs	r3, #70	; 0x46
 8007560:	f240 176d 	movw	r7, #365	; 0x16d
 8007564:	2164      	movs	r1, #100	; 0x64
 8007566:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800756a:	079a      	lsls	r2, r3, #30
 800756c:	d175      	bne.n	800765a <mktime+0x17a>
 800756e:	fb93 f2f1 	sdiv	r2, r3, r1
 8007572:	fb01 3212 	mls	r2, r1, r2, r3
 8007576:	2a00      	cmp	r2, #0
 8007578:	d172      	bne.n	8007660 <mktime+0x180>
 800757a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800757e:	fb9c f2f0 	sdiv	r2, ip, r0
 8007582:	fb00 c212 	mls	r2, r0, r2, ip
 8007586:	2a00      	cmp	r2, #0
 8007588:	bf14      	ite	ne
 800758a:	463a      	movne	r2, r7
 800758c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007590:	3301      	adds	r3, #1
 8007592:	429d      	cmp	r5, r3
 8007594:	4414      	add	r4, r2
 8007596:	d1e8      	bne.n	800756a <mktime+0x8a>
 8007598:	4b99      	ldr	r3, [pc, #612]	; (8007800 <mktime+0x320>)
 800759a:	4363      	muls	r3, r4
 800759c:	eb1a 0103 	adds.w	r1, sl, r3
 80075a0:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 80075a4:	e9cd 1200 	strd	r1, r2, [sp]
 80075a8:	f001 f860 	bl	800866c <__tz_lock>
 80075ac:	f001 f860 	bl	8008670 <_tzset_unlocked>
 80075b0:	4b94      	ldr	r3, [pc, #592]	; (8007804 <mktime+0x324>)
 80075b2:	f8d3 9000 	ldr.w	r9, [r3]
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	d045      	beq.n	8007648 <mktime+0x168>
 80075bc:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80075c0:	6970      	ldr	r0, [r6, #20]
 80075c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075c6:	464f      	mov	r7, r9
 80075c8:	2f01      	cmp	r7, #1
 80075ca:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80075ce:	bfa8      	it	ge
 80075d0:	2701      	movge	r7, #1
 80075d2:	4283      	cmp	r3, r0
 80075d4:	f040 8089 	bne.w	80076ea <mktime+0x20a>
 80075d8:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80075dc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80075e0:	460a      	mov	r2, r1
 80075e2:	17cb      	asrs	r3, r1, #31
 80075e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075e8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80075ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075f0:	1a12      	subs	r2, r2, r0
 80075f2:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 80075f6:	4692      	mov	sl, r2
 80075f8:	469b      	mov	fp, r3
 80075fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075fe:	4552      	cmp	r2, sl
 8007600:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8007604:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8007608:	da76      	bge.n	80076f8 <mktime+0x218>
 800760a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800760e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007612:	ebb2 0a0a 	subs.w	sl, r2, sl
 8007616:	eb63 0b0b 	sbc.w	fp, r3, fp
 800761a:	f8d8 3000 	ldr.w	r3, [r8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d079      	beq.n	8007716 <mktime+0x236>
 8007622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007626:	4552      	cmp	r2, sl
 8007628:	eb73 030b 	sbcs.w	r3, r3, fp
 800762c:	db07      	blt.n	800763e <mktime+0x15e>
 800762e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007632:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007636:	4592      	cmp	sl, r2
 8007638:	eb7b 0303 	sbcs.w	r3, fp, r3
 800763c:	db71      	blt.n	8007722 <mktime+0x242>
 800763e:	f1b9 0f00 	cmp.w	r9, #0
 8007642:	f04f 0900 	mov.w	r9, #0
 8007646:	da71      	bge.n	800772c <mktime+0x24c>
 8007648:	e9dd ab00 	ldrd	sl, fp, [sp]
 800764c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007650:	eb1a 0a03 	adds.w	sl, sl, r3
 8007654:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8007658:	e0b4      	b.n	80077c4 <mktime+0x2e4>
 800765a:	f240 126d 	movw	r2, #365	; 0x16d
 800765e:	e797      	b.n	8007590 <mktime+0xb0>
 8007660:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007664:	e794      	b.n	8007590 <mktime+0xb0>
 8007666:	d097      	beq.n	8007598 <mktime+0xb8>
 8007668:	2345      	movs	r3, #69	; 0x45
 800766a:	f240 176d 	movw	r7, #365	; 0x16d
 800766e:	2164      	movs	r1, #100	; 0x64
 8007670:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007674:	e012      	b.n	800769c <mktime+0x1bc>
 8007676:	bb62      	cbnz	r2, 80076d2 <mktime+0x1f2>
 8007678:	fb93 f2f1 	sdiv	r2, r3, r1
 800767c:	fb01 3212 	mls	r2, r1, r2, r3
 8007680:	bb52      	cbnz	r2, 80076d8 <mktime+0x1f8>
 8007682:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8007686:	fb9c f2f0 	sdiv	r2, ip, r0
 800768a:	fb00 c212 	mls	r2, r0, r2, ip
 800768e:	2a00      	cmp	r2, #0
 8007690:	bf14      	ite	ne
 8007692:	463a      	movne	r2, r7
 8007694:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007698:	1aa4      	subs	r4, r4, r2
 800769a:	3b01      	subs	r3, #1
 800769c:	429d      	cmp	r5, r3
 800769e:	f003 0203 	and.w	r2, r3, #3
 80076a2:	dbe8      	blt.n	8007676 <mktime+0x196>
 80076a4:	b9da      	cbnz	r2, 80076de <mktime+0x1fe>
 80076a6:	2264      	movs	r2, #100	; 0x64
 80076a8:	fb95 f3f2 	sdiv	r3, r5, r2
 80076ac:	fb02 5313 	mls	r3, r2, r3, r5
 80076b0:	b9c3      	cbnz	r3, 80076e4 <mktime+0x204>
 80076b2:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80076b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80076ba:	fb91 f3f2 	sdiv	r3, r1, r2
 80076be:	fb02 1313 	mls	r3, r2, r3, r1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f240 136d 	movw	r3, #365	; 0x16d
 80076c8:	bf08      	it	eq
 80076ca:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80076ce:	1ae4      	subs	r4, r4, r3
 80076d0:	e762      	b.n	8007598 <mktime+0xb8>
 80076d2:	f240 126d 	movw	r2, #365	; 0x16d
 80076d6:	e7df      	b.n	8007698 <mktime+0x1b8>
 80076d8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80076dc:	e7dc      	b.n	8007698 <mktime+0x1b8>
 80076de:	f240 136d 	movw	r3, #365	; 0x16d
 80076e2:	e7f4      	b.n	80076ce <mktime+0x1ee>
 80076e4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80076e8:	e7f1      	b.n	80076ce <mktime+0x1ee>
 80076ea:	f000 ff17 	bl	800851c <__tzcalc_limits>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f47f af72 	bne.w	80075d8 <mktime+0xf8>
 80076f4:	46b9      	mov	r9, r7
 80076f6:	e057      	b.n	80077a8 <mktime+0x2c8>
 80076f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80076fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007700:	ebb2 020a 	subs.w	r2, r2, sl
 8007704:	eb63 030b 	sbc.w	r3, r3, fp
 8007708:	e9dd ab00 	ldrd	sl, fp, [sp]
 800770c:	4592      	cmp	sl, r2
 800770e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007712:	dbef      	blt.n	80076f4 <mktime+0x214>
 8007714:	e779      	b.n	800760a <mktime+0x12a>
 8007716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771a:	4552      	cmp	r2, sl
 800771c:	eb73 030b 	sbcs.w	r3, r3, fp
 8007720:	db85      	blt.n	800762e <mktime+0x14e>
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	db43      	blt.n	80077b0 <mktime+0x2d0>
 8007728:	f04f 0901 	mov.w	r9, #1
 800772c:	ea87 0709 	eor.w	r7, r7, r9
 8007730:	2f01      	cmp	r7, #1
 8007732:	d139      	bne.n	80077a8 <mktime+0x2c8>
 8007734:	1a40      	subs	r0, r0, r1
 8007736:	f1b9 0f00 	cmp.w	r9, #0
 800773a:	d100      	bne.n	800773e <mktime+0x25e>
 800773c:	4240      	negs	r0, r0
 800773e:	6833      	ldr	r3, [r6, #0]
 8007740:	4403      	add	r3, r0
 8007742:	6033      	str	r3, [r6, #0]
 8007744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007748:	1812      	adds	r2, r2, r0
 800774a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800774e:	e9cd 2300 	strd	r2, r3, [sp]
 8007752:	4630      	mov	r0, r6
 8007754:	68f2      	ldr	r2, [r6, #12]
 8007756:	9202      	str	r2, [sp, #8]
 8007758:	f7ff fde8 	bl	800732c <validate_structure>
 800775c:	68f3      	ldr	r3, [r6, #12]
 800775e:	9a02      	ldr	r2, [sp, #8]
 8007760:	1a9b      	subs	r3, r3, r2
 8007762:	d021      	beq.n	80077a8 <mktime+0x2c8>
 8007764:	2b01      	cmp	r3, #1
 8007766:	dc40      	bgt.n	80077ea <mktime+0x30a>
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	bfa8      	it	ge
 800776e:	461f      	movge	r7, r3
 8007770:	69f3      	ldr	r3, [r6, #28]
 8007772:	443c      	add	r4, r7
 8007774:	18ff      	adds	r7, r7, r3
 8007776:	d547      	bpl.n	8007808 <mktime+0x328>
 8007778:	1e6a      	subs	r2, r5, #1
 800777a:	0791      	lsls	r1, r2, #30
 800777c:	d138      	bne.n	80077f0 <mktime+0x310>
 800777e:	2164      	movs	r1, #100	; 0x64
 8007780:	fb92 f3f1 	sdiv	r3, r2, r1
 8007784:	fb01 2313 	mls	r3, r1, r3, r2
 8007788:	bbab      	cbnz	r3, 80077f6 <mktime+0x316>
 800778a:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800778e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007792:	fb95 f3f2 	sdiv	r3, r5, r2
 8007796:	fb02 5513 	mls	r5, r2, r3, r5
 800779a:	2d00      	cmp	r5, #0
 800779c:	f240 136d 	movw	r3, #365	; 0x16d
 80077a0:	bf18      	it	ne
 80077a2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80077a6:	61f3      	str	r3, [r6, #28]
 80077a8:	f1b9 0f01 	cmp.w	r9, #1
 80077ac:	f47f af4c 	bne.w	8007648 <mktime+0x168>
 80077b0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80077b4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80077b8:	eb1a 0a03 	adds.w	sl, sl, r3
 80077bc:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80077c0:	f04f 0901 	mov.w	r9, #1
 80077c4:	f000 ff53 	bl	800866e <__tz_unlock>
 80077c8:	3404      	adds	r4, #4
 80077ca:	2307      	movs	r3, #7
 80077cc:	fb94 f3f3 	sdiv	r3, r4, r3
 80077d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80077d4:	1ae4      	subs	r4, r4, r3
 80077d6:	bf48      	it	mi
 80077d8:	3407      	addmi	r4, #7
 80077da:	f8c6 9020 	str.w	r9, [r6, #32]
 80077de:	61b4      	str	r4, [r6, #24]
 80077e0:	4650      	mov	r0, sl
 80077e2:	4659      	mov	r1, fp
 80077e4:	b009      	add	sp, #36	; 0x24
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ea:	f04f 37ff 	mov.w	r7, #4294967295
 80077ee:	e7bf      	b.n	8007770 <mktime+0x290>
 80077f0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80077f4:	e7d7      	b.n	80077a6 <mktime+0x2c6>
 80077f6:	f240 136d 	movw	r3, #365	; 0x16d
 80077fa:	e7d4      	b.n	80077a6 <mktime+0x2c6>
 80077fc:	0800b814 	.word	0x0800b814
 8007800:	00015180 	.word	0x00015180
 8007804:	20000530 	.word	0x20000530
 8007808:	07ab      	lsls	r3, r5, #30
 800780a:	d118      	bne.n	800783e <mktime+0x35e>
 800780c:	2264      	movs	r2, #100	; 0x64
 800780e:	fb95 f3f2 	sdiv	r3, r5, r2
 8007812:	fb02 5313 	mls	r3, r2, r3, r5
 8007816:	b9ab      	cbnz	r3, 8007844 <mktime+0x364>
 8007818:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800781c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007820:	fb95 f3f2 	sdiv	r3, r5, r2
 8007824:	fb02 5513 	mls	r5, r2, r3, r5
 8007828:	2d00      	cmp	r5, #0
 800782a:	f240 136d 	movw	r3, #365	; 0x16d
 800782e:	bf08      	it	eq
 8007830:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007834:	429f      	cmp	r7, r3
 8007836:	bfa8      	it	ge
 8007838:	1aff      	subge	r7, r7, r3
 800783a:	61f7      	str	r7, [r6, #28]
 800783c:	e7b4      	b.n	80077a8 <mktime+0x2c8>
 800783e:	f240 136d 	movw	r3, #365	; 0x16d
 8007842:	e7f7      	b.n	8007834 <mktime+0x354>
 8007844:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007848:	e7f4      	b.n	8007834 <mktime+0x354>
 800784a:	f04f 3aff 	mov.w	sl, #4294967295
 800784e:	f04f 3bff 	mov.w	fp, #4294967295
 8007852:	e7c5      	b.n	80077e0 <mktime+0x300>

08007854 <__cvt>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	ec55 4b10 	vmov	r4, r5, d0
 800785c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800785e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007862:	2d00      	cmp	r5, #0
 8007864:	460e      	mov	r6, r1
 8007866:	4691      	mov	r9, r2
 8007868:	4619      	mov	r1, r3
 800786a:	bfb8      	it	lt
 800786c:	4622      	movlt	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f027 0720 	bic.w	r7, r7, #32
 8007874:	bfbb      	ittet	lt
 8007876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800787a:	461d      	movlt	r5, r3
 800787c:	2300      	movge	r3, #0
 800787e:	232d      	movlt	r3, #45	; 0x2d
 8007880:	bfb8      	it	lt
 8007882:	4614      	movlt	r4, r2
 8007884:	2f46      	cmp	r7, #70	; 0x46
 8007886:	700b      	strb	r3, [r1, #0]
 8007888:	d004      	beq.n	8007894 <__cvt+0x40>
 800788a:	2f45      	cmp	r7, #69	; 0x45
 800788c:	d100      	bne.n	8007890 <__cvt+0x3c>
 800788e:	3601      	adds	r6, #1
 8007890:	2102      	movs	r1, #2
 8007892:	e000      	b.n	8007896 <__cvt+0x42>
 8007894:	2103      	movs	r1, #3
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	ab02      	add	r3, sp, #8
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4632      	mov	r2, r6
 80078a0:	4653      	mov	r3, sl
 80078a2:	ec45 4b10 	vmov	d0, r4, r5
 80078a6:	f001 f9c7 	bl	8008c38 <_dtoa_r>
 80078aa:	2f47      	cmp	r7, #71	; 0x47
 80078ac:	4680      	mov	r8, r0
 80078ae:	d102      	bne.n	80078b6 <__cvt+0x62>
 80078b0:	f019 0f01 	tst.w	r9, #1
 80078b4:	d026      	beq.n	8007904 <__cvt+0xb0>
 80078b6:	2f46      	cmp	r7, #70	; 0x46
 80078b8:	eb08 0906 	add.w	r9, r8, r6
 80078bc:	d111      	bne.n	80078e2 <__cvt+0x8e>
 80078be:	f898 3000 	ldrb.w	r3, [r8]
 80078c2:	2b30      	cmp	r3, #48	; 0x30
 80078c4:	d10a      	bne.n	80078dc <__cvt+0x88>
 80078c6:	2200      	movs	r2, #0
 80078c8:	2300      	movs	r3, #0
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f9 f92d 	bl	8000b2c <__aeabi_dcmpeq>
 80078d2:	b918      	cbnz	r0, 80078dc <__cvt+0x88>
 80078d4:	f1c6 0601 	rsb	r6, r6, #1
 80078d8:	f8ca 6000 	str.w	r6, [sl]
 80078dc:	f8da 3000 	ldr.w	r3, [sl]
 80078e0:	4499      	add	r9, r3
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7f9 f91f 	bl	8000b2c <__aeabi_dcmpeq>
 80078ee:	b938      	cbnz	r0, 8007900 <__cvt+0xac>
 80078f0:	2230      	movs	r2, #48	; 0x30
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	454b      	cmp	r3, r9
 80078f6:	d205      	bcs.n	8007904 <__cvt+0xb0>
 80078f8:	1c59      	adds	r1, r3, #1
 80078fa:	9103      	str	r1, [sp, #12]
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e7f8      	b.n	80078f2 <__cvt+0x9e>
 8007900:	f8cd 900c 	str.w	r9, [sp, #12]
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007908:	eba3 0308 	sub.w	r3, r3, r8
 800790c:	4640      	mov	r0, r8
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	b004      	add	sp, #16
 8007912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007916 <__exponent>:
 8007916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007918:	2900      	cmp	r1, #0
 800791a:	4604      	mov	r4, r0
 800791c:	bfba      	itte	lt
 800791e:	4249      	neglt	r1, r1
 8007920:	232d      	movlt	r3, #45	; 0x2d
 8007922:	232b      	movge	r3, #43	; 0x2b
 8007924:	2909      	cmp	r1, #9
 8007926:	f804 2b02 	strb.w	r2, [r4], #2
 800792a:	7043      	strb	r3, [r0, #1]
 800792c:	dd20      	ble.n	8007970 <__exponent+0x5a>
 800792e:	f10d 0307 	add.w	r3, sp, #7
 8007932:	461f      	mov	r7, r3
 8007934:	260a      	movs	r6, #10
 8007936:	fb91 f5f6 	sdiv	r5, r1, r6
 800793a:	fb06 1115 	mls	r1, r6, r5, r1
 800793e:	3130      	adds	r1, #48	; 0x30
 8007940:	2d09      	cmp	r5, #9
 8007942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007946:	f103 32ff 	add.w	r2, r3, #4294967295
 800794a:	4629      	mov	r1, r5
 800794c:	dc09      	bgt.n	8007962 <__exponent+0x4c>
 800794e:	3130      	adds	r1, #48	; 0x30
 8007950:	3b02      	subs	r3, #2
 8007952:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007956:	42bb      	cmp	r3, r7
 8007958:	4622      	mov	r2, r4
 800795a:	d304      	bcc.n	8007966 <__exponent+0x50>
 800795c:	1a10      	subs	r0, r2, r0
 800795e:	b003      	add	sp, #12
 8007960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007962:	4613      	mov	r3, r2
 8007964:	e7e7      	b.n	8007936 <__exponent+0x20>
 8007966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796a:	f804 2b01 	strb.w	r2, [r4], #1
 800796e:	e7f2      	b.n	8007956 <__exponent+0x40>
 8007970:	2330      	movs	r3, #48	; 0x30
 8007972:	4419      	add	r1, r3
 8007974:	7083      	strb	r3, [r0, #2]
 8007976:	1d02      	adds	r2, r0, #4
 8007978:	70c1      	strb	r1, [r0, #3]
 800797a:	e7ef      	b.n	800795c <__exponent+0x46>

0800797c <_printf_float>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	b08d      	sub	sp, #52	; 0x34
 8007982:	460c      	mov	r4, r1
 8007984:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007988:	4616      	mov	r6, r2
 800798a:	461f      	mov	r7, r3
 800798c:	4605      	mov	r5, r0
 800798e:	f002 f8df 	bl	8009b50 <_localeconv_r>
 8007992:	6803      	ldr	r3, [r0, #0]
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	4618      	mov	r0, r3
 8007998:	f7f8 fc42 	bl	8000220 <strlen>
 800799c:	2300      	movs	r3, #0
 800799e:	930a      	str	r3, [sp, #40]	; 0x28
 80079a0:	f8d8 3000 	ldr.w	r3, [r8]
 80079a4:	9005      	str	r0, [sp, #20]
 80079a6:	3307      	adds	r3, #7
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	f103 0208 	add.w	r2, r3, #8
 80079b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079b4:	f8d4 b000 	ldr.w	fp, [r4]
 80079b8:	f8c8 2000 	str.w	r2, [r8]
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	4ba7      	ldr	r3, [pc, #668]	; (8007c74 <_printf_float+0x2f8>)
 80079d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079dc:	f7f9 f8d8 	bl	8000b90 <__aeabi_dcmpun>
 80079e0:	bb70      	cbnz	r0, 8007a40 <_printf_float+0xc4>
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	4ba3      	ldr	r3, [pc, #652]	; (8007c74 <_printf_float+0x2f8>)
 80079e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ec:	f7f9 f8b2 	bl	8000b54 <__aeabi_dcmple>
 80079f0:	bb30      	cbnz	r0, 8007a40 <_printf_float+0xc4>
 80079f2:	2200      	movs	r2, #0
 80079f4:	2300      	movs	r3, #0
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f9 f8a1 	bl	8000b40 <__aeabi_dcmplt>
 80079fe:	b110      	cbz	r0, 8007a06 <_printf_float+0x8a>
 8007a00:	232d      	movs	r3, #45	; 0x2d
 8007a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a06:	4a9c      	ldr	r2, [pc, #624]	; (8007c78 <_printf_float+0x2fc>)
 8007a08:	4b9c      	ldr	r3, [pc, #624]	; (8007c7c <_printf_float+0x300>)
 8007a0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a0e:	bf8c      	ite	hi
 8007a10:	4690      	movhi	r8, r2
 8007a12:	4698      	movls	r8, r3
 8007a14:	2303      	movs	r3, #3
 8007a16:	f02b 0204 	bic.w	r2, fp, #4
 8007a1a:	6123      	str	r3, [r4, #16]
 8007a1c:	6022      	str	r2, [r4, #0]
 8007a1e:	f04f 0900 	mov.w	r9, #0
 8007a22:	9700      	str	r7, [sp, #0]
 8007a24:	4633      	mov	r3, r6
 8007a26:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 f9e6 	bl	8007dfc <_printf_common>
 8007a30:	3001      	adds	r0, #1
 8007a32:	f040 808d 	bne.w	8007b50 <_printf_float+0x1d4>
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3a:	b00d      	add	sp, #52	; 0x34
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	4642      	mov	r2, r8
 8007a42:	464b      	mov	r3, r9
 8007a44:	4640      	mov	r0, r8
 8007a46:	4649      	mov	r1, r9
 8007a48:	f7f9 f8a2 	bl	8000b90 <__aeabi_dcmpun>
 8007a4c:	b110      	cbz	r0, 8007a54 <_printf_float+0xd8>
 8007a4e:	4a8c      	ldr	r2, [pc, #560]	; (8007c80 <_printf_float+0x304>)
 8007a50:	4b8c      	ldr	r3, [pc, #560]	; (8007c84 <_printf_float+0x308>)
 8007a52:	e7da      	b.n	8007a0a <_printf_float+0x8e>
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	1c4b      	adds	r3, r1, #1
 8007a58:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a5c:	a80a      	add	r0, sp, #40	; 0x28
 8007a5e:	d13e      	bne.n	8007ade <_printf_float+0x162>
 8007a60:	2306      	movs	r3, #6
 8007a62:	6063      	str	r3, [r4, #4]
 8007a64:	2300      	movs	r3, #0
 8007a66:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a6a:	ab09      	add	r3, sp, #36	; 0x24
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	ec49 8b10 	vmov	d0, r8, r9
 8007a72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	f8cd a004 	str.w	sl, [sp, #4]
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f7ff fee8 	bl	8007854 <__cvt>
 8007a84:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007a88:	2b47      	cmp	r3, #71	; 0x47
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	d109      	bne.n	8007aa2 <_printf_float+0x126>
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	1cd8      	adds	r0, r3, #3
 8007a92:	db02      	blt.n	8007a9a <_printf_float+0x11e>
 8007a94:	6862      	ldr	r2, [r4, #4]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	dd47      	ble.n	8007b2a <_printf_float+0x1ae>
 8007a9a:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a9e:	fa5f fa8a 	uxtb.w	sl, sl
 8007aa2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aa8:	d824      	bhi.n	8007af4 <_printf_float+0x178>
 8007aaa:	3901      	subs	r1, #1
 8007aac:	4652      	mov	r2, sl
 8007aae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ab2:	9109      	str	r1, [sp, #36]	; 0x24
 8007ab4:	f7ff ff2f 	bl	8007916 <__exponent>
 8007ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aba:	1813      	adds	r3, r2, r0
 8007abc:	2a01      	cmp	r2, #1
 8007abe:	4681      	mov	r9, r0
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	dc02      	bgt.n	8007aca <_printf_float+0x14e>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	07d1      	lsls	r1, r2, #31
 8007ac8:	d501      	bpl.n	8007ace <_printf_float+0x152>
 8007aca:	3301      	adds	r3, #1
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0a5      	beq.n	8007a22 <_printf_float+0xa6>
 8007ad6:	232d      	movs	r3, #45	; 0x2d
 8007ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007adc:	e7a1      	b.n	8007a22 <_printf_float+0xa6>
 8007ade:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ae2:	f000 8177 	beq.w	8007dd4 <_printf_float+0x458>
 8007ae6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007aea:	d1bb      	bne.n	8007a64 <_printf_float+0xe8>
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d1b9      	bne.n	8007a64 <_printf_float+0xe8>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e7b6      	b.n	8007a62 <_printf_float+0xe6>
 8007af4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007af8:	d119      	bne.n	8007b2e <_printf_float+0x1b2>
 8007afa:	2900      	cmp	r1, #0
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	dd0c      	ble.n	8007b1a <_printf_float+0x19e>
 8007b00:	6121      	str	r1, [r4, #16]
 8007b02:	b913      	cbnz	r3, 8007b0a <_printf_float+0x18e>
 8007b04:	6822      	ldr	r2, [r4, #0]
 8007b06:	07d2      	lsls	r2, r2, #31
 8007b08:	d502      	bpl.n	8007b10 <_printf_float+0x194>
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	440b      	add	r3, r1
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b14:	f04f 0900 	mov.w	r9, #0
 8007b18:	e7d9      	b.n	8007ace <_printf_float+0x152>
 8007b1a:	b913      	cbnz	r3, 8007b22 <_printf_float+0x1a6>
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	07d0      	lsls	r0, r2, #31
 8007b20:	d501      	bpl.n	8007b26 <_printf_float+0x1aa>
 8007b22:	3302      	adds	r3, #2
 8007b24:	e7f3      	b.n	8007b0e <_printf_float+0x192>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e7f1      	b.n	8007b0e <_printf_float+0x192>
 8007b2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b32:	4293      	cmp	r3, r2
 8007b34:	db05      	blt.n	8007b42 <_printf_float+0x1c6>
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	07d1      	lsls	r1, r2, #31
 8007b3c:	d5e8      	bpl.n	8007b10 <_printf_float+0x194>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	e7e5      	b.n	8007b0e <_printf_float+0x192>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bfd4      	ite	le
 8007b46:	f1c3 0302 	rsble	r3, r3, #2
 8007b4a:	2301      	movgt	r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	e7de      	b.n	8007b0e <_printf_float+0x192>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	055a      	lsls	r2, r3, #21
 8007b54:	d407      	bmi.n	8007b66 <_printf_float+0x1ea>
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	4642      	mov	r2, r8
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b8      	blx	r7
 8007b60:	3001      	adds	r0, #1
 8007b62:	d12b      	bne.n	8007bbc <_printf_float+0x240>
 8007b64:	e767      	b.n	8007a36 <_printf_float+0xba>
 8007b66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b6a:	f240 80dc 	bls.w	8007d26 <_printf_float+0x3aa>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b76:	f7f8 ffd9 	bl	8000b2c <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d033      	beq.n	8007be6 <_printf_float+0x26a>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4a41      	ldr	r2, [pc, #260]	; (8007c88 <_printf_float+0x30c>)
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f af54 	beq.w	8007a36 <_printf_float+0xba>
 8007b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b92:	429a      	cmp	r2, r3
 8007b94:	db02      	blt.n	8007b9c <_printf_float+0x220>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	07d8      	lsls	r0, r3, #31
 8007b9a:	d50f      	bpl.n	8007bbc <_printf_float+0x240>
 8007b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af45 	beq.w	8007a36 <_printf_float+0xba>
 8007bac:	f04f 0800 	mov.w	r8, #0
 8007bb0:	f104 091a 	add.w	r9, r4, #26
 8007bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4543      	cmp	r3, r8
 8007bba:	dc09      	bgt.n	8007bd0 <_printf_float+0x254>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	079b      	lsls	r3, r3, #30
 8007bc0:	f100 8103 	bmi.w	8007dca <_printf_float+0x44e>
 8007bc4:	68e0      	ldr	r0, [r4, #12]
 8007bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc8:	4298      	cmp	r0, r3
 8007bca:	bfb8      	it	lt
 8007bcc:	4618      	movlt	r0, r3
 8007bce:	e734      	b.n	8007a3a <_printf_float+0xbe>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	464a      	mov	r2, r9
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af2b 	beq.w	8007a36 <_printf_float+0xba>
 8007be0:	f108 0801 	add.w	r8, r8, #1
 8007be4:	e7e6      	b.n	8007bb4 <_printf_float+0x238>
 8007be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dc2b      	bgt.n	8007c44 <_printf_float+0x2c8>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <_printf_float+0x30c>)
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f af1d 	beq.w	8007a36 <_printf_float+0xba>
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	b923      	cbnz	r3, 8007c0a <_printf_float+0x28e>
 8007c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c02:	b913      	cbnz	r3, 8007c0a <_printf_float+0x28e>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	d5d8      	bpl.n	8007bbc <_printf_float+0x240>
 8007c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f af0e 	beq.w	8007a36 <_printf_float+0xba>
 8007c1a:	f04f 0900 	mov.w	r9, #0
 8007c1e:	f104 0a1a 	add.w	sl, r4, #26
 8007c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c24:	425b      	negs	r3, r3
 8007c26:	454b      	cmp	r3, r9
 8007c28:	dc01      	bgt.n	8007c2e <_printf_float+0x2b2>
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2c:	e794      	b.n	8007b58 <_printf_float+0x1dc>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f aefc 	beq.w	8007a36 <_printf_float+0xba>
 8007c3e:	f109 0901 	add.w	r9, r9, #1
 8007c42:	e7ee      	b.n	8007c22 <_printf_float+0x2a6>
 8007c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bfa8      	it	ge
 8007c4c:	461a      	movge	r2, r3
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	4691      	mov	r9, r2
 8007c52:	dd07      	ble.n	8007c64 <_printf_float+0x2e8>
 8007c54:	4613      	mov	r3, r2
 8007c56:	4631      	mov	r1, r6
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f aee9 	beq.w	8007a36 <_printf_float+0xba>
 8007c64:	f104 031a 	add.w	r3, r4, #26
 8007c68:	f04f 0b00 	mov.w	fp, #0
 8007c6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c70:	9306      	str	r3, [sp, #24]
 8007c72:	e015      	b.n	8007ca0 <_printf_float+0x324>
 8007c74:	7fefffff 	.word	0x7fefffff
 8007c78:	0800b848 	.word	0x0800b848
 8007c7c:	0800b844 	.word	0x0800b844
 8007c80:	0800b850 	.word	0x0800b850
 8007c84:	0800b84c 	.word	0x0800b84c
 8007c88:	0800bbb4 	.word	0x0800bbb4
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	9a06      	ldr	r2, [sp, #24]
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f aecd 	beq.w	8007a36 <_printf_float+0xba>
 8007c9c:	f10b 0b01 	add.w	fp, fp, #1
 8007ca0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ca4:	ebaa 0309 	sub.w	r3, sl, r9
 8007ca8:	455b      	cmp	r3, fp
 8007caa:	dcef      	bgt.n	8007c8c <_printf_float+0x310>
 8007cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	44d0      	add	r8, sl
 8007cb4:	db15      	blt.n	8007ce2 <_printf_float+0x366>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	d412      	bmi.n	8007ce2 <_printf_float+0x366>
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc0:	eba3 020a 	sub.w	r2, r3, sl
 8007cc4:	eba3 0a01 	sub.w	sl, r3, r1
 8007cc8:	4592      	cmp	sl, r2
 8007cca:	bfa8      	it	ge
 8007ccc:	4692      	movge	sl, r2
 8007cce:	f1ba 0f00 	cmp.w	sl, #0
 8007cd2:	dc0e      	bgt.n	8007cf2 <_printf_float+0x376>
 8007cd4:	f04f 0800 	mov.w	r8, #0
 8007cd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cdc:	f104 091a 	add.w	r9, r4, #26
 8007ce0:	e019      	b.n	8007d16 <_printf_float+0x39a>
 8007ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1e5      	bne.n	8007cbc <_printf_float+0x340>
 8007cf0:	e6a1      	b.n	8007a36 <_printf_float+0xba>
 8007cf2:	4653      	mov	r3, sl
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d1e9      	bne.n	8007cd4 <_printf_float+0x358>
 8007d00:	e699      	b.n	8007a36 <_printf_float+0xba>
 8007d02:	2301      	movs	r3, #1
 8007d04:	464a      	mov	r2, r9
 8007d06:	4631      	mov	r1, r6
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b8      	blx	r7
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f43f ae92 	beq.w	8007a36 <_printf_float+0xba>
 8007d12:	f108 0801 	add.w	r8, r8, #1
 8007d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	eba3 030a 	sub.w	r3, r3, sl
 8007d20:	4543      	cmp	r3, r8
 8007d22:	dcee      	bgt.n	8007d02 <_printf_float+0x386>
 8007d24:	e74a      	b.n	8007bbc <_printf_float+0x240>
 8007d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d28:	2a01      	cmp	r2, #1
 8007d2a:	dc01      	bgt.n	8007d30 <_printf_float+0x3b4>
 8007d2c:	07db      	lsls	r3, r3, #31
 8007d2e:	d53a      	bpl.n	8007da6 <_printf_float+0x42a>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4642      	mov	r2, r8
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b8      	blx	r7
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f43f ae7b 	beq.w	8007a36 <_printf_float+0xba>
 8007d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f108 0801 	add.w	r8, r8, #1
 8007d50:	f43f ae71 	beq.w	8007a36 <_printf_float+0xba>
 8007d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d56:	2200      	movs	r2, #0
 8007d58:	f103 3aff 	add.w	sl, r3, #4294967295
 8007d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d60:	2300      	movs	r3, #0
 8007d62:	f7f8 fee3 	bl	8000b2c <__aeabi_dcmpeq>
 8007d66:	b9c8      	cbnz	r0, 8007d9c <_printf_float+0x420>
 8007d68:	4653      	mov	r3, sl
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	d10e      	bne.n	8007d94 <_printf_float+0x418>
 8007d76:	e65e      	b.n	8007a36 <_printf_float+0xba>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4652      	mov	r2, sl
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f ae57 	beq.w	8007a36 <_printf_float+0xba>
 8007d88:	f108 0801 	add.w	r8, r8, #1
 8007d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4543      	cmp	r3, r8
 8007d92:	dcf1      	bgt.n	8007d78 <_printf_float+0x3fc>
 8007d94:	464b      	mov	r3, r9
 8007d96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d9a:	e6de      	b.n	8007b5a <_printf_float+0x1de>
 8007d9c:	f04f 0800 	mov.w	r8, #0
 8007da0:	f104 0a1a 	add.w	sl, r4, #26
 8007da4:	e7f2      	b.n	8007d8c <_printf_float+0x410>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7df      	b.n	8007d6a <_printf_float+0x3ee>
 8007daa:	2301      	movs	r3, #1
 8007dac:	464a      	mov	r2, r9
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	f43f ae3e 	beq.w	8007a36 <_printf_float+0xba>
 8007dba:	f108 0801 	add.w	r8, r8, #1
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	4543      	cmp	r3, r8
 8007dc6:	dcf0      	bgt.n	8007daa <_printf_float+0x42e>
 8007dc8:	e6fc      	b.n	8007bc4 <_printf_float+0x248>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	f104 0919 	add.w	r9, r4, #25
 8007dd2:	e7f4      	b.n	8007dbe <_printf_float+0x442>
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	f43f ae8b 	beq.w	8007af0 <_printf_float+0x174>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007de0:	ab09      	add	r3, sp, #36	; 0x24
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	ec49 8b10 	vmov	d0, r8, r9
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	f8cd a004 	str.w	sl, [sp, #4]
 8007dee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7ff fd2e 	bl	8007854 <__cvt>
 8007df8:	4680      	mov	r8, r0
 8007dfa:	e648      	b.n	8007a8e <_printf_float+0x112>

08007dfc <_printf_common>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	4691      	mov	r9, r2
 8007e02:	461f      	mov	r7, r3
 8007e04:	688a      	ldr	r2, [r1, #8]
 8007e06:	690b      	ldr	r3, [r1, #16]
 8007e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	bfb8      	it	lt
 8007e10:	4613      	movlt	r3, r2
 8007e12:	f8c9 3000 	str.w	r3, [r9]
 8007e16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	b112      	cbz	r2, 8007e26 <_printf_common+0x2a>
 8007e20:	3301      	adds	r3, #1
 8007e22:	f8c9 3000 	str.w	r3, [r9]
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	0699      	lsls	r1, r3, #26
 8007e2a:	bf42      	ittt	mi
 8007e2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e30:	3302      	addmi	r3, #2
 8007e32:	f8c9 3000 	strmi.w	r3, [r9]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d107      	bne.n	8007e4e <_printf_common+0x52>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	f8d9 2000 	ldr.w	r2, [r9]
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	42ab      	cmp	r3, r5
 8007e4c:	dc28      	bgt.n	8007ea0 <_printf_common+0xa4>
 8007e4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	3300      	adds	r3, #0
 8007e56:	bf18      	it	ne
 8007e58:	2301      	movne	r3, #1
 8007e5a:	0692      	lsls	r2, r2, #26
 8007e5c:	d42d      	bmi.n	8007eba <_printf_common+0xbe>
 8007e5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e62:	4639      	mov	r1, r7
 8007e64:	4630      	mov	r0, r6
 8007e66:	47c0      	blx	r8
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d020      	beq.n	8007eae <_printf_common+0xb2>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	68e5      	ldr	r5, [r4, #12]
 8007e70:	f8d9 2000 	ldr.w	r2, [r9]
 8007e74:	f003 0306 	and.w	r3, r3, #6
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	bf08      	it	eq
 8007e7c:	1aad      	subeq	r5, r5, r2
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	6922      	ldr	r2, [r4, #16]
 8007e82:	bf0c      	ite	eq
 8007e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e88:	2500      	movne	r5, #0
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	bfc4      	itt	gt
 8007e8e:	1a9b      	subgt	r3, r3, r2
 8007e90:	18ed      	addgt	r5, r5, r3
 8007e92:	f04f 0900 	mov.w	r9, #0
 8007e96:	341a      	adds	r4, #26
 8007e98:	454d      	cmp	r5, r9
 8007e9a:	d11a      	bne.n	8007ed2 <_printf_common+0xd6>
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e008      	b.n	8007eb2 <_printf_common+0xb6>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d103      	bne.n	8007eb6 <_printf_common+0xba>
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	e7c3      	b.n	8007e42 <_printf_common+0x46>
 8007eba:	18e1      	adds	r1, r4, r3
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	2030      	movs	r0, #48	; 0x30
 8007ec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ec4:	4422      	add	r2, r4
 8007ec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ece:	3302      	adds	r3, #2
 8007ed0:	e7c5      	b.n	8007e5e <_printf_common+0x62>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	4630      	mov	r0, r6
 8007eda:	47c0      	blx	r8
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0e6      	beq.n	8007eae <_printf_common+0xb2>
 8007ee0:	f109 0901 	add.w	r9, r9, #1
 8007ee4:	e7d8      	b.n	8007e98 <_printf_common+0x9c>
	...

08007ee8 <_printf_i>:
 8007ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	7e09      	ldrb	r1, [r1, #24]
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	296e      	cmp	r1, #110	; 0x6e
 8007ef8:	4617      	mov	r7, r2
 8007efa:	4606      	mov	r6, r0
 8007efc:	4698      	mov	r8, r3
 8007efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f00:	f000 80b3 	beq.w	800806a <_printf_i+0x182>
 8007f04:	d822      	bhi.n	8007f4c <_printf_i+0x64>
 8007f06:	2963      	cmp	r1, #99	; 0x63
 8007f08:	d036      	beq.n	8007f78 <_printf_i+0x90>
 8007f0a:	d80a      	bhi.n	8007f22 <_printf_i+0x3a>
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	f000 80b9 	beq.w	8008084 <_printf_i+0x19c>
 8007f12:	2958      	cmp	r1, #88	; 0x58
 8007f14:	f000 8083 	beq.w	800801e <_printf_i+0x136>
 8007f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f20:	e032      	b.n	8007f88 <_printf_i+0xa0>
 8007f22:	2964      	cmp	r1, #100	; 0x64
 8007f24:	d001      	beq.n	8007f2a <_printf_i+0x42>
 8007f26:	2969      	cmp	r1, #105	; 0x69
 8007f28:	d1f6      	bne.n	8007f18 <_printf_i+0x30>
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	6813      	ldr	r3, [r2, #0]
 8007f2e:	0605      	lsls	r5, r0, #24
 8007f30:	f103 0104 	add.w	r1, r3, #4
 8007f34:	d52a      	bpl.n	8007f8c <_printf_i+0xa4>
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da03      	bge.n	8007f46 <_printf_i+0x5e>
 8007f3e:	222d      	movs	r2, #45	; 0x2d
 8007f40:	425b      	negs	r3, r3
 8007f42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f46:	486f      	ldr	r0, [pc, #444]	; (8008104 <_printf_i+0x21c>)
 8007f48:	220a      	movs	r2, #10
 8007f4a:	e039      	b.n	8007fc0 <_printf_i+0xd8>
 8007f4c:	2973      	cmp	r1, #115	; 0x73
 8007f4e:	f000 809d 	beq.w	800808c <_printf_i+0x1a4>
 8007f52:	d808      	bhi.n	8007f66 <_printf_i+0x7e>
 8007f54:	296f      	cmp	r1, #111	; 0x6f
 8007f56:	d020      	beq.n	8007f9a <_printf_i+0xb2>
 8007f58:	2970      	cmp	r1, #112	; 0x70
 8007f5a:	d1dd      	bne.n	8007f18 <_printf_i+0x30>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	f043 0320 	orr.w	r3, r3, #32
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	e003      	b.n	8007f6e <_printf_i+0x86>
 8007f66:	2975      	cmp	r1, #117	; 0x75
 8007f68:	d017      	beq.n	8007f9a <_printf_i+0xb2>
 8007f6a:	2978      	cmp	r1, #120	; 0x78
 8007f6c:	d1d4      	bne.n	8007f18 <_printf_i+0x30>
 8007f6e:	2378      	movs	r3, #120	; 0x78
 8007f70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f74:	4864      	ldr	r0, [pc, #400]	; (8008108 <_printf_i+0x220>)
 8007f76:	e055      	b.n	8008024 <_printf_i+0x13c>
 8007f78:	6813      	ldr	r3, [r2, #0]
 8007f7a:	1d19      	adds	r1, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6011      	str	r1, [r2, #0]
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e08c      	b.n	80080a6 <_printf_i+0x1be>
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6011      	str	r1, [r2, #0]
 8007f90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f94:	bf18      	it	ne
 8007f96:	b21b      	sxthne	r3, r3
 8007f98:	e7cf      	b.n	8007f3a <_printf_i+0x52>
 8007f9a:	6813      	ldr	r3, [r2, #0]
 8007f9c:	6825      	ldr	r5, [r4, #0]
 8007f9e:	1d18      	adds	r0, r3, #4
 8007fa0:	6010      	str	r0, [r2, #0]
 8007fa2:	0628      	lsls	r0, r5, #24
 8007fa4:	d501      	bpl.n	8007faa <_printf_i+0xc2>
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	e002      	b.n	8007fb0 <_printf_i+0xc8>
 8007faa:	0668      	lsls	r0, r5, #25
 8007fac:	d5fb      	bpl.n	8007fa6 <_printf_i+0xbe>
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	4854      	ldr	r0, [pc, #336]	; (8008104 <_printf_i+0x21c>)
 8007fb2:	296f      	cmp	r1, #111	; 0x6f
 8007fb4:	bf14      	ite	ne
 8007fb6:	220a      	movne	r2, #10
 8007fb8:	2208      	moveq	r2, #8
 8007fba:	2100      	movs	r1, #0
 8007fbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fc0:	6865      	ldr	r5, [r4, #4]
 8007fc2:	60a5      	str	r5, [r4, #8]
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	f2c0 8095 	blt.w	80080f4 <_printf_i+0x20c>
 8007fca:	6821      	ldr	r1, [r4, #0]
 8007fcc:	f021 0104 	bic.w	r1, r1, #4
 8007fd0:	6021      	str	r1, [r4, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d13d      	bne.n	8008052 <_printf_i+0x16a>
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	f040 808e 	bne.w	80080f8 <_printf_i+0x210>
 8007fdc:	4665      	mov	r5, ip
 8007fde:	2a08      	cmp	r2, #8
 8007fe0:	d10b      	bne.n	8007ffa <_printf_i+0x112>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	07db      	lsls	r3, r3, #31
 8007fe6:	d508      	bpl.n	8007ffa <_printf_i+0x112>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	6862      	ldr	r2, [r4, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	bfde      	ittt	le
 8007ff0:	2330      	movle	r3, #48	; 0x30
 8007ff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ff6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ffa:	ebac 0305 	sub.w	r3, ip, r5
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	f8cd 8000 	str.w	r8, [sp]
 8008004:	463b      	mov	r3, r7
 8008006:	aa03      	add	r2, sp, #12
 8008008:	4621      	mov	r1, r4
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff fef6 	bl	8007dfc <_printf_common>
 8008010:	3001      	adds	r0, #1
 8008012:	d14d      	bne.n	80080b0 <_printf_i+0x1c8>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	b005      	add	sp, #20
 800801a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800801e:	4839      	ldr	r0, [pc, #228]	; (8008104 <_printf_i+0x21c>)
 8008020:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008024:	6813      	ldr	r3, [r2, #0]
 8008026:	6821      	ldr	r1, [r4, #0]
 8008028:	1d1d      	adds	r5, r3, #4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6015      	str	r5, [r2, #0]
 800802e:	060a      	lsls	r2, r1, #24
 8008030:	d50b      	bpl.n	800804a <_printf_i+0x162>
 8008032:	07ca      	lsls	r2, r1, #31
 8008034:	bf44      	itt	mi
 8008036:	f041 0120 	orrmi.w	r1, r1, #32
 800803a:	6021      	strmi	r1, [r4, #0]
 800803c:	b91b      	cbnz	r3, 8008046 <_printf_i+0x15e>
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	f022 0220 	bic.w	r2, r2, #32
 8008044:	6022      	str	r2, [r4, #0]
 8008046:	2210      	movs	r2, #16
 8008048:	e7b7      	b.n	8007fba <_printf_i+0xd2>
 800804a:	064d      	lsls	r5, r1, #25
 800804c:	bf48      	it	mi
 800804e:	b29b      	uxthmi	r3, r3
 8008050:	e7ef      	b.n	8008032 <_printf_i+0x14a>
 8008052:	4665      	mov	r5, ip
 8008054:	fbb3 f1f2 	udiv	r1, r3, r2
 8008058:	fb02 3311 	mls	r3, r2, r1, r3
 800805c:	5cc3      	ldrb	r3, [r0, r3]
 800805e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008062:	460b      	mov	r3, r1
 8008064:	2900      	cmp	r1, #0
 8008066:	d1f5      	bne.n	8008054 <_printf_i+0x16c>
 8008068:	e7b9      	b.n	8007fde <_printf_i+0xf6>
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	6825      	ldr	r5, [r4, #0]
 800806e:	6961      	ldr	r1, [r4, #20]
 8008070:	1d18      	adds	r0, r3, #4
 8008072:	6010      	str	r0, [r2, #0]
 8008074:	0628      	lsls	r0, r5, #24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	d501      	bpl.n	800807e <_printf_i+0x196>
 800807a:	6019      	str	r1, [r3, #0]
 800807c:	e002      	b.n	8008084 <_printf_i+0x19c>
 800807e:	066a      	lsls	r2, r5, #25
 8008080:	d5fb      	bpl.n	800807a <_printf_i+0x192>
 8008082:	8019      	strh	r1, [r3, #0]
 8008084:	2300      	movs	r3, #0
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	4665      	mov	r5, ip
 800808a:	e7b9      	b.n	8008000 <_printf_i+0x118>
 800808c:	6813      	ldr	r3, [r2, #0]
 800808e:	1d19      	adds	r1, r3, #4
 8008090:	6011      	str	r1, [r2, #0]
 8008092:	681d      	ldr	r5, [r3, #0]
 8008094:	6862      	ldr	r2, [r4, #4]
 8008096:	2100      	movs	r1, #0
 8008098:	4628      	mov	r0, r5
 800809a:	f7f8 f8c9 	bl	8000230 <memchr>
 800809e:	b108      	cbz	r0, 80080a4 <_printf_i+0x1bc>
 80080a0:	1b40      	subs	r0, r0, r5
 80080a2:	6060      	str	r0, [r4, #4]
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2300      	movs	r3, #0
 80080aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ae:	e7a7      	b.n	8008000 <_printf_i+0x118>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	462a      	mov	r2, r5
 80080b4:	4639      	mov	r1, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	47c0      	blx	r8
 80080ba:	3001      	adds	r0, #1
 80080bc:	d0aa      	beq.n	8008014 <_printf_i+0x12c>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	079b      	lsls	r3, r3, #30
 80080c2:	d413      	bmi.n	80080ec <_printf_i+0x204>
 80080c4:	68e0      	ldr	r0, [r4, #12]
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	4298      	cmp	r0, r3
 80080ca:	bfb8      	it	lt
 80080cc:	4618      	movlt	r0, r3
 80080ce:	e7a3      	b.n	8008018 <_printf_i+0x130>
 80080d0:	2301      	movs	r3, #1
 80080d2:	464a      	mov	r2, r9
 80080d4:	4639      	mov	r1, r7
 80080d6:	4630      	mov	r0, r6
 80080d8:	47c0      	blx	r8
 80080da:	3001      	adds	r0, #1
 80080dc:	d09a      	beq.n	8008014 <_printf_i+0x12c>
 80080de:	3501      	adds	r5, #1
 80080e0:	68e3      	ldr	r3, [r4, #12]
 80080e2:	9a03      	ldr	r2, [sp, #12]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	42ab      	cmp	r3, r5
 80080e8:	dcf2      	bgt.n	80080d0 <_printf_i+0x1e8>
 80080ea:	e7eb      	b.n	80080c4 <_printf_i+0x1dc>
 80080ec:	2500      	movs	r5, #0
 80080ee:	f104 0919 	add.w	r9, r4, #25
 80080f2:	e7f5      	b.n	80080e0 <_printf_i+0x1f8>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1ac      	bne.n	8008052 <_printf_i+0x16a>
 80080f8:	7803      	ldrb	r3, [r0, #0]
 80080fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008102:	e76c      	b.n	8007fde <_printf_i+0xf6>
 8008104:	0800b854 	.word	0x0800b854
 8008108:	0800b865 	.word	0x0800b865

0800810c <iprintf>:
 800810c:	b40f      	push	{r0, r1, r2, r3}
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <iprintf+0x2c>)
 8008110:	b513      	push	{r0, r1, r4, lr}
 8008112:	681c      	ldr	r4, [r3, #0]
 8008114:	b124      	cbz	r4, 8008120 <iprintf+0x14>
 8008116:	69a3      	ldr	r3, [r4, #24]
 8008118:	b913      	cbnz	r3, 8008120 <iprintf+0x14>
 800811a:	4620      	mov	r0, r4
 800811c:	f001 fc34 	bl	8009988 <__sinit>
 8008120:	ab05      	add	r3, sp, #20
 8008122:	9a04      	ldr	r2, [sp, #16]
 8008124:	68a1      	ldr	r1, [r4, #8]
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	4620      	mov	r0, r4
 800812a:	f002 fab3 	bl	800a694 <_vfiprintf_r>
 800812e:	b002      	add	sp, #8
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008134:	b004      	add	sp, #16
 8008136:	4770      	bx	lr
 8008138:	2000000c 	.word	0x2000000c

0800813c <_puts_r>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	460e      	mov	r6, r1
 8008140:	4605      	mov	r5, r0
 8008142:	b118      	cbz	r0, 800814c <_puts_r+0x10>
 8008144:	6983      	ldr	r3, [r0, #24]
 8008146:	b90b      	cbnz	r3, 800814c <_puts_r+0x10>
 8008148:	f001 fc1e 	bl	8009988 <__sinit>
 800814c:	69ab      	ldr	r3, [r5, #24]
 800814e:	68ac      	ldr	r4, [r5, #8]
 8008150:	b913      	cbnz	r3, 8008158 <_puts_r+0x1c>
 8008152:	4628      	mov	r0, r5
 8008154:	f001 fc18 	bl	8009988 <__sinit>
 8008158:	4b23      	ldr	r3, [pc, #140]	; (80081e8 <_puts_r+0xac>)
 800815a:	429c      	cmp	r4, r3
 800815c:	d117      	bne.n	800818e <_puts_r+0x52>
 800815e:	686c      	ldr	r4, [r5, #4]
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	071b      	lsls	r3, r3, #28
 8008164:	d51d      	bpl.n	80081a2 <_puts_r+0x66>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	b1db      	cbz	r3, 80081a2 <_puts_r+0x66>
 800816a:	3e01      	subs	r6, #1
 800816c:	68a3      	ldr	r3, [r4, #8]
 800816e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008172:	3b01      	subs	r3, #1
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	b9e9      	cbnz	r1, 80081b4 <_puts_r+0x78>
 8008178:	2b00      	cmp	r3, #0
 800817a:	da2e      	bge.n	80081da <_puts_r+0x9e>
 800817c:	4622      	mov	r2, r4
 800817e:	210a      	movs	r1, #10
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fbf9 	bl	8008978 <__swbuf_r>
 8008186:	3001      	adds	r0, #1
 8008188:	d011      	beq.n	80081ae <_puts_r+0x72>
 800818a:	200a      	movs	r0, #10
 800818c:	e011      	b.n	80081b2 <_puts_r+0x76>
 800818e:	4b17      	ldr	r3, [pc, #92]	; (80081ec <_puts_r+0xb0>)
 8008190:	429c      	cmp	r4, r3
 8008192:	d101      	bne.n	8008198 <_puts_r+0x5c>
 8008194:	68ac      	ldr	r4, [r5, #8]
 8008196:	e7e3      	b.n	8008160 <_puts_r+0x24>
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <_puts_r+0xb4>)
 800819a:	429c      	cmp	r4, r3
 800819c:	bf08      	it	eq
 800819e:	68ec      	ldreq	r4, [r5, #12]
 80081a0:	e7de      	b.n	8008160 <_puts_r+0x24>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f000 fc39 	bl	8008a1c <__swsetup_r>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0dd      	beq.n	800816a <_puts_r+0x2e>
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da04      	bge.n	80081c2 <_puts_r+0x86>
 80081b8:	69a2      	ldr	r2, [r4, #24]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	dc06      	bgt.n	80081cc <_puts_r+0x90>
 80081be:	290a      	cmp	r1, #10
 80081c0:	d004      	beq.n	80081cc <_puts_r+0x90>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	7019      	strb	r1, [r3, #0]
 80081ca:	e7cf      	b.n	800816c <_puts_r+0x30>
 80081cc:	4622      	mov	r2, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 fbd2 	bl	8008978 <__swbuf_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d1c9      	bne.n	800816c <_puts_r+0x30>
 80081d8:	e7e9      	b.n	80081ae <_puts_r+0x72>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	200a      	movs	r0, #10
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	7018      	strb	r0, [r3, #0]
 80081e4:	e7e5      	b.n	80081b2 <_puts_r+0x76>
 80081e6:	bf00      	nop
 80081e8:	0800b8e0 	.word	0x0800b8e0
 80081ec:	0800b900 	.word	0x0800b900
 80081f0:	0800b8c0 	.word	0x0800b8c0

080081f4 <puts>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <puts+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f7ff bf9f 	b.w	800813c <_puts_r>
 80081fe:	bf00      	nop
 8008200:	2000000c 	.word	0x2000000c

08008204 <setvbuf>:
 8008204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008208:	461d      	mov	r5, r3
 800820a:	4b51      	ldr	r3, [pc, #324]	; (8008350 <setvbuf+0x14c>)
 800820c:	681e      	ldr	r6, [r3, #0]
 800820e:	4604      	mov	r4, r0
 8008210:	460f      	mov	r7, r1
 8008212:	4690      	mov	r8, r2
 8008214:	b126      	cbz	r6, 8008220 <setvbuf+0x1c>
 8008216:	69b3      	ldr	r3, [r6, #24]
 8008218:	b913      	cbnz	r3, 8008220 <setvbuf+0x1c>
 800821a:	4630      	mov	r0, r6
 800821c:	f001 fbb4 	bl	8009988 <__sinit>
 8008220:	4b4c      	ldr	r3, [pc, #304]	; (8008354 <setvbuf+0x150>)
 8008222:	429c      	cmp	r4, r3
 8008224:	d152      	bne.n	80082cc <setvbuf+0xc8>
 8008226:	6874      	ldr	r4, [r6, #4]
 8008228:	f1b8 0f02 	cmp.w	r8, #2
 800822c:	d006      	beq.n	800823c <setvbuf+0x38>
 800822e:	f1b8 0f01 	cmp.w	r8, #1
 8008232:	f200 8089 	bhi.w	8008348 <setvbuf+0x144>
 8008236:	2d00      	cmp	r5, #0
 8008238:	f2c0 8086 	blt.w	8008348 <setvbuf+0x144>
 800823c:	4621      	mov	r1, r4
 800823e:	4630      	mov	r0, r6
 8008240:	f001 fb38 	bl	80098b4 <_fflush_r>
 8008244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008246:	b141      	cbz	r1, 800825a <setvbuf+0x56>
 8008248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800824c:	4299      	cmp	r1, r3
 800824e:	d002      	beq.n	8008256 <setvbuf+0x52>
 8008250:	4630      	mov	r0, r6
 8008252:	f001 fffb 	bl	800a24c <_free_r>
 8008256:	2300      	movs	r3, #0
 8008258:	6363      	str	r3, [r4, #52]	; 0x34
 800825a:	2300      	movs	r3, #0
 800825c:	61a3      	str	r3, [r4, #24]
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	d503      	bpl.n	800826e <setvbuf+0x6a>
 8008266:	6921      	ldr	r1, [r4, #16]
 8008268:	4630      	mov	r0, r6
 800826a:	f001 ffef 	bl	800a24c <_free_r>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f1b8 0f02 	cmp.w	r8, #2
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	d05d      	beq.n	800833c <setvbuf+0x138>
 8008280:	ab01      	add	r3, sp, #4
 8008282:	466a      	mov	r2, sp
 8008284:	4621      	mov	r1, r4
 8008286:	4630      	mov	r0, r6
 8008288:	f001 fc70 	bl	8009b6c <__swhatbuf_r>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	4318      	orrs	r0, r3
 8008290:	81a0      	strh	r0, [r4, #12]
 8008292:	bb2d      	cbnz	r5, 80082e0 <setvbuf+0xdc>
 8008294:	9d00      	ldr	r5, [sp, #0]
 8008296:	4628      	mov	r0, r5
 8008298:	f001 fccc 	bl	8009c34 <malloc>
 800829c:	4607      	mov	r7, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d14e      	bne.n	8008340 <setvbuf+0x13c>
 80082a2:	f8dd 9000 	ldr.w	r9, [sp]
 80082a6:	45a9      	cmp	r9, r5
 80082a8:	d13c      	bne.n	8008324 <setvbuf+0x120>
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	2300      	movs	r3, #0
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	2301      	movs	r3, #1
 80082c4:	6163      	str	r3, [r4, #20]
 80082c6:	b003      	add	sp, #12
 80082c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082cc:	4b22      	ldr	r3, [pc, #136]	; (8008358 <setvbuf+0x154>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	d101      	bne.n	80082d6 <setvbuf+0xd2>
 80082d2:	68b4      	ldr	r4, [r6, #8]
 80082d4:	e7a8      	b.n	8008228 <setvbuf+0x24>
 80082d6:	4b21      	ldr	r3, [pc, #132]	; (800835c <setvbuf+0x158>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	bf08      	it	eq
 80082dc:	68f4      	ldreq	r4, [r6, #12]
 80082de:	e7a3      	b.n	8008228 <setvbuf+0x24>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	d0d8      	beq.n	8008296 <setvbuf+0x92>
 80082e4:	69b3      	ldr	r3, [r6, #24]
 80082e6:	b913      	cbnz	r3, 80082ee <setvbuf+0xea>
 80082e8:	4630      	mov	r0, r6
 80082ea:	f001 fb4d 	bl	8009988 <__sinit>
 80082ee:	f1b8 0f01 	cmp.w	r8, #1
 80082f2:	bf08      	it	eq
 80082f4:	89a3      	ldrheq	r3, [r4, #12]
 80082f6:	6027      	str	r7, [r4, #0]
 80082f8:	bf04      	itt	eq
 80082fa:	f043 0301 	orreq.w	r3, r3, #1
 80082fe:	81a3      	strheq	r3, [r4, #12]
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f013 0008 	ands.w	r0, r3, #8
 8008306:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800830a:	d01b      	beq.n	8008344 <setvbuf+0x140>
 800830c:	f013 0001 	ands.w	r0, r3, #1
 8008310:	bf18      	it	ne
 8008312:	426d      	negne	r5, r5
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	bf1d      	ittte	ne
 800831a:	60a3      	strne	r3, [r4, #8]
 800831c:	61a5      	strne	r5, [r4, #24]
 800831e:	4618      	movne	r0, r3
 8008320:	60a5      	streq	r5, [r4, #8]
 8008322:	e7d0      	b.n	80082c6 <setvbuf+0xc2>
 8008324:	4648      	mov	r0, r9
 8008326:	f001 fc85 	bl	8009c34 <malloc>
 800832a:	4607      	mov	r7, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d0bc      	beq.n	80082aa <setvbuf+0xa6>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	464d      	mov	r5, r9
 800833a:	e7d3      	b.n	80082e4 <setvbuf+0xe0>
 800833c:	2000      	movs	r0, #0
 800833e:	e7b6      	b.n	80082ae <setvbuf+0xaa>
 8008340:	46a9      	mov	r9, r5
 8008342:	e7f5      	b.n	8008330 <setvbuf+0x12c>
 8008344:	60a0      	str	r0, [r4, #8]
 8008346:	e7be      	b.n	80082c6 <setvbuf+0xc2>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e7bb      	b.n	80082c6 <setvbuf+0xc2>
 800834e:	bf00      	nop
 8008350:	2000000c 	.word	0x2000000c
 8008354:	0800b8e0 	.word	0x0800b8e0
 8008358:	0800b900 	.word	0x0800b900
 800835c:	0800b8c0 	.word	0x0800b8c0

08008360 <siprintf>:
 8008360:	b40e      	push	{r1, r2, r3}
 8008362:	b500      	push	{lr}
 8008364:	b09c      	sub	sp, #112	; 0x70
 8008366:	ab1d      	add	r3, sp, #116	; 0x74
 8008368:	9002      	str	r0, [sp, #8]
 800836a:	9006      	str	r0, [sp, #24]
 800836c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <siprintf+0x38>)
 8008372:	9107      	str	r1, [sp, #28]
 8008374:	9104      	str	r1, [sp, #16]
 8008376:	4909      	ldr	r1, [pc, #36]	; (800839c <siprintf+0x3c>)
 8008378:	f853 2b04 	ldr.w	r2, [r3], #4
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	a902      	add	r1, sp, #8
 8008384:	f002 f864 	bl	800a450 <_svfiprintf_r>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	b01c      	add	sp, #112	; 0x70
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	2000000c 	.word	0x2000000c
 800839c:	ffff0208 	.word	0xffff0208

080083a0 <strstr>:
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	7803      	ldrb	r3, [r0, #0]
 80083a4:	b17b      	cbz	r3, 80083c6 <strstr+0x26>
 80083a6:	4604      	mov	r4, r0
 80083a8:	7823      	ldrb	r3, [r4, #0]
 80083aa:	4620      	mov	r0, r4
 80083ac:	1c66      	adds	r6, r4, #1
 80083ae:	b17b      	cbz	r3, 80083d0 <strstr+0x30>
 80083b0:	1e4a      	subs	r2, r1, #1
 80083b2:	1e63      	subs	r3, r4, #1
 80083b4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80083b8:	b14d      	cbz	r5, 80083ce <strstr+0x2e>
 80083ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80083be:	42af      	cmp	r7, r5
 80083c0:	4634      	mov	r4, r6
 80083c2:	d0f7      	beq.n	80083b4 <strstr+0x14>
 80083c4:	e7f0      	b.n	80083a8 <strstr+0x8>
 80083c6:	780b      	ldrb	r3, [r1, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bf18      	it	ne
 80083cc:	2000      	movne	r0, #0
 80083ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d0:	4618      	mov	r0, r3
 80083d2:	e7fc      	b.n	80083ce <strstr+0x2e>

080083d4 <_strtol_l.isra.0>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	4680      	mov	r8, r0
 80083da:	4689      	mov	r9, r1
 80083dc:	4692      	mov	sl, r2
 80083de:	461e      	mov	r6, r3
 80083e0:	460f      	mov	r7, r1
 80083e2:	463d      	mov	r5, r7
 80083e4:	9808      	ldr	r0, [sp, #32]
 80083e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083ea:	f001 fb9f 	bl	8009b2c <__locale_ctype_ptr_l>
 80083ee:	4420      	add	r0, r4
 80083f0:	7843      	ldrb	r3, [r0, #1]
 80083f2:	f013 0308 	ands.w	r3, r3, #8
 80083f6:	d132      	bne.n	800845e <_strtol_l.isra.0+0x8a>
 80083f8:	2c2d      	cmp	r4, #45	; 0x2d
 80083fa:	d132      	bne.n	8008462 <_strtol_l.isra.0+0x8e>
 80083fc:	787c      	ldrb	r4, [r7, #1]
 80083fe:	1cbd      	adds	r5, r7, #2
 8008400:	2201      	movs	r2, #1
 8008402:	2e00      	cmp	r6, #0
 8008404:	d05d      	beq.n	80084c2 <_strtol_l.isra.0+0xee>
 8008406:	2e10      	cmp	r6, #16
 8008408:	d109      	bne.n	800841e <_strtol_l.isra.0+0x4a>
 800840a:	2c30      	cmp	r4, #48	; 0x30
 800840c:	d107      	bne.n	800841e <_strtol_l.isra.0+0x4a>
 800840e:	782b      	ldrb	r3, [r5, #0]
 8008410:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008414:	2b58      	cmp	r3, #88	; 0x58
 8008416:	d14f      	bne.n	80084b8 <_strtol_l.isra.0+0xe4>
 8008418:	786c      	ldrb	r4, [r5, #1]
 800841a:	2610      	movs	r6, #16
 800841c:	3502      	adds	r5, #2
 800841e:	2a00      	cmp	r2, #0
 8008420:	bf14      	ite	ne
 8008422:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008426:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800842a:	2700      	movs	r7, #0
 800842c:	fbb1 fcf6 	udiv	ip, r1, r6
 8008430:	4638      	mov	r0, r7
 8008432:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008436:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800843a:	2b09      	cmp	r3, #9
 800843c:	d817      	bhi.n	800846e <_strtol_l.isra.0+0x9a>
 800843e:	461c      	mov	r4, r3
 8008440:	42a6      	cmp	r6, r4
 8008442:	dd23      	ble.n	800848c <_strtol_l.isra.0+0xb8>
 8008444:	1c7b      	adds	r3, r7, #1
 8008446:	d007      	beq.n	8008458 <_strtol_l.isra.0+0x84>
 8008448:	4584      	cmp	ip, r0
 800844a:	d31c      	bcc.n	8008486 <_strtol_l.isra.0+0xb2>
 800844c:	d101      	bne.n	8008452 <_strtol_l.isra.0+0x7e>
 800844e:	45a6      	cmp	lr, r4
 8008450:	db19      	blt.n	8008486 <_strtol_l.isra.0+0xb2>
 8008452:	fb00 4006 	mla	r0, r0, r6, r4
 8008456:	2701      	movs	r7, #1
 8008458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800845c:	e7eb      	b.n	8008436 <_strtol_l.isra.0+0x62>
 800845e:	462f      	mov	r7, r5
 8008460:	e7bf      	b.n	80083e2 <_strtol_l.isra.0+0xe>
 8008462:	2c2b      	cmp	r4, #43	; 0x2b
 8008464:	bf04      	itt	eq
 8008466:	1cbd      	addeq	r5, r7, #2
 8008468:	787c      	ldrbeq	r4, [r7, #1]
 800846a:	461a      	mov	r2, r3
 800846c:	e7c9      	b.n	8008402 <_strtol_l.isra.0+0x2e>
 800846e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008472:	2b19      	cmp	r3, #25
 8008474:	d801      	bhi.n	800847a <_strtol_l.isra.0+0xa6>
 8008476:	3c37      	subs	r4, #55	; 0x37
 8008478:	e7e2      	b.n	8008440 <_strtol_l.isra.0+0x6c>
 800847a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800847e:	2b19      	cmp	r3, #25
 8008480:	d804      	bhi.n	800848c <_strtol_l.isra.0+0xb8>
 8008482:	3c57      	subs	r4, #87	; 0x57
 8008484:	e7dc      	b.n	8008440 <_strtol_l.isra.0+0x6c>
 8008486:	f04f 37ff 	mov.w	r7, #4294967295
 800848a:	e7e5      	b.n	8008458 <_strtol_l.isra.0+0x84>
 800848c:	1c7b      	adds	r3, r7, #1
 800848e:	d108      	bne.n	80084a2 <_strtol_l.isra.0+0xce>
 8008490:	2322      	movs	r3, #34	; 0x22
 8008492:	f8c8 3000 	str.w	r3, [r8]
 8008496:	4608      	mov	r0, r1
 8008498:	f1ba 0f00 	cmp.w	sl, #0
 800849c:	d107      	bne.n	80084ae <_strtol_l.isra.0+0xda>
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	b102      	cbz	r2, 80084a6 <_strtol_l.isra.0+0xd2>
 80084a4:	4240      	negs	r0, r0
 80084a6:	f1ba 0f00 	cmp.w	sl, #0
 80084aa:	d0f8      	beq.n	800849e <_strtol_l.isra.0+0xca>
 80084ac:	b10f      	cbz	r7, 80084b2 <_strtol_l.isra.0+0xde>
 80084ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80084b2:	f8ca 9000 	str.w	r9, [sl]
 80084b6:	e7f2      	b.n	800849e <_strtol_l.isra.0+0xca>
 80084b8:	2430      	movs	r4, #48	; 0x30
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	d1af      	bne.n	800841e <_strtol_l.isra.0+0x4a>
 80084be:	2608      	movs	r6, #8
 80084c0:	e7ad      	b.n	800841e <_strtol_l.isra.0+0x4a>
 80084c2:	2c30      	cmp	r4, #48	; 0x30
 80084c4:	d0a3      	beq.n	800840e <_strtol_l.isra.0+0x3a>
 80084c6:	260a      	movs	r6, #10
 80084c8:	e7a9      	b.n	800841e <_strtol_l.isra.0+0x4a>
	...

080084cc <_strtol_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	4c06      	ldr	r4, [pc, #24]	; (80084e8 <_strtol_r+0x1c>)
 80084d0:	4d06      	ldr	r5, [pc, #24]	; (80084ec <_strtol_r+0x20>)
 80084d2:	6824      	ldr	r4, [r4, #0]
 80084d4:	6a24      	ldr	r4, [r4, #32]
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	bf08      	it	eq
 80084da:	462c      	moveq	r4, r5
 80084dc:	9400      	str	r4, [sp, #0]
 80084de:	f7ff ff79 	bl	80083d4 <_strtol_l.isra.0>
 80084e2:	b003      	add	sp, #12
 80084e4:	bd30      	pop	{r4, r5, pc}
 80084e6:	bf00      	nop
 80084e8:	2000000c 	.word	0x2000000c
 80084ec:	200000d0 	.word	0x200000d0

080084f0 <strtol>:
 80084f0:	4b08      	ldr	r3, [pc, #32]	; (8008514 <strtol+0x24>)
 80084f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f4:	681c      	ldr	r4, [r3, #0]
 80084f6:	4d08      	ldr	r5, [pc, #32]	; (8008518 <strtol+0x28>)
 80084f8:	6a23      	ldr	r3, [r4, #32]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf08      	it	eq
 80084fe:	462b      	moveq	r3, r5
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	4613      	mov	r3, r2
 8008504:	460a      	mov	r2, r1
 8008506:	4601      	mov	r1, r0
 8008508:	4620      	mov	r0, r4
 800850a:	f7ff ff63 	bl	80083d4 <_strtol_l.isra.0>
 800850e:	b003      	add	sp, #12
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	2000000c 	.word	0x2000000c
 8008518:	200000d0 	.word	0x200000d0

0800851c <__tzcalc_limits>:
 800851c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	4680      	mov	r8, r0
 8008522:	f001 faff 	bl	8009b24 <__gettzinfo>
 8008526:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800852a:	4598      	cmp	r8, r3
 800852c:	f340 8098 	ble.w	8008660 <__tzcalc_limits+0x144>
 8008530:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8008534:	4443      	add	r3, r8
 8008536:	109b      	asrs	r3, r3, #2
 8008538:	f240 126d 	movw	r2, #365	; 0x16d
 800853c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8008540:	fb02 3505 	mla	r5, r2, r5, r3
 8008544:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8008548:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800854c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008550:	441d      	add	r5, r3
 8008552:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008556:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800855a:	fb98 f7f3 	sdiv	r7, r8, r3
 800855e:	fb03 8717 	mls	r7, r3, r7, r8
 8008562:	4442      	add	r2, r8
 8008564:	fab7 fc87 	clz	ip, r7
 8008568:	fb92 f2f3 	sdiv	r2, r2, r3
 800856c:	f008 0303 	and.w	r3, r8, #3
 8008570:	4415      	add	r5, r2
 8008572:	2264      	movs	r2, #100	; 0x64
 8008574:	f8c0 8004 	str.w	r8, [r0, #4]
 8008578:	fb98 f6f2 	sdiv	r6, r8, r2
 800857c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008580:	fb02 8616 	mls	r6, r2, r6, r8
 8008584:	4604      	mov	r4, r0
 8008586:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	f04f 0e07 	mov.w	lr, #7
 8008590:	7a22      	ldrb	r2, [r4, #8]
 8008592:	6963      	ldr	r3, [r4, #20]
 8008594:	2a4a      	cmp	r2, #74	; 0x4a
 8008596:	d128      	bne.n	80085ea <__tzcalc_limits+0xce>
 8008598:	9900      	ldr	r1, [sp, #0]
 800859a:	18ea      	adds	r2, r5, r3
 800859c:	b901      	cbnz	r1, 80085a0 <__tzcalc_limits+0x84>
 800859e:	b906      	cbnz	r6, 80085a2 <__tzcalc_limits+0x86>
 80085a0:	bb0f      	cbnz	r7, 80085e6 <__tzcalc_limits+0xca>
 80085a2:	2b3b      	cmp	r3, #59	; 0x3b
 80085a4:	bfd4      	ite	le
 80085a6:	2300      	movle	r3, #0
 80085a8:	2301      	movgt	r3, #1
 80085aa:	4413      	add	r3, r2
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	69a3      	ldr	r3, [r4, #24]
 80085b0:	492c      	ldr	r1, [pc, #176]	; (8008664 <__tzcalc_limits+0x148>)
 80085b2:	fb01 3202 	mla	r2, r1, r2, r3
 80085b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085b8:	4413      	add	r3, r2
 80085ba:	461a      	mov	r2, r3
 80085bc:	17db      	asrs	r3, r3, #31
 80085be:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80085c2:	3428      	adds	r4, #40	; 0x28
 80085c4:	45a3      	cmp	fp, r4
 80085c6:	d1e3      	bne.n	8008590 <__tzcalc_limits+0x74>
 80085c8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80085cc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80085d0:	4294      	cmp	r4, r2
 80085d2:	eb75 0303 	sbcs.w	r3, r5, r3
 80085d6:	bfb4      	ite	lt
 80085d8:	2301      	movlt	r3, #1
 80085da:	2300      	movge	r3, #0
 80085dc:	6003      	str	r3, [r0, #0]
 80085de:	2001      	movs	r0, #1
 80085e0:	b003      	add	sp, #12
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	2300      	movs	r3, #0
 80085e8:	e7df      	b.n	80085aa <__tzcalc_limits+0x8e>
 80085ea:	2a44      	cmp	r2, #68	; 0x44
 80085ec:	d101      	bne.n	80085f2 <__tzcalc_limits+0xd6>
 80085ee:	18ea      	adds	r2, r5, r3
 80085f0:	e7dd      	b.n	80085ae <__tzcalc_limits+0x92>
 80085f2:	9a00      	ldr	r2, [sp, #0]
 80085f4:	bb72      	cbnz	r2, 8008654 <__tzcalc_limits+0x138>
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	bf0c      	ite	eq
 80085fa:	46e1      	moveq	r9, ip
 80085fc:	f04f 0901 	movne.w	r9, #1
 8008600:	2230      	movs	r2, #48	; 0x30
 8008602:	fb02 f909 	mul.w	r9, r2, r9
 8008606:	68e2      	ldr	r2, [r4, #12]
 8008608:	9201      	str	r2, [sp, #4]
 800860a:	f04f 0800 	mov.w	r8, #0
 800860e:	462a      	mov	r2, r5
 8008610:	f108 0801 	add.w	r8, r8, #1
 8008614:	4914      	ldr	r1, [pc, #80]	; (8008668 <__tzcalc_limits+0x14c>)
 8008616:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800861a:	448a      	add	sl, r1
 800861c:	9901      	ldr	r1, [sp, #4]
 800861e:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8008622:	4541      	cmp	r1, r8
 8008624:	dc18      	bgt.n	8008658 <__tzcalc_limits+0x13c>
 8008626:	f102 0804 	add.w	r8, r2, #4
 800862a:	fb98 f9fe 	sdiv	r9, r8, lr
 800862e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8008632:	eba8 0909 	sub.w	r9, r8, r9
 8008636:	ebb3 0909 	subs.w	r9, r3, r9
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008640:	bf48      	it	mi
 8008642:	f109 0907 	addmi.w	r9, r9, #7
 8008646:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800864a:	444b      	add	r3, r9
 800864c:	4553      	cmp	r3, sl
 800864e:	da05      	bge.n	800865c <__tzcalc_limits+0x140>
 8008650:	441a      	add	r2, r3
 8008652:	e7ac      	b.n	80085ae <__tzcalc_limits+0x92>
 8008654:	46e1      	mov	r9, ip
 8008656:	e7d3      	b.n	8008600 <__tzcalc_limits+0xe4>
 8008658:	4452      	add	r2, sl
 800865a:	e7d9      	b.n	8008610 <__tzcalc_limits+0xf4>
 800865c:	3b07      	subs	r3, #7
 800865e:	e7f5      	b.n	800864c <__tzcalc_limits+0x130>
 8008660:	2000      	movs	r0, #0
 8008662:	e7bd      	b.n	80085e0 <__tzcalc_limits+0xc4>
 8008664:	00015180 	.word	0x00015180
 8008668:	0800b92c 	.word	0x0800b92c

0800866c <__tz_lock>:
 800866c:	4770      	bx	lr

0800866e <__tz_unlock>:
 800866e:	4770      	bx	lr

08008670 <_tzset_unlocked>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <_tzset_unlocked+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	f000 b802 	b.w	800867c <_tzset_unlocked_r>
 8008678:	2000000c 	.word	0x2000000c

0800867c <_tzset_unlocked_r>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	b08d      	sub	sp, #52	; 0x34
 8008682:	4607      	mov	r7, r0
 8008684:	f001 fa4e 	bl	8009b24 <__gettzinfo>
 8008688:	49af      	ldr	r1, [pc, #700]	; (8008948 <_tzset_unlocked_r+0x2cc>)
 800868a:	4eb0      	ldr	r6, [pc, #704]	; (800894c <_tzset_unlocked_r+0x2d0>)
 800868c:	4605      	mov	r5, r0
 800868e:	4638      	mov	r0, r7
 8008690:	f001 fa40 	bl	8009b14 <_getenv_r>
 8008694:	4604      	mov	r4, r0
 8008696:	b970      	cbnz	r0, 80086b6 <_tzset_unlocked_r+0x3a>
 8008698:	4bad      	ldr	r3, [pc, #692]	; (8008950 <_tzset_unlocked_r+0x2d4>)
 800869a:	4aae      	ldr	r2, [pc, #696]	; (8008954 <_tzset_unlocked_r+0x2d8>)
 800869c:	6018      	str	r0, [r3, #0]
 800869e:	4bae      	ldr	r3, [pc, #696]	; (8008958 <_tzset_unlocked_r+0x2dc>)
 80086a0:	6018      	str	r0, [r3, #0]
 80086a2:	4bae      	ldr	r3, [pc, #696]	; (800895c <_tzset_unlocked_r+0x2e0>)
 80086a4:	6830      	ldr	r0, [r6, #0]
 80086a6:	e9c3 2200 	strd	r2, r2, [r3]
 80086aa:	f001 facb 	bl	8009c44 <free>
 80086ae:	6034      	str	r4, [r6, #0]
 80086b0:	b00d      	add	sp, #52	; 0x34
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	6831      	ldr	r1, [r6, #0]
 80086b8:	2900      	cmp	r1, #0
 80086ba:	d15f      	bne.n	800877c <_tzset_unlocked_r+0x100>
 80086bc:	6830      	ldr	r0, [r6, #0]
 80086be:	f001 fac1 	bl	8009c44 <free>
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7f7 fdac 	bl	8000220 <strlen>
 80086c8:	1c41      	adds	r1, r0, #1
 80086ca:	4638      	mov	r0, r7
 80086cc:	f001 fe0c 	bl	800a2e8 <_malloc_r>
 80086d0:	6030      	str	r0, [r6, #0]
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d157      	bne.n	8008786 <_tzset_unlocked_r+0x10a>
 80086d6:	7823      	ldrb	r3, [r4, #0]
 80086d8:	4aa1      	ldr	r2, [pc, #644]	; (8008960 <_tzset_unlocked_r+0x2e4>)
 80086da:	49a2      	ldr	r1, [pc, #648]	; (8008964 <_tzset_unlocked_r+0x2e8>)
 80086dc:	2b3a      	cmp	r3, #58	; 0x3a
 80086de:	bf08      	it	eq
 80086e0:	3401      	addeq	r4, #1
 80086e2:	ae0a      	add	r6, sp, #40	; 0x28
 80086e4:	4633      	mov	r3, r6
 80086e6:	4620      	mov	r0, r4
 80086e8:	f002 f8fa 	bl	800a8e0 <siscanf>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	dddf      	ble.n	80086b0 <_tzset_unlocked_r+0x34>
 80086f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f2:	18e7      	adds	r7, r4, r3
 80086f4:	5ce3      	ldrb	r3, [r4, r3]
 80086f6:	2b2d      	cmp	r3, #45	; 0x2d
 80086f8:	d149      	bne.n	800878e <_tzset_unlocked_r+0x112>
 80086fa:	3701      	adds	r7, #1
 80086fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008700:	f10d 0a20 	add.w	sl, sp, #32
 8008704:	f10d 0b1e 	add.w	fp, sp, #30
 8008708:	f04f 0800 	mov.w	r8, #0
 800870c:	9603      	str	r6, [sp, #12]
 800870e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8008712:	f8cd b000 	str.w	fp, [sp]
 8008716:	4633      	mov	r3, r6
 8008718:	aa07      	add	r2, sp, #28
 800871a:	4993      	ldr	r1, [pc, #588]	; (8008968 <_tzset_unlocked_r+0x2ec>)
 800871c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8008720:	4638      	mov	r0, r7
 8008722:	f8ad 8020 	strh.w	r8, [sp, #32]
 8008726:	f002 f8db 	bl	800a8e0 <siscanf>
 800872a:	4540      	cmp	r0, r8
 800872c:	ddc0      	ble.n	80086b0 <_tzset_unlocked_r+0x34>
 800872e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008736:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8008974 <_tzset_unlocked_r+0x2f8>
 800873a:	213c      	movs	r1, #60	; 0x3c
 800873c:	fb01 2203 	mla	r2, r1, r3, r2
 8008740:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008744:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008748:	fb01 2303 	mla	r3, r1, r3, r2
 800874c:	435c      	muls	r4, r3
 800874e:	62ac      	str	r4, [r5, #40]	; 0x28
 8008750:	4c82      	ldr	r4, [pc, #520]	; (800895c <_tzset_unlocked_r+0x2e0>)
 8008752:	4b83      	ldr	r3, [pc, #524]	; (8008960 <_tzset_unlocked_r+0x2e4>)
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	4982      	ldr	r1, [pc, #520]	; (8008964 <_tzset_unlocked_r+0x2e8>)
 800875a:	441f      	add	r7, r3
 800875c:	464a      	mov	r2, r9
 800875e:	4633      	mov	r3, r6
 8008760:	4638      	mov	r0, r7
 8008762:	f002 f8bd 	bl	800a8e0 <siscanf>
 8008766:	4540      	cmp	r0, r8
 8008768:	dc16      	bgt.n	8008798 <_tzset_unlocked_r+0x11c>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	4b78      	ldr	r3, [pc, #480]	; (8008950 <_tzset_unlocked_r+0x2d4>)
 8008770:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	4b78      	ldr	r3, [pc, #480]	; (8008958 <_tzset_unlocked_r+0x2dc>)
 8008776:	f8c3 8000 	str.w	r8, [r3]
 800877a:	e799      	b.n	80086b0 <_tzset_unlocked_r+0x34>
 800877c:	f7f7 fda8 	bl	80002d0 <strcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	d095      	beq.n	80086b0 <_tzset_unlocked_r+0x34>
 8008784:	e79a      	b.n	80086bc <_tzset_unlocked_r+0x40>
 8008786:	4621      	mov	r1, r4
 8008788:	f002 f919 	bl	800a9be <strcpy>
 800878c:	e7a3      	b.n	80086d6 <_tzset_unlocked_r+0x5a>
 800878e:	2b2b      	cmp	r3, #43	; 0x2b
 8008790:	bf08      	it	eq
 8008792:	3701      	addeq	r7, #1
 8008794:	2401      	movs	r4, #1
 8008796:	e7b3      	b.n	8008700 <_tzset_unlocked_r+0x84>
 8008798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879a:	f8c4 9004 	str.w	r9, [r4, #4]
 800879e:	18fc      	adds	r4, r7, r3
 80087a0:	5cfb      	ldrb	r3, [r7, r3]
 80087a2:	2b2d      	cmp	r3, #45	; 0x2d
 80087a4:	f040 808b 	bne.w	80088be <_tzset_unlocked_r+0x242>
 80087a8:	3401      	adds	r4, #1
 80087aa:	f04f 37ff 	mov.w	r7, #4294967295
 80087ae:	2300      	movs	r3, #0
 80087b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80087b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80087b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80087bc:	930a      	str	r3, [sp, #40]	; 0x28
 80087be:	e9cd a602 	strd	sl, r6, [sp, #8]
 80087c2:	e9cd b600 	strd	fp, r6, [sp]
 80087c6:	4633      	mov	r3, r6
 80087c8:	aa07      	add	r2, sp, #28
 80087ca:	4967      	ldr	r1, [pc, #412]	; (8008968 <_tzset_unlocked_r+0x2ec>)
 80087cc:	4620      	mov	r0, r4
 80087ce:	f002 f887 	bl	800a8e0 <siscanf>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	dc78      	bgt.n	80088c8 <_tzset_unlocked_r+0x24c>
 80087d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80087d8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80087dc:	652b      	str	r3, [r5, #80]	; 0x50
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	462f      	mov	r7, r5
 80087e2:	441c      	add	r4, r3
 80087e4:	f04f 0900 	mov.w	r9, #0
 80087e8:	7823      	ldrb	r3, [r4, #0]
 80087ea:	2b2c      	cmp	r3, #44	; 0x2c
 80087ec:	bf08      	it	eq
 80087ee:	3401      	addeq	r4, #1
 80087f0:	f894 8000 	ldrb.w	r8, [r4]
 80087f4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80087f8:	d179      	bne.n	80088ee <_tzset_unlocked_r+0x272>
 80087fa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80087fe:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008802:	ab09      	add	r3, sp, #36	; 0x24
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	9603      	str	r6, [sp, #12]
 8008808:	4633      	mov	r3, r6
 800880a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800880e:	4957      	ldr	r1, [pc, #348]	; (800896c <_tzset_unlocked_r+0x2f0>)
 8008810:	4620      	mov	r0, r4
 8008812:	f002 f865 	bl	800a8e0 <siscanf>
 8008816:	2803      	cmp	r0, #3
 8008818:	f47f af4a 	bne.w	80086b0 <_tzset_unlocked_r+0x34>
 800881c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8008820:	1e4b      	subs	r3, r1, #1
 8008822:	2b0b      	cmp	r3, #11
 8008824:	f63f af44 	bhi.w	80086b0 <_tzset_unlocked_r+0x34>
 8008828:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800882c:	1e53      	subs	r3, r2, #1
 800882e:	2b04      	cmp	r3, #4
 8008830:	f63f af3e 	bhi.w	80086b0 <_tzset_unlocked_r+0x34>
 8008834:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8008838:	2b06      	cmp	r3, #6
 800883a:	f63f af39 	bhi.w	80086b0 <_tzset_unlocked_r+0x34>
 800883e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008842:	f887 8008 	strb.w	r8, [r7, #8]
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884a:	eb04 0803 	add.w	r8, r4, r3
 800884e:	2302      	movs	r3, #2
 8008850:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008854:	2300      	movs	r3, #0
 8008856:	f8ad 301e 	strh.w	r3, [sp, #30]
 800885a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800885e:	930a      	str	r3, [sp, #40]	; 0x28
 8008860:	f898 3000 	ldrb.w	r3, [r8]
 8008864:	2b2f      	cmp	r3, #47	; 0x2f
 8008866:	d109      	bne.n	800887c <_tzset_unlocked_r+0x200>
 8008868:	e9cd a602 	strd	sl, r6, [sp, #8]
 800886c:	e9cd b600 	strd	fp, r6, [sp]
 8008870:	4633      	mov	r3, r6
 8008872:	aa07      	add	r2, sp, #28
 8008874:	493e      	ldr	r1, [pc, #248]	; (8008970 <_tzset_unlocked_r+0x2f4>)
 8008876:	4640      	mov	r0, r8
 8008878:	f002 f832 	bl	800a8e0 <siscanf>
 800887c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008884:	213c      	movs	r1, #60	; 0x3c
 8008886:	fb01 2203 	mla	r2, r1, r3, r2
 800888a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800888e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008892:	fb01 2303 	mla	r3, r1, r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800889a:	3728      	adds	r7, #40	; 0x28
 800889c:	4444      	add	r4, r8
 800889e:	f1b9 0f00 	cmp.w	r9, #0
 80088a2:	d021      	beq.n	80088e8 <_tzset_unlocked_r+0x26c>
 80088a4:	6868      	ldr	r0, [r5, #4]
 80088a6:	f7ff fe39 	bl	800851c <__tzcalc_limits>
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <_tzset_unlocked_r+0x2d4>)
 80088ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	4a28      	ldr	r2, [pc, #160]	; (8008958 <_tzset_unlocked_r+0x2dc>)
 80088b6:	bf18      	it	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e6f8      	b.n	80086b0 <_tzset_unlocked_r+0x34>
 80088be:	2b2b      	cmp	r3, #43	; 0x2b
 80088c0:	bf08      	it	eq
 80088c2:	3401      	addeq	r4, #1
 80088c4:	2701      	movs	r7, #1
 80088c6:	e772      	b.n	80087ae <_tzset_unlocked_r+0x132>
 80088c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80088cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80088d0:	213c      	movs	r1, #60	; 0x3c
 80088d2:	fb01 2203 	mla	r2, r1, r3, r2
 80088d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80088da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80088de:	fb01 2303 	mla	r3, r1, r3, r2
 80088e2:	435f      	muls	r7, r3
 80088e4:	652f      	str	r7, [r5, #80]	; 0x50
 80088e6:	e77a      	b.n	80087de <_tzset_unlocked_r+0x162>
 80088e8:	f04f 0901 	mov.w	r9, #1
 80088ec:	e77c      	b.n	80087e8 <_tzset_unlocked_r+0x16c>
 80088ee:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80088f2:	bf06      	itte	eq
 80088f4:	3401      	addeq	r4, #1
 80088f6:	4643      	moveq	r3, r8
 80088f8:	2344      	movne	r3, #68	; 0x44
 80088fa:	220a      	movs	r2, #10
 80088fc:	a90b      	add	r1, sp, #44	; 0x2c
 80088fe:	4620      	mov	r0, r4
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	f002 f903 	bl	800ab0c <strtoul>
 8008906:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800890a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800890e:	45a0      	cmp	r8, r4
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	d114      	bne.n	800893e <_tzset_unlocked_r+0x2c2>
 8008914:	234d      	movs	r3, #77	; 0x4d
 8008916:	f1b9 0f00 	cmp.w	r9, #0
 800891a:	d107      	bne.n	800892c <_tzset_unlocked_r+0x2b0>
 800891c:	722b      	strb	r3, [r5, #8]
 800891e:	2103      	movs	r1, #3
 8008920:	2302      	movs	r3, #2
 8008922:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8008926:	f8c5 9014 	str.w	r9, [r5, #20]
 800892a:	e790      	b.n	800884e <_tzset_unlocked_r+0x1d2>
 800892c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8008930:	220b      	movs	r2, #11
 8008932:	2301      	movs	r3, #1
 8008934:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8008938:	2300      	movs	r3, #0
 800893a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800893c:	e787      	b.n	800884e <_tzset_unlocked_r+0x1d2>
 800893e:	b280      	uxth	r0, r0
 8008940:	723b      	strb	r3, [r7, #8]
 8008942:	6178      	str	r0, [r7, #20]
 8008944:	e783      	b.n	800884e <_tzset_unlocked_r+0x1d2>
 8008946:	bf00      	nop
 8008948:	0800b876 	.word	0x0800b876
 800894c:	2000052c 	.word	0x2000052c
 8008950:	20000534 	.word	0x20000534
 8008954:	0800b879 	.word	0x0800b879
 8008958:	20000530 	.word	0x20000530
 800895c:	20000070 	.word	0x20000070
 8008960:	2000051f 	.word	0x2000051f
 8008964:	0800b87d 	.word	0x0800b87d
 8008968:	0800b8a0 	.word	0x0800b8a0
 800896c:	0800b88c 	.word	0x0800b88c
 8008970:	0800b89f 	.word	0x0800b89f
 8008974:	20000514 	.word	0x20000514

08008978 <__swbuf_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	460e      	mov	r6, r1
 800897c:	4614      	mov	r4, r2
 800897e:	4605      	mov	r5, r0
 8008980:	b118      	cbz	r0, 800898a <__swbuf_r+0x12>
 8008982:	6983      	ldr	r3, [r0, #24]
 8008984:	b90b      	cbnz	r3, 800898a <__swbuf_r+0x12>
 8008986:	f000 ffff 	bl	8009988 <__sinit>
 800898a:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <__swbuf_r+0x98>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d12a      	bne.n	80089e6 <__swbuf_r+0x6e>
 8008990:	686c      	ldr	r4, [r5, #4]
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d52e      	bpl.n	80089fa <__swbuf_r+0x82>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b363      	cbz	r3, 80089fa <__swbuf_r+0x82>
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	1ac0      	subs	r0, r0, r3
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc04      	bgt.n	80089ba <__swbuf_r+0x42>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 ff7e 	bl	80098b4 <_fflush_r>
 80089b8:	bb28      	cbnz	r0, 8008a06 <__swbuf_r+0x8e>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	701e      	strb	r6, [r3, #0]
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	3001      	adds	r0, #1
 80089cc:	4283      	cmp	r3, r0
 80089ce:	d004      	beq.n	80089da <__swbuf_r+0x62>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	07db      	lsls	r3, r3, #31
 80089d4:	d519      	bpl.n	8008a0a <__swbuf_r+0x92>
 80089d6:	2e0a      	cmp	r6, #10
 80089d8:	d117      	bne.n	8008a0a <__swbuf_r+0x92>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 ff69 	bl	80098b4 <_fflush_r>
 80089e2:	b190      	cbz	r0, 8008a0a <__swbuf_r+0x92>
 80089e4:	e00f      	b.n	8008a06 <__swbuf_r+0x8e>
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <__swbuf_r+0x9c>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d101      	bne.n	80089f0 <__swbuf_r+0x78>
 80089ec:	68ac      	ldr	r4, [r5, #8]
 80089ee:	e7d0      	b.n	8008992 <__swbuf_r+0x1a>
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <__swbuf_r+0xa0>)
 80089f2:	429c      	cmp	r4, r3
 80089f4:	bf08      	it	eq
 80089f6:	68ec      	ldreq	r4, [r5, #12]
 80089f8:	e7cb      	b.n	8008992 <__swbuf_r+0x1a>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 f80d 	bl	8008a1c <__swsetup_r>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0cc      	beq.n	80089a0 <__swbuf_r+0x28>
 8008a06:	f04f 37ff 	mov.w	r7, #4294967295
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	0800b8e0 	.word	0x0800b8e0
 8008a14:	0800b900 	.word	0x0800b900
 8008a18:	0800b8c0 	.word	0x0800b8c0

08008a1c <__swsetup_r>:
 8008a1c:	4b32      	ldr	r3, [pc, #200]	; (8008ae8 <__swsetup_r+0xcc>)
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	681d      	ldr	r5, [r3, #0]
 8008a22:	4606      	mov	r6, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	b125      	cbz	r5, 8008a32 <__swsetup_r+0x16>
 8008a28:	69ab      	ldr	r3, [r5, #24]
 8008a2a:	b913      	cbnz	r3, 8008a32 <__swsetup_r+0x16>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 ffab 	bl	8009988 <__sinit>
 8008a32:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <__swsetup_r+0xd0>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d10f      	bne.n	8008a58 <__swsetup_r+0x3c>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	0715      	lsls	r5, r2, #28
 8008a42:	d42c      	bmi.n	8008a9e <__swsetup_r+0x82>
 8008a44:	06d0      	lsls	r0, r2, #27
 8008a46:	d411      	bmi.n	8008a6c <__swsetup_r+0x50>
 8008a48:	2209      	movs	r2, #9
 8008a4a:	6032      	str	r2, [r6, #0]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
 8008a56:	e03e      	b.n	8008ad6 <__swsetup_r+0xba>
 8008a58:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <__swsetup_r+0xd4>)
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d101      	bne.n	8008a62 <__swsetup_r+0x46>
 8008a5e:	68ac      	ldr	r4, [r5, #8]
 8008a60:	e7eb      	b.n	8008a3a <__swsetup_r+0x1e>
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <__swsetup_r+0xd8>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	bf08      	it	eq
 8008a68:	68ec      	ldreq	r4, [r5, #12]
 8008a6a:	e7e6      	b.n	8008a3a <__swsetup_r+0x1e>
 8008a6c:	0751      	lsls	r1, r2, #29
 8008a6e:	d512      	bpl.n	8008a96 <__swsetup_r+0x7a>
 8008a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a72:	b141      	cbz	r1, 8008a86 <__swsetup_r+0x6a>
 8008a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d002      	beq.n	8008a82 <__swsetup_r+0x66>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f001 fbe5 	bl	800a24c <_free_r>
 8008a82:	2300      	movs	r3, #0
 8008a84:	6363      	str	r3, [r4, #52]	; 0x34
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f043 0308 	orr.w	r3, r3, #8
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	b94b      	cbnz	r3, 8008ab6 <__swsetup_r+0x9a>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aac:	d003      	beq.n	8008ab6 <__swsetup_r+0x9a>
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f001 f87f 	bl	8009bb4 <__smakebuf_r>
 8008ab6:	89a2      	ldrh	r2, [r4, #12]
 8008ab8:	f012 0301 	ands.w	r3, r2, #1
 8008abc:	d00c      	beq.n	8008ad8 <__swsetup_r+0xbc>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6963      	ldr	r3, [r4, #20]
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	61a3      	str	r3, [r4, #24]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b953      	cbnz	r3, 8008ae2 <__swsetup_r+0xc6>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ad4:	d1ba      	bne.n	8008a4c <__swsetup_r+0x30>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	0792      	lsls	r2, r2, #30
 8008ada:	bf58      	it	pl
 8008adc:	6963      	ldrpl	r3, [r4, #20]
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	e7f2      	b.n	8008ac8 <__swsetup_r+0xac>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e7f7      	b.n	8008ad6 <__swsetup_r+0xba>
 8008ae6:	bf00      	nop
 8008ae8:	2000000c 	.word	0x2000000c
 8008aec:	0800b8e0 	.word	0x0800b8e0
 8008af0:	0800b900 	.word	0x0800b900
 8008af4:	0800b8c0 	.word	0x0800b8c0

08008af8 <div>:
 8008af8:	2900      	cmp	r1, #0
 8008afa:	b510      	push	{r4, lr}
 8008afc:	fb91 f4f2 	sdiv	r4, r1, r2
 8008b00:	fb02 1314 	mls	r3, r2, r4, r1
 8008b04:	db06      	blt.n	8008b14 <div+0x1c>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da01      	bge.n	8008b0e <div+0x16>
 8008b0a:	3401      	adds	r4, #1
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	e9c0 4300 	strd	r4, r3, [r0]
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfc4      	itt	gt
 8008b18:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8008b1c:	189b      	addgt	r3, r3, r2
 8008b1e:	e7f6      	b.n	8008b0e <div+0x16>

08008b20 <quorem>:
 8008b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	6903      	ldr	r3, [r0, #16]
 8008b26:	690c      	ldr	r4, [r1, #16]
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	f2c0 8082 	blt.w	8008c34 <quorem+0x114>
 8008b30:	3c01      	subs	r4, #1
 8008b32:	f101 0714 	add.w	r7, r1, #20
 8008b36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008b3a:	f100 0614 	add.w	r6, r0, #20
 8008b3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008b42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008b46:	eb06 030c 	add.w	r3, r6, ip
 8008b4a:	3501      	adds	r5, #1
 8008b4c:	eb07 090c 	add.w	r9, r7, ip
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	fbb0 f5f5 	udiv	r5, r0, r5
 8008b56:	b395      	cbz	r5, 8008bbe <quorem+0x9e>
 8008b58:	f04f 0a00 	mov.w	sl, #0
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	46b6      	mov	lr, r6
 8008b60:	46d3      	mov	fp, sl
 8008b62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b66:	b293      	uxth	r3, r2
 8008b68:	fb05 a303 	mla	r3, r5, r3, sl
 8008b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ebab 0303 	sub.w	r3, fp, r3
 8008b76:	0c12      	lsrs	r2, r2, #16
 8008b78:	f8de b000 	ldr.w	fp, [lr]
 8008b7c:	fb05 a202 	mla	r2, r5, r2, sl
 8008b80:	fa13 f38b 	uxtah	r3, r3, fp
 8008b84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008b88:	fa1f fb82 	uxth.w	fp, r2
 8008b8c:	f8de 2000 	ldr.w	r2, [lr]
 8008b90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9e:	4581      	cmp	r9, r0
 8008ba0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ba4:	f84e 3b04 	str.w	r3, [lr], #4
 8008ba8:	d2db      	bcs.n	8008b62 <quorem+0x42>
 8008baa:	f856 300c 	ldr.w	r3, [r6, ip]
 8008bae:	b933      	cbnz	r3, 8008bbe <quorem+0x9e>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	3b04      	subs	r3, #4
 8008bb4:	429e      	cmp	r6, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	d330      	bcc.n	8008c1c <quorem+0xfc>
 8008bba:	f8c8 4010 	str.w	r4, [r8, #16]
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f001 fa70 	bl	800a0a4 <__mcmp>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	db25      	blt.n	8008c14 <quorem+0xf4>
 8008bc8:	3501      	adds	r5, #1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8008bd4:	f8d0 e000 	ldr.w	lr, [r0]
 8008bd8:	b293      	uxth	r3, r2
 8008bda:	ebac 0303 	sub.w	r3, ip, r3
 8008bde:	0c12      	lsrs	r2, r2, #16
 8008be0:	fa13 f38e 	uxtah	r3, r3, lr
 8008be4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bf2:	45b9      	cmp	r9, r7
 8008bf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bf8:	f840 3b04 	str.w	r3, [r0], #4
 8008bfc:	d2e8      	bcs.n	8008bd0 <quorem+0xb0>
 8008bfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008c02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008c06:	b92a      	cbnz	r2, 8008c14 <quorem+0xf4>
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	429e      	cmp	r6, r3
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	d30b      	bcc.n	8008c28 <quorem+0x108>
 8008c10:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c14:	4628      	mov	r0, r5
 8008c16:	b003      	add	sp, #12
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	d1ca      	bne.n	8008bba <quorem+0x9a>
 8008c24:	3c01      	subs	r4, #1
 8008c26:	e7c5      	b.n	8008bb4 <quorem+0x94>
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d1ef      	bne.n	8008c10 <quorem+0xf0>
 8008c30:	3c01      	subs	r4, #1
 8008c32:	e7ea      	b.n	8008c0a <quorem+0xea>
 8008c34:	2000      	movs	r0, #0
 8008c36:	e7ee      	b.n	8008c16 <quorem+0xf6>

08008c38 <_dtoa_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ec57 6b10 	vmov	r6, r7, d0
 8008c40:	b097      	sub	sp, #92	; 0x5c
 8008c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c44:	9106      	str	r1, [sp, #24]
 8008c46:	4604      	mov	r4, r0
 8008c48:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c50:	e9cd 6700 	strd	r6, r7, [sp]
 8008c54:	b93d      	cbnz	r5, 8008c66 <_dtoa_r+0x2e>
 8008c56:	2010      	movs	r0, #16
 8008c58:	f000 ffec 	bl	8009c34 <malloc>
 8008c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c62:	6005      	str	r5, [r0, #0]
 8008c64:	60c5      	str	r5, [r0, #12]
 8008c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c68:	6819      	ldr	r1, [r3, #0]
 8008c6a:	b151      	cbz	r1, 8008c82 <_dtoa_r+0x4a>
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	604a      	str	r2, [r1, #4]
 8008c70:	2301      	movs	r3, #1
 8008c72:	4093      	lsls	r3, r2
 8008c74:	608b      	str	r3, [r1, #8]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f001 f832 	bl	8009ce0 <_Bfree>
 8008c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	1e3b      	subs	r3, r7, #0
 8008c84:	bfbb      	ittet	lt
 8008c86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	9301      	strlt	r3, [sp, #4]
 8008c8c:	2300      	movge	r3, #0
 8008c8e:	2201      	movlt	r2, #1
 8008c90:	bfac      	ite	ge
 8008c92:	f8c8 3000 	strge.w	r3, [r8]
 8008c96:	f8c8 2000 	strlt.w	r2, [r8]
 8008c9a:	4baf      	ldr	r3, [pc, #700]	; (8008f58 <_dtoa_r+0x320>)
 8008c9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ca0:	ea33 0308 	bics.w	r3, r3, r8
 8008ca4:	d114      	bne.n	8008cd0 <_dtoa_r+0x98>
 8008ca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ca8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	9b00      	ldr	r3, [sp, #0]
 8008cb0:	b923      	cbnz	r3, 8008cbc <_dtoa_r+0x84>
 8008cb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f000 8542 	beq.w	8009740 <_dtoa_r+0xb08>
 8008cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008f6c <_dtoa_r+0x334>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 8544 	beq.w	8009750 <_dtoa_r+0xb18>
 8008cc8:	f10b 0303 	add.w	r3, fp, #3
 8008ccc:	f000 bd3e 	b.w	800974c <_dtoa_r+0xb14>
 8008cd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4630      	mov	r0, r6
 8008cda:	4639      	mov	r1, r7
 8008cdc:	f7f7 ff26 	bl	8000b2c <__aeabi_dcmpeq>
 8008ce0:	4681      	mov	r9, r0
 8008ce2:	b168      	cbz	r0, 8008d00 <_dtoa_r+0xc8>
 8008ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8524 	beq.w	800973a <_dtoa_r+0xb02>
 8008cf2:	4b9a      	ldr	r3, [pc, #616]	; (8008f5c <_dtoa_r+0x324>)
 8008cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cf6:	f103 3bff 	add.w	fp, r3, #4294967295
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	f000 bd28 	b.w	8009750 <_dtoa_r+0xb18>
 8008d00:	aa14      	add	r2, sp, #80	; 0x50
 8008d02:	a915      	add	r1, sp, #84	; 0x54
 8008d04:	ec47 6b10 	vmov	d0, r6, r7
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f001 fa42 	bl	800a192 <__d2b>
 8008d0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d12:	9004      	str	r0, [sp, #16]
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	d07c      	beq.n	8008e12 <_dtoa_r+0x1da>
 8008d18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008d20:	46b2      	mov	sl, r6
 8008d22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4b8b      	ldr	r3, [pc, #556]	; (8008f60 <_dtoa_r+0x328>)
 8008d32:	4650      	mov	r0, sl
 8008d34:	4659      	mov	r1, fp
 8008d36:	f7f7 fad9 	bl	80002ec <__aeabi_dsub>
 8008d3a:	a381      	add	r3, pc, #516	; (adr r3, 8008f40 <_dtoa_r+0x308>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 fc8c 	bl	800065c <__aeabi_dmul>
 8008d44:	a380      	add	r3, pc, #512	; (adr r3, 8008f48 <_dtoa_r+0x310>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fad1 	bl	80002f0 <__adddf3>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4628      	mov	r0, r5
 8008d52:	460f      	mov	r7, r1
 8008d54:	f7f7 fc18 	bl	8000588 <__aeabi_i2d>
 8008d58:	a37d      	add	r3, pc, #500	; (adr r3, 8008f50 <_dtoa_r+0x318>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fc7d 	bl	800065c <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 fac1 	bl	80002f0 <__adddf3>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	460f      	mov	r7, r1
 8008d72:	f7f7 ff23 	bl	8000bbc <__aeabi_d2iz>
 8008d76:	2200      	movs	r2, #0
 8008d78:	4682      	mov	sl, r0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 fede 	bl	8000b40 <__aeabi_dcmplt>
 8008d84:	b148      	cbz	r0, 8008d9a <_dtoa_r+0x162>
 8008d86:	4650      	mov	r0, sl
 8008d88:	f7f7 fbfe 	bl	8000588 <__aeabi_i2d>
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	463b      	mov	r3, r7
 8008d90:	f7f7 fecc 	bl	8000b2c <__aeabi_dcmpeq>
 8008d94:	b908      	cbnz	r0, 8008d9a <_dtoa_r+0x162>
 8008d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d9a:	f1ba 0f16 	cmp.w	sl, #22
 8008d9e:	d859      	bhi.n	8008e54 <_dtoa_r+0x21c>
 8008da0:	4970      	ldr	r1, [pc, #448]	; (8008f64 <_dtoa_r+0x32c>)
 8008da2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dae:	f7f7 fee5 	bl	8000b7c <__aeabi_dcmpgt>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d050      	beq.n	8008e58 <_dtoa_r+0x220>
 8008db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dba:	2300      	movs	r3, #0
 8008dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dc0:	1b5d      	subs	r5, r3, r5
 8008dc2:	f1b5 0801 	subs.w	r8, r5, #1
 8008dc6:	bf49      	itett	mi
 8008dc8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dcc:	2300      	movpl	r3, #0
 8008dce:	9305      	strmi	r3, [sp, #20]
 8008dd0:	f04f 0800 	movmi.w	r8, #0
 8008dd4:	bf58      	it	pl
 8008dd6:	9305      	strpl	r3, [sp, #20]
 8008dd8:	f1ba 0f00 	cmp.w	sl, #0
 8008ddc:	db3e      	blt.n	8008e5c <_dtoa_r+0x224>
 8008dde:	2300      	movs	r3, #0
 8008de0:	44d0      	add	r8, sl
 8008de2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008de6:	9307      	str	r3, [sp, #28]
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	f200 8090 	bhi.w	8008f10 <_dtoa_r+0x2d8>
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	bfc4      	itt	gt
 8008df4:	3b04      	subgt	r3, #4
 8008df6:	9306      	strgt	r3, [sp, #24]
 8008df8:	9b06      	ldr	r3, [sp, #24]
 8008dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8008dfe:	bfcc      	ite	gt
 8008e00:	2500      	movgt	r5, #0
 8008e02:	2501      	movle	r5, #1
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	f200 808f 	bhi.w	8008f28 <_dtoa_r+0x2f0>
 8008e0a:	e8df f003 	tbb	[pc, r3]
 8008e0e:	7f7d      	.short	0x7f7d
 8008e10:	7131      	.short	0x7131
 8008e12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008e16:	441d      	add	r5, r3
 8008e18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008e1c:	2820      	cmp	r0, #32
 8008e1e:	dd13      	ble.n	8008e48 <_dtoa_r+0x210>
 8008e20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008e24:	9b00      	ldr	r3, [sp, #0]
 8008e26:	fa08 f800 	lsl.w	r8, r8, r0
 8008e2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008e2e:	fa23 f000 	lsr.w	r0, r3, r0
 8008e32:	ea48 0000 	orr.w	r0, r8, r0
 8008e36:	f7f7 fb97 	bl	8000568 <__aeabi_ui2d>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008e42:	3d01      	subs	r5, #1
 8008e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e46:	e772      	b.n	8008d2e <_dtoa_r+0xf6>
 8008e48:	9b00      	ldr	r3, [sp, #0]
 8008e4a:	f1c0 0020 	rsb	r0, r0, #32
 8008e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e52:	e7f0      	b.n	8008e36 <_dtoa_r+0x1fe>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e7b1      	b.n	8008dbc <_dtoa_r+0x184>
 8008e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e5a:	e7b0      	b.n	8008dbe <_dtoa_r+0x186>
 8008e5c:	9b05      	ldr	r3, [sp, #20]
 8008e5e:	eba3 030a 	sub.w	r3, r3, sl
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	f1ca 0300 	rsb	r3, sl, #0
 8008e68:	9307      	str	r3, [sp, #28]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e6e:	e7bb      	b.n	8008de8 <_dtoa_r+0x1b0>
 8008e70:	2301      	movs	r3, #1
 8008e72:	930a      	str	r3, [sp, #40]	; 0x28
 8008e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dd59      	ble.n	8008f2e <_dtoa_r+0x2f6>
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	4699      	mov	r9, r3
 8008e7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e80:	2200      	movs	r2, #0
 8008e82:	6072      	str	r2, [r6, #4]
 8008e84:	2204      	movs	r2, #4
 8008e86:	f102 0014 	add.w	r0, r2, #20
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	6871      	ldr	r1, [r6, #4]
 8008e8e:	d953      	bls.n	8008f38 <_dtoa_r+0x300>
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fef1 	bl	8009c78 <_Balloc>
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	6030      	str	r0, [r6, #0]
 8008e9a:	f1b9 0f0e 	cmp.w	r9, #14
 8008e9e:	f8d3 b000 	ldr.w	fp, [r3]
 8008ea2:	f200 80e6 	bhi.w	8009072 <_dtoa_r+0x43a>
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	f000 80e3 	beq.w	8009072 <_dtoa_r+0x43a>
 8008eac:	ed9d 7b00 	vldr	d7, [sp]
 8008eb0:	f1ba 0f00 	cmp.w	sl, #0
 8008eb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008eb8:	dd74      	ble.n	8008fa4 <_dtoa_r+0x36c>
 8008eba:	4a2a      	ldr	r2, [pc, #168]	; (8008f64 <_dtoa_r+0x32c>)
 8008ebc:	f00a 030f 	and.w	r3, sl, #15
 8008ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ec4:	ed93 7b00 	vldr	d7, [r3]
 8008ec8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008ecc:	06f0      	lsls	r0, r6, #27
 8008ece:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008ed2:	d565      	bpl.n	8008fa0 <_dtoa_r+0x368>
 8008ed4:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <_dtoa_r+0x330>)
 8008ed6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008eda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ede:	f7f7 fce7 	bl	80008b0 <__aeabi_ddiv>
 8008ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ee6:	f006 060f 	and.w	r6, r6, #15
 8008eea:	2503      	movs	r5, #3
 8008eec:	4f1e      	ldr	r7, [pc, #120]	; (8008f68 <_dtoa_r+0x330>)
 8008eee:	e04c      	b.n	8008f8a <_dtoa_r+0x352>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef6:	4453      	add	r3, sl
 8008ef8:	f103 0901 	add.w	r9, r3, #1
 8008efc:	9302      	str	r3, [sp, #8]
 8008efe:	464b      	mov	r3, r9
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	bfb8      	it	lt
 8008f04:	2301      	movlt	r3, #1
 8008f06:	e7ba      	b.n	8008e7e <_dtoa_r+0x246>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e7b2      	b.n	8008e72 <_dtoa_r+0x23a>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e7f0      	b.n	8008ef2 <_dtoa_r+0x2ba>
 8008f10:	2501      	movs	r5, #1
 8008f12:	2300      	movs	r3, #0
 8008f14:	9306      	str	r3, [sp, #24]
 8008f16:	950a      	str	r5, [sp, #40]	; 0x28
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	9302      	str	r3, [sp, #8]
 8008f1e:	4699      	mov	r9, r3
 8008f20:	2200      	movs	r2, #0
 8008f22:	2312      	movs	r3, #18
 8008f24:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f26:	e7aa      	b.n	8008e7e <_dtoa_r+0x246>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f2c:	e7f4      	b.n	8008f18 <_dtoa_r+0x2e0>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	4699      	mov	r9, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	e7f5      	b.n	8008f24 <_dtoa_r+0x2ec>
 8008f38:	3101      	adds	r1, #1
 8008f3a:	6071      	str	r1, [r6, #4]
 8008f3c:	0052      	lsls	r2, r2, #1
 8008f3e:	e7a2      	b.n	8008e86 <_dtoa_r+0x24e>
 8008f40:	636f4361 	.word	0x636f4361
 8008f44:	3fd287a7 	.word	0x3fd287a7
 8008f48:	8b60c8b3 	.word	0x8b60c8b3
 8008f4c:	3fc68a28 	.word	0x3fc68a28
 8008f50:	509f79fb 	.word	0x509f79fb
 8008f54:	3fd34413 	.word	0x3fd34413
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	0800bbb5 	.word	0x0800bbb5
 8008f60:	3ff80000 	.word	0x3ff80000
 8008f64:	0800b9b8 	.word	0x0800b9b8
 8008f68:	0800b990 	.word	0x0800b990
 8008f6c:	0800b8bb 	.word	0x0800b8bb
 8008f70:	07f1      	lsls	r1, r6, #31
 8008f72:	d508      	bpl.n	8008f86 <_dtoa_r+0x34e>
 8008f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7c:	f7f7 fb6e 	bl	800065c <__aeabi_dmul>
 8008f80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f84:	3501      	adds	r5, #1
 8008f86:	1076      	asrs	r6, r6, #1
 8008f88:	3708      	adds	r7, #8
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d1f0      	bne.n	8008f70 <_dtoa_r+0x338>
 8008f8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f96:	f7f7 fc8b 	bl	80008b0 <__aeabi_ddiv>
 8008f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f9e:	e01a      	b.n	8008fd6 <_dtoa_r+0x39e>
 8008fa0:	2502      	movs	r5, #2
 8008fa2:	e7a3      	b.n	8008eec <_dtoa_r+0x2b4>
 8008fa4:	f000 80a0 	beq.w	80090e8 <_dtoa_r+0x4b0>
 8008fa8:	f1ca 0600 	rsb	r6, sl, #0
 8008fac:	4b9f      	ldr	r3, [pc, #636]	; (800922c <_dtoa_r+0x5f4>)
 8008fae:	4fa0      	ldr	r7, [pc, #640]	; (8009230 <_dtoa_r+0x5f8>)
 8008fb0:	f006 020f 	and.w	r2, r6, #15
 8008fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fc0:	f7f7 fb4c 	bl	800065c <__aeabi_dmul>
 8008fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fc8:	1136      	asrs	r6, r6, #4
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2502      	movs	r5, #2
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d17f      	bne.n	80090d2 <_dtoa_r+0x49a>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e1      	bne.n	8008f9a <_dtoa_r+0x362>
 8008fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 8087 	beq.w	80090ec <_dtoa_r+0x4b4>
 8008fde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4b93      	ldr	r3, [pc, #588]	; (8009234 <_dtoa_r+0x5fc>)
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	f7f7 fda9 	bl	8000b40 <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d07c      	beq.n	80090ec <_dtoa_r+0x4b4>
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	d079      	beq.n	80090ec <_dtoa_r+0x4b4>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd35      	ble.n	800906a <_dtoa_r+0x432>
 8008ffe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009002:	9308      	str	r3, [sp, #32]
 8009004:	4639      	mov	r1, r7
 8009006:	2200      	movs	r2, #0
 8009008:	4b8b      	ldr	r3, [pc, #556]	; (8009238 <_dtoa_r+0x600>)
 800900a:	4630      	mov	r0, r6
 800900c:	f7f7 fb26 	bl	800065c <__aeabi_dmul>
 8009010:	e9cd 0100 	strd	r0, r1, [sp]
 8009014:	9f02      	ldr	r7, [sp, #8]
 8009016:	3501      	adds	r5, #1
 8009018:	4628      	mov	r0, r5
 800901a:	f7f7 fab5 	bl	8000588 <__aeabi_i2d>
 800901e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009022:	f7f7 fb1b 	bl	800065c <__aeabi_dmul>
 8009026:	2200      	movs	r2, #0
 8009028:	4b84      	ldr	r3, [pc, #528]	; (800923c <_dtoa_r+0x604>)
 800902a:	f7f7 f961 	bl	80002f0 <__adddf3>
 800902e:	4605      	mov	r5, r0
 8009030:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009034:	2f00      	cmp	r7, #0
 8009036:	d15d      	bne.n	80090f4 <_dtoa_r+0x4bc>
 8009038:	2200      	movs	r2, #0
 800903a:	4b81      	ldr	r3, [pc, #516]	; (8009240 <_dtoa_r+0x608>)
 800903c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009040:	f7f7 f954 	bl	80002ec <__aeabi_dsub>
 8009044:	462a      	mov	r2, r5
 8009046:	4633      	mov	r3, r6
 8009048:	e9cd 0100 	strd	r0, r1, [sp]
 800904c:	f7f7 fd96 	bl	8000b7c <__aeabi_dcmpgt>
 8009050:	2800      	cmp	r0, #0
 8009052:	f040 8288 	bne.w	8009566 <_dtoa_r+0x92e>
 8009056:	462a      	mov	r2, r5
 8009058:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800905c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009060:	f7f7 fd6e 	bl	8000b40 <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 827c 	bne.w	8009562 <_dtoa_r+0x92a>
 800906a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800906e:	e9cd 2300 	strd	r2, r3, [sp]
 8009072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009074:	2b00      	cmp	r3, #0
 8009076:	f2c0 8150 	blt.w	800931a <_dtoa_r+0x6e2>
 800907a:	f1ba 0f0e 	cmp.w	sl, #14
 800907e:	f300 814c 	bgt.w	800931a <_dtoa_r+0x6e2>
 8009082:	4b6a      	ldr	r3, [pc, #424]	; (800922c <_dtoa_r+0x5f4>)
 8009084:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009088:	ed93 7b00 	vldr	d7, [r3]
 800908c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800908e:	2b00      	cmp	r3, #0
 8009090:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009094:	f280 80d8 	bge.w	8009248 <_dtoa_r+0x610>
 8009098:	f1b9 0f00 	cmp.w	r9, #0
 800909c:	f300 80d4 	bgt.w	8009248 <_dtoa_r+0x610>
 80090a0:	f040 825e 	bne.w	8009560 <_dtoa_r+0x928>
 80090a4:	2200      	movs	r2, #0
 80090a6:	4b66      	ldr	r3, [pc, #408]	; (8009240 <_dtoa_r+0x608>)
 80090a8:	ec51 0b17 	vmov	r0, r1, d7
 80090ac:	f7f7 fad6 	bl	800065c <__aeabi_dmul>
 80090b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090b4:	f7f7 fd58 	bl	8000b68 <__aeabi_dcmpge>
 80090b8:	464f      	mov	r7, r9
 80090ba:	464e      	mov	r6, r9
 80090bc:	2800      	cmp	r0, #0
 80090be:	f040 8234 	bne.w	800952a <_dtoa_r+0x8f2>
 80090c2:	2331      	movs	r3, #49	; 0x31
 80090c4:	f10b 0501 	add.w	r5, fp, #1
 80090c8:	f88b 3000 	strb.w	r3, [fp]
 80090cc:	f10a 0a01 	add.w	sl, sl, #1
 80090d0:	e22f      	b.n	8009532 <_dtoa_r+0x8fa>
 80090d2:	07f2      	lsls	r2, r6, #31
 80090d4:	d505      	bpl.n	80090e2 <_dtoa_r+0x4aa>
 80090d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090da:	f7f7 fabf 	bl	800065c <__aeabi_dmul>
 80090de:	3501      	adds	r5, #1
 80090e0:	2301      	movs	r3, #1
 80090e2:	1076      	asrs	r6, r6, #1
 80090e4:	3708      	adds	r7, #8
 80090e6:	e772      	b.n	8008fce <_dtoa_r+0x396>
 80090e8:	2502      	movs	r5, #2
 80090ea:	e774      	b.n	8008fd6 <_dtoa_r+0x39e>
 80090ec:	f8cd a020 	str.w	sl, [sp, #32]
 80090f0:	464f      	mov	r7, r9
 80090f2:	e791      	b.n	8009018 <_dtoa_r+0x3e0>
 80090f4:	4b4d      	ldr	r3, [pc, #308]	; (800922c <_dtoa_r+0x5f4>)
 80090f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80090fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009100:	2b00      	cmp	r3, #0
 8009102:	d047      	beq.n	8009194 <_dtoa_r+0x55c>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	2000      	movs	r0, #0
 800910a:	494e      	ldr	r1, [pc, #312]	; (8009244 <_dtoa_r+0x60c>)
 800910c:	f7f7 fbd0 	bl	80008b0 <__aeabi_ddiv>
 8009110:	462a      	mov	r2, r5
 8009112:	4633      	mov	r3, r6
 8009114:	f7f7 f8ea 	bl	80002ec <__aeabi_dsub>
 8009118:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800911c:	465d      	mov	r5, fp
 800911e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009122:	f7f7 fd4b 	bl	8000bbc <__aeabi_d2iz>
 8009126:	4606      	mov	r6, r0
 8009128:	f7f7 fa2e 	bl	8000588 <__aeabi_i2d>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009134:	f7f7 f8da 	bl	80002ec <__aeabi_dsub>
 8009138:	3630      	adds	r6, #48	; 0x30
 800913a:	f805 6b01 	strb.w	r6, [r5], #1
 800913e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009142:	e9cd 0100 	strd	r0, r1, [sp]
 8009146:	f7f7 fcfb 	bl	8000b40 <__aeabi_dcmplt>
 800914a:	2800      	cmp	r0, #0
 800914c:	d163      	bne.n	8009216 <_dtoa_r+0x5de>
 800914e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009152:	2000      	movs	r0, #0
 8009154:	4937      	ldr	r1, [pc, #220]	; (8009234 <_dtoa_r+0x5fc>)
 8009156:	f7f7 f8c9 	bl	80002ec <__aeabi_dsub>
 800915a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800915e:	f7f7 fcef 	bl	8000b40 <__aeabi_dcmplt>
 8009162:	2800      	cmp	r0, #0
 8009164:	f040 80b7 	bne.w	80092d6 <_dtoa_r+0x69e>
 8009168:	eba5 030b 	sub.w	r3, r5, fp
 800916c:	429f      	cmp	r7, r3
 800916e:	f77f af7c 	ble.w	800906a <_dtoa_r+0x432>
 8009172:	2200      	movs	r2, #0
 8009174:	4b30      	ldr	r3, [pc, #192]	; (8009238 <_dtoa_r+0x600>)
 8009176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800917a:	f7f7 fa6f 	bl	800065c <__aeabi_dmul>
 800917e:	2200      	movs	r2, #0
 8009180:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009184:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <_dtoa_r+0x600>)
 8009186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800918a:	f7f7 fa67 	bl	800065c <__aeabi_dmul>
 800918e:	e9cd 0100 	strd	r0, r1, [sp]
 8009192:	e7c4      	b.n	800911e <_dtoa_r+0x4e6>
 8009194:	462a      	mov	r2, r5
 8009196:	4633      	mov	r3, r6
 8009198:	f7f7 fa60 	bl	800065c <__aeabi_dmul>
 800919c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091a0:	eb0b 0507 	add.w	r5, fp, r7
 80091a4:	465e      	mov	r6, fp
 80091a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091aa:	f7f7 fd07 	bl	8000bbc <__aeabi_d2iz>
 80091ae:	4607      	mov	r7, r0
 80091b0:	f7f7 f9ea 	bl	8000588 <__aeabi_i2d>
 80091b4:	3730      	adds	r7, #48	; 0x30
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091be:	f7f7 f895 	bl	80002ec <__aeabi_dsub>
 80091c2:	f806 7b01 	strb.w	r7, [r6], #1
 80091c6:	42ae      	cmp	r6, r5
 80091c8:	e9cd 0100 	strd	r0, r1, [sp]
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	d126      	bne.n	8009220 <_dtoa_r+0x5e8>
 80091d2:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <_dtoa_r+0x60c>)
 80091d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091d8:	f7f7 f88a 	bl	80002f0 <__adddf3>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e4:	f7f7 fcca 	bl	8000b7c <__aeabi_dcmpgt>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d174      	bne.n	80092d6 <_dtoa_r+0x69e>
 80091ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091f0:	2000      	movs	r0, #0
 80091f2:	4914      	ldr	r1, [pc, #80]	; (8009244 <_dtoa_r+0x60c>)
 80091f4:	f7f7 f87a 	bl	80002ec <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009200:	f7f7 fc9e 	bl	8000b40 <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	f43f af30 	beq.w	800906a <_dtoa_r+0x432>
 800920a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800920e:	2b30      	cmp	r3, #48	; 0x30
 8009210:	f105 32ff 	add.w	r2, r5, #4294967295
 8009214:	d002      	beq.n	800921c <_dtoa_r+0x5e4>
 8009216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800921a:	e04a      	b.n	80092b2 <_dtoa_r+0x67a>
 800921c:	4615      	mov	r5, r2
 800921e:	e7f4      	b.n	800920a <_dtoa_r+0x5d2>
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <_dtoa_r+0x600>)
 8009222:	f7f7 fa1b 	bl	800065c <__aeabi_dmul>
 8009226:	e9cd 0100 	strd	r0, r1, [sp]
 800922a:	e7bc      	b.n	80091a6 <_dtoa_r+0x56e>
 800922c:	0800b9b8 	.word	0x0800b9b8
 8009230:	0800b990 	.word	0x0800b990
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	40240000 	.word	0x40240000
 800923c:	401c0000 	.word	0x401c0000
 8009240:	40140000 	.word	0x40140000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	e9dd 6700 	ldrd	r6, r7, [sp]
 800924c:	465d      	mov	r5, fp
 800924e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 fb2b 	bl	80008b0 <__aeabi_ddiv>
 800925a:	f7f7 fcaf 	bl	8000bbc <__aeabi_d2iz>
 800925e:	4680      	mov	r8, r0
 8009260:	f7f7 f992 	bl	8000588 <__aeabi_i2d>
 8009264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009268:	f7f7 f9f8 	bl	800065c <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009278:	f7f7 f838 	bl	80002ec <__aeabi_dsub>
 800927c:	f805 6b01 	strb.w	r6, [r5], #1
 8009280:	eba5 060b 	sub.w	r6, r5, fp
 8009284:	45b1      	cmp	r9, r6
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	d139      	bne.n	8009300 <_dtoa_r+0x6c8>
 800928c:	f7f7 f830 	bl	80002f0 <__adddf3>
 8009290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	f7f7 fc70 	bl	8000b7c <__aeabi_dcmpgt>
 800929c:	b9c8      	cbnz	r0, 80092d2 <_dtoa_r+0x69a>
 800929e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092a2:	4630      	mov	r0, r6
 80092a4:	4639      	mov	r1, r7
 80092a6:	f7f7 fc41 	bl	8000b2c <__aeabi_dcmpeq>
 80092aa:	b110      	cbz	r0, 80092b2 <_dtoa_r+0x67a>
 80092ac:	f018 0f01 	tst.w	r8, #1
 80092b0:	d10f      	bne.n	80092d2 <_dtoa_r+0x69a>
 80092b2:	9904      	ldr	r1, [sp, #16]
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 fd13 	bl	8009ce0 <_Bfree>
 80092ba:	2300      	movs	r3, #0
 80092bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092be:	702b      	strb	r3, [r5, #0]
 80092c0:	f10a 0301 	add.w	r3, sl, #1
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8241 	beq.w	8009750 <_dtoa_r+0xb18>
 80092ce:	601d      	str	r5, [r3, #0]
 80092d0:	e23e      	b.n	8009750 <_dtoa_r+0xb18>
 80092d2:	f8cd a020 	str.w	sl, [sp, #32]
 80092d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092da:	2a39      	cmp	r2, #57	; 0x39
 80092dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80092e0:	d108      	bne.n	80092f4 <_dtoa_r+0x6bc>
 80092e2:	459b      	cmp	fp, r3
 80092e4:	d10a      	bne.n	80092fc <_dtoa_r+0x6c4>
 80092e6:	9b08      	ldr	r3, [sp, #32]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	2330      	movs	r3, #48	; 0x30
 80092ee:	f88b 3000 	strb.w	r3, [fp]
 80092f2:	465b      	mov	r3, fp
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	3201      	adds	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e78c      	b.n	8009216 <_dtoa_r+0x5de>
 80092fc:	461d      	mov	r5, r3
 80092fe:	e7ea      	b.n	80092d6 <_dtoa_r+0x69e>
 8009300:	2200      	movs	r2, #0
 8009302:	4b9b      	ldr	r3, [pc, #620]	; (8009570 <_dtoa_r+0x938>)
 8009304:	f7f7 f9aa 	bl	800065c <__aeabi_dmul>
 8009308:	2200      	movs	r2, #0
 800930a:	2300      	movs	r3, #0
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	f7f7 fc0c 	bl	8000b2c <__aeabi_dcmpeq>
 8009314:	2800      	cmp	r0, #0
 8009316:	d09a      	beq.n	800924e <_dtoa_r+0x616>
 8009318:	e7cb      	b.n	80092b2 <_dtoa_r+0x67a>
 800931a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800931c:	2a00      	cmp	r2, #0
 800931e:	f000 808b 	beq.w	8009438 <_dtoa_r+0x800>
 8009322:	9a06      	ldr	r2, [sp, #24]
 8009324:	2a01      	cmp	r2, #1
 8009326:	dc6e      	bgt.n	8009406 <_dtoa_r+0x7ce>
 8009328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800932a:	2a00      	cmp	r2, #0
 800932c:	d067      	beq.n	80093fe <_dtoa_r+0x7c6>
 800932e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009332:	9f07      	ldr	r7, [sp, #28]
 8009334:	9d05      	ldr	r5, [sp, #20]
 8009336:	9a05      	ldr	r2, [sp, #20]
 8009338:	2101      	movs	r1, #1
 800933a:	441a      	add	r2, r3
 800933c:	4620      	mov	r0, r4
 800933e:	9205      	str	r2, [sp, #20]
 8009340:	4498      	add	r8, r3
 8009342:	f000 fd6d 	bl	8009e20 <__i2b>
 8009346:	4606      	mov	r6, r0
 8009348:	2d00      	cmp	r5, #0
 800934a:	dd0c      	ble.n	8009366 <_dtoa_r+0x72e>
 800934c:	f1b8 0f00 	cmp.w	r8, #0
 8009350:	dd09      	ble.n	8009366 <_dtoa_r+0x72e>
 8009352:	4545      	cmp	r5, r8
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	462b      	mov	r3, r5
 8009358:	bfa8      	it	ge
 800935a:	4643      	movge	r3, r8
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	9205      	str	r2, [sp, #20]
 8009360:	1aed      	subs	r5, r5, r3
 8009362:	eba8 0803 	sub.w	r8, r8, r3
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	b1eb      	cbz	r3, 80093a6 <_dtoa_r+0x76e>
 800936a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	d067      	beq.n	8009440 <_dtoa_r+0x808>
 8009370:	b18f      	cbz	r7, 8009396 <_dtoa_r+0x75e>
 8009372:	4631      	mov	r1, r6
 8009374:	463a      	mov	r2, r7
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fdf2 	bl	8009f60 <__pow5mult>
 800937c:	9a04      	ldr	r2, [sp, #16]
 800937e:	4601      	mov	r1, r0
 8009380:	4606      	mov	r6, r0
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fd55 	bl	8009e32 <__multiply>
 8009388:	9904      	ldr	r1, [sp, #16]
 800938a:	9008      	str	r0, [sp, #32]
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fca7 	bl	8009ce0 <_Bfree>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9b07      	ldr	r3, [sp, #28]
 8009398:	1bda      	subs	r2, r3, r7
 800939a:	d004      	beq.n	80093a6 <_dtoa_r+0x76e>
 800939c:	9904      	ldr	r1, [sp, #16]
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fdde 	bl	8009f60 <__pow5mult>
 80093a4:	9004      	str	r0, [sp, #16]
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fd39 	bl	8009e20 <__i2b>
 80093ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093b0:	4607      	mov	r7, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 81d0 	beq.w	8009758 <_dtoa_r+0xb20>
 80093b8:	461a      	mov	r2, r3
 80093ba:	4601      	mov	r1, r0
 80093bc:	4620      	mov	r0, r4
 80093be:	f000 fdcf 	bl	8009f60 <__pow5mult>
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	4607      	mov	r7, r0
 80093c8:	dc40      	bgt.n	800944c <_dtoa_r+0x814>
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d139      	bne.n	8009444 <_dtoa_r+0x80c>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d136      	bne.n	8009448 <_dtoa_r+0x810>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	b12b      	cbz	r3, 80093f2 <_dtoa_r+0x7ba>
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	f108 0801 	add.w	r8, r8, #1
 80093f0:	2301      	movs	r3, #1
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d12a      	bne.n	8009450 <_dtoa_r+0x818>
 80093fa:	2001      	movs	r0, #1
 80093fc:	e030      	b.n	8009460 <_dtoa_r+0x828>
 80093fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009400:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009404:	e795      	b.n	8009332 <_dtoa_r+0x6fa>
 8009406:	9b07      	ldr	r3, [sp, #28]
 8009408:	f109 37ff 	add.w	r7, r9, #4294967295
 800940c:	42bb      	cmp	r3, r7
 800940e:	bfbf      	itttt	lt
 8009410:	9b07      	ldrlt	r3, [sp, #28]
 8009412:	9707      	strlt	r7, [sp, #28]
 8009414:	1afa      	sublt	r2, r7, r3
 8009416:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009418:	bfbb      	ittet	lt
 800941a:	189b      	addlt	r3, r3, r2
 800941c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800941e:	1bdf      	subge	r7, r3, r7
 8009420:	2700      	movlt	r7, #0
 8009422:	f1b9 0f00 	cmp.w	r9, #0
 8009426:	bfb5      	itete	lt
 8009428:	9b05      	ldrlt	r3, [sp, #20]
 800942a:	9d05      	ldrge	r5, [sp, #20]
 800942c:	eba3 0509 	sublt.w	r5, r3, r9
 8009430:	464b      	movge	r3, r9
 8009432:	bfb8      	it	lt
 8009434:	2300      	movlt	r3, #0
 8009436:	e77e      	b.n	8009336 <_dtoa_r+0x6fe>
 8009438:	9f07      	ldr	r7, [sp, #28]
 800943a:	9d05      	ldr	r5, [sp, #20]
 800943c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800943e:	e783      	b.n	8009348 <_dtoa_r+0x710>
 8009440:	9a07      	ldr	r2, [sp, #28]
 8009442:	e7ab      	b.n	800939c <_dtoa_r+0x764>
 8009444:	2300      	movs	r3, #0
 8009446:	e7d4      	b.n	80093f2 <_dtoa_r+0x7ba>
 8009448:	9b00      	ldr	r3, [sp, #0]
 800944a:	e7d2      	b.n	80093f2 <_dtoa_r+0x7ba>
 800944c:	2300      	movs	r3, #0
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009456:	6918      	ldr	r0, [r3, #16]
 8009458:	f000 fc94 	bl	8009d84 <__hi0bits>
 800945c:	f1c0 0020 	rsb	r0, r0, #32
 8009460:	4440      	add	r0, r8
 8009462:	f010 001f 	ands.w	r0, r0, #31
 8009466:	d047      	beq.n	80094f8 <_dtoa_r+0x8c0>
 8009468:	f1c0 0320 	rsb	r3, r0, #32
 800946c:	2b04      	cmp	r3, #4
 800946e:	dd3b      	ble.n	80094e8 <_dtoa_r+0x8b0>
 8009470:	9b05      	ldr	r3, [sp, #20]
 8009472:	f1c0 001c 	rsb	r0, r0, #28
 8009476:	4403      	add	r3, r0
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	4405      	add	r5, r0
 800947c:	4480      	add	r8, r0
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dd05      	ble.n	8009490 <_dtoa_r+0x858>
 8009484:	461a      	mov	r2, r3
 8009486:	9904      	ldr	r1, [sp, #16]
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fdb7 	bl	8009ffc <__lshift>
 800948e:	9004      	str	r0, [sp, #16]
 8009490:	f1b8 0f00 	cmp.w	r8, #0
 8009494:	dd05      	ble.n	80094a2 <_dtoa_r+0x86a>
 8009496:	4639      	mov	r1, r7
 8009498:	4642      	mov	r2, r8
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fdae 	bl	8009ffc <__lshift>
 80094a0:	4607      	mov	r7, r0
 80094a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a4:	b353      	cbz	r3, 80094fc <_dtoa_r+0x8c4>
 80094a6:	4639      	mov	r1, r7
 80094a8:	9804      	ldr	r0, [sp, #16]
 80094aa:	f000 fdfb 	bl	800a0a4 <__mcmp>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	da24      	bge.n	80094fc <_dtoa_r+0x8c4>
 80094b2:	2300      	movs	r3, #0
 80094b4:	220a      	movs	r2, #10
 80094b6:	9904      	ldr	r1, [sp, #16]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fc28 	bl	8009d0e <__multadd>
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	9004      	str	r0, [sp, #16]
 80094c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 814d 	beq.w	8009766 <_dtoa_r+0xb2e>
 80094cc:	2300      	movs	r3, #0
 80094ce:	4631      	mov	r1, r6
 80094d0:	220a      	movs	r2, #10
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fc1b 	bl	8009d0e <__multadd>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	4606      	mov	r6, r0
 80094de:	dc4f      	bgt.n	8009580 <_dtoa_r+0x948>
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	dd4c      	ble.n	8009580 <_dtoa_r+0x948>
 80094e6:	e011      	b.n	800950c <_dtoa_r+0x8d4>
 80094e8:	d0c9      	beq.n	800947e <_dtoa_r+0x846>
 80094ea:	9a05      	ldr	r2, [sp, #20]
 80094ec:	331c      	adds	r3, #28
 80094ee:	441a      	add	r2, r3
 80094f0:	9205      	str	r2, [sp, #20]
 80094f2:	441d      	add	r5, r3
 80094f4:	4498      	add	r8, r3
 80094f6:	e7c2      	b.n	800947e <_dtoa_r+0x846>
 80094f8:	4603      	mov	r3, r0
 80094fa:	e7f6      	b.n	80094ea <_dtoa_r+0x8b2>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	dc38      	bgt.n	8009574 <_dtoa_r+0x93c>
 8009502:	9b06      	ldr	r3, [sp, #24]
 8009504:	2b02      	cmp	r3, #2
 8009506:	dd35      	ble.n	8009574 <_dtoa_r+0x93c>
 8009508:	f8cd 9008 	str.w	r9, [sp, #8]
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	b963      	cbnz	r3, 800952a <_dtoa_r+0x8f2>
 8009510:	4639      	mov	r1, r7
 8009512:	2205      	movs	r2, #5
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fbfa 	bl	8009d0e <__multadd>
 800951a:	4601      	mov	r1, r0
 800951c:	4607      	mov	r7, r0
 800951e:	9804      	ldr	r0, [sp, #16]
 8009520:	f000 fdc0 	bl	800a0a4 <__mcmp>
 8009524:	2800      	cmp	r0, #0
 8009526:	f73f adcc 	bgt.w	80090c2 <_dtoa_r+0x48a>
 800952a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952c:	465d      	mov	r5, fp
 800952e:	ea6f 0a03 	mvn.w	sl, r3
 8009532:	f04f 0900 	mov.w	r9, #0
 8009536:	4639      	mov	r1, r7
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fbd1 	bl	8009ce0 <_Bfree>
 800953e:	2e00      	cmp	r6, #0
 8009540:	f43f aeb7 	beq.w	80092b2 <_dtoa_r+0x67a>
 8009544:	f1b9 0f00 	cmp.w	r9, #0
 8009548:	d005      	beq.n	8009556 <_dtoa_r+0x91e>
 800954a:	45b1      	cmp	r9, r6
 800954c:	d003      	beq.n	8009556 <_dtoa_r+0x91e>
 800954e:	4649      	mov	r1, r9
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fbc5 	bl	8009ce0 <_Bfree>
 8009556:	4631      	mov	r1, r6
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fbc1 	bl	8009ce0 <_Bfree>
 800955e:	e6a8      	b.n	80092b2 <_dtoa_r+0x67a>
 8009560:	2700      	movs	r7, #0
 8009562:	463e      	mov	r6, r7
 8009564:	e7e1      	b.n	800952a <_dtoa_r+0x8f2>
 8009566:	f8dd a020 	ldr.w	sl, [sp, #32]
 800956a:	463e      	mov	r6, r7
 800956c:	e5a9      	b.n	80090c2 <_dtoa_r+0x48a>
 800956e:	bf00      	nop
 8009570:	40240000 	.word	0x40240000
 8009574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009576:	f8cd 9008 	str.w	r9, [sp, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80fa 	beq.w	8009774 <_dtoa_r+0xb3c>
 8009580:	2d00      	cmp	r5, #0
 8009582:	dd05      	ble.n	8009590 <_dtoa_r+0x958>
 8009584:	4631      	mov	r1, r6
 8009586:	462a      	mov	r2, r5
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fd37 	bl	8009ffc <__lshift>
 800958e:	4606      	mov	r6, r0
 8009590:	9b07      	ldr	r3, [sp, #28]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d04c      	beq.n	8009630 <_dtoa_r+0x9f8>
 8009596:	6871      	ldr	r1, [r6, #4]
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fb6d 	bl	8009c78 <_Balloc>
 800959e:	6932      	ldr	r2, [r6, #16]
 80095a0:	3202      	adds	r2, #2
 80095a2:	4605      	mov	r5, r0
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	f106 010c 	add.w	r1, r6, #12
 80095aa:	300c      	adds	r0, #12
 80095ac:	f7fd feaa 	bl	8007304 <memcpy>
 80095b0:	2201      	movs	r2, #1
 80095b2:	4629      	mov	r1, r5
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fd21 	bl	8009ffc <__lshift>
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	f8cd b014 	str.w	fp, [sp, #20]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	46b1      	mov	r9, r6
 80095c6:	9307      	str	r3, [sp, #28]
 80095c8:	4606      	mov	r6, r0
 80095ca:	4639      	mov	r1, r7
 80095cc:	9804      	ldr	r0, [sp, #16]
 80095ce:	f7ff faa7 	bl	8008b20 <quorem>
 80095d2:	4649      	mov	r1, r9
 80095d4:	4605      	mov	r5, r0
 80095d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095da:	9804      	ldr	r0, [sp, #16]
 80095dc:	f000 fd62 	bl	800a0a4 <__mcmp>
 80095e0:	4632      	mov	r2, r6
 80095e2:	9000      	str	r0, [sp, #0]
 80095e4:	4639      	mov	r1, r7
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fd76 	bl	800a0d8 <__mdiff>
 80095ec:	68c3      	ldr	r3, [r0, #12]
 80095ee:	4602      	mov	r2, r0
 80095f0:	bb03      	cbnz	r3, 8009634 <_dtoa_r+0x9fc>
 80095f2:	4601      	mov	r1, r0
 80095f4:	9008      	str	r0, [sp, #32]
 80095f6:	9804      	ldr	r0, [sp, #16]
 80095f8:	f000 fd54 	bl	800a0a4 <__mcmp>
 80095fc:	9a08      	ldr	r2, [sp, #32]
 80095fe:	4603      	mov	r3, r0
 8009600:	4611      	mov	r1, r2
 8009602:	4620      	mov	r0, r4
 8009604:	9308      	str	r3, [sp, #32]
 8009606:	f000 fb6b 	bl	8009ce0 <_Bfree>
 800960a:	9b08      	ldr	r3, [sp, #32]
 800960c:	b9a3      	cbnz	r3, 8009638 <_dtoa_r+0xa00>
 800960e:	9a06      	ldr	r2, [sp, #24]
 8009610:	b992      	cbnz	r2, 8009638 <_dtoa_r+0xa00>
 8009612:	9a07      	ldr	r2, [sp, #28]
 8009614:	b982      	cbnz	r2, 8009638 <_dtoa_r+0xa00>
 8009616:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800961a:	d029      	beq.n	8009670 <_dtoa_r+0xa38>
 800961c:	9b00      	ldr	r3, [sp, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	dd01      	ble.n	8009626 <_dtoa_r+0x9ee>
 8009622:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009626:	9b05      	ldr	r3, [sp, #20]
 8009628:	1c5d      	adds	r5, r3, #1
 800962a:	f883 8000 	strb.w	r8, [r3]
 800962e:	e782      	b.n	8009536 <_dtoa_r+0x8fe>
 8009630:	4630      	mov	r0, r6
 8009632:	e7c2      	b.n	80095ba <_dtoa_r+0x982>
 8009634:	2301      	movs	r3, #1
 8009636:	e7e3      	b.n	8009600 <_dtoa_r+0x9c8>
 8009638:	9a00      	ldr	r2, [sp, #0]
 800963a:	2a00      	cmp	r2, #0
 800963c:	db04      	blt.n	8009648 <_dtoa_r+0xa10>
 800963e:	d125      	bne.n	800968c <_dtoa_r+0xa54>
 8009640:	9a06      	ldr	r2, [sp, #24]
 8009642:	bb1a      	cbnz	r2, 800968c <_dtoa_r+0xa54>
 8009644:	9a07      	ldr	r2, [sp, #28]
 8009646:	bb0a      	cbnz	r2, 800968c <_dtoa_r+0xa54>
 8009648:	2b00      	cmp	r3, #0
 800964a:	ddec      	ble.n	8009626 <_dtoa_r+0x9ee>
 800964c:	2201      	movs	r2, #1
 800964e:	9904      	ldr	r1, [sp, #16]
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fcd3 	bl	8009ffc <__lshift>
 8009656:	4639      	mov	r1, r7
 8009658:	9004      	str	r0, [sp, #16]
 800965a:	f000 fd23 	bl	800a0a4 <__mcmp>
 800965e:	2800      	cmp	r0, #0
 8009660:	dc03      	bgt.n	800966a <_dtoa_r+0xa32>
 8009662:	d1e0      	bne.n	8009626 <_dtoa_r+0x9ee>
 8009664:	f018 0f01 	tst.w	r8, #1
 8009668:	d0dd      	beq.n	8009626 <_dtoa_r+0x9ee>
 800966a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800966e:	d1d8      	bne.n	8009622 <_dtoa_r+0x9ea>
 8009670:	9b05      	ldr	r3, [sp, #20]
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	1c5d      	adds	r5, r3, #1
 8009676:	2339      	movs	r3, #57	; 0x39
 8009678:	7013      	strb	r3, [r2, #0]
 800967a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800967e:	2b39      	cmp	r3, #57	; 0x39
 8009680:	f105 32ff 	add.w	r2, r5, #4294967295
 8009684:	d04f      	beq.n	8009726 <_dtoa_r+0xaee>
 8009686:	3301      	adds	r3, #1
 8009688:	7013      	strb	r3, [r2, #0]
 800968a:	e754      	b.n	8009536 <_dtoa_r+0x8fe>
 800968c:	9a05      	ldr	r2, [sp, #20]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f102 0501 	add.w	r5, r2, #1
 8009694:	dd06      	ble.n	80096a4 <_dtoa_r+0xa6c>
 8009696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800969a:	d0e9      	beq.n	8009670 <_dtoa_r+0xa38>
 800969c:	f108 0801 	add.w	r8, r8, #1
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	e7c2      	b.n	800962a <_dtoa_r+0x9f2>
 80096a4:	9a02      	ldr	r2, [sp, #8]
 80096a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80096aa:	eba5 030b 	sub.w	r3, r5, fp
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d021      	beq.n	80096f6 <_dtoa_r+0xabe>
 80096b2:	2300      	movs	r3, #0
 80096b4:	220a      	movs	r2, #10
 80096b6:	9904      	ldr	r1, [sp, #16]
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fb28 	bl	8009d0e <__multadd>
 80096be:	45b1      	cmp	r9, r6
 80096c0:	9004      	str	r0, [sp, #16]
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	f04f 020a 	mov.w	r2, #10
 80096ca:	4649      	mov	r1, r9
 80096cc:	4620      	mov	r0, r4
 80096ce:	d105      	bne.n	80096dc <_dtoa_r+0xaa4>
 80096d0:	f000 fb1d 	bl	8009d0e <__multadd>
 80096d4:	4681      	mov	r9, r0
 80096d6:	4606      	mov	r6, r0
 80096d8:	9505      	str	r5, [sp, #20]
 80096da:	e776      	b.n	80095ca <_dtoa_r+0x992>
 80096dc:	f000 fb17 	bl	8009d0e <__multadd>
 80096e0:	4631      	mov	r1, r6
 80096e2:	4681      	mov	r9, r0
 80096e4:	2300      	movs	r3, #0
 80096e6:	220a      	movs	r2, #10
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fb10 	bl	8009d0e <__multadd>
 80096ee:	4606      	mov	r6, r0
 80096f0:	e7f2      	b.n	80096d8 <_dtoa_r+0xaa0>
 80096f2:	f04f 0900 	mov.w	r9, #0
 80096f6:	2201      	movs	r2, #1
 80096f8:	9904      	ldr	r1, [sp, #16]
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fc7e 	bl	8009ffc <__lshift>
 8009700:	4639      	mov	r1, r7
 8009702:	9004      	str	r0, [sp, #16]
 8009704:	f000 fcce 	bl	800a0a4 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	dcb6      	bgt.n	800967a <_dtoa_r+0xa42>
 800970c:	d102      	bne.n	8009714 <_dtoa_r+0xadc>
 800970e:	f018 0f01 	tst.w	r8, #1
 8009712:	d1b2      	bne.n	800967a <_dtoa_r+0xa42>
 8009714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009718:	2b30      	cmp	r3, #48	; 0x30
 800971a:	f105 32ff 	add.w	r2, r5, #4294967295
 800971e:	f47f af0a 	bne.w	8009536 <_dtoa_r+0x8fe>
 8009722:	4615      	mov	r5, r2
 8009724:	e7f6      	b.n	8009714 <_dtoa_r+0xadc>
 8009726:	4593      	cmp	fp, r2
 8009728:	d105      	bne.n	8009736 <_dtoa_r+0xafe>
 800972a:	2331      	movs	r3, #49	; 0x31
 800972c:	f10a 0a01 	add.w	sl, sl, #1
 8009730:	f88b 3000 	strb.w	r3, [fp]
 8009734:	e6ff      	b.n	8009536 <_dtoa_r+0x8fe>
 8009736:	4615      	mov	r5, r2
 8009738:	e79f      	b.n	800967a <_dtoa_r+0xa42>
 800973a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80097a0 <_dtoa_r+0xb68>
 800973e:	e007      	b.n	8009750 <_dtoa_r+0xb18>
 8009740:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009742:	f8df b060 	ldr.w	fp, [pc, #96]	; 80097a4 <_dtoa_r+0xb6c>
 8009746:	b11b      	cbz	r3, 8009750 <_dtoa_r+0xb18>
 8009748:	f10b 0308 	add.w	r3, fp, #8
 800974c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	4658      	mov	r0, fp
 8009752:	b017      	add	sp, #92	; 0x5c
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	2b01      	cmp	r3, #1
 800975c:	f77f ae35 	ble.w	80093ca <_dtoa_r+0x792>
 8009760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009762:	9307      	str	r3, [sp, #28]
 8009764:	e649      	b.n	80093fa <_dtoa_r+0x7c2>
 8009766:	9b02      	ldr	r3, [sp, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc03      	bgt.n	8009774 <_dtoa_r+0xb3c>
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	2b02      	cmp	r3, #2
 8009770:	f73f aecc 	bgt.w	800950c <_dtoa_r+0x8d4>
 8009774:	465d      	mov	r5, fp
 8009776:	4639      	mov	r1, r7
 8009778:	9804      	ldr	r0, [sp, #16]
 800977a:	f7ff f9d1 	bl	8008b20 <quorem>
 800977e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009782:	f805 8b01 	strb.w	r8, [r5], #1
 8009786:	9a02      	ldr	r2, [sp, #8]
 8009788:	eba5 030b 	sub.w	r3, r5, fp
 800978c:	429a      	cmp	r2, r3
 800978e:	ddb0      	ble.n	80096f2 <_dtoa_r+0xaba>
 8009790:	2300      	movs	r3, #0
 8009792:	220a      	movs	r2, #10
 8009794:	9904      	ldr	r1, [sp, #16]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 fab9 	bl	8009d0e <__multadd>
 800979c:	9004      	str	r0, [sp, #16]
 800979e:	e7ea      	b.n	8009776 <_dtoa_r+0xb3e>
 80097a0:	0800bbb4 	.word	0x0800bbb4
 80097a4:	0800b8b2 	.word	0x0800b8b2

080097a8 <__sflush_r>:
 80097a8:	898a      	ldrh	r2, [r1, #12]
 80097aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ae:	4605      	mov	r5, r0
 80097b0:	0710      	lsls	r0, r2, #28
 80097b2:	460c      	mov	r4, r1
 80097b4:	d458      	bmi.n	8009868 <__sflush_r+0xc0>
 80097b6:	684b      	ldr	r3, [r1, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dc05      	bgt.n	80097c8 <__sflush_r+0x20>
 80097bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dc02      	bgt.n	80097c8 <__sflush_r+0x20>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d0f9      	beq.n	80097c2 <__sflush_r+0x1a>
 80097ce:	2300      	movs	r3, #0
 80097d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097d4:	682f      	ldr	r7, [r5, #0]
 80097d6:	6a21      	ldr	r1, [r4, #32]
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	d032      	beq.n	8009842 <__sflush_r+0x9a>
 80097dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	075a      	lsls	r2, r3, #29
 80097e2:	d505      	bpl.n	80097f0 <__sflush_r+0x48>
 80097e4:	6863      	ldr	r3, [r4, #4]
 80097e6:	1ac0      	subs	r0, r0, r3
 80097e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ea:	b10b      	cbz	r3, 80097f0 <__sflush_r+0x48>
 80097ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097ee:	1ac0      	subs	r0, r0, r3
 80097f0:	2300      	movs	r3, #0
 80097f2:	4602      	mov	r2, r0
 80097f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097f6:	6a21      	ldr	r1, [r4, #32]
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b0      	blx	r6
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	d106      	bne.n	8009810 <__sflush_r+0x68>
 8009802:	6829      	ldr	r1, [r5, #0]
 8009804:	291d      	cmp	r1, #29
 8009806:	d848      	bhi.n	800989a <__sflush_r+0xf2>
 8009808:	4a29      	ldr	r2, [pc, #164]	; (80098b0 <__sflush_r+0x108>)
 800980a:	40ca      	lsrs	r2, r1
 800980c:	07d6      	lsls	r6, r2, #31
 800980e:	d544      	bpl.n	800989a <__sflush_r+0xf2>
 8009810:	2200      	movs	r2, #0
 8009812:	6062      	str	r2, [r4, #4]
 8009814:	04d9      	lsls	r1, r3, #19
 8009816:	6922      	ldr	r2, [r4, #16]
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	d504      	bpl.n	8009826 <__sflush_r+0x7e>
 800981c:	1c42      	adds	r2, r0, #1
 800981e:	d101      	bne.n	8009824 <__sflush_r+0x7c>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b903      	cbnz	r3, 8009826 <__sflush_r+0x7e>
 8009824:	6560      	str	r0, [r4, #84]	; 0x54
 8009826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009828:	602f      	str	r7, [r5, #0]
 800982a:	2900      	cmp	r1, #0
 800982c:	d0c9      	beq.n	80097c2 <__sflush_r+0x1a>
 800982e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009832:	4299      	cmp	r1, r3
 8009834:	d002      	beq.n	800983c <__sflush_r+0x94>
 8009836:	4628      	mov	r0, r5
 8009838:	f000 fd08 	bl	800a24c <_free_r>
 800983c:	2000      	movs	r0, #0
 800983e:	6360      	str	r0, [r4, #52]	; 0x34
 8009840:	e7c0      	b.n	80097c4 <__sflush_r+0x1c>
 8009842:	2301      	movs	r3, #1
 8009844:	4628      	mov	r0, r5
 8009846:	47b0      	blx	r6
 8009848:	1c41      	adds	r1, r0, #1
 800984a:	d1c8      	bne.n	80097de <__sflush_r+0x36>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0c5      	beq.n	80097de <__sflush_r+0x36>
 8009852:	2b1d      	cmp	r3, #29
 8009854:	d001      	beq.n	800985a <__sflush_r+0xb2>
 8009856:	2b16      	cmp	r3, #22
 8009858:	d101      	bne.n	800985e <__sflush_r+0xb6>
 800985a:	602f      	str	r7, [r5, #0]
 800985c:	e7b1      	b.n	80097c2 <__sflush_r+0x1a>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	e7ad      	b.n	80097c4 <__sflush_r+0x1c>
 8009868:	690f      	ldr	r7, [r1, #16]
 800986a:	2f00      	cmp	r7, #0
 800986c:	d0a9      	beq.n	80097c2 <__sflush_r+0x1a>
 800986e:	0793      	lsls	r3, r2, #30
 8009870:	680e      	ldr	r6, [r1, #0]
 8009872:	bf08      	it	eq
 8009874:	694b      	ldreq	r3, [r1, #20]
 8009876:	600f      	str	r7, [r1, #0]
 8009878:	bf18      	it	ne
 800987a:	2300      	movne	r3, #0
 800987c:	eba6 0807 	sub.w	r8, r6, r7
 8009880:	608b      	str	r3, [r1, #8]
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	dd9c      	ble.n	80097c2 <__sflush_r+0x1a>
 8009888:	4643      	mov	r3, r8
 800988a:	463a      	mov	r2, r7
 800988c:	6a21      	ldr	r1, [r4, #32]
 800988e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009890:	4628      	mov	r0, r5
 8009892:	47b0      	blx	r6
 8009894:	2800      	cmp	r0, #0
 8009896:	dc06      	bgt.n	80098a6 <__sflush_r+0xfe>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	e78e      	b.n	80097c4 <__sflush_r+0x1c>
 80098a6:	4407      	add	r7, r0
 80098a8:	eba8 0800 	sub.w	r8, r8, r0
 80098ac:	e7e9      	b.n	8009882 <__sflush_r+0xda>
 80098ae:	bf00      	nop
 80098b0:	20400001 	.word	0x20400001

080098b4 <_fflush_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	690b      	ldr	r3, [r1, #16]
 80098b8:	4605      	mov	r5, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	b1db      	cbz	r3, 80098f6 <_fflush_r+0x42>
 80098be:	b118      	cbz	r0, 80098c8 <_fflush_r+0x14>
 80098c0:	6983      	ldr	r3, [r0, #24]
 80098c2:	b90b      	cbnz	r3, 80098c8 <_fflush_r+0x14>
 80098c4:	f000 f860 	bl	8009988 <__sinit>
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <_fflush_r+0x48>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d109      	bne.n	80098e2 <_fflush_r+0x2e>
 80098ce:	686c      	ldr	r4, [r5, #4]
 80098d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d4:	b17b      	cbz	r3, 80098f6 <_fflush_r+0x42>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f7ff bf63 	b.w	80097a8 <__sflush_r>
 80098e2:	4b07      	ldr	r3, [pc, #28]	; (8009900 <_fflush_r+0x4c>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d101      	bne.n	80098ec <_fflush_r+0x38>
 80098e8:	68ac      	ldr	r4, [r5, #8]
 80098ea:	e7f1      	b.n	80098d0 <_fflush_r+0x1c>
 80098ec:	4b05      	ldr	r3, [pc, #20]	; (8009904 <_fflush_r+0x50>)
 80098ee:	429c      	cmp	r4, r3
 80098f0:	bf08      	it	eq
 80098f2:	68ec      	ldreq	r4, [r5, #12]
 80098f4:	e7ec      	b.n	80098d0 <_fflush_r+0x1c>
 80098f6:	2000      	movs	r0, #0
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
 80098fa:	bf00      	nop
 80098fc:	0800b8e0 	.word	0x0800b8e0
 8009900:	0800b900 	.word	0x0800b900
 8009904:	0800b8c0 	.word	0x0800b8c0

08009908 <std>:
 8009908:	2300      	movs	r3, #0
 800990a:	b510      	push	{r4, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	e9c0 3300 	strd	r3, r3, [r0]
 8009912:	6083      	str	r3, [r0, #8]
 8009914:	8181      	strh	r1, [r0, #12]
 8009916:	6643      	str	r3, [r0, #100]	; 0x64
 8009918:	81c2      	strh	r2, [r0, #14]
 800991a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800991e:	6183      	str	r3, [r0, #24]
 8009920:	4619      	mov	r1, r3
 8009922:	2208      	movs	r2, #8
 8009924:	305c      	adds	r0, #92	; 0x5c
 8009926:	f7fd fcf8 	bl	800731a <memset>
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x38>)
 800992c:	6263      	str	r3, [r4, #36]	; 0x24
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <std+0x3c>)
 8009930:	62a3      	str	r3, [r4, #40]	; 0x28
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <std+0x40>)
 8009934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x44>)
 8009938:	6224      	str	r4, [r4, #32]
 800993a:	6323      	str	r3, [r4, #48]	; 0x30
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	0800a935 	.word	0x0800a935
 8009944:	0800a95b 	.word	0x0800a95b
 8009948:	0800a993 	.word	0x0800a993
 800994c:	0800a9b7 	.word	0x0800a9b7

08009950 <_cleanup_r>:
 8009950:	4901      	ldr	r1, [pc, #4]	; (8009958 <_cleanup_r+0x8>)
 8009952:	f000 b885 	b.w	8009a60 <_fwalk_reent>
 8009956:	bf00      	nop
 8009958:	080098b5 	.word	0x080098b5

0800995c <__sfmoreglue>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	1e4a      	subs	r2, r1, #1
 8009960:	2568      	movs	r5, #104	; 0x68
 8009962:	4355      	muls	r5, r2
 8009964:	460e      	mov	r6, r1
 8009966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800996a:	f000 fcbd 	bl	800a2e8 <_malloc_r>
 800996e:	4604      	mov	r4, r0
 8009970:	b140      	cbz	r0, 8009984 <__sfmoreglue+0x28>
 8009972:	2100      	movs	r1, #0
 8009974:	e9c0 1600 	strd	r1, r6, [r0]
 8009978:	300c      	adds	r0, #12
 800997a:	60a0      	str	r0, [r4, #8]
 800997c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009980:	f7fd fccb 	bl	800731a <memset>
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}

08009988 <__sinit>:
 8009988:	6983      	ldr	r3, [r0, #24]
 800998a:	b510      	push	{r4, lr}
 800998c:	4604      	mov	r4, r0
 800998e:	bb33      	cbnz	r3, 80099de <__sinit+0x56>
 8009990:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009994:	6503      	str	r3, [r0, #80]	; 0x50
 8009996:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <__sinit+0x58>)
 8009998:	4a12      	ldr	r2, [pc, #72]	; (80099e4 <__sinit+0x5c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6282      	str	r2, [r0, #40]	; 0x28
 800999e:	4298      	cmp	r0, r3
 80099a0:	bf04      	itt	eq
 80099a2:	2301      	moveq	r3, #1
 80099a4:	6183      	streq	r3, [r0, #24]
 80099a6:	f000 f81f 	bl	80099e8 <__sfp>
 80099aa:	6060      	str	r0, [r4, #4]
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f81b 	bl	80099e8 <__sfp>
 80099b2:	60a0      	str	r0, [r4, #8]
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 f817 	bl	80099e8 <__sfp>
 80099ba:	2200      	movs	r2, #0
 80099bc:	60e0      	str	r0, [r4, #12]
 80099be:	2104      	movs	r1, #4
 80099c0:	6860      	ldr	r0, [r4, #4]
 80099c2:	f7ff ffa1 	bl	8009908 <std>
 80099c6:	2201      	movs	r2, #1
 80099c8:	2109      	movs	r1, #9
 80099ca:	68a0      	ldr	r0, [r4, #8]
 80099cc:	f7ff ff9c 	bl	8009908 <std>
 80099d0:	2202      	movs	r2, #2
 80099d2:	2112      	movs	r1, #18
 80099d4:	68e0      	ldr	r0, [r4, #12]
 80099d6:	f7ff ff97 	bl	8009908 <std>
 80099da:	2301      	movs	r3, #1
 80099dc:	61a3      	str	r3, [r4, #24]
 80099de:	bd10      	pop	{r4, pc}
 80099e0:	0800b7e0 	.word	0x0800b7e0
 80099e4:	08009951 	.word	0x08009951

080099e8 <__sfp>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <__sfp+0x70>)
 80099ec:	681e      	ldr	r6, [r3, #0]
 80099ee:	69b3      	ldr	r3, [r6, #24]
 80099f0:	4607      	mov	r7, r0
 80099f2:	b913      	cbnz	r3, 80099fa <__sfp+0x12>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ffc7 	bl	8009988 <__sinit>
 80099fa:	3648      	adds	r6, #72	; 0x48
 80099fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	d503      	bpl.n	8009a0c <__sfp+0x24>
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	b133      	cbz	r3, 8009a16 <__sfp+0x2e>
 8009a08:	6836      	ldr	r6, [r6, #0]
 8009a0a:	e7f7      	b.n	80099fc <__sfp+0x14>
 8009a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a10:	b16d      	cbz	r5, 8009a2e <__sfp+0x46>
 8009a12:	3468      	adds	r4, #104	; 0x68
 8009a14:	e7f4      	b.n	8009a00 <__sfp+0x18>
 8009a16:	2104      	movs	r1, #4
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ff9f 	bl	800995c <__sfmoreglue>
 8009a1e:	6030      	str	r0, [r6, #0]
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1f1      	bne.n	8009a08 <__sfp+0x20>
 8009a24:	230c      	movs	r3, #12
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2e:	4b0b      	ldr	r3, [pc, #44]	; (8009a5c <__sfp+0x74>)
 8009a30:	6665      	str	r5, [r4, #100]	; 0x64
 8009a32:	e9c4 5500 	strd	r5, r5, [r4]
 8009a36:	60a5      	str	r5, [r4, #8]
 8009a38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a40:	2208      	movs	r2, #8
 8009a42:	4629      	mov	r1, r5
 8009a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a48:	f7fd fc67 	bl	800731a <memset>
 8009a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a54:	e7e9      	b.n	8009a2a <__sfp+0x42>
 8009a56:	bf00      	nop
 8009a58:	0800b7e0 	.word	0x0800b7e0
 8009a5c:	ffff0001 	.word	0xffff0001

08009a60 <_fwalk_reent>:
 8009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a64:	4680      	mov	r8, r0
 8009a66:	4689      	mov	r9, r1
 8009a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a6c:	2600      	movs	r6, #0
 8009a6e:	b914      	cbnz	r4, 8009a76 <_fwalk_reent+0x16>
 8009a70:	4630      	mov	r0, r6
 8009a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009a7a:	3f01      	subs	r7, #1
 8009a7c:	d501      	bpl.n	8009a82 <_fwalk_reent+0x22>
 8009a7e:	6824      	ldr	r4, [r4, #0]
 8009a80:	e7f5      	b.n	8009a6e <_fwalk_reent+0xe>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d907      	bls.n	8009a98 <_fwalk_reent+0x38>
 8009a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	d003      	beq.n	8009a98 <_fwalk_reent+0x38>
 8009a90:	4629      	mov	r1, r5
 8009a92:	4640      	mov	r0, r8
 8009a94:	47c8      	blx	r9
 8009a96:	4306      	orrs	r6, r0
 8009a98:	3568      	adds	r5, #104	; 0x68
 8009a9a:	e7ee      	b.n	8009a7a <_fwalk_reent+0x1a>

08009a9c <_findenv_r>:
 8009a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	468b      	mov	fp, r1
 8009aa4:	4690      	mov	r8, r2
 8009aa6:	f001 f877 	bl	800ab98 <__env_lock>
 8009aaa:	4b19      	ldr	r3, [pc, #100]	; (8009b10 <_findenv_r+0x74>)
 8009aac:	681d      	ldr	r5, [r3, #0]
 8009aae:	469a      	mov	sl, r3
 8009ab0:	b13d      	cbz	r5, 8009ac2 <_findenv_r+0x26>
 8009ab2:	465c      	mov	r4, fp
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aba:	b32a      	cbz	r2, 8009b08 <_findenv_r+0x6c>
 8009abc:	2a3d      	cmp	r2, #61	; 0x3d
 8009abe:	461c      	mov	r4, r3
 8009ac0:	d1f8      	bne.n	8009ab4 <_findenv_r+0x18>
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f001 f869 	bl	800ab9a <__env_unlock>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	464d      	mov	r5, r9
 8009ad0:	46a9      	mov	r9, r5
 8009ad2:	f859 0b04 	ldr.w	r0, [r9], #4
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0f3      	beq.n	8009ac2 <_findenv_r+0x26>
 8009ada:	4622      	mov	r2, r4
 8009adc:	4659      	mov	r1, fp
 8009ade:	f000 ff76 	bl	800a9ce <strncmp>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d1f3      	bne.n	8009ace <_findenv_r+0x32>
 8009ae6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009aea:	191e      	adds	r6, r3, r4
 8009aec:	5d1b      	ldrb	r3, [r3, r4]
 8009aee:	2b3d      	cmp	r3, #61	; 0x3d
 8009af0:	d1ed      	bne.n	8009ace <_findenv_r+0x32>
 8009af2:	f8da 3000 	ldr.w	r3, [sl]
 8009af6:	1aed      	subs	r5, r5, r3
 8009af8:	10ad      	asrs	r5, r5, #2
 8009afa:	4638      	mov	r0, r7
 8009afc:	f8c8 5000 	str.w	r5, [r8]
 8009b00:	f001 f84b 	bl	800ab9a <__env_unlock>
 8009b04:	1c70      	adds	r0, r6, #1
 8009b06:	e7e0      	b.n	8009aca <_findenv_r+0x2e>
 8009b08:	eba4 040b 	sub.w	r4, r4, fp
 8009b0c:	e7e0      	b.n	8009ad0 <_findenv_r+0x34>
 8009b0e:	bf00      	nop
 8009b10:	2000023c 	.word	0x2000023c

08009b14 <_getenv_r>:
 8009b14:	b507      	push	{r0, r1, r2, lr}
 8009b16:	aa01      	add	r2, sp, #4
 8009b18:	f7ff ffc0 	bl	8009a9c <_findenv_r>
 8009b1c:	b003      	add	sp, #12
 8009b1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009b24 <__gettzinfo>:
 8009b24:	4800      	ldr	r0, [pc, #0]	; (8009b28 <__gettzinfo+0x4>)
 8009b26:	4770      	bx	lr
 8009b28:	20000078 	.word	0x20000078

08009b2c <__locale_ctype_ptr_l>:
 8009b2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b30:	4770      	bx	lr
	...

08009b34 <__locale_ctype_ptr>:
 8009b34:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <__locale_ctype_ptr+0x14>)
 8009b36:	4a05      	ldr	r2, [pc, #20]	; (8009b4c <__locale_ctype_ptr+0x18>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bf08      	it	eq
 8009b40:	4613      	moveq	r3, r2
 8009b42:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009b46:	4770      	bx	lr
 8009b48:	2000000c 	.word	0x2000000c
 8009b4c:	200000d0 	.word	0x200000d0

08009b50 <_localeconv_r>:
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <_localeconv_r+0x14>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6a18      	ldr	r0, [r3, #32]
 8009b56:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <_localeconv_r+0x18>)
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	bf08      	it	eq
 8009b5c:	4618      	moveq	r0, r3
 8009b5e:	30f0      	adds	r0, #240	; 0xf0
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	2000000c 	.word	0x2000000c
 8009b68:	200000d0 	.word	0x200000d0

08009b6c <__swhatbuf_r>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	460e      	mov	r6, r1
 8009b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b74:	2900      	cmp	r1, #0
 8009b76:	b096      	sub	sp, #88	; 0x58
 8009b78:	4614      	mov	r4, r2
 8009b7a:	461d      	mov	r5, r3
 8009b7c:	da07      	bge.n	8009b8e <__swhatbuf_r+0x22>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	89b3      	ldrh	r3, [r6, #12]
 8009b84:	061a      	lsls	r2, r3, #24
 8009b86:	d410      	bmi.n	8009baa <__swhatbuf_r+0x3e>
 8009b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8c:	e00e      	b.n	8009bac <__swhatbuf_r+0x40>
 8009b8e:	466a      	mov	r2, sp
 8009b90:	f001 f804 	bl	800ab9c <_fstat_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	dbf2      	blt.n	8009b7e <__swhatbuf_r+0x12>
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ba2:	425a      	negs	r2, r3
 8009ba4:	415a      	adcs	r2, r3
 8009ba6:	602a      	str	r2, [r5, #0]
 8009ba8:	e7ee      	b.n	8009b88 <__swhatbuf_r+0x1c>
 8009baa:	2340      	movs	r3, #64	; 0x40
 8009bac:	2000      	movs	r0, #0
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	b016      	add	sp, #88	; 0x58
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <__smakebuf_r>:
 8009bb4:	898b      	ldrh	r3, [r1, #12]
 8009bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb8:	079d      	lsls	r5, r3, #30
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	d507      	bpl.n	8009bd0 <__smakebuf_r+0x1c>
 8009bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	6163      	str	r3, [r4, #20]
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	ab01      	add	r3, sp, #4
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f7ff ffca 	bl	8009b6c <__swhatbuf_r>
 8009bd8:	9900      	ldr	r1, [sp, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f000 fb83 	bl	800a2e8 <_malloc_r>
 8009be2:	b948      	cbnz	r0, 8009bf8 <__smakebuf_r+0x44>
 8009be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d4ef      	bmi.n	8009bcc <__smakebuf_r+0x18>
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7e3      	b.n	8009bc0 <__smakebuf_r+0xc>
 8009bf8:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <__smakebuf_r+0x7c>)
 8009bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	6020      	str	r0, [r4, #0]
 8009c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	9b00      	ldr	r3, [sp, #0]
 8009c08:	6163      	str	r3, [r4, #20]
 8009c0a:	9b01      	ldr	r3, [sp, #4]
 8009c0c:	6120      	str	r0, [r4, #16]
 8009c0e:	b15b      	cbz	r3, 8009c28 <__smakebuf_r+0x74>
 8009c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c14:	4630      	mov	r0, r6
 8009c16:	f000 ffd3 	bl	800abc0 <_isatty_r>
 8009c1a:	b128      	cbz	r0, 8009c28 <__smakebuf_r+0x74>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f023 0303 	bic.w	r3, r3, #3
 8009c22:	f043 0301 	orr.w	r3, r3, #1
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	431d      	orrs	r5, r3
 8009c2c:	81a5      	strh	r5, [r4, #12]
 8009c2e:	e7cd      	b.n	8009bcc <__smakebuf_r+0x18>
 8009c30:	08009951 	.word	0x08009951

08009c34 <malloc>:
 8009c34:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <malloc+0xc>)
 8009c36:	4601      	mov	r1, r0
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f000 bb55 	b.w	800a2e8 <_malloc_r>
 8009c3e:	bf00      	nop
 8009c40:	2000000c 	.word	0x2000000c

08009c44 <free>:
 8009c44:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <free+0xc>)
 8009c46:	4601      	mov	r1, r0
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	f000 baff 	b.w	800a24c <_free_r>
 8009c4e:	bf00      	nop
 8009c50:	2000000c 	.word	0x2000000c

08009c54 <__ascii_mbtowc>:
 8009c54:	b082      	sub	sp, #8
 8009c56:	b901      	cbnz	r1, 8009c5a <__ascii_mbtowc+0x6>
 8009c58:	a901      	add	r1, sp, #4
 8009c5a:	b142      	cbz	r2, 8009c6e <__ascii_mbtowc+0x1a>
 8009c5c:	b14b      	cbz	r3, 8009c72 <__ascii_mbtowc+0x1e>
 8009c5e:	7813      	ldrb	r3, [r2, #0]
 8009c60:	600b      	str	r3, [r1, #0]
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	1c10      	adds	r0, r2, #0
 8009c66:	bf18      	it	ne
 8009c68:	2001      	movne	r0, #1
 8009c6a:	b002      	add	sp, #8
 8009c6c:	4770      	bx	lr
 8009c6e:	4610      	mov	r0, r2
 8009c70:	e7fb      	b.n	8009c6a <__ascii_mbtowc+0x16>
 8009c72:	f06f 0001 	mvn.w	r0, #1
 8009c76:	e7f8      	b.n	8009c6a <__ascii_mbtowc+0x16>

08009c78 <_Balloc>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	460e      	mov	r6, r1
 8009c80:	b93d      	cbnz	r5, 8009c92 <_Balloc+0x1a>
 8009c82:	2010      	movs	r0, #16
 8009c84:	f7ff ffd6 	bl	8009c34 <malloc>
 8009c88:	6260      	str	r0, [r4, #36]	; 0x24
 8009c8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c8e:	6005      	str	r5, [r0, #0]
 8009c90:	60c5      	str	r5, [r0, #12]
 8009c92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c94:	68eb      	ldr	r3, [r5, #12]
 8009c96:	b183      	cbz	r3, 8009cba <_Balloc+0x42>
 8009c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ca0:	b9b8      	cbnz	r0, 8009cd2 <_Balloc+0x5a>
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	fa01 f506 	lsl.w	r5, r1, r6
 8009ca8:	1d6a      	adds	r2, r5, #5
 8009caa:	0092      	lsls	r2, r2, #2
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 fabf 	bl	800a230 <_calloc_r>
 8009cb2:	b160      	cbz	r0, 8009cce <_Balloc+0x56>
 8009cb4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009cb8:	e00e      	b.n	8009cd8 <_Balloc+0x60>
 8009cba:	2221      	movs	r2, #33	; 0x21
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fab6 	bl	800a230 <_calloc_r>
 8009cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc6:	60e8      	str	r0, [r5, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e4      	bne.n	8009c98 <_Balloc+0x20>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	bd70      	pop	{r4, r5, r6, pc}
 8009cd2:	6802      	ldr	r2, [r0, #0]
 8009cd4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cde:	e7f7      	b.n	8009cd0 <_Balloc+0x58>

08009ce0 <_Bfree>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	b93c      	cbnz	r4, 8009cfa <_Bfree+0x1a>
 8009cea:	2010      	movs	r0, #16
 8009cec:	f7ff ffa2 	bl	8009c34 <malloc>
 8009cf0:	6270      	str	r0, [r6, #36]	; 0x24
 8009cf2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf6:	6004      	str	r4, [r0, #0]
 8009cf8:	60c4      	str	r4, [r0, #12]
 8009cfa:	b13d      	cbz	r5, 8009d0c <_Bfree+0x2c>
 8009cfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cfe:	686a      	ldr	r2, [r5, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d06:	6029      	str	r1, [r5, #0]
 8009d08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}

08009d0e <__multadd>:
 8009d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d12:	690d      	ldr	r5, [r1, #16]
 8009d14:	461f      	mov	r7, r3
 8009d16:	4606      	mov	r6, r0
 8009d18:	460c      	mov	r4, r1
 8009d1a:	f101 0c14 	add.w	ip, r1, #20
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8dc 0000 	ldr.w	r0, [ip]
 8009d24:	b281      	uxth	r1, r0
 8009d26:	fb02 7101 	mla	r1, r2, r1, r7
 8009d2a:	0c0f      	lsrs	r7, r1, #16
 8009d2c:	0c00      	lsrs	r0, r0, #16
 8009d2e:	fb02 7000 	mla	r0, r2, r0, r7
 8009d32:	b289      	uxth	r1, r1
 8009d34:	3301      	adds	r3, #1
 8009d36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009d3a:	429d      	cmp	r5, r3
 8009d3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009d40:	f84c 1b04 	str.w	r1, [ip], #4
 8009d44:	dcec      	bgt.n	8009d20 <__multadd+0x12>
 8009d46:	b1d7      	cbz	r7, 8009d7e <__multadd+0x70>
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	dc12      	bgt.n	8009d74 <__multadd+0x66>
 8009d4e:	6861      	ldr	r1, [r4, #4]
 8009d50:	4630      	mov	r0, r6
 8009d52:	3101      	adds	r1, #1
 8009d54:	f7ff ff90 	bl	8009c78 <_Balloc>
 8009d58:	6922      	ldr	r2, [r4, #16]
 8009d5a:	3202      	adds	r2, #2
 8009d5c:	f104 010c 	add.w	r1, r4, #12
 8009d60:	4680      	mov	r8, r0
 8009d62:	0092      	lsls	r2, r2, #2
 8009d64:	300c      	adds	r0, #12
 8009d66:	f7fd facd 	bl	8007304 <memcpy>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff ffb7 	bl	8009ce0 <_Bfree>
 8009d72:	4644      	mov	r4, r8
 8009d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d78:	3501      	adds	r5, #1
 8009d7a:	615f      	str	r7, [r3, #20]
 8009d7c:	6125      	str	r5, [r4, #16]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d84 <__hi0bits>:
 8009d84:	0c02      	lsrs	r2, r0, #16
 8009d86:	0412      	lsls	r2, r2, #16
 8009d88:	4603      	mov	r3, r0
 8009d8a:	b9b2      	cbnz	r2, 8009dba <__hi0bits+0x36>
 8009d8c:	0403      	lsls	r3, r0, #16
 8009d8e:	2010      	movs	r0, #16
 8009d90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d94:	bf04      	itt	eq
 8009d96:	021b      	lsleq	r3, r3, #8
 8009d98:	3008      	addeq	r0, #8
 8009d9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d9e:	bf04      	itt	eq
 8009da0:	011b      	lsleq	r3, r3, #4
 8009da2:	3004      	addeq	r0, #4
 8009da4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009da8:	bf04      	itt	eq
 8009daa:	009b      	lsleq	r3, r3, #2
 8009dac:	3002      	addeq	r0, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	db06      	blt.n	8009dc0 <__hi0bits+0x3c>
 8009db2:	005b      	lsls	r3, r3, #1
 8009db4:	d503      	bpl.n	8009dbe <__hi0bits+0x3a>
 8009db6:	3001      	adds	r0, #1
 8009db8:	4770      	bx	lr
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7e8      	b.n	8009d90 <__hi0bits+0xc>
 8009dbe:	2020      	movs	r0, #32
 8009dc0:	4770      	bx	lr

08009dc2 <__lo0bits>:
 8009dc2:	6803      	ldr	r3, [r0, #0]
 8009dc4:	f013 0207 	ands.w	r2, r3, #7
 8009dc8:	4601      	mov	r1, r0
 8009dca:	d00b      	beq.n	8009de4 <__lo0bits+0x22>
 8009dcc:	07da      	lsls	r2, r3, #31
 8009dce:	d423      	bmi.n	8009e18 <__lo0bits+0x56>
 8009dd0:	0798      	lsls	r0, r3, #30
 8009dd2:	bf49      	itett	mi
 8009dd4:	085b      	lsrmi	r3, r3, #1
 8009dd6:	089b      	lsrpl	r3, r3, #2
 8009dd8:	2001      	movmi	r0, #1
 8009dda:	600b      	strmi	r3, [r1, #0]
 8009ddc:	bf5c      	itt	pl
 8009dde:	600b      	strpl	r3, [r1, #0]
 8009de0:	2002      	movpl	r0, #2
 8009de2:	4770      	bx	lr
 8009de4:	b298      	uxth	r0, r3
 8009de6:	b9a8      	cbnz	r0, 8009e14 <__lo0bits+0x52>
 8009de8:	0c1b      	lsrs	r3, r3, #16
 8009dea:	2010      	movs	r0, #16
 8009dec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009df0:	bf04      	itt	eq
 8009df2:	0a1b      	lsreq	r3, r3, #8
 8009df4:	3008      	addeq	r0, #8
 8009df6:	071a      	lsls	r2, r3, #28
 8009df8:	bf04      	itt	eq
 8009dfa:	091b      	lsreq	r3, r3, #4
 8009dfc:	3004      	addeq	r0, #4
 8009dfe:	079a      	lsls	r2, r3, #30
 8009e00:	bf04      	itt	eq
 8009e02:	089b      	lsreq	r3, r3, #2
 8009e04:	3002      	addeq	r0, #2
 8009e06:	07da      	lsls	r2, r3, #31
 8009e08:	d402      	bmi.n	8009e10 <__lo0bits+0x4e>
 8009e0a:	085b      	lsrs	r3, r3, #1
 8009e0c:	d006      	beq.n	8009e1c <__lo0bits+0x5a>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	4770      	bx	lr
 8009e14:	4610      	mov	r0, r2
 8009e16:	e7e9      	b.n	8009dec <__lo0bits+0x2a>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4770      	bx	lr
 8009e1c:	2020      	movs	r0, #32
 8009e1e:	4770      	bx	lr

08009e20 <__i2b>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	2101      	movs	r1, #1
 8009e26:	f7ff ff27 	bl	8009c78 <_Balloc>
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	6144      	str	r4, [r0, #20]
 8009e2e:	6102      	str	r2, [r0, #16]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__multiply>:
 8009e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e36:	4614      	mov	r4, r2
 8009e38:	690a      	ldr	r2, [r1, #16]
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	bfb8      	it	lt
 8009e40:	460b      	movlt	r3, r1
 8009e42:	4688      	mov	r8, r1
 8009e44:	bfbc      	itt	lt
 8009e46:	46a0      	movlt	r8, r4
 8009e48:	461c      	movlt	r4, r3
 8009e4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e5a:	eb07 0609 	add.w	r6, r7, r9
 8009e5e:	42b3      	cmp	r3, r6
 8009e60:	bfb8      	it	lt
 8009e62:	3101      	addlt	r1, #1
 8009e64:	f7ff ff08 	bl	8009c78 <_Balloc>
 8009e68:	f100 0514 	add.w	r5, r0, #20
 8009e6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e70:	462b      	mov	r3, r5
 8009e72:	2200      	movs	r2, #0
 8009e74:	4573      	cmp	r3, lr
 8009e76:	d316      	bcc.n	8009ea6 <__multiply+0x74>
 8009e78:	f104 0214 	add.w	r2, r4, #20
 8009e7c:	f108 0114 	add.w	r1, r8, #20
 8009e80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	9b00      	ldr	r3, [sp, #0]
 8009e8c:	9201      	str	r2, [sp, #4]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d80c      	bhi.n	8009eac <__multiply+0x7a>
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	dd03      	ble.n	8009e9e <__multiply+0x6c>
 8009e96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d05d      	beq.n	8009f5a <__multiply+0x128>
 8009e9e:	6106      	str	r6, [r0, #16]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	f843 2b04 	str.w	r2, [r3], #4
 8009eaa:	e7e3      	b.n	8009e74 <__multiply+0x42>
 8009eac:	f8b2 b000 	ldrh.w	fp, [r2]
 8009eb0:	f1bb 0f00 	cmp.w	fp, #0
 8009eb4:	d023      	beq.n	8009efe <__multiply+0xcc>
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	46ac      	mov	ip, r5
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ec2:	f8dc a000 	ldr.w	sl, [ip]
 8009ec6:	b2a3      	uxth	r3, r4
 8009ec8:	fa1f fa8a 	uxth.w	sl, sl
 8009ecc:	fb0b a303 	mla	r3, fp, r3, sl
 8009ed0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ed4:	f8dc 4000 	ldr.w	r4, [ip]
 8009ed8:	4443      	add	r3, r8
 8009eda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ede:	fb0b 840a 	mla	r4, fp, sl, r8
 8009ee2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009ee6:	46e2      	mov	sl, ip
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009eee:	454f      	cmp	r7, r9
 8009ef0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ef4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ef8:	d82b      	bhi.n	8009f52 <__multiply+0x120>
 8009efa:	f8cc 8004 	str.w	r8, [ip, #4]
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009f04:	3204      	adds	r2, #4
 8009f06:	f1ba 0f00 	cmp.w	sl, #0
 8009f0a:	d020      	beq.n	8009f4e <__multiply+0x11c>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	4689      	mov	r9, r1
 8009f10:	46a8      	mov	r8, r5
 8009f12:	f04f 0b00 	mov.w	fp, #0
 8009f16:	f8b9 c000 	ldrh.w	ip, [r9]
 8009f1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009f1e:	fb0a 440c 	mla	r4, sl, ip, r4
 8009f22:	445c      	add	r4, fp
 8009f24:	46c4      	mov	ip, r8
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009f2c:	f84c 3b04 	str.w	r3, [ip], #4
 8009f30:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009f38:	0c1b      	lsrs	r3, r3, #16
 8009f3a:	fb0a b303 	mla	r3, sl, r3, fp
 8009f3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009f42:	454f      	cmp	r7, r9
 8009f44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009f48:	d805      	bhi.n	8009f56 <__multiply+0x124>
 8009f4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f4e:	3504      	adds	r5, #4
 8009f50:	e79b      	b.n	8009e8a <__multiply+0x58>
 8009f52:	46d4      	mov	ip, sl
 8009f54:	e7b3      	b.n	8009ebe <__multiply+0x8c>
 8009f56:	46e0      	mov	r8, ip
 8009f58:	e7dd      	b.n	8009f16 <__multiply+0xe4>
 8009f5a:	3e01      	subs	r6, #1
 8009f5c:	e799      	b.n	8009e92 <__multiply+0x60>
	...

08009f60 <__pow5mult>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	4615      	mov	r5, r2
 8009f66:	f012 0203 	ands.w	r2, r2, #3
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	d007      	beq.n	8009f80 <__pow5mult+0x20>
 8009f70:	3a01      	subs	r2, #1
 8009f72:	4c21      	ldr	r4, [pc, #132]	; (8009ff8 <__pow5mult+0x98>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f7a:	f7ff fec8 	bl	8009d0e <__multadd>
 8009f7e:	4607      	mov	r7, r0
 8009f80:	10ad      	asrs	r5, r5, #2
 8009f82:	d035      	beq.n	8009ff0 <__pow5mult+0x90>
 8009f84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f86:	b93c      	cbnz	r4, 8009f98 <__pow5mult+0x38>
 8009f88:	2010      	movs	r0, #16
 8009f8a:	f7ff fe53 	bl	8009c34 <malloc>
 8009f8e:	6270      	str	r0, [r6, #36]	; 0x24
 8009f90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f94:	6004      	str	r4, [r0, #0]
 8009f96:	60c4      	str	r4, [r0, #12]
 8009f98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fa0:	b94c      	cbnz	r4, 8009fb6 <__pow5mult+0x56>
 8009fa2:	f240 2171 	movw	r1, #625	; 0x271
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff ff3a 	bl	8009e20 <__i2b>
 8009fac:	2300      	movs	r3, #0
 8009fae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	6003      	str	r3, [r0, #0]
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	07eb      	lsls	r3, r5, #31
 8009fbc:	d50a      	bpl.n	8009fd4 <__pow5mult+0x74>
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ff35 	bl	8009e32 <__multiply>
 8009fc8:	4639      	mov	r1, r7
 8009fca:	4681      	mov	r9, r0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff fe87 	bl	8009ce0 <_Bfree>
 8009fd2:	464f      	mov	r7, r9
 8009fd4:	106d      	asrs	r5, r5, #1
 8009fd6:	d00b      	beq.n	8009ff0 <__pow5mult+0x90>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	b938      	cbnz	r0, 8009fec <__pow5mult+0x8c>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7ff ff26 	bl	8009e32 <__multiply>
 8009fe6:	6020      	str	r0, [r4, #0]
 8009fe8:	f8c0 8000 	str.w	r8, [r0]
 8009fec:	4604      	mov	r4, r0
 8009fee:	e7e4      	b.n	8009fba <__pow5mult+0x5a>
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800ba80 	.word	0x0800ba80

08009ffc <__lshift>:
 8009ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a000:	460c      	mov	r4, r1
 800a002:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	6849      	ldr	r1, [r1, #4]
 800a00a:	eb0a 0903 	add.w	r9, sl, r3
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	4607      	mov	r7, r0
 800a012:	4616      	mov	r6, r2
 800a014:	f109 0501 	add.w	r5, r9, #1
 800a018:	42ab      	cmp	r3, r5
 800a01a:	db32      	blt.n	800a082 <__lshift+0x86>
 800a01c:	4638      	mov	r0, r7
 800a01e:	f7ff fe2b 	bl	8009c78 <_Balloc>
 800a022:	2300      	movs	r3, #0
 800a024:	4680      	mov	r8, r0
 800a026:	f100 0114 	add.w	r1, r0, #20
 800a02a:	461a      	mov	r2, r3
 800a02c:	4553      	cmp	r3, sl
 800a02e:	db2b      	blt.n	800a088 <__lshift+0x8c>
 800a030:	6920      	ldr	r0, [r4, #16]
 800a032:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a036:	f104 0314 	add.w	r3, r4, #20
 800a03a:	f016 021f 	ands.w	r2, r6, #31
 800a03e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a042:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a046:	d025      	beq.n	800a094 <__lshift+0x98>
 800a048:	f1c2 0e20 	rsb	lr, r2, #32
 800a04c:	2000      	movs	r0, #0
 800a04e:	681e      	ldr	r6, [r3, #0]
 800a050:	468a      	mov	sl, r1
 800a052:	4096      	lsls	r6, r2
 800a054:	4330      	orrs	r0, r6
 800a056:	f84a 0b04 	str.w	r0, [sl], #4
 800a05a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a05e:	459c      	cmp	ip, r3
 800a060:	fa20 f00e 	lsr.w	r0, r0, lr
 800a064:	d814      	bhi.n	800a090 <__lshift+0x94>
 800a066:	6048      	str	r0, [r1, #4]
 800a068:	b108      	cbz	r0, 800a06e <__lshift+0x72>
 800a06a:	f109 0502 	add.w	r5, r9, #2
 800a06e:	3d01      	subs	r5, #1
 800a070:	4638      	mov	r0, r7
 800a072:	f8c8 5010 	str.w	r5, [r8, #16]
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fe32 	bl	8009ce0 <_Bfree>
 800a07c:	4640      	mov	r0, r8
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	3101      	adds	r1, #1
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	e7c7      	b.n	800a018 <__lshift+0x1c>
 800a088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a08c:	3301      	adds	r3, #1
 800a08e:	e7cd      	b.n	800a02c <__lshift+0x30>
 800a090:	4651      	mov	r1, sl
 800a092:	e7dc      	b.n	800a04e <__lshift+0x52>
 800a094:	3904      	subs	r1, #4
 800a096:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a09e:	459c      	cmp	ip, r3
 800a0a0:	d8f9      	bhi.n	800a096 <__lshift+0x9a>
 800a0a2:	e7e4      	b.n	800a06e <__lshift+0x72>

0800a0a4 <__mcmp>:
 800a0a4:	6903      	ldr	r3, [r0, #16]
 800a0a6:	690a      	ldr	r2, [r1, #16]
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	b530      	push	{r4, r5, lr}
 800a0ac:	d10c      	bne.n	800a0c8 <__mcmp+0x24>
 800a0ae:	0092      	lsls	r2, r2, #2
 800a0b0:	3014      	adds	r0, #20
 800a0b2:	3114      	adds	r1, #20
 800a0b4:	1884      	adds	r4, r0, r2
 800a0b6:	4411      	add	r1, r2
 800a0b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0c0:	4295      	cmp	r5, r2
 800a0c2:	d003      	beq.n	800a0cc <__mcmp+0x28>
 800a0c4:	d305      	bcc.n	800a0d2 <__mcmp+0x2e>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	bd30      	pop	{r4, r5, pc}
 800a0cc:	42a0      	cmp	r0, r4
 800a0ce:	d3f3      	bcc.n	800a0b8 <__mcmp+0x14>
 800a0d0:	e7fa      	b.n	800a0c8 <__mcmp+0x24>
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	e7f7      	b.n	800a0c8 <__mcmp+0x24>

0800a0d8 <__mdiff>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	460d      	mov	r5, r1
 800a0de:	4607      	mov	r7, r0
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	f7ff ffdd 	bl	800a0a4 <__mcmp>
 800a0ea:	1e06      	subs	r6, r0, #0
 800a0ec:	d108      	bne.n	800a100 <__mdiff+0x28>
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff fdc1 	bl	8009c78 <_Balloc>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a100:	bfa4      	itt	ge
 800a102:	4623      	movge	r3, r4
 800a104:	462c      	movge	r4, r5
 800a106:	4638      	mov	r0, r7
 800a108:	6861      	ldr	r1, [r4, #4]
 800a10a:	bfa6      	itte	ge
 800a10c:	461d      	movge	r5, r3
 800a10e:	2600      	movge	r6, #0
 800a110:	2601      	movlt	r6, #1
 800a112:	f7ff fdb1 	bl	8009c78 <_Balloc>
 800a116:	692b      	ldr	r3, [r5, #16]
 800a118:	60c6      	str	r6, [r0, #12]
 800a11a:	6926      	ldr	r6, [r4, #16]
 800a11c:	f105 0914 	add.w	r9, r5, #20
 800a120:	f104 0214 	add.w	r2, r4, #20
 800a124:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a128:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a12c:	f100 0514 	add.w	r5, r0, #20
 800a130:	f04f 0e00 	mov.w	lr, #0
 800a134:	f852 ab04 	ldr.w	sl, [r2], #4
 800a138:	f859 4b04 	ldr.w	r4, [r9], #4
 800a13c:	fa1e f18a 	uxtah	r1, lr, sl
 800a140:	b2a3      	uxth	r3, r4
 800a142:	1ac9      	subs	r1, r1, r3
 800a144:	0c23      	lsrs	r3, r4, #16
 800a146:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a14a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a14e:	b289      	uxth	r1, r1
 800a150:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a154:	45c8      	cmp	r8, r9
 800a156:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a15a:	4694      	mov	ip, r2
 800a15c:	f845 3b04 	str.w	r3, [r5], #4
 800a160:	d8e8      	bhi.n	800a134 <__mdiff+0x5c>
 800a162:	45bc      	cmp	ip, r7
 800a164:	d304      	bcc.n	800a170 <__mdiff+0x98>
 800a166:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a16a:	b183      	cbz	r3, 800a18e <__mdiff+0xb6>
 800a16c:	6106      	str	r6, [r0, #16]
 800a16e:	e7c5      	b.n	800a0fc <__mdiff+0x24>
 800a170:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a174:	fa1e f381 	uxtah	r3, lr, r1
 800a178:	141a      	asrs	r2, r3, #16
 800a17a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a184:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a188:	f845 3b04 	str.w	r3, [r5], #4
 800a18c:	e7e9      	b.n	800a162 <__mdiff+0x8a>
 800a18e:	3e01      	subs	r6, #1
 800a190:	e7e9      	b.n	800a166 <__mdiff+0x8e>

0800a192 <__d2b>:
 800a192:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a196:	460e      	mov	r6, r1
 800a198:	2101      	movs	r1, #1
 800a19a:	ec59 8b10 	vmov	r8, r9, d0
 800a19e:	4615      	mov	r5, r2
 800a1a0:	f7ff fd6a 	bl	8009c78 <_Balloc>
 800a1a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1ae:	bb34      	cbnz	r4, 800a1fe <__d2b+0x6c>
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	f1b8 0300 	subs.w	r3, r8, #0
 800a1b6:	d027      	beq.n	800a208 <__d2b+0x76>
 800a1b8:	a802      	add	r0, sp, #8
 800a1ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a1be:	f7ff fe00 	bl	8009dc2 <__lo0bits>
 800a1c2:	9900      	ldr	r1, [sp, #0]
 800a1c4:	b1f0      	cbz	r0, 800a204 <__d2b+0x72>
 800a1c6:	9a01      	ldr	r2, [sp, #4]
 800a1c8:	f1c0 0320 	rsb	r3, r0, #32
 800a1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	40c2      	lsrs	r2, r0
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	9201      	str	r2, [sp, #4]
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf14      	ite	ne
 800a1e0:	2102      	movne	r1, #2
 800a1e2:	2101      	moveq	r1, #1
 800a1e4:	6139      	str	r1, [r7, #16]
 800a1e6:	b1c4      	cbz	r4, 800a21a <__d2b+0x88>
 800a1e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1ec:	4404      	add	r4, r0
 800a1ee:	6034      	str	r4, [r6, #0]
 800a1f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1f4:	6028      	str	r0, [r5, #0]
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	b003      	add	sp, #12
 800a1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a202:	e7d5      	b.n	800a1b0 <__d2b+0x1e>
 800a204:	6179      	str	r1, [r7, #20]
 800a206:	e7e7      	b.n	800a1d8 <__d2b+0x46>
 800a208:	a801      	add	r0, sp, #4
 800a20a:	f7ff fdda 	bl	8009dc2 <__lo0bits>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	617b      	str	r3, [r7, #20]
 800a212:	2101      	movs	r1, #1
 800a214:	6139      	str	r1, [r7, #16]
 800a216:	3020      	adds	r0, #32
 800a218:	e7e5      	b.n	800a1e6 <__d2b+0x54>
 800a21a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a21e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a222:	6030      	str	r0, [r6, #0]
 800a224:	6918      	ldr	r0, [r3, #16]
 800a226:	f7ff fdad 	bl	8009d84 <__hi0bits>
 800a22a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a22e:	e7e1      	b.n	800a1f4 <__d2b+0x62>

0800a230 <_calloc_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	fb02 f401 	mul.w	r4, r2, r1
 800a236:	4621      	mov	r1, r4
 800a238:	f000 f856 	bl	800a2e8 <_malloc_r>
 800a23c:	4605      	mov	r5, r0
 800a23e:	b118      	cbz	r0, 800a248 <_calloc_r+0x18>
 800a240:	4622      	mov	r2, r4
 800a242:	2100      	movs	r1, #0
 800a244:	f7fd f869 	bl	800731a <memset>
 800a248:	4628      	mov	r0, r5
 800a24a:	bd38      	pop	{r3, r4, r5, pc}

0800a24c <_free_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	2900      	cmp	r1, #0
 800a252:	d045      	beq.n	800a2e0 <_free_r+0x94>
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f0c      	subs	r4, r1, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	18e4      	addlt	r4, r4, r3
 800a260:	f000 fce9 	bl	800ac36 <__malloc_lock>
 800a264:	4a1f      	ldr	r2, [pc, #124]	; (800a2e4 <_free_r+0x98>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	4610      	mov	r0, r2
 800a26a:	b933      	cbnz	r3, 800a27a <_free_r+0x2e>
 800a26c:	6063      	str	r3, [r4, #4]
 800a26e:	6014      	str	r4, [r2, #0]
 800a270:	4628      	mov	r0, r5
 800a272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a276:	f000 bcdf 	b.w	800ac38 <__malloc_unlock>
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	d90c      	bls.n	800a298 <_free_r+0x4c>
 800a27e:	6821      	ldr	r1, [r4, #0]
 800a280:	1862      	adds	r2, r4, r1
 800a282:	4293      	cmp	r3, r2
 800a284:	bf04      	itt	eq
 800a286:	681a      	ldreq	r2, [r3, #0]
 800a288:	685b      	ldreq	r3, [r3, #4]
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	bf04      	itt	eq
 800a28e:	1852      	addeq	r2, r2, r1
 800a290:	6022      	streq	r2, [r4, #0]
 800a292:	6004      	str	r4, [r0, #0]
 800a294:	e7ec      	b.n	800a270 <_free_r+0x24>
 800a296:	4613      	mov	r3, r2
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	b10a      	cbz	r2, 800a2a0 <_free_r+0x54>
 800a29c:	42a2      	cmp	r2, r4
 800a29e:	d9fa      	bls.n	800a296 <_free_r+0x4a>
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	1858      	adds	r0, r3, r1
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d10b      	bne.n	800a2c0 <_free_r+0x74>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	1858      	adds	r0, r3, r1
 800a2ae:	4282      	cmp	r2, r0
 800a2b0:	6019      	str	r1, [r3, #0]
 800a2b2:	d1dd      	bne.n	800a270 <_free_r+0x24>
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	6852      	ldr	r2, [r2, #4]
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	4401      	add	r1, r0
 800a2bc:	6019      	str	r1, [r3, #0]
 800a2be:	e7d7      	b.n	800a270 <_free_r+0x24>
 800a2c0:	d902      	bls.n	800a2c8 <_free_r+0x7c>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	e7d3      	b.n	800a270 <_free_r+0x24>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	1821      	adds	r1, r4, r0
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	bf04      	itt	eq
 800a2d0:	6811      	ldreq	r1, [r2, #0]
 800a2d2:	6852      	ldreq	r2, [r2, #4]
 800a2d4:	6062      	str	r2, [r4, #4]
 800a2d6:	bf04      	itt	eq
 800a2d8:	1809      	addeq	r1, r1, r0
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	605c      	str	r4, [r3, #4]
 800a2de:	e7c7      	b.n	800a270 <_free_r+0x24>
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000538 	.word	0x20000538

0800a2e8 <_malloc_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	1ccd      	adds	r5, r1, #3
 800a2ec:	f025 0503 	bic.w	r5, r5, #3
 800a2f0:	3508      	adds	r5, #8
 800a2f2:	2d0c      	cmp	r5, #12
 800a2f4:	bf38      	it	cc
 800a2f6:	250c      	movcc	r5, #12
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	db01      	blt.n	800a302 <_malloc_r+0x1a>
 800a2fe:	42a9      	cmp	r1, r5
 800a300:	d903      	bls.n	800a30a <_malloc_r+0x22>
 800a302:	230c      	movs	r3, #12
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	2000      	movs	r0, #0
 800a308:	bd70      	pop	{r4, r5, r6, pc}
 800a30a:	f000 fc94 	bl	800ac36 <__malloc_lock>
 800a30e:	4a21      	ldr	r2, [pc, #132]	; (800a394 <_malloc_r+0xac>)
 800a310:	6814      	ldr	r4, [r2, #0]
 800a312:	4621      	mov	r1, r4
 800a314:	b991      	cbnz	r1, 800a33c <_malloc_r+0x54>
 800a316:	4c20      	ldr	r4, [pc, #128]	; (800a398 <_malloc_r+0xb0>)
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b91b      	cbnz	r3, 800a324 <_malloc_r+0x3c>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 facf 	bl	800a8c0 <_sbrk_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f000 faca 	bl	800a8c0 <_sbrk_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d124      	bne.n	800a37a <_malloc_r+0x92>
 800a330:	230c      	movs	r3, #12
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	4630      	mov	r0, r6
 800a336:	f000 fc7f 	bl	800ac38 <__malloc_unlock>
 800a33a:	e7e4      	b.n	800a306 <_malloc_r+0x1e>
 800a33c:	680b      	ldr	r3, [r1, #0]
 800a33e:	1b5b      	subs	r3, r3, r5
 800a340:	d418      	bmi.n	800a374 <_malloc_r+0x8c>
 800a342:	2b0b      	cmp	r3, #11
 800a344:	d90f      	bls.n	800a366 <_malloc_r+0x7e>
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	50cd      	str	r5, [r1, r3]
 800a34a:	18cc      	adds	r4, r1, r3
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 fc73 	bl	800ac38 <__malloc_unlock>
 800a352:	f104 000b 	add.w	r0, r4, #11
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	f020 0007 	bic.w	r0, r0, #7
 800a35c:	1ac3      	subs	r3, r0, r3
 800a35e:	d0d3      	beq.n	800a308 <_malloc_r+0x20>
 800a360:	425a      	negs	r2, r3
 800a362:	50e2      	str	r2, [r4, r3]
 800a364:	e7d0      	b.n	800a308 <_malloc_r+0x20>
 800a366:	428c      	cmp	r4, r1
 800a368:	684b      	ldr	r3, [r1, #4]
 800a36a:	bf16      	itet	ne
 800a36c:	6063      	strne	r3, [r4, #4]
 800a36e:	6013      	streq	r3, [r2, #0]
 800a370:	460c      	movne	r4, r1
 800a372:	e7eb      	b.n	800a34c <_malloc_r+0x64>
 800a374:	460c      	mov	r4, r1
 800a376:	6849      	ldr	r1, [r1, #4]
 800a378:	e7cc      	b.n	800a314 <_malloc_r+0x2c>
 800a37a:	1cc4      	adds	r4, r0, #3
 800a37c:	f024 0403 	bic.w	r4, r4, #3
 800a380:	42a0      	cmp	r0, r4
 800a382:	d005      	beq.n	800a390 <_malloc_r+0xa8>
 800a384:	1a21      	subs	r1, r4, r0
 800a386:	4630      	mov	r0, r6
 800a388:	f000 fa9a 	bl	800a8c0 <_sbrk_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0cf      	beq.n	800a330 <_malloc_r+0x48>
 800a390:	6025      	str	r5, [r4, #0]
 800a392:	e7db      	b.n	800a34c <_malloc_r+0x64>
 800a394:	20000538 	.word	0x20000538
 800a398:	2000053c 	.word	0x2000053c

0800a39c <__ssputs_r>:
 800a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	688e      	ldr	r6, [r1, #8]
 800a3a2:	429e      	cmp	r6, r3
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	4699      	mov	r9, r3
 800a3ac:	d837      	bhi.n	800a41e <__ssputs_r+0x82>
 800a3ae:	898a      	ldrh	r2, [r1, #12]
 800a3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b4:	d031      	beq.n	800a41a <__ssputs_r+0x7e>
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	6909      	ldr	r1, [r1, #16]
 800a3ba:	1a6f      	subs	r7, r5, r1
 800a3bc:	6965      	ldr	r5, [r4, #20]
 800a3be:	2302      	movs	r3, #2
 800a3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a3c8:	f109 0301 	add.w	r3, r9, #1
 800a3cc:	443b      	add	r3, r7
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	bf38      	it	cc
 800a3d2:	461d      	movcc	r5, r3
 800a3d4:	0553      	lsls	r3, r2, #21
 800a3d6:	d530      	bpl.n	800a43a <__ssputs_r+0x9e>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7ff ff85 	bl	800a2e8 <_malloc_r>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	b950      	cbnz	r0, 800a3f8 <__ssputs_r+0x5c>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	f8ca 3000 	str.w	r3, [sl]
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f8:	463a      	mov	r2, r7
 800a3fa:	6921      	ldr	r1, [r4, #16]
 800a3fc:	f7fc ff82 	bl	8007304 <memcpy>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	6126      	str	r6, [r4, #16]
 800a40e:	6165      	str	r5, [r4, #20]
 800a410:	443e      	add	r6, r7
 800a412:	1bed      	subs	r5, r5, r7
 800a414:	6026      	str	r6, [r4, #0]
 800a416:	60a5      	str	r5, [r4, #8]
 800a418:	464e      	mov	r6, r9
 800a41a:	454e      	cmp	r6, r9
 800a41c:	d900      	bls.n	800a420 <__ssputs_r+0x84>
 800a41e:	464e      	mov	r6, r9
 800a420:	4632      	mov	r2, r6
 800a422:	4641      	mov	r1, r8
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	f000 fbed 	bl	800ac04 <memmove>
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	1b9b      	subs	r3, r3, r6
 800a42e:	60a3      	str	r3, [r4, #8]
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	441e      	add	r6, r3
 800a434:	6026      	str	r6, [r4, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	e7dc      	b.n	800a3f4 <__ssputs_r+0x58>
 800a43a:	462a      	mov	r2, r5
 800a43c:	f000 fbfd 	bl	800ac3a <_realloc_r>
 800a440:	4606      	mov	r6, r0
 800a442:	2800      	cmp	r0, #0
 800a444:	d1e2      	bne.n	800a40c <__ssputs_r+0x70>
 800a446:	6921      	ldr	r1, [r4, #16]
 800a448:	4650      	mov	r0, sl
 800a44a:	f7ff feff 	bl	800a24c <_free_r>
 800a44e:	e7c8      	b.n	800a3e2 <__ssputs_r+0x46>

0800a450 <_svfiprintf_r>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	461d      	mov	r5, r3
 800a456:	898b      	ldrh	r3, [r1, #12]
 800a458:	061f      	lsls	r7, r3, #24
 800a45a:	b09d      	sub	sp, #116	; 0x74
 800a45c:	4680      	mov	r8, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	4616      	mov	r6, r2
 800a462:	d50f      	bpl.n	800a484 <_svfiprintf_r+0x34>
 800a464:	690b      	ldr	r3, [r1, #16]
 800a466:	b96b      	cbnz	r3, 800a484 <_svfiprintf_r+0x34>
 800a468:	2140      	movs	r1, #64	; 0x40
 800a46a:	f7ff ff3d 	bl	800a2e8 <_malloc_r>
 800a46e:	6020      	str	r0, [r4, #0]
 800a470:	6120      	str	r0, [r4, #16]
 800a472:	b928      	cbnz	r0, 800a480 <_svfiprintf_r+0x30>
 800a474:	230c      	movs	r3, #12
 800a476:	f8c8 3000 	str.w	r3, [r8]
 800a47a:	f04f 30ff 	mov.w	r0, #4294967295
 800a47e:	e0c8      	b.n	800a612 <_svfiprintf_r+0x1c2>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	6163      	str	r3, [r4, #20]
 800a484:	2300      	movs	r3, #0
 800a486:	9309      	str	r3, [sp, #36]	; 0x24
 800a488:	2320      	movs	r3, #32
 800a48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a48e:	2330      	movs	r3, #48	; 0x30
 800a490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a494:	9503      	str	r5, [sp, #12]
 800a496:	f04f 0b01 	mov.w	fp, #1
 800a49a:	4637      	mov	r7, r6
 800a49c:	463d      	mov	r5, r7
 800a49e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_svfiprintf_r+0x58>
 800a4a4:	2b25      	cmp	r3, #37	; 0x25
 800a4a6:	d13e      	bne.n	800a526 <_svfiprintf_r+0xd6>
 800a4a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a4ac:	d00b      	beq.n	800a4c6 <_svfiprintf_r+0x76>
 800a4ae:	4653      	mov	r3, sl
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	f7ff ff71 	bl	800a39c <__ssputs_r>
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f000 80a4 	beq.w	800a608 <_svfiprintf_r+0x1b8>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	4453      	add	r3, sl
 800a4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c6:	783b      	ldrb	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 809d 	beq.w	800a608 <_svfiprintf_r+0x1b8>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	9307      	str	r3, [sp, #28]
 800a4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e2:	462f      	mov	r7, r5
 800a4e4:	2205      	movs	r2, #5
 800a4e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4ea:	4850      	ldr	r0, [pc, #320]	; (800a62c <_svfiprintf_r+0x1dc>)
 800a4ec:	f7f5 fea0 	bl	8000230 <memchr>
 800a4f0:	9b04      	ldr	r3, [sp, #16]
 800a4f2:	b9d0      	cbnz	r0, 800a52a <_svfiprintf_r+0xda>
 800a4f4:	06d9      	lsls	r1, r3, #27
 800a4f6:	bf44      	itt	mi
 800a4f8:	2220      	movmi	r2, #32
 800a4fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4fe:	071a      	lsls	r2, r3, #28
 800a500:	bf44      	itt	mi
 800a502:	222b      	movmi	r2, #43	; 0x2b
 800a504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a508:	782a      	ldrb	r2, [r5, #0]
 800a50a:	2a2a      	cmp	r2, #42	; 0x2a
 800a50c:	d015      	beq.n	800a53a <_svfiprintf_r+0xea>
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	462f      	mov	r7, r5
 800a512:	2000      	movs	r0, #0
 800a514:	250a      	movs	r5, #10
 800a516:	4639      	mov	r1, r7
 800a518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51c:	3b30      	subs	r3, #48	; 0x30
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d94d      	bls.n	800a5be <_svfiprintf_r+0x16e>
 800a522:	b1b8      	cbz	r0, 800a554 <_svfiprintf_r+0x104>
 800a524:	e00f      	b.n	800a546 <_svfiprintf_r+0xf6>
 800a526:	462f      	mov	r7, r5
 800a528:	e7b8      	b.n	800a49c <_svfiprintf_r+0x4c>
 800a52a:	4a40      	ldr	r2, [pc, #256]	; (800a62c <_svfiprintf_r+0x1dc>)
 800a52c:	1a80      	subs	r0, r0, r2
 800a52e:	fa0b f000 	lsl.w	r0, fp, r0
 800a532:	4318      	orrs	r0, r3
 800a534:	9004      	str	r0, [sp, #16]
 800a536:	463d      	mov	r5, r7
 800a538:	e7d3      	b.n	800a4e2 <_svfiprintf_r+0x92>
 800a53a:	9a03      	ldr	r2, [sp, #12]
 800a53c:	1d11      	adds	r1, r2, #4
 800a53e:	6812      	ldr	r2, [r2, #0]
 800a540:	9103      	str	r1, [sp, #12]
 800a542:	2a00      	cmp	r2, #0
 800a544:	db01      	blt.n	800a54a <_svfiprintf_r+0xfa>
 800a546:	9207      	str	r2, [sp, #28]
 800a548:	e004      	b.n	800a554 <_svfiprintf_r+0x104>
 800a54a:	4252      	negs	r2, r2
 800a54c:	f043 0302 	orr.w	r3, r3, #2
 800a550:	9207      	str	r2, [sp, #28]
 800a552:	9304      	str	r3, [sp, #16]
 800a554:	783b      	ldrb	r3, [r7, #0]
 800a556:	2b2e      	cmp	r3, #46	; 0x2e
 800a558:	d10c      	bne.n	800a574 <_svfiprintf_r+0x124>
 800a55a:	787b      	ldrb	r3, [r7, #1]
 800a55c:	2b2a      	cmp	r3, #42	; 0x2a
 800a55e:	d133      	bne.n	800a5c8 <_svfiprintf_r+0x178>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9203      	str	r2, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a570:	3702      	adds	r7, #2
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	4d2e      	ldr	r5, [pc, #184]	; (800a630 <_svfiprintf_r+0x1e0>)
 800a576:	7839      	ldrb	r1, [r7, #0]
 800a578:	2203      	movs	r2, #3
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7f5 fe58 	bl	8000230 <memchr>
 800a580:	b138      	cbz	r0, 800a592 <_svfiprintf_r+0x142>
 800a582:	2340      	movs	r3, #64	; 0x40
 800a584:	1b40      	subs	r0, r0, r5
 800a586:	fa03 f000 	lsl.w	r0, r3, r0
 800a58a:	9b04      	ldr	r3, [sp, #16]
 800a58c:	4303      	orrs	r3, r0
 800a58e:	3701      	adds	r7, #1
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	7839      	ldrb	r1, [r7, #0]
 800a594:	4827      	ldr	r0, [pc, #156]	; (800a634 <_svfiprintf_r+0x1e4>)
 800a596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59a:	2206      	movs	r2, #6
 800a59c:	1c7e      	adds	r6, r7, #1
 800a59e:	f7f5 fe47 	bl	8000230 <memchr>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d038      	beq.n	800a618 <_svfiprintf_r+0x1c8>
 800a5a6:	4b24      	ldr	r3, [pc, #144]	; (800a638 <_svfiprintf_r+0x1e8>)
 800a5a8:	bb13      	cbnz	r3, 800a5f0 <_svfiprintf_r+0x1a0>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	f023 0307 	bic.w	r3, r3, #7
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	444b      	add	r3, r9
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	e76d      	b.n	800a49a <_svfiprintf_r+0x4a>
 800a5be:	fb05 3202 	mla	r2, r5, r2, r3
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	e7a6      	b.n	800a516 <_svfiprintf_r+0xc6>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	3701      	adds	r7, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	250a      	movs	r5, #10
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d8:	3a30      	subs	r2, #48	; 0x30
 800a5da:	2a09      	cmp	r2, #9
 800a5dc:	d903      	bls.n	800a5e6 <_svfiprintf_r+0x196>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0c8      	beq.n	800a574 <_svfiprintf_r+0x124>
 800a5e2:	9105      	str	r1, [sp, #20]
 800a5e4:	e7c6      	b.n	800a574 <_svfiprintf_r+0x124>
 800a5e6:	fb05 2101 	mla	r1, r5, r1, r2
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	e7f0      	b.n	800a5d2 <_svfiprintf_r+0x182>
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4b11      	ldr	r3, [pc, #68]	; (800a63c <_svfiprintf_r+0x1ec>)
 800a5f8:	a904      	add	r1, sp, #16
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7fd f9be 	bl	800797c <_printf_float>
 800a600:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a604:	4681      	mov	r9, r0
 800a606:	d1d6      	bne.n	800a5b6 <_svfiprintf_r+0x166>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	065b      	lsls	r3, r3, #25
 800a60c:	f53f af35 	bmi.w	800a47a <_svfiprintf_r+0x2a>
 800a610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a612:	b01d      	add	sp, #116	; 0x74
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	4622      	mov	r2, r4
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <_svfiprintf_r+0x1ec>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	4640      	mov	r0, r8
 800a624:	f7fd fc60 	bl	8007ee8 <_printf_i>
 800a628:	e7ea      	b.n	800a600 <_svfiprintf_r+0x1b0>
 800a62a:	bf00      	nop
 800a62c:	0800ba8c 	.word	0x0800ba8c
 800a630:	0800ba92 	.word	0x0800ba92
 800a634:	0800ba96 	.word	0x0800ba96
 800a638:	0800797d 	.word	0x0800797d
 800a63c:	0800a39d 	.word	0x0800a39d

0800a640 <__sfputc_r>:
 800a640:	6893      	ldr	r3, [r2, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	b410      	push	{r4}
 800a648:	6093      	str	r3, [r2, #8]
 800a64a:	da08      	bge.n	800a65e <__sfputc_r+0x1e>
 800a64c:	6994      	ldr	r4, [r2, #24]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	db01      	blt.n	800a656 <__sfputc_r+0x16>
 800a652:	290a      	cmp	r1, #10
 800a654:	d103      	bne.n	800a65e <__sfputc_r+0x1e>
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	f7fe b98d 	b.w	8008978 <__swbuf_r>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	1c58      	adds	r0, r3, #1
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	7019      	strb	r1, [r3, #0]
 800a666:	4608      	mov	r0, r1
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <__sfputs_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	4614      	mov	r4, r2
 800a676:	18d5      	adds	r5, r2, r3
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d101      	bne.n	800a680 <__sfputs_r+0x12>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e007      	b.n	800a690 <__sfputs_r+0x22>
 800a680:	463a      	mov	r2, r7
 800a682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ffda 	bl	800a640 <__sfputc_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d1f3      	bne.n	800a678 <__sfputs_r+0xa>
 800a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a694 <_vfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460c      	mov	r4, r1
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4617      	mov	r7, r2
 800a69e:	461d      	mov	r5, r3
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_vfiprintf_r+0x18>
 800a6a4:	6983      	ldr	r3, [r0, #24]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <_vfiprintf_r+0x18>
 800a6a8:	f7ff f96e 	bl	8009988 <__sinit>
 800a6ac:	4b7c      	ldr	r3, [pc, #496]	; (800a8a0 <_vfiprintf_r+0x20c>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d158      	bne.n	800a764 <_vfiprintf_r+0xd0>
 800a6b2:	6874      	ldr	r4, [r6, #4]
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	0718      	lsls	r0, r3, #28
 800a6b8:	d55e      	bpl.n	800a778 <_vfiprintf_r+0xe4>
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d05b      	beq.n	800a778 <_vfiprintf_r+0xe4>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ca:	2330      	movs	r3, #48	; 0x30
 800a6cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6d0:	9503      	str	r5, [sp, #12]
 800a6d2:	f04f 0b01 	mov.w	fp, #1
 800a6d6:	46b8      	mov	r8, r7
 800a6d8:	4645      	mov	r5, r8
 800a6da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6de:	b10b      	cbz	r3, 800a6e4 <_vfiprintf_r+0x50>
 800a6e0:	2b25      	cmp	r3, #37	; 0x25
 800a6e2:	d154      	bne.n	800a78e <_vfiprintf_r+0xfa>
 800a6e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a6e8:	d00b      	beq.n	800a702 <_vfiprintf_r+0x6e>
 800a6ea:	4653      	mov	r3, sl
 800a6ec:	463a      	mov	r2, r7
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff ffbc 	bl	800a66e <__sfputs_r>
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	f000 80c2 	beq.w	800a880 <_vfiprintf_r+0x1ec>
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	4453      	add	r3, sl
 800a700:	9309      	str	r3, [sp, #36]	; 0x24
 800a702:	f898 3000 	ldrb.w	r3, [r8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 80ba 	beq.w	800a880 <_vfiprintf_r+0x1ec>
 800a70c:	2300      	movs	r3, #0
 800a70e:	f04f 32ff 	mov.w	r2, #4294967295
 800a712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a716:	9304      	str	r3, [sp, #16]
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a71e:	931a      	str	r3, [sp, #104]	; 0x68
 800a720:	46a8      	mov	r8, r5
 800a722:	2205      	movs	r2, #5
 800a724:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a728:	485e      	ldr	r0, [pc, #376]	; (800a8a4 <_vfiprintf_r+0x210>)
 800a72a:	f7f5 fd81 	bl	8000230 <memchr>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	bb78      	cbnz	r0, 800a792 <_vfiprintf_r+0xfe>
 800a732:	06d9      	lsls	r1, r3, #27
 800a734:	bf44      	itt	mi
 800a736:	2220      	movmi	r2, #32
 800a738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a73c:	071a      	lsls	r2, r3, #28
 800a73e:	bf44      	itt	mi
 800a740:	222b      	movmi	r2, #43	; 0x2b
 800a742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a746:	782a      	ldrb	r2, [r5, #0]
 800a748:	2a2a      	cmp	r2, #42	; 0x2a
 800a74a:	d02a      	beq.n	800a7a2 <_vfiprintf_r+0x10e>
 800a74c:	9a07      	ldr	r2, [sp, #28]
 800a74e:	46a8      	mov	r8, r5
 800a750:	2000      	movs	r0, #0
 800a752:	250a      	movs	r5, #10
 800a754:	4641      	mov	r1, r8
 800a756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a75a:	3b30      	subs	r3, #48	; 0x30
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d969      	bls.n	800a834 <_vfiprintf_r+0x1a0>
 800a760:	b360      	cbz	r0, 800a7bc <_vfiprintf_r+0x128>
 800a762:	e024      	b.n	800a7ae <_vfiprintf_r+0x11a>
 800a764:	4b50      	ldr	r3, [pc, #320]	; (800a8a8 <_vfiprintf_r+0x214>)
 800a766:	429c      	cmp	r4, r3
 800a768:	d101      	bne.n	800a76e <_vfiprintf_r+0xda>
 800a76a:	68b4      	ldr	r4, [r6, #8]
 800a76c:	e7a2      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a76e:	4b4f      	ldr	r3, [pc, #316]	; (800a8ac <_vfiprintf_r+0x218>)
 800a770:	429c      	cmp	r4, r3
 800a772:	bf08      	it	eq
 800a774:	68f4      	ldreq	r4, [r6, #12]
 800a776:	e79d      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a778:	4621      	mov	r1, r4
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7fe f94e 	bl	8008a1c <__swsetup_r>
 800a780:	2800      	cmp	r0, #0
 800a782:	d09d      	beq.n	800a6c0 <_vfiprintf_r+0x2c>
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	b01d      	add	sp, #116	; 0x74
 800a78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78e:	46a8      	mov	r8, r5
 800a790:	e7a2      	b.n	800a6d8 <_vfiprintf_r+0x44>
 800a792:	4a44      	ldr	r2, [pc, #272]	; (800a8a4 <_vfiprintf_r+0x210>)
 800a794:	1a80      	subs	r0, r0, r2
 800a796:	fa0b f000 	lsl.w	r0, fp, r0
 800a79a:	4318      	orrs	r0, r3
 800a79c:	9004      	str	r0, [sp, #16]
 800a79e:	4645      	mov	r5, r8
 800a7a0:	e7be      	b.n	800a720 <_vfiprintf_r+0x8c>
 800a7a2:	9a03      	ldr	r2, [sp, #12]
 800a7a4:	1d11      	adds	r1, r2, #4
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	9103      	str	r1, [sp, #12]
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	db01      	blt.n	800a7b2 <_vfiprintf_r+0x11e>
 800a7ae:	9207      	str	r2, [sp, #28]
 800a7b0:	e004      	b.n	800a7bc <_vfiprintf_r+0x128>
 800a7b2:	4252      	negs	r2, r2
 800a7b4:	f043 0302 	orr.w	r3, r3, #2
 800a7b8:	9207      	str	r2, [sp, #28]
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	f898 3000 	ldrb.w	r3, [r8]
 800a7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c2:	d10e      	bne.n	800a7e2 <_vfiprintf_r+0x14e>
 800a7c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ca:	d138      	bne.n	800a83e <_vfiprintf_r+0x1aa>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	1d1a      	adds	r2, r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	9203      	str	r2, [sp, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bfb8      	it	lt
 800a7d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7dc:	f108 0802 	add.w	r8, r8, #2
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	4d33      	ldr	r5, [pc, #204]	; (800a8b0 <_vfiprintf_r+0x21c>)
 800a7e4:	f898 1000 	ldrb.w	r1, [r8]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7f5 fd20 	bl	8000230 <memchr>
 800a7f0:	b140      	cbz	r0, 800a804 <_vfiprintf_r+0x170>
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	1b40      	subs	r0, r0, r5
 800a7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	4303      	orrs	r3, r0
 800a7fe:	f108 0801 	add.w	r8, r8, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	f898 1000 	ldrb.w	r1, [r8]
 800a808:	482a      	ldr	r0, [pc, #168]	; (800a8b4 <_vfiprintf_r+0x220>)
 800a80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a80e:	2206      	movs	r2, #6
 800a810:	f108 0701 	add.w	r7, r8, #1
 800a814:	f7f5 fd0c 	bl	8000230 <memchr>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d037      	beq.n	800a88c <_vfiprintf_r+0x1f8>
 800a81c:	4b26      	ldr	r3, [pc, #152]	; (800a8b8 <_vfiprintf_r+0x224>)
 800a81e:	bb1b      	cbnz	r3, 800a868 <_vfiprintf_r+0x1d4>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	3307      	adds	r3, #7
 800a824:	f023 0307 	bic.w	r3, r3, #7
 800a828:	3308      	adds	r3, #8
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82e:	444b      	add	r3, r9
 800a830:	9309      	str	r3, [sp, #36]	; 0x24
 800a832:	e750      	b.n	800a6d6 <_vfiprintf_r+0x42>
 800a834:	fb05 3202 	mla	r2, r5, r2, r3
 800a838:	2001      	movs	r0, #1
 800a83a:	4688      	mov	r8, r1
 800a83c:	e78a      	b.n	800a754 <_vfiprintf_r+0xc0>
 800a83e:	2300      	movs	r3, #0
 800a840:	f108 0801 	add.w	r8, r8, #1
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	4619      	mov	r1, r3
 800a848:	250a      	movs	r5, #10
 800a84a:	4640      	mov	r0, r8
 800a84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a850:	3a30      	subs	r2, #48	; 0x30
 800a852:	2a09      	cmp	r2, #9
 800a854:	d903      	bls.n	800a85e <_vfiprintf_r+0x1ca>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0c3      	beq.n	800a7e2 <_vfiprintf_r+0x14e>
 800a85a:	9105      	str	r1, [sp, #20]
 800a85c:	e7c1      	b.n	800a7e2 <_vfiprintf_r+0x14e>
 800a85e:	fb05 2101 	mla	r1, r5, r1, r2
 800a862:	2301      	movs	r3, #1
 800a864:	4680      	mov	r8, r0
 800a866:	e7f0      	b.n	800a84a <_vfiprintf_r+0x1b6>
 800a868:	ab03      	add	r3, sp, #12
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4622      	mov	r2, r4
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <_vfiprintf_r+0x228>)
 800a870:	a904      	add	r1, sp, #16
 800a872:	4630      	mov	r0, r6
 800a874:	f7fd f882 	bl	800797c <_printf_float>
 800a878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a87c:	4681      	mov	r9, r0
 800a87e:	d1d5      	bne.n	800a82c <_vfiprintf_r+0x198>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	065b      	lsls	r3, r3, #25
 800a884:	f53f af7e 	bmi.w	800a784 <_vfiprintf_r+0xf0>
 800a888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88a:	e77d      	b.n	800a788 <_vfiprintf_r+0xf4>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	4622      	mov	r2, r4
 800a892:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <_vfiprintf_r+0x228>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4630      	mov	r0, r6
 800a898:	f7fd fb26 	bl	8007ee8 <_printf_i>
 800a89c:	e7ec      	b.n	800a878 <_vfiprintf_r+0x1e4>
 800a89e:	bf00      	nop
 800a8a0:	0800b8e0 	.word	0x0800b8e0
 800a8a4:	0800ba8c 	.word	0x0800ba8c
 800a8a8:	0800b900 	.word	0x0800b900
 800a8ac:	0800b8c0 	.word	0x0800b8c0
 800a8b0:	0800ba92 	.word	0x0800ba92
 800a8b4:	0800ba96 	.word	0x0800ba96
 800a8b8:	0800797d 	.word	0x0800797d
 800a8bc:	0800a66f 	.word	0x0800a66f

0800a8c0 <_sbrk_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4c06      	ldr	r4, [pc, #24]	; (800a8dc <_sbrk_r+0x1c>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	f7f7 fbbc 	bl	8002048 <_sbrk>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_sbrk_r+0x1a>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_sbrk_r+0x1a>
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	200007a0 	.word	0x200007a0

0800a8e0 <siscanf>:
 800a8e0:	b40e      	push	{r1, r2, r3}
 800a8e2:	b530      	push	{r4, r5, lr}
 800a8e4:	b09c      	sub	sp, #112	; 0x70
 800a8e6:	ac1f      	add	r4, sp, #124	; 0x7c
 800a8e8:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a8ec:	f854 5b04 	ldr.w	r5, [r4], #4
 800a8f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a8f4:	9002      	str	r0, [sp, #8]
 800a8f6:	9006      	str	r0, [sp, #24]
 800a8f8:	f7f5 fc92 	bl	8000220 <strlen>
 800a8fc:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <siscanf+0x4c>)
 800a8fe:	9003      	str	r0, [sp, #12]
 800a900:	9007      	str	r0, [sp, #28]
 800a902:	930b      	str	r3, [sp, #44]	; 0x2c
 800a904:	480a      	ldr	r0, [pc, #40]	; (800a930 <siscanf+0x50>)
 800a906:	9401      	str	r4, [sp, #4]
 800a908:	2300      	movs	r3, #0
 800a90a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a90c:	9314      	str	r3, [sp, #80]	; 0x50
 800a90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a912:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a916:	462a      	mov	r2, r5
 800a918:	4623      	mov	r3, r4
 800a91a:	a902      	add	r1, sp, #8
 800a91c:	6800      	ldr	r0, [r0, #0]
 800a91e:	f000 fa0d 	bl	800ad3c <__ssvfiscanf_r>
 800a922:	b01c      	add	sp, #112	; 0x70
 800a924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a928:	b003      	add	sp, #12
 800a92a:	4770      	bx	lr
 800a92c:	0800a957 	.word	0x0800a957
 800a930:	2000000c 	.word	0x2000000c

0800a934 <__sread>:
 800a934:	b510      	push	{r4, lr}
 800a936:	460c      	mov	r4, r1
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	f000 fca6 	bl	800b28c <_read_r>
 800a940:	2800      	cmp	r0, #0
 800a942:	bfab      	itete	ge
 800a944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a946:	89a3      	ldrhlt	r3, [r4, #12]
 800a948:	181b      	addge	r3, r3, r0
 800a94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a94e:	bfac      	ite	ge
 800a950:	6563      	strge	r3, [r4, #84]	; 0x54
 800a952:	81a3      	strhlt	r3, [r4, #12]
 800a954:	bd10      	pop	{r4, pc}

0800a956 <__seofread>:
 800a956:	2000      	movs	r0, #0
 800a958:	4770      	bx	lr

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	05db      	lsls	r3, r3, #23
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f934 	bl	800abe0 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	4632      	mov	r2, r6
 800a986:	463b      	mov	r3, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b8e1 	b.w	800ab54 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f921 	bl	800abe0 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b8dd 	b.w	800ab78 <_close_r>

0800a9be <strcpy>:
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9c4:	f803 2b01 	strb.w	r2, [r3], #1
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	d1f9      	bne.n	800a9c0 <strcpy+0x2>
 800a9cc:	4770      	bx	lr

0800a9ce <strncmp>:
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	b16a      	cbz	r2, 800a9ee <strncmp+0x20>
 800a9d2:	3901      	subs	r1, #1
 800a9d4:	1884      	adds	r4, r0, r2
 800a9d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d103      	bne.n	800a9ea <strncmp+0x1c>
 800a9e2:	42a0      	cmp	r0, r4
 800a9e4:	d001      	beq.n	800a9ea <strncmp+0x1c>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1f5      	bne.n	800a9d6 <strncmp+0x8>
 800a9ea:	1a98      	subs	r0, r3, r2
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	e7fc      	b.n	800a9ec <strncmp+0x1e>

0800a9f2 <_strtoul_l.isra.0>:
 800a9f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	4692      	mov	sl, r2
 800a9fc:	461e      	mov	r6, r3
 800a9fe:	460f      	mov	r7, r1
 800aa00:	463d      	mov	r5, r7
 800aa02:	9808      	ldr	r0, [sp, #32]
 800aa04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa08:	f7ff f890 	bl	8009b2c <__locale_ctype_ptr_l>
 800aa0c:	4420      	add	r0, r4
 800aa0e:	7843      	ldrb	r3, [r0, #1]
 800aa10:	f013 0308 	ands.w	r3, r3, #8
 800aa14:	d130      	bne.n	800aa78 <_strtoul_l.isra.0+0x86>
 800aa16:	2c2d      	cmp	r4, #45	; 0x2d
 800aa18:	d130      	bne.n	800aa7c <_strtoul_l.isra.0+0x8a>
 800aa1a:	787c      	ldrb	r4, [r7, #1]
 800aa1c:	1cbd      	adds	r5, r7, #2
 800aa1e:	2101      	movs	r1, #1
 800aa20:	2e00      	cmp	r6, #0
 800aa22:	d05c      	beq.n	800aade <_strtoul_l.isra.0+0xec>
 800aa24:	2e10      	cmp	r6, #16
 800aa26:	d109      	bne.n	800aa3c <_strtoul_l.isra.0+0x4a>
 800aa28:	2c30      	cmp	r4, #48	; 0x30
 800aa2a:	d107      	bne.n	800aa3c <_strtoul_l.isra.0+0x4a>
 800aa2c:	782b      	ldrb	r3, [r5, #0]
 800aa2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa32:	2b58      	cmp	r3, #88	; 0x58
 800aa34:	d14e      	bne.n	800aad4 <_strtoul_l.isra.0+0xe2>
 800aa36:	786c      	ldrb	r4, [r5, #1]
 800aa38:	2610      	movs	r6, #16
 800aa3a:	3502      	adds	r5, #2
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa40:	2300      	movs	r3, #0
 800aa42:	fbb2 f2f6 	udiv	r2, r2, r6
 800aa46:	fb06 fc02 	mul.w	ip, r6, r2
 800aa4a:	ea6f 0c0c 	mvn.w	ip, ip
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aa54:	2f09      	cmp	r7, #9
 800aa56:	d817      	bhi.n	800aa88 <_strtoul_l.isra.0+0x96>
 800aa58:	463c      	mov	r4, r7
 800aa5a:	42a6      	cmp	r6, r4
 800aa5c:	dd23      	ble.n	800aaa6 <_strtoul_l.isra.0+0xb4>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	db1e      	blt.n	800aaa0 <_strtoul_l.isra.0+0xae>
 800aa62:	4282      	cmp	r2, r0
 800aa64:	d31c      	bcc.n	800aaa0 <_strtoul_l.isra.0+0xae>
 800aa66:	d101      	bne.n	800aa6c <_strtoul_l.isra.0+0x7a>
 800aa68:	45a4      	cmp	ip, r4
 800aa6a:	db19      	blt.n	800aaa0 <_strtoul_l.isra.0+0xae>
 800aa6c:	fb00 4006 	mla	r0, r0, r6, r4
 800aa70:	2301      	movs	r3, #1
 800aa72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa76:	e7eb      	b.n	800aa50 <_strtoul_l.isra.0+0x5e>
 800aa78:	462f      	mov	r7, r5
 800aa7a:	e7c1      	b.n	800aa00 <_strtoul_l.isra.0+0xe>
 800aa7c:	2c2b      	cmp	r4, #43	; 0x2b
 800aa7e:	bf04      	itt	eq
 800aa80:	1cbd      	addeq	r5, r7, #2
 800aa82:	787c      	ldrbeq	r4, [r7, #1]
 800aa84:	4619      	mov	r1, r3
 800aa86:	e7cb      	b.n	800aa20 <_strtoul_l.isra.0+0x2e>
 800aa88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800aa8c:	2f19      	cmp	r7, #25
 800aa8e:	d801      	bhi.n	800aa94 <_strtoul_l.isra.0+0xa2>
 800aa90:	3c37      	subs	r4, #55	; 0x37
 800aa92:	e7e2      	b.n	800aa5a <_strtoul_l.isra.0+0x68>
 800aa94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800aa98:	2f19      	cmp	r7, #25
 800aa9a:	d804      	bhi.n	800aaa6 <_strtoul_l.isra.0+0xb4>
 800aa9c:	3c57      	subs	r4, #87	; 0x57
 800aa9e:	e7dc      	b.n	800aa5a <_strtoul_l.isra.0+0x68>
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e7e5      	b.n	800aa72 <_strtoul_l.isra.0+0x80>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da09      	bge.n	800aabe <_strtoul_l.isra.0+0xcc>
 800aaaa:	2322      	movs	r3, #34	; 0x22
 800aaac:	f8c8 3000 	str.w	r3, [r8]
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	f1ba 0f00 	cmp.w	sl, #0
 800aab8:	d107      	bne.n	800aaca <_strtoul_l.isra.0+0xd8>
 800aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabe:	b101      	cbz	r1, 800aac2 <_strtoul_l.isra.0+0xd0>
 800aac0:	4240      	negs	r0, r0
 800aac2:	f1ba 0f00 	cmp.w	sl, #0
 800aac6:	d0f8      	beq.n	800aaba <_strtoul_l.isra.0+0xc8>
 800aac8:	b10b      	cbz	r3, 800aace <_strtoul_l.isra.0+0xdc>
 800aaca:	f105 39ff 	add.w	r9, r5, #4294967295
 800aace:	f8ca 9000 	str.w	r9, [sl]
 800aad2:	e7f2      	b.n	800aaba <_strtoul_l.isra.0+0xc8>
 800aad4:	2430      	movs	r4, #48	; 0x30
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	d1b0      	bne.n	800aa3c <_strtoul_l.isra.0+0x4a>
 800aada:	2608      	movs	r6, #8
 800aadc:	e7ae      	b.n	800aa3c <_strtoul_l.isra.0+0x4a>
 800aade:	2c30      	cmp	r4, #48	; 0x30
 800aae0:	d0a4      	beq.n	800aa2c <_strtoul_l.isra.0+0x3a>
 800aae2:	260a      	movs	r6, #10
 800aae4:	e7aa      	b.n	800aa3c <_strtoul_l.isra.0+0x4a>
	...

0800aae8 <_strtoul_r>:
 800aae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaea:	4c06      	ldr	r4, [pc, #24]	; (800ab04 <_strtoul_r+0x1c>)
 800aaec:	4d06      	ldr	r5, [pc, #24]	; (800ab08 <_strtoul_r+0x20>)
 800aaee:	6824      	ldr	r4, [r4, #0]
 800aaf0:	6a24      	ldr	r4, [r4, #32]
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	bf08      	it	eq
 800aaf6:	462c      	moveq	r4, r5
 800aaf8:	9400      	str	r4, [sp, #0]
 800aafa:	f7ff ff7a 	bl	800a9f2 <_strtoul_l.isra.0>
 800aafe:	b003      	add	sp, #12
 800ab00:	bd30      	pop	{r4, r5, pc}
 800ab02:	bf00      	nop
 800ab04:	2000000c 	.word	0x2000000c
 800ab08:	200000d0 	.word	0x200000d0

0800ab0c <strtoul>:
 800ab0c:	4b08      	ldr	r3, [pc, #32]	; (800ab30 <strtoul+0x24>)
 800ab0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab10:	681c      	ldr	r4, [r3, #0]
 800ab12:	4d08      	ldr	r5, [pc, #32]	; (800ab34 <strtoul+0x28>)
 800ab14:	6a23      	ldr	r3, [r4, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bf08      	it	eq
 800ab1a:	462b      	moveq	r3, r5
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	460a      	mov	r2, r1
 800ab22:	4601      	mov	r1, r0
 800ab24:	4620      	mov	r0, r4
 800ab26:	f7ff ff64 	bl	800a9f2 <_strtoul_l.isra.0>
 800ab2a:	b003      	add	sp, #12
 800ab2c:	bd30      	pop	{r4, r5, pc}
 800ab2e:	bf00      	nop
 800ab30:	2000000c 	.word	0x2000000c
 800ab34:	200000d0 	.word	0x200000d0

0800ab38 <__ascii_wctomb>:
 800ab38:	b149      	cbz	r1, 800ab4e <__ascii_wctomb+0x16>
 800ab3a:	2aff      	cmp	r2, #255	; 0xff
 800ab3c:	bf85      	ittet	hi
 800ab3e:	238a      	movhi	r3, #138	; 0x8a
 800ab40:	6003      	strhi	r3, [r0, #0]
 800ab42:	700a      	strbls	r2, [r1, #0]
 800ab44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab48:	bf98      	it	ls
 800ab4a:	2001      	movls	r0, #1
 800ab4c:	4770      	bx	lr
 800ab4e:	4608      	mov	r0, r1
 800ab50:	4770      	bx	lr
	...

0800ab54 <_write_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4c07      	ldr	r4, [pc, #28]	; (800ab74 <_write_r+0x20>)
 800ab58:	4605      	mov	r5, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	6022      	str	r2, [r4, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f8 f8e2 	bl	8002d2c <_write>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_write_r+0x1e>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_write_r+0x1e>
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	200007a0 	.word	0x200007a0

0800ab78 <_close_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4c06      	ldr	r4, [pc, #24]	; (800ab94 <_close_r+0x1c>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4605      	mov	r5, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	f7f8 f8fe 	bl	8002d84 <_close>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_close_r+0x1a>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_close_r+0x1a>
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	200007a0 	.word	0x200007a0

0800ab98 <__env_lock>:
 800ab98:	4770      	bx	lr

0800ab9a <__env_unlock>:
 800ab9a:	4770      	bx	lr

0800ab9c <_fstat_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4c07      	ldr	r4, [pc, #28]	; (800abbc <_fstat_r+0x20>)
 800aba0:	2300      	movs	r3, #0
 800aba2:	4605      	mov	r5, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	4611      	mov	r1, r2
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	f7f8 f93b 	bl	8002e24 <_fstat>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	d102      	bne.n	800abb8 <_fstat_r+0x1c>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	b103      	cbz	r3, 800abb8 <_fstat_r+0x1c>
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	bf00      	nop
 800abbc:	200007a0 	.word	0x200007a0

0800abc0 <_isatty_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4c06      	ldr	r4, [pc, #24]	; (800abdc <_isatty_r+0x1c>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4605      	mov	r5, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	f7f8 f898 	bl	8002d00 <_isatty>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_isatty_r+0x1a>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	b103      	cbz	r3, 800abda <_isatty_r+0x1a>
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	200007a0 	.word	0x200007a0

0800abe0 <_lseek_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4c07      	ldr	r4, [pc, #28]	; (800ac00 <_lseek_r+0x20>)
 800abe4:	4605      	mov	r5, r0
 800abe6:	4608      	mov	r0, r1
 800abe8:	4611      	mov	r1, r2
 800abea:	2200      	movs	r2, #0
 800abec:	6022      	str	r2, [r4, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	f7f8 f8df 	bl	8002db2 <_lseek>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_lseek_r+0x1e>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_lseek_r+0x1e>
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	200007a0 	.word	0x200007a0

0800ac04 <memmove>:
 800ac04:	4288      	cmp	r0, r1
 800ac06:	b510      	push	{r4, lr}
 800ac08:	eb01 0302 	add.w	r3, r1, r2
 800ac0c:	d807      	bhi.n	800ac1e <memmove+0x1a>
 800ac0e:	1e42      	subs	r2, r0, #1
 800ac10:	4299      	cmp	r1, r3
 800ac12:	d00a      	beq.n	800ac2a <memmove+0x26>
 800ac14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac18:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac1c:	e7f8      	b.n	800ac10 <memmove+0xc>
 800ac1e:	4283      	cmp	r3, r0
 800ac20:	d9f5      	bls.n	800ac0e <memmove+0xa>
 800ac22:	1881      	adds	r1, r0, r2
 800ac24:	1ad2      	subs	r2, r2, r3
 800ac26:	42d3      	cmn	r3, r2
 800ac28:	d100      	bne.n	800ac2c <memmove+0x28>
 800ac2a:	bd10      	pop	{r4, pc}
 800ac2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ac34:	e7f7      	b.n	800ac26 <memmove+0x22>

0800ac36 <__malloc_lock>:
 800ac36:	4770      	bx	lr

0800ac38 <__malloc_unlock>:
 800ac38:	4770      	bx	lr

0800ac3a <_realloc_r>:
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	4614      	mov	r4, r2
 800ac40:	460e      	mov	r6, r1
 800ac42:	b921      	cbnz	r1, 800ac4e <_realloc_r+0x14>
 800ac44:	4611      	mov	r1, r2
 800ac46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac4a:	f7ff bb4d 	b.w	800a2e8 <_malloc_r>
 800ac4e:	b922      	cbnz	r2, 800ac5a <_realloc_r+0x20>
 800ac50:	f7ff fafc 	bl	800a24c <_free_r>
 800ac54:	4625      	mov	r5, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac5a:	f000 fb95 	bl	800b388 <_malloc_usable_size_r>
 800ac5e:	42a0      	cmp	r0, r4
 800ac60:	d20f      	bcs.n	800ac82 <_realloc_r+0x48>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff fb3f 	bl	800a2e8 <_malloc_r>
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d0f2      	beq.n	800ac56 <_realloc_r+0x1c>
 800ac70:	4631      	mov	r1, r6
 800ac72:	4622      	mov	r2, r4
 800ac74:	f7fc fb46 	bl	8007304 <memcpy>
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f7ff fae6 	bl	800a24c <_free_r>
 800ac80:	e7e9      	b.n	800ac56 <_realloc_r+0x1c>
 800ac82:	4635      	mov	r5, r6
 800ac84:	e7e7      	b.n	800ac56 <_realloc_r+0x1c>

0800ac86 <_sungetc_r>:
 800ac86:	b538      	push	{r3, r4, r5, lr}
 800ac88:	1c4b      	adds	r3, r1, #1
 800ac8a:	4614      	mov	r4, r2
 800ac8c:	d103      	bne.n	800ac96 <_sungetc_r+0x10>
 800ac8e:	f04f 35ff 	mov.w	r5, #4294967295
 800ac92:	4628      	mov	r0, r5
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	8993      	ldrh	r3, [r2, #12]
 800ac98:	f023 0320 	bic.w	r3, r3, #32
 800ac9c:	8193      	strh	r3, [r2, #12]
 800ac9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aca0:	6852      	ldr	r2, [r2, #4]
 800aca2:	b2cd      	uxtb	r5, r1
 800aca4:	b18b      	cbz	r3, 800acca <_sungetc_r+0x44>
 800aca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aca8:	4293      	cmp	r3, r2
 800acaa:	dd08      	ble.n	800acbe <_sungetc_r+0x38>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	1e5a      	subs	r2, r3, #1
 800acb0:	6022      	str	r2, [r4, #0]
 800acb2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800acb6:	6863      	ldr	r3, [r4, #4]
 800acb8:	3301      	adds	r3, #1
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	e7e9      	b.n	800ac92 <_sungetc_r+0xc>
 800acbe:	4621      	mov	r1, r4
 800acc0:	f000 fb28 	bl	800b314 <__submore>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d0f1      	beq.n	800acac <_sungetc_r+0x26>
 800acc8:	e7e1      	b.n	800ac8e <_sungetc_r+0x8>
 800acca:	6921      	ldr	r1, [r4, #16]
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	b151      	cbz	r1, 800ace6 <_sungetc_r+0x60>
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d208      	bcs.n	800ace6 <_sungetc_r+0x60>
 800acd4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800acd8:	42a9      	cmp	r1, r5
 800acda:	d104      	bne.n	800ace6 <_sungetc_r+0x60>
 800acdc:	3b01      	subs	r3, #1
 800acde:	3201      	adds	r2, #1
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	6062      	str	r2, [r4, #4]
 800ace4:	e7d5      	b.n	800ac92 <_sungetc_r+0xc>
 800ace6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800acea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acee:	6363      	str	r3, [r4, #52]	; 0x34
 800acf0:	2303      	movs	r3, #3
 800acf2:	63a3      	str	r3, [r4, #56]	; 0x38
 800acf4:	4623      	mov	r3, r4
 800acf6:	f803 5f46 	strb.w	r5, [r3, #70]!
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	2301      	movs	r3, #1
 800acfe:	e7dc      	b.n	800acba <_sungetc_r+0x34>

0800ad00 <__ssrefill_r>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	460c      	mov	r4, r1
 800ad04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad06:	b169      	cbz	r1, 800ad24 <__ssrefill_r+0x24>
 800ad08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d001      	beq.n	800ad14 <__ssrefill_r+0x14>
 800ad10:	f7ff fa9c 	bl	800a24c <_free_r>
 800ad14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad16:	6063      	str	r3, [r4, #4]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1c:	b113      	cbz	r3, 800ad24 <__ssrefill_r+0x24>
 800ad1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd10      	pop	{r4, pc}
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	6063      	str	r3, [r4, #4]
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f043 0320 	orr.w	r3, r3, #32
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	f04f 30ff 	mov.w	r0, #4294967295
 800ad38:	e7f3      	b.n	800ad22 <__ssrefill_r+0x22>
	...

0800ad3c <__ssvfiscanf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800ad44:	460c      	mov	r4, r1
 800ad46:	2100      	movs	r1, #0
 800ad48:	9144      	str	r1, [sp, #272]	; 0x110
 800ad4a:	9145      	str	r1, [sp, #276]	; 0x114
 800ad4c:	499f      	ldr	r1, [pc, #636]	; (800afcc <__ssvfiscanf_r+0x290>)
 800ad4e:	91a0      	str	r1, [sp, #640]	; 0x280
 800ad50:	f10d 0804 	add.w	r8, sp, #4
 800ad54:	499e      	ldr	r1, [pc, #632]	; (800afd0 <__ssvfiscanf_r+0x294>)
 800ad56:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800afd4 <__ssvfiscanf_r+0x298>
 800ad5a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ad5e:	4606      	mov	r6, r0
 800ad60:	4692      	mov	sl, r2
 800ad62:	91a1      	str	r1, [sp, #644]	; 0x284
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	270a      	movs	r7, #10
 800ad68:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 812a 	beq.w	800afc6 <__ssvfiscanf_r+0x28a>
 800ad72:	4655      	mov	r5, sl
 800ad74:	f7fe fede 	bl	8009b34 <__locale_ctype_ptr>
 800ad78:	f815 bb01 	ldrb.w	fp, [r5], #1
 800ad7c:	4458      	add	r0, fp
 800ad7e:	7843      	ldrb	r3, [r0, #1]
 800ad80:	f013 0308 	ands.w	r3, r3, #8
 800ad84:	d01c      	beq.n	800adc0 <__ssvfiscanf_r+0x84>
 800ad86:	6863      	ldr	r3, [r4, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dd12      	ble.n	800adb2 <__ssvfiscanf_r+0x76>
 800ad8c:	f7fe fed2 	bl	8009b34 <__locale_ctype_ptr>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	4410      	add	r0, r2
 800ad96:	7842      	ldrb	r2, [r0, #1]
 800ad98:	0712      	lsls	r2, r2, #28
 800ad9a:	d401      	bmi.n	800ada0 <__ssvfiscanf_r+0x64>
 800ad9c:	46aa      	mov	sl, r5
 800ad9e:	e7e3      	b.n	800ad68 <__ssvfiscanf_r+0x2c>
 800ada0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ada2:	3201      	adds	r2, #1
 800ada4:	9245      	str	r2, [sp, #276]	; 0x114
 800ada6:	6862      	ldr	r2, [r4, #4]
 800ada8:	3301      	adds	r3, #1
 800adaa:	3a01      	subs	r2, #1
 800adac:	6062      	str	r2, [r4, #4]
 800adae:	6023      	str	r3, [r4, #0]
 800adb0:	e7e9      	b.n	800ad86 <__ssvfiscanf_r+0x4a>
 800adb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800adb4:	4621      	mov	r1, r4
 800adb6:	4630      	mov	r0, r6
 800adb8:	4798      	blx	r3
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0e6      	beq.n	800ad8c <__ssvfiscanf_r+0x50>
 800adbe:	e7ed      	b.n	800ad9c <__ssvfiscanf_r+0x60>
 800adc0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800adc4:	f040 8082 	bne.w	800aecc <__ssvfiscanf_r+0x190>
 800adc8:	9343      	str	r3, [sp, #268]	; 0x10c
 800adca:	9341      	str	r3, [sp, #260]	; 0x104
 800adcc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800add0:	2b2a      	cmp	r3, #42	; 0x2a
 800add2:	d103      	bne.n	800addc <__ssvfiscanf_r+0xa0>
 800add4:	2310      	movs	r3, #16
 800add6:	9341      	str	r3, [sp, #260]	; 0x104
 800add8:	f10a 0502 	add.w	r5, sl, #2
 800addc:	46aa      	mov	sl, r5
 800adde:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ade2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ade6:	2a09      	cmp	r2, #9
 800ade8:	d922      	bls.n	800ae30 <__ssvfiscanf_r+0xf4>
 800adea:	2203      	movs	r2, #3
 800adec:	4879      	ldr	r0, [pc, #484]	; (800afd4 <__ssvfiscanf_r+0x298>)
 800adee:	f7f5 fa1f 	bl	8000230 <memchr>
 800adf2:	b138      	cbz	r0, 800ae04 <__ssvfiscanf_r+0xc8>
 800adf4:	eba0 0309 	sub.w	r3, r0, r9
 800adf8:	2001      	movs	r0, #1
 800adfa:	4098      	lsls	r0, r3
 800adfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adfe:	4318      	orrs	r0, r3
 800ae00:	9041      	str	r0, [sp, #260]	; 0x104
 800ae02:	46aa      	mov	sl, r5
 800ae04:	f89a 3000 	ldrb.w	r3, [sl]
 800ae08:	2b67      	cmp	r3, #103	; 0x67
 800ae0a:	f10a 0501 	add.w	r5, sl, #1
 800ae0e:	d82b      	bhi.n	800ae68 <__ssvfiscanf_r+0x12c>
 800ae10:	2b65      	cmp	r3, #101	; 0x65
 800ae12:	f080 809f 	bcs.w	800af54 <__ssvfiscanf_r+0x218>
 800ae16:	2b47      	cmp	r3, #71	; 0x47
 800ae18:	d810      	bhi.n	800ae3c <__ssvfiscanf_r+0x100>
 800ae1a:	2b45      	cmp	r3, #69	; 0x45
 800ae1c:	f080 809a 	bcs.w	800af54 <__ssvfiscanf_r+0x218>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d06c      	beq.n	800aefe <__ssvfiscanf_r+0x1c2>
 800ae24:	2b25      	cmp	r3, #37	; 0x25
 800ae26:	d051      	beq.n	800aecc <__ssvfiscanf_r+0x190>
 800ae28:	2303      	movs	r3, #3
 800ae2a:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae2c:	9742      	str	r7, [sp, #264]	; 0x108
 800ae2e:	e027      	b.n	800ae80 <__ssvfiscanf_r+0x144>
 800ae30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ae32:	fb07 1303 	mla	r3, r7, r3, r1
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	9343      	str	r3, [sp, #268]	; 0x10c
 800ae3a:	e7cf      	b.n	800addc <__ssvfiscanf_r+0xa0>
 800ae3c:	2b5b      	cmp	r3, #91	; 0x5b
 800ae3e:	d06a      	beq.n	800af16 <__ssvfiscanf_r+0x1da>
 800ae40:	d80c      	bhi.n	800ae5c <__ssvfiscanf_r+0x120>
 800ae42:	2b58      	cmp	r3, #88	; 0x58
 800ae44:	d1f0      	bne.n	800ae28 <__ssvfiscanf_r+0xec>
 800ae46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ae48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae4c:	9241      	str	r2, [sp, #260]	; 0x104
 800ae4e:	2210      	movs	r2, #16
 800ae50:	9242      	str	r2, [sp, #264]	; 0x108
 800ae52:	2b6e      	cmp	r3, #110	; 0x6e
 800ae54:	bf8c      	ite	hi
 800ae56:	2304      	movhi	r3, #4
 800ae58:	2303      	movls	r3, #3
 800ae5a:	e010      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800ae5c:	2b63      	cmp	r3, #99	; 0x63
 800ae5e:	d065      	beq.n	800af2c <__ssvfiscanf_r+0x1f0>
 800ae60:	2b64      	cmp	r3, #100	; 0x64
 800ae62:	d1e1      	bne.n	800ae28 <__ssvfiscanf_r+0xec>
 800ae64:	9742      	str	r7, [sp, #264]	; 0x108
 800ae66:	e7f4      	b.n	800ae52 <__ssvfiscanf_r+0x116>
 800ae68:	2b70      	cmp	r3, #112	; 0x70
 800ae6a:	d04b      	beq.n	800af04 <__ssvfiscanf_r+0x1c8>
 800ae6c:	d826      	bhi.n	800aebc <__ssvfiscanf_r+0x180>
 800ae6e:	2b6e      	cmp	r3, #110	; 0x6e
 800ae70:	d062      	beq.n	800af38 <__ssvfiscanf_r+0x1fc>
 800ae72:	d84c      	bhi.n	800af0e <__ssvfiscanf_r+0x1d2>
 800ae74:	2b69      	cmp	r3, #105	; 0x69
 800ae76:	d1d7      	bne.n	800ae28 <__ssvfiscanf_r+0xec>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	9342      	str	r3, [sp, #264]	; 0x108
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae80:	6863      	ldr	r3, [r4, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dd68      	ble.n	800af58 <__ssvfiscanf_r+0x21c>
 800ae86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae88:	0659      	lsls	r1, r3, #25
 800ae8a:	d407      	bmi.n	800ae9c <__ssvfiscanf_r+0x160>
 800ae8c:	f7fe fe52 	bl	8009b34 <__locale_ctype_ptr>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	4410      	add	r0, r2
 800ae96:	7842      	ldrb	r2, [r0, #1]
 800ae98:	0712      	lsls	r2, r2, #28
 800ae9a:	d464      	bmi.n	800af66 <__ssvfiscanf_r+0x22a>
 800ae9c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	dc73      	bgt.n	800af8a <__ssvfiscanf_r+0x24e>
 800aea2:	466b      	mov	r3, sp
 800aea4:	4622      	mov	r2, r4
 800aea6:	a941      	add	r1, sp, #260	; 0x104
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 f897 	bl	800afdc <_scanf_chars>
 800aeae:	2801      	cmp	r0, #1
 800aeb0:	f000 8089 	beq.w	800afc6 <__ssvfiscanf_r+0x28a>
 800aeb4:	2802      	cmp	r0, #2
 800aeb6:	f47f af71 	bne.w	800ad9c <__ssvfiscanf_r+0x60>
 800aeba:	e01d      	b.n	800aef8 <__ssvfiscanf_r+0x1bc>
 800aebc:	2b75      	cmp	r3, #117	; 0x75
 800aebe:	d0d1      	beq.n	800ae64 <__ssvfiscanf_r+0x128>
 800aec0:	2b78      	cmp	r3, #120	; 0x78
 800aec2:	d0c0      	beq.n	800ae46 <__ssvfiscanf_r+0x10a>
 800aec4:	2b73      	cmp	r3, #115	; 0x73
 800aec6:	d1af      	bne.n	800ae28 <__ssvfiscanf_r+0xec>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e7d8      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dd0c      	ble.n	800aeec <__ssvfiscanf_r+0x1b0>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	781a      	ldrb	r2, [r3, #0]
 800aed6:	455a      	cmp	r2, fp
 800aed8:	d175      	bne.n	800afc6 <__ssvfiscanf_r+0x28a>
 800aeda:	3301      	adds	r3, #1
 800aedc:	6862      	ldr	r2, [r4, #4]
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aee2:	3a01      	subs	r2, #1
 800aee4:	3301      	adds	r3, #1
 800aee6:	6062      	str	r2, [r4, #4]
 800aee8:	9345      	str	r3, [sp, #276]	; 0x114
 800aeea:	e757      	b.n	800ad9c <__ssvfiscanf_r+0x60>
 800aeec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aeee:	4621      	mov	r1, r4
 800aef0:	4630      	mov	r0, r6
 800aef2:	4798      	blx	r3
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d0ec      	beq.n	800aed2 <__ssvfiscanf_r+0x196>
 800aef8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d159      	bne.n	800afb2 <__ssvfiscanf_r+0x276>
 800aefe:	f04f 30ff 	mov.w	r0, #4294967295
 800af02:	e05c      	b.n	800afbe <__ssvfiscanf_r+0x282>
 800af04:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800af06:	f042 0220 	orr.w	r2, r2, #32
 800af0a:	9241      	str	r2, [sp, #260]	; 0x104
 800af0c:	e79b      	b.n	800ae46 <__ssvfiscanf_r+0x10a>
 800af0e:	2308      	movs	r3, #8
 800af10:	9342      	str	r3, [sp, #264]	; 0x108
 800af12:	2304      	movs	r3, #4
 800af14:	e7b3      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800af16:	4629      	mov	r1, r5
 800af18:	4640      	mov	r0, r8
 800af1a:	f000 f9c9 	bl	800b2b0 <__sccl>
 800af1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af24:	9341      	str	r3, [sp, #260]	; 0x104
 800af26:	4605      	mov	r5, r0
 800af28:	2301      	movs	r3, #1
 800af2a:	e7a8      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800af2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af32:	9341      	str	r3, [sp, #260]	; 0x104
 800af34:	2300      	movs	r3, #0
 800af36:	e7a2      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800af38:	9841      	ldr	r0, [sp, #260]	; 0x104
 800af3a:	06c3      	lsls	r3, r0, #27
 800af3c:	f53f af2e 	bmi.w	800ad9c <__ssvfiscanf_r+0x60>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	9100      	str	r1, [sp, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	07c0      	lsls	r0, r0, #31
 800af4c:	bf4c      	ite	mi
 800af4e:	801a      	strhmi	r2, [r3, #0]
 800af50:	601a      	strpl	r2, [r3, #0]
 800af52:	e723      	b.n	800ad9c <__ssvfiscanf_r+0x60>
 800af54:	2305      	movs	r3, #5
 800af56:	e792      	b.n	800ae7e <__ssvfiscanf_r+0x142>
 800af58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af5a:	4621      	mov	r1, r4
 800af5c:	4630      	mov	r0, r6
 800af5e:	4798      	blx	r3
 800af60:	2800      	cmp	r0, #0
 800af62:	d090      	beq.n	800ae86 <__ssvfiscanf_r+0x14a>
 800af64:	e7c8      	b.n	800aef8 <__ssvfiscanf_r+0x1bc>
 800af66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af68:	3201      	adds	r2, #1
 800af6a:	9245      	str	r2, [sp, #276]	; 0x114
 800af6c:	6862      	ldr	r2, [r4, #4]
 800af6e:	3a01      	subs	r2, #1
 800af70:	2a00      	cmp	r2, #0
 800af72:	6062      	str	r2, [r4, #4]
 800af74:	dd02      	ble.n	800af7c <__ssvfiscanf_r+0x240>
 800af76:	3301      	adds	r3, #1
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	e787      	b.n	800ae8c <__ssvfiscanf_r+0x150>
 800af7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	4798      	blx	r3
 800af84:	2800      	cmp	r0, #0
 800af86:	d081      	beq.n	800ae8c <__ssvfiscanf_r+0x150>
 800af88:	e7b6      	b.n	800aef8 <__ssvfiscanf_r+0x1bc>
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	dc06      	bgt.n	800af9c <__ssvfiscanf_r+0x260>
 800af8e:	466b      	mov	r3, sp
 800af90:	4622      	mov	r2, r4
 800af92:	a941      	add	r1, sp, #260	; 0x104
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f885 	bl	800b0a4 <_scanf_i>
 800af9a:	e788      	b.n	800aeae <__ssvfiscanf_r+0x172>
 800af9c:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <__ssvfiscanf_r+0x29c>)
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f43f aefc 	beq.w	800ad9c <__ssvfiscanf_r+0x60>
 800afa4:	466b      	mov	r3, sp
 800afa6:	4622      	mov	r2, r4
 800afa8:	a941      	add	r1, sp, #260	; 0x104
 800afaa:	4630      	mov	r0, r6
 800afac:	f3af 8000 	nop.w
 800afb0:	e77d      	b.n	800aeae <__ssvfiscanf_r+0x172>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800afb8:	bf18      	it	ne
 800afba:	f04f 30ff 	movne.w	r0, #4294967295
 800afbe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800afc8:	e7f9      	b.n	800afbe <__ssvfiscanf_r+0x282>
 800afca:	bf00      	nop
 800afcc:	0800ac87 	.word	0x0800ac87
 800afd0:	0800ad01 	.word	0x0800ad01
 800afd4:	0800ba92 	.word	0x0800ba92
 800afd8:	00000000 	.word	0x00000000

0800afdc <_scanf_chars>:
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	4615      	mov	r5, r2
 800afe2:	688a      	ldr	r2, [r1, #8]
 800afe4:	4680      	mov	r8, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	b932      	cbnz	r2, 800aff8 <_scanf_chars+0x1c>
 800afea:	698a      	ldr	r2, [r1, #24]
 800afec:	2a00      	cmp	r2, #0
 800afee:	bf14      	ite	ne
 800aff0:	f04f 32ff 	movne.w	r2, #4294967295
 800aff4:	2201      	moveq	r2, #1
 800aff6:	608a      	str	r2, [r1, #8]
 800aff8:	6822      	ldr	r2, [r4, #0]
 800affa:	06d1      	lsls	r1, r2, #27
 800affc:	bf5f      	itttt	pl
 800affe:	681a      	ldrpl	r2, [r3, #0]
 800b000:	1d11      	addpl	r1, r2, #4
 800b002:	6019      	strpl	r1, [r3, #0]
 800b004:	6817      	ldrpl	r7, [r2, #0]
 800b006:	2600      	movs	r6, #0
 800b008:	69a3      	ldr	r3, [r4, #24]
 800b00a:	b1db      	cbz	r3, 800b044 <_scanf_chars+0x68>
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d107      	bne.n	800b020 <_scanf_chars+0x44>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	6962      	ldr	r2, [r4, #20]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	5cd3      	ldrb	r3, [r2, r3]
 800b018:	b9a3      	cbnz	r3, 800b044 <_scanf_chars+0x68>
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d132      	bne.n	800b084 <_scanf_chars+0xa8>
 800b01e:	e006      	b.n	800b02e <_scanf_chars+0x52>
 800b020:	2b02      	cmp	r3, #2
 800b022:	d007      	beq.n	800b034 <_scanf_chars+0x58>
 800b024:	2e00      	cmp	r6, #0
 800b026:	d12d      	bne.n	800b084 <_scanf_chars+0xa8>
 800b028:	69a3      	ldr	r3, [r4, #24]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d12a      	bne.n	800b084 <_scanf_chars+0xa8>
 800b02e:	2001      	movs	r0, #1
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	f7fe fd7e 	bl	8009b34 <__locale_ctype_ptr>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	4418      	add	r0, r3
 800b03e:	7843      	ldrb	r3, [r0, #1]
 800b040:	071b      	lsls	r3, r3, #28
 800b042:	d4ef      	bmi.n	800b024 <_scanf_chars+0x48>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	06da      	lsls	r2, r3, #27
 800b048:	bf5e      	ittt	pl
 800b04a:	682b      	ldrpl	r3, [r5, #0]
 800b04c:	781b      	ldrbpl	r3, [r3, #0]
 800b04e:	703b      	strbpl	r3, [r7, #0]
 800b050:	682a      	ldr	r2, [r5, #0]
 800b052:	686b      	ldr	r3, [r5, #4]
 800b054:	f102 0201 	add.w	r2, r2, #1
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	68a2      	ldr	r2, [r4, #8]
 800b05c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b060:	f102 32ff 	add.w	r2, r2, #4294967295
 800b064:	606b      	str	r3, [r5, #4]
 800b066:	f106 0601 	add.w	r6, r6, #1
 800b06a:	bf58      	it	pl
 800b06c:	3701      	addpl	r7, #1
 800b06e:	60a2      	str	r2, [r4, #8]
 800b070:	b142      	cbz	r2, 800b084 <_scanf_chars+0xa8>
 800b072:	2b00      	cmp	r3, #0
 800b074:	dcc8      	bgt.n	800b008 <_scanf_chars+0x2c>
 800b076:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b07a:	4629      	mov	r1, r5
 800b07c:	4640      	mov	r0, r8
 800b07e:	4798      	blx	r3
 800b080:	2800      	cmp	r0, #0
 800b082:	d0c1      	beq.n	800b008 <_scanf_chars+0x2c>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	f013 0310 	ands.w	r3, r3, #16
 800b08a:	d105      	bne.n	800b098 <_scanf_chars+0xbc>
 800b08c:	68e2      	ldr	r2, [r4, #12]
 800b08e:	3201      	adds	r2, #1
 800b090:	60e2      	str	r2, [r4, #12]
 800b092:	69a2      	ldr	r2, [r4, #24]
 800b094:	b102      	cbz	r2, 800b098 <_scanf_chars+0xbc>
 800b096:	703b      	strb	r3, [r7, #0]
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	441e      	add	r6, r3
 800b09c:	6126      	str	r6, [r4, #16]
 800b09e:	2000      	movs	r0, #0
 800b0a0:	e7c6      	b.n	800b030 <_scanf_chars+0x54>
	...

0800b0a4 <_scanf_i>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	469a      	mov	sl, r3
 800b0aa:	4b74      	ldr	r3, [pc, #464]	; (800b27c <_scanf_i+0x1d8>)
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	4683      	mov	fp, r0
 800b0b0:	4616      	mov	r6, r2
 800b0b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	ab03      	add	r3, sp, #12
 800b0ba:	68a7      	ldr	r7, [r4, #8]
 800b0bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b0c0:	4b6f      	ldr	r3, [pc, #444]	; (800b280 <_scanf_i+0x1dc>)
 800b0c2:	69a1      	ldr	r1, [r4, #24]
 800b0c4:	4a6f      	ldr	r2, [pc, #444]	; (800b284 <_scanf_i+0x1e0>)
 800b0c6:	2903      	cmp	r1, #3
 800b0c8:	bf08      	it	eq
 800b0ca:	461a      	moveq	r2, r3
 800b0cc:	1e7b      	subs	r3, r7, #1
 800b0ce:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800b0d2:	bf84      	itt	hi
 800b0d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b0d8:	60a3      	strhi	r3, [r4, #8]
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	9200      	str	r2, [sp, #0]
 800b0de:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b0e2:	bf88      	it	hi
 800b0e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b0e8:	f104 091c 	add.w	r9, r4, #28
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	bf8c      	ite	hi
 800b0f0:	197f      	addhi	r7, r7, r5
 800b0f2:	2700      	movls	r7, #0
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	6831      	ldr	r1, [r6, #0]
 800b0fe:	ab03      	add	r3, sp, #12
 800b100:	2202      	movs	r2, #2
 800b102:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b106:	7809      	ldrb	r1, [r1, #0]
 800b108:	f7f5 f892 	bl	8000230 <memchr>
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	b330      	cbz	r0, 800b15e <_scanf_i+0xba>
 800b110:	f1b8 0f01 	cmp.w	r8, #1
 800b114:	d15a      	bne.n	800b1cc <_scanf_i+0x128>
 800b116:	6862      	ldr	r2, [r4, #4]
 800b118:	b92a      	cbnz	r2, 800b126 <_scanf_i+0x82>
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	2108      	movs	r1, #8
 800b11e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b122:	6061      	str	r1, [r4, #4]
 800b124:	6022      	str	r2, [r4, #0]
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b12c:	6022      	str	r2, [r4, #0]
 800b12e:	68a2      	ldr	r2, [r4, #8]
 800b130:	1e51      	subs	r1, r2, #1
 800b132:	60a1      	str	r1, [r4, #8]
 800b134:	b19a      	cbz	r2, 800b15e <_scanf_i+0xba>
 800b136:	6832      	ldr	r2, [r6, #0]
 800b138:	1c51      	adds	r1, r2, #1
 800b13a:	6031      	str	r1, [r6, #0]
 800b13c:	7812      	ldrb	r2, [r2, #0]
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	1c5d      	adds	r5, r3, #1
 800b142:	6873      	ldr	r3, [r6, #4]
 800b144:	3b01      	subs	r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	6073      	str	r3, [r6, #4]
 800b14a:	dc07      	bgt.n	800b15c <_scanf_i+0xb8>
 800b14c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b150:	4631      	mov	r1, r6
 800b152:	4658      	mov	r0, fp
 800b154:	4798      	blx	r3
 800b156:	2800      	cmp	r0, #0
 800b158:	f040 8086 	bne.w	800b268 <_scanf_i+0x1c4>
 800b15c:	462b      	mov	r3, r5
 800b15e:	f108 0801 	add.w	r8, r8, #1
 800b162:	f1b8 0f03 	cmp.w	r8, #3
 800b166:	d1c8      	bne.n	800b0fa <_scanf_i+0x56>
 800b168:	6862      	ldr	r2, [r4, #4]
 800b16a:	b90a      	cbnz	r2, 800b170 <_scanf_i+0xcc>
 800b16c:	220a      	movs	r2, #10
 800b16e:	6062      	str	r2, [r4, #4]
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	4945      	ldr	r1, [pc, #276]	; (800b288 <_scanf_i+0x1e4>)
 800b174:	6960      	ldr	r0, [r4, #20]
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	1a89      	subs	r1, r1, r2
 800b17a:	f000 f899 	bl	800b2b0 <__sccl>
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	f04f 0800 	mov.w	r8, #0
 800b184:	461d      	mov	r5, r3
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	6822      	ldr	r2, [r4, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d03a      	beq.n	800b204 <_scanf_i+0x160>
 800b18e:	6831      	ldr	r1, [r6, #0]
 800b190:	6960      	ldr	r0, [r4, #20]
 800b192:	f891 c000 	ldrb.w	ip, [r1]
 800b196:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d032      	beq.n	800b204 <_scanf_i+0x160>
 800b19e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b1a2:	d121      	bne.n	800b1e8 <_scanf_i+0x144>
 800b1a4:	0510      	lsls	r0, r2, #20
 800b1a6:	d51f      	bpl.n	800b1e8 <_scanf_i+0x144>
 800b1a8:	f108 0801 	add.w	r8, r8, #1
 800b1ac:	b117      	cbz	r7, 800b1b4 <_scanf_i+0x110>
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	3f01      	subs	r7, #1
 800b1b2:	60a3      	str	r3, [r4, #8]
 800b1b4:	6873      	ldr	r3, [r6, #4]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	6073      	str	r3, [r6, #4]
 800b1bc:	dd1b      	ble.n	800b1f6 <_scanf_i+0x152>
 800b1be:	6833      	ldr	r3, [r6, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	6033      	str	r3, [r6, #0]
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	60a3      	str	r3, [r4, #8]
 800b1ca:	e7dc      	b.n	800b186 <_scanf_i+0xe2>
 800b1cc:	f1b8 0f02 	cmp.w	r8, #2
 800b1d0:	d1ad      	bne.n	800b12e <_scanf_i+0x8a>
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b1d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b1dc:	d1bf      	bne.n	800b15e <_scanf_i+0xba>
 800b1de:	2110      	movs	r1, #16
 800b1e0:	6061      	str	r1, [r4, #4]
 800b1e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1e6:	e7a1      	b.n	800b12c <_scanf_i+0x88>
 800b1e8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b1ec:	6022      	str	r2, [r4, #0]
 800b1ee:	780b      	ldrb	r3, [r1, #0]
 800b1f0:	702b      	strb	r3, [r5, #0]
 800b1f2:	3501      	adds	r5, #1
 800b1f4:	e7de      	b.n	800b1b4 <_scanf_i+0x110>
 800b1f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4658      	mov	r0, fp
 800b1fe:	4798      	blx	r3
 800b200:	2800      	cmp	r0, #0
 800b202:	d0df      	beq.n	800b1c4 <_scanf_i+0x120>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	05d9      	lsls	r1, r3, #23
 800b208:	d50c      	bpl.n	800b224 <_scanf_i+0x180>
 800b20a:	454d      	cmp	r5, r9
 800b20c:	d908      	bls.n	800b220 <_scanf_i+0x17c>
 800b20e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b216:	4632      	mov	r2, r6
 800b218:	4658      	mov	r0, fp
 800b21a:	4798      	blx	r3
 800b21c:	1e6f      	subs	r7, r5, #1
 800b21e:	463d      	mov	r5, r7
 800b220:	454d      	cmp	r5, r9
 800b222:	d029      	beq.n	800b278 <_scanf_i+0x1d4>
 800b224:	6822      	ldr	r2, [r4, #0]
 800b226:	f012 0210 	ands.w	r2, r2, #16
 800b22a:	d113      	bne.n	800b254 <_scanf_i+0x1b0>
 800b22c:	702a      	strb	r2, [r5, #0]
 800b22e:	6863      	ldr	r3, [r4, #4]
 800b230:	9e00      	ldr	r6, [sp, #0]
 800b232:	4649      	mov	r1, r9
 800b234:	4658      	mov	r0, fp
 800b236:	47b0      	blx	r6
 800b238:	f8da 3000 	ldr.w	r3, [sl]
 800b23c:	6821      	ldr	r1, [r4, #0]
 800b23e:	1d1a      	adds	r2, r3, #4
 800b240:	f8ca 2000 	str.w	r2, [sl]
 800b244:	f011 0f20 	tst.w	r1, #32
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	d010      	beq.n	800b26e <_scanf_i+0x1ca>
 800b24c:	6018      	str	r0, [r3, #0]
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60e3      	str	r3, [r4, #12]
 800b254:	eba5 0509 	sub.w	r5, r5, r9
 800b258:	44a8      	add	r8, r5
 800b25a:	6925      	ldr	r5, [r4, #16]
 800b25c:	4445      	add	r5, r8
 800b25e:	6125      	str	r5, [r4, #16]
 800b260:	2000      	movs	r0, #0
 800b262:	b007      	add	sp, #28
 800b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b268:	f04f 0800 	mov.w	r8, #0
 800b26c:	e7ca      	b.n	800b204 <_scanf_i+0x160>
 800b26e:	07ca      	lsls	r2, r1, #31
 800b270:	bf4c      	ite	mi
 800b272:	8018      	strhmi	r0, [r3, #0]
 800b274:	6018      	strpl	r0, [r3, #0]
 800b276:	e7ea      	b.n	800b24e <_scanf_i+0x1aa>
 800b278:	2001      	movs	r0, #1
 800b27a:	e7f2      	b.n	800b262 <_scanf_i+0x1be>
 800b27c:	0800b7b4 	.word	0x0800b7b4
 800b280:	080084cd 	.word	0x080084cd
 800b284:	0800aae9 	.word	0x0800aae9
 800b288:	0800bbae 	.word	0x0800bbae

0800b28c <_read_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4c07      	ldr	r4, [pc, #28]	; (800b2ac <_read_r+0x20>)
 800b290:	4605      	mov	r5, r0
 800b292:	4608      	mov	r0, r1
 800b294:	4611      	mov	r1, r2
 800b296:	2200      	movs	r2, #0
 800b298:	6022      	str	r2, [r4, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f7f7 fd9a 	bl	8002dd4 <_read>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_read_r+0x1e>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_read_r+0x1e>
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	200007a0 	.word	0x200007a0

0800b2b0 <__sccl>:
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	780b      	ldrb	r3, [r1, #0]
 800b2b4:	2b5e      	cmp	r3, #94	; 0x5e
 800b2b6:	bf13      	iteet	ne
 800b2b8:	1c4a      	addne	r2, r1, #1
 800b2ba:	1c8a      	addeq	r2, r1, #2
 800b2bc:	784b      	ldrbeq	r3, [r1, #1]
 800b2be:	2100      	movne	r1, #0
 800b2c0:	bf08      	it	eq
 800b2c2:	2101      	moveq	r1, #1
 800b2c4:	1e44      	subs	r4, r0, #1
 800b2c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b2ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b2ce:	42ac      	cmp	r4, r5
 800b2d0:	d1fb      	bne.n	800b2ca <__sccl+0x1a>
 800b2d2:	b913      	cbnz	r3, 800b2da <__sccl+0x2a>
 800b2d4:	3a01      	subs	r2, #1
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	bd70      	pop	{r4, r5, r6, pc}
 800b2da:	f081 0401 	eor.w	r4, r1, #1
 800b2de:	54c4      	strb	r4, [r0, r3]
 800b2e0:	1c51      	adds	r1, r2, #1
 800b2e2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800b2e6:	2d2d      	cmp	r5, #45	; 0x2d
 800b2e8:	f101 36ff 	add.w	r6, r1, #4294967295
 800b2ec:	460a      	mov	r2, r1
 800b2ee:	d006      	beq.n	800b2fe <__sccl+0x4e>
 800b2f0:	2d5d      	cmp	r5, #93	; 0x5d
 800b2f2:	d0f0      	beq.n	800b2d6 <__sccl+0x26>
 800b2f4:	b90d      	cbnz	r5, 800b2fa <__sccl+0x4a>
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	e7ed      	b.n	800b2d6 <__sccl+0x26>
 800b2fa:	462b      	mov	r3, r5
 800b2fc:	e7ef      	b.n	800b2de <__sccl+0x2e>
 800b2fe:	780e      	ldrb	r6, [r1, #0]
 800b300:	2e5d      	cmp	r6, #93	; 0x5d
 800b302:	d0fa      	beq.n	800b2fa <__sccl+0x4a>
 800b304:	42b3      	cmp	r3, r6
 800b306:	dcf8      	bgt.n	800b2fa <__sccl+0x4a>
 800b308:	3301      	adds	r3, #1
 800b30a:	429e      	cmp	r6, r3
 800b30c:	54c4      	strb	r4, [r0, r3]
 800b30e:	dcfb      	bgt.n	800b308 <__sccl+0x58>
 800b310:	3102      	adds	r1, #2
 800b312:	e7e6      	b.n	800b2e2 <__sccl+0x32>

0800b314 <__submore>:
 800b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b318:	460c      	mov	r4, r1
 800b31a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b320:	4299      	cmp	r1, r3
 800b322:	d11d      	bne.n	800b360 <__submore+0x4c>
 800b324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b328:	f7fe ffde 	bl	800a2e8 <_malloc_r>
 800b32c:	b918      	cbnz	r0, 800b336 <__submore+0x22>
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295
 800b332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b33a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b33c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b340:	6360      	str	r0, [r4, #52]	; 0x34
 800b342:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b346:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b34a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b34e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b352:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b356:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	2000      	movs	r0, #0
 800b35e:	e7e8      	b.n	800b332 <__submore+0x1e>
 800b360:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b362:	0077      	lsls	r7, r6, #1
 800b364:	463a      	mov	r2, r7
 800b366:	f7ff fc68 	bl	800ac3a <_realloc_r>
 800b36a:	4605      	mov	r5, r0
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0de      	beq.n	800b32e <__submore+0x1a>
 800b370:	eb00 0806 	add.w	r8, r0, r6
 800b374:	4601      	mov	r1, r0
 800b376:	4632      	mov	r2, r6
 800b378:	4640      	mov	r0, r8
 800b37a:	f7fb ffc3 	bl	8007304 <memcpy>
 800b37e:	f8c4 8000 	str.w	r8, [r4]
 800b382:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b386:	e7e9      	b.n	800b35c <__submore+0x48>

0800b388 <_malloc_usable_size_r>:
 800b388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38c:	1f18      	subs	r0, r3, #4
 800b38e:	2b00      	cmp	r3, #0
 800b390:	bfbc      	itt	lt
 800b392:	580b      	ldrlt	r3, [r1, r0]
 800b394:	18c0      	addlt	r0, r0, r3
 800b396:	4770      	bx	lr

0800b398 <_init>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	bf00      	nop
 800b39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39e:	bc08      	pop	{r3}
 800b3a0:	469e      	mov	lr, r3
 800b3a2:	4770      	bx	lr

0800b3a4 <_fini>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	bf00      	nop
 800b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3aa:	bc08      	pop	{r3}
 800b3ac:	469e      	mov	lr, r3
 800b3ae:	4770      	bx	lr
