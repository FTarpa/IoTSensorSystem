
IoT-Sensor-System_F413ZH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800be60  0800be60  0001be60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c674  0800c674  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c674  0800c674  0001c674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c67c  0800c67c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c67c  0800c67c  0001c67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c680  0800c680  0001c680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c684  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007de8  20000240  0800c8c4  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008028  0800c8c4  00028028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001504a  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002935  00000000  00000000  000352ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00038cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c8b  00000000  00000000  00039ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e665  00000000  00000000  0005d96b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6516  00000000  00000000  0006bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001424e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d60  00000000  00000000  00142564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be48 	.word	0x0800be48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	0800be48 	.word	0x0800be48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000422:	f1a4 0401 	sub.w	r4, r4, #1
 8000426:	d1e9      	bne.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2f>:
 8000c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c14:	bf24      	itt	cs
 8000c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1e:	d90d      	bls.n	8000c3c <__aeabi_d2f+0x30>
 8000c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c34:	bf08      	it	eq
 8000c36:	f020 0001 	biceq.w	r0, r0, #1
 8000c3a:	4770      	bx	lr
 8000c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c40:	d121      	bne.n	8000c86 <__aeabi_d2f+0x7a>
 8000c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c46:	bfbc      	itt	lt
 8000c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	4770      	bxlt	lr
 8000c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c56:	f1c2 0218 	rsb	r2, r2, #24
 8000c5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c62:	fa20 f002 	lsr.w	r0, r0, r2
 8000c66:	bf18      	it	ne
 8000c68:	f040 0001 	orrne.w	r0, r0, #1
 8000c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c78:	ea40 000c 	orr.w	r0, r0, ip
 8000c7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c84:	e7cc      	b.n	8000c20 <__aeabi_d2f+0x14>
 8000c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8a:	d107      	bne.n	8000c9c <__aeabi_d2f+0x90>
 8000c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c90:	bf1e      	ittt	ne
 8000c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9a:	4770      	bxne	lr
 8000c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc0:	f000 b972 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9e08      	ldr	r6, [sp, #32]
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4688      	mov	r8, r1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d14b      	bne.n	8000d82 <__udivmoddi4+0xa6>
 8000cea:	428a      	cmp	r2, r1
 8000cec:	4615      	mov	r5, r2
 8000cee:	d967      	bls.n	8000dc0 <__udivmoddi4+0xe4>
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0720 	rsb	r7, r2, #32
 8000cfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000d02:	4095      	lsls	r5, r2
 8000d04:	ea47 0803 	orr.w	r8, r7, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d14:	fa1f fc85 	uxth.w	ip, r5
 8000d18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d20:	fb07 f10c 	mul.w	r1, r7, ip
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x60>
 8000d28:	18eb      	adds	r3, r5, r3
 8000d2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2e:	f080 811b 	bcs.w	8000f68 <__udivmoddi4+0x28c>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 8118 	bls.w	8000f68 <__udivmoddi4+0x28c>
 8000d38:	3f02      	subs	r7, #2
 8000d3a:	442b      	add	r3, r5
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x8c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x290>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x290>
 8000d64:	3802      	subs	r0, #2
 8000d66:	442c      	add	r4, r5
 8000d68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	2700      	movs	r7, #0
 8000d72:	b11e      	cbz	r6, 8000d7c <__udivmoddi4+0xa0>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xbe>
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	f000 80eb 	beq.w	8000f62 <__udivmoddi4+0x286>
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d92:	4638      	mov	r0, r7
 8000d94:	4639      	mov	r1, r7
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f783 	clz	r7, r3
 8000d9e:	2f00      	cmp	r7, #0
 8000da0:	d147      	bne.n	8000e32 <__udivmoddi4+0x156>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd0>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2c4>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa0>
 8000dba:	e9c6 4800 	strd	r4, r8, [r6]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xe8>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 808f 	bne.w	8000eec <__udivmoddi4+0x210>
 8000dce:	1b49      	subs	r1, r1, r5
 8000dd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd4:	fa1f f885 	uxth.w	r8, r5
 8000dd8:	2701      	movs	r7, #1
 8000dda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dde:	0c23      	lsrs	r3, r4, #16
 8000de0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x124>
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x122>
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2bc>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1a59      	subs	r1, r3, r1
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x14c>
 8000e18:	192c      	adds	r4, r5, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x14a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80b6 	bhi.w	8000f92 <__udivmoddi4+0x2b6>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e79f      	b.n	8000d72 <__udivmoddi4+0x96>
 8000e32:	f1c7 0c20 	rsb	ip, r7, #32
 8000e36:	40bb      	lsls	r3, r7
 8000e38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e40:	fa01 f407 	lsl.w	r4, r1, r7
 8000e44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e50:	4325      	orrs	r5, r4
 8000e52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e56:	0c2c      	lsrs	r4, r5, #16
 8000e58:	fb08 3319 	mls	r3, r8, r9, r3
 8000e5c:	fa1f fa8e 	uxth.w	sl, lr
 8000e60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e64:	fb09 f40a 	mul.w	r4, r9, sl
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b0>
 8000e74:	eb1e 0303 	adds.w	r3, lr, r3
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	f080 8087 	bcs.w	8000f8e <__udivmoddi4+0x2b2>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f240 8084 	bls.w	8000f8e <__udivmoddi4+0x2b2>
 8000e86:	f1a9 0902 	sub.w	r9, r9, #2
 8000e8a:	4473      	add	r3, lr
 8000e8c:	1b1b      	subs	r3, r3, r4
 8000e8e:	b2ad      	uxth	r5, r5
 8000e90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e94:	fb08 3310 	mls	r3, r8, r0, r3
 8000e98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ea0:	45a2      	cmp	sl, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1da>
 8000ea4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eac:	d26b      	bcs.n	8000f86 <__udivmoddi4+0x2aa>
 8000eae:	45a2      	cmp	sl, r4
 8000eb0:	d969      	bls.n	8000f86 <__udivmoddi4+0x2aa>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4474      	add	r4, lr
 8000eb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	454c      	cmp	r4, r9
 8000ec4:	46c2      	mov	sl, r8
 8000ec6:	464b      	mov	r3, r9
 8000ec8:	d354      	bcc.n	8000f74 <__udivmoddi4+0x298>
 8000eca:	d051      	beq.n	8000f70 <__udivmoddi4+0x294>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d069      	beq.n	8000fa4 <__udivmoddi4+0x2c8>
 8000ed0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000edc:	40fd      	lsrs	r5, r7
 8000ede:	40fc      	lsrs	r4, r7
 8000ee0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee8:	2700      	movs	r7, #0
 8000eea:	e747      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef4:	4095      	lsls	r5, r2
 8000ef6:	fa01 f002 	lsl.w	r0, r1, r2
 8000efa:	fa21 f303 	lsr.w	r3, r1, r3
 8000efe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f02:	4338      	orrs	r0, r7
 8000f04:	0c01      	lsrs	r1, r0, #16
 8000f06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f0a:	fa1f f885 	uxth.w	r8, r5
 8000f0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f16:	fb07 f308 	mul.w	r3, r7, r8
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x256>
 8000f22:	1869      	adds	r1, r5, r1
 8000f24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f28:	d22f      	bcs.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d92d      	bls.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2e:	3f02      	subs	r7, #2
 8000f30:	4429      	add	r1, r5
 8000f32:	1acb      	subs	r3, r1, r3
 8000f34:	b281      	uxth	r1, r0
 8000f36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb00 f308 	mul.w	r3, r0, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d907      	bls.n	8000f5a <__udivmoddi4+0x27e>
 8000f4a:	1869      	adds	r1, r5, r1
 8000f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f50:	d217      	bcs.n	8000f82 <__udivmoddi4+0x2a6>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d915      	bls.n	8000f82 <__udivmoddi4+0x2a6>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4429      	add	r1, r5
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f60:	e73b      	b.n	8000dda <__udivmoddi4+0xfe>
 8000f62:	4637      	mov	r7, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e709      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000f68:	4607      	mov	r7, r0
 8000f6a:	e6e7      	b.n	8000d3c <__udivmoddi4+0x60>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x8c>
 8000f70:	4541      	cmp	r1, r8
 8000f72:	d2ab      	bcs.n	8000ecc <__udivmoddi4+0x1f0>
 8000f74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f78:	eb69 020e 	sbc.w	r2, r9, lr
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	4613      	mov	r3, r2
 8000f80:	e7a4      	b.n	8000ecc <__udivmoddi4+0x1f0>
 8000f82:	4660      	mov	r0, ip
 8000f84:	e7e9      	b.n	8000f5a <__udivmoddi4+0x27e>
 8000f86:	4618      	mov	r0, r3
 8000f88:	e795      	b.n	8000eb6 <__udivmoddi4+0x1da>
 8000f8a:	4667      	mov	r7, ip
 8000f8c:	e7d1      	b.n	8000f32 <__udivmoddi4+0x256>
 8000f8e:	4681      	mov	r9, r0
 8000f90:	e77c      	b.n	8000e8c <__udivmoddi4+0x1b0>
 8000f92:	3802      	subs	r0, #2
 8000f94:	442c      	add	r4, r5
 8000f96:	e747      	b.n	8000e28 <__udivmoddi4+0x14c>
 8000f98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f9c:	442b      	add	r3, r5
 8000f9e:	e72f      	b.n	8000e00 <__udivmoddi4+0x124>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xda>
 8000fa4:	4637      	mov	r7, r6
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0xa0>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f002 f8a9 	bl	8003108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f8cf 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 fb89 	bl	80016d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbe:	f000 fb67 	bl	8001690 <MX_DMA_Init>
  MX_RTC_Init();
 8000fc2:	f000 f983 	bl	80012cc <MX_RTC_Init>
  MX_UART4_Init();
 8000fc6:	f000 fa35 	bl	8001434 <MX_UART4_Init>
  MX_UART5_Init();
 8000fca:	f000 fa5d 	bl	8001488 <MX_UART5_Init>
  MX_UART7_Init();
 8000fce:	f000 fa85 	bl	80014dc <MX_UART7_Init>
  MX_UART8_Init();
 8000fd2:	f000 faad 	bl	8001530 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 faff 	bl	80015d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fda:	f000 fb2f 	bl	800163c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fde:	f000 f947 	bl	8001270 <MX_I2C1_Init>
  MX_UART9_Init();
 8000fe2:	f000 facf 	bl	8001584 <MX_UART9_Init>
  MX_TIM2_Init();
 8000fe6:	f000 f9cb 	bl	8001380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart9);
 8000fea:	4842      	ldr	r0, [pc, #264]	; (80010f4 <main+0x148>)
 8000fec:	f001 ffc6 	bl	8002f7c <RetargetInit>
  memcpy(ESP32.SSID, _SSID, strlen(_SSID));
 8000ff0:	220e      	movs	r2, #14
 8000ff2:	4941      	ldr	r1, [pc, #260]	; (80010f8 <main+0x14c>)
 8000ff4:	4841      	ldr	r0, [pc, #260]	; (80010fc <main+0x150>)
 8000ff6:	f006 fedb 	bl	8007db0 <memcpy>
  memcpy(ESP32.Pass, _PASS, strlen(_PASS));
 8000ffa:	220d      	movs	r2, #13
 8000ffc:	4940      	ldr	r1, [pc, #256]	; (8001100 <main+0x154>)
 8000ffe:	4841      	ldr	r0, [pc, #260]	; (8001104 <main+0x158>)
 8001000:	f006 fed6 	bl	8007db0 <memcpy>
  ESP32.IO.IO_Receive = Receive_Func;
 8001004:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <main+0x150>)
 8001006:	4a40      	ldr	r2, [pc, #256]	; (8001108 <main+0x15c>)
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
  ESP32.IO.IO_Transmit = Transmit_Func;
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <main+0x150>)
 800100c:	4a3f      	ldr	r2, [pc, #252]	; (800110c <main+0x160>)
 800100e:	649a      	str	r2, [r3, #72]	; 0x48

  printf("----------START PROGRAM----------\r\n");
 8001010:	483f      	ldr	r0, [pc, #252]	; (8001110 <main+0x164>)
 8001012:	f007 fe45 	bl	8008ca0 <puts>

  HT_Sensor.interface = &hi2c1;
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <main+0x168>)
 8001018:	4a3f      	ldr	r2, [pc, #252]	; (8001118 <main+0x16c>)
 800101a:	601a      	str	r2, [r3, #0]
  SHTC3_Init(&HT_Sensor);
 800101c:	483d      	ldr	r0, [pc, #244]	; (8001114 <main+0x168>)
 800101e:	f001 fee6 	bl	8002dee <SHTC3_Init>

  Sensor_1.uart_itf = &huart4;
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <main+0x170>)
 8001024:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <main+0x174>)
 8001026:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_1);
 8001028:	483c      	ldr	r0, [pc, #240]	; (800111c <main+0x170>)
 800102a:	f001 fd67 	bl	8002afc <Sensor_Init>

  Sensor_2.uart_itf = &huart5;
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <main+0x178>)
 8001030:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <main+0x17c>)
 8001032:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_2);
 8001034:	483b      	ldr	r0, [pc, #236]	; (8001124 <main+0x178>)
 8001036:	f001 fd61 	bl	8002afc <Sensor_Init>

  Sensor_3.uart_itf = &huart7;
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <main+0x180>)
 800103c:	4a3c      	ldr	r2, [pc, #240]	; (8001130 <main+0x184>)
 800103e:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_3);
 8001040:	483a      	ldr	r0, [pc, #232]	; (800112c <main+0x180>)
 8001042:	f001 fd5b 	bl	8002afc <Sensor_Init>

  Sensor_4.uart_itf = &huart8;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <main+0x188>)
 8001048:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <main+0x18c>)
 800104a:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_4);
 800104c:	4839      	ldr	r0, [pc, #228]	; (8001134 <main+0x188>)
 800104e:	f001 fd55 	bl	8002afc <Sensor_Init>

  ESP32_Init(&ESP32);
 8001052:	482a      	ldr	r0, [pc, #168]	; (80010fc <main+0x150>)
 8001054:	f001 fa2c 	bl	80024b0 <ESP32_Init>
  ESP32_MQTT_Connect(&ESP32, "client_id");
 8001058:	4938      	ldr	r1, [pc, #224]	; (800113c <main+0x190>)
 800105a:	4828      	ldr	r0, [pc, #160]	; (80010fc <main+0x150>)
 800105c:	f001 faa8 	bl	80025b0 <ESP32_MQTT_Connect>
  Network_time_t network_time = ESP32_GetTime();
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fbe5 	bl	8002834 <ESP32_GetTime>

  RTC_TimeTypeDef sTime = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  sTime.Hours	= network_time.hour;
 8001078:	7efb      	ldrb	r3, [r7, #27]
 800107a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes	= network_time.min;
 800107c:	7f3b      	ldrb	r3, [r7, #28]
 800107e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds	= network_time.sec;
 8001080:	7f7b      	ldrb	r3, [r7, #29]
 8001082:	71bb      	strb	r3, [r7, #6]

  RTC_DateTypeDef sDate = {0};
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sDate.Month	= network_time.month;
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	707b      	strb	r3, [r7, #1]
  sDate.Date	= network_time.day;
 800108c:	7ebb      	ldrb	r3, [r7, #26]
 800108e:	70bb      	strb	r3, [r7, #2]
  sDate.Year	= network_time.year - 2000;
 8001090:	7e3b      	ldrb	r3, [r7, #24]
 8001092:	3330      	adds	r3, #48	; 0x30
 8001094:	b2db      	uxtb	r3, r3
 8001096:	70fb      	strb	r3, [r7, #3]

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	4828      	ldr	r0, [pc, #160]	; (8001140 <main+0x194>)
 80010a0:	f004 fedd 	bl	8005e5e <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <main+0x194>)
 80010ac:	f004 fff2 	bl	8006094 <HAL_RTC_SetDate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(mqttBuffer, "{");
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <main+0x198>)
 80010b2:	227b      	movs	r2, #123	; 0x7b
 80010b4:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(AWS_POST_TIME);
 80010b6:	4824      	ldr	r0, [pc, #144]	; (8001148 <main+0x19c>)
 80010b8:	f002 f898 	bl	80031ec <HAL_Delay>
	  mqttBuffer[strlen(mqttBuffer)-1] = 0;
 80010bc:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0x198>)
 80010be:	f7ff f8af 	bl	8000220 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <main+0x198>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	54d1      	strb	r1, [r2, r3]
	  sprintf(mqttBuffer, "%s}", mqttBuffer);
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <main+0x198>)
 80010ce:	491f      	ldr	r1, [pc, #124]	; (800114c <main+0x1a0>)
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <main+0x198>)
 80010d2:	f007 fe9b 	bl	8008e0c <siprintf>
	  ESP32_MQTT_Public(&ESP32, "IoTSensorUnit", mqttBuffer);
 80010d6:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <main+0x198>)
 80010d8:	491d      	ldr	r1, [pc, #116]	; (8001150 <main+0x1a4>)
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <main+0x150>)
 80010dc:	f001 faa6 	bl	800262c <ESP32_MQTT_Public>
	  memset(mqttBuffer, 0, sizeof(mqttBuffer));
 80010e0:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80010e4:	2100      	movs	r1, #0
 80010e6:	4817      	ldr	r0, [pc, #92]	; (8001144 <main+0x198>)
 80010e8:	f006 fe6d 	bl	8007dc6 <memset>
	  msgIndex = 0;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <main+0x1a8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	  sprintf(mqttBuffer, "{");
 80010f2:	e7dd      	b.n	80010b0 <main+0x104>
 80010f4:	20007da8 	.word	0x20007da8
 80010f8:	0800be60 	.word	0x0800be60
 80010fc:	2000025c 	.word	0x2000025c
 8001100:	0800be70 	.word	0x0800be70
 8001104:	2000027c 	.word	0x2000027c
 8001108:	08001775 	.word	0x08001775
 800110c:	08001955 	.word	0x08001955
 8001110:	0800be80 	.word	0x0800be80
 8001114:	200004fc 	.word	0x200004fc
 8001118:	20007e68 	.word	0x20007e68
 800111c:	200004ac 	.word	0x200004ac
 8001120:	20007f5c 	.word	0x20007f5c
 8001124:	200004c0 	.word	0x200004c0
 8001128:	20007ebc 	.word	0x20007ebc
 800112c:	200004d4 	.word	0x200004d4
 8001130:	20007de8 	.word	0x20007de8
 8001134:	200004e8 	.word	0x200004e8
 8001138:	20007f1c 	.word	0x20007f1c
 800113c:	0800bea4 	.word	0x0800bea4
 8001140:	20007efc 	.word	0x20007efc
 8001144:	2000050c 	.word	0x2000050c
 8001148:	000927c0 	.word	0x000927c0
 800114c:	0800beb0 	.word	0x0800beb0
 8001150:	0800beb4 	.word	0x0800beb4
 8001154:	20007d0c 	.word	0x20007d0c

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0aa      	sub	sp, #168	; 0xa8
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001162:	2234      	movs	r2, #52	; 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fe2d 	bl	8007dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2258      	movs	r2, #88	; 0x58
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f006 fe1e 	bl	8007dc6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <SystemClock_Config+0x110>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a35      	ldr	r2, [pc, #212]	; (8001268 <SystemClock_Config+0x110>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <SystemClock_Config+0x110>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <SystemClock_Config+0x114>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2f      	ldr	r2, [pc, #188]	; (800126c <SystemClock_Config+0x114>)
 80011b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <SystemClock_Config+0x114>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011c2:	230a      	movs	r3, #10
 80011c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e4:	2310      	movs	r3, #16
 80011e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 80011ea:	23c8      	movs	r3, #200	; 0xc8
 80011ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fb56 	bl	80058b8 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001212:	f000 fd8f 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2302      	movs	r3, #2
 800121c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001230:	2103      	movs	r1, #3
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fee8 	bl	8005008 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800123e:	f000 fd79 	bl	8001d34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001242:	2308      	movs	r3, #8
 8001244:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f8a5 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800125c:	f000 fd6a 	bl	8001d34 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	37a8      	adds	r7, #168	; 0xa8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f002 fdf3 	bl	8003e98 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 fd3c 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20007e68 	.word	0x20007e68
 80012c4:	40005400 	.word	0x40005400
 80012c8:	000186a0 	.word	0x000186a0

080012cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <MX_RTC_Init+0xac>)
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <MX_RTC_Init+0xb0>)
 80012e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_RTC_Init+0xac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_RTC_Init+0xac>)
 80012f2:	227f      	movs	r2, #127	; 0x7f
 80012f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <MX_RTC_Init+0xac>)
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_RTC_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_RTC_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_RTC_Init+0xac>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <MX_RTC_Init+0xac>)
 8001310:	f004 fd14 	bl	8005d3c <HAL_RTC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800131a:	f000 fd0b 	bl	8001d34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800131e:	2300      	movs	r3, #0
 8001320:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001322:	2300      	movs	r3, #0
 8001324:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001326:	2300      	movs	r3, #0
 8001328:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2201      	movs	r2, #1
 8001336:	4619      	mov	r1, r3
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <MX_RTC_Init+0xac>)
 800133a:	f004 fd90 	bl	8005e5e <HAL_RTC_SetTime>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001344:	f000 fcf6 	bl	8001d34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001348:	2301      	movs	r3, #1
 800134a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800134c:	2301      	movs	r3, #1
 800134e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001350:	2301      	movs	r3, #1
 8001352:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001354:	2300      	movs	r3, #0
 8001356:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_RTC_Init+0xac>)
 8001360:	f004 fe98 	bl	8006094 <HAL_RTC_SetDate>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800136a:	f000 fce3 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20007efc 	.word	0x20007efc
 800137c:	40002800 	.word	0x40002800

08001380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_TIM2_Init+0xac>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_TIM2_Init+0xac>)
 80013a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM2_Init+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000000;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM2_Init+0xac>)
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <MX_TIM2_Init+0xb0>)
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM2_Init+0xac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM2_Init+0xac>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <MX_TIM2_Init+0xac>)
 80013c6:	f004 ffeb 	bl	80063a0 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013d0:	f000 fcb0 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_TIM2_Init+0xac>)
 80013e2:	f005 f934 	bl	800664e <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ec:	f000 fca2 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <MX_TIM2_Init+0xac>)
 80013fe:	f005 fb3f 	bl	8006a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 fc94 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_TIM2_Init+0xac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_TIM2_Init+0xac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM2_Init+0xac>)
 800141e:	f004 ffea 	bl	80063f6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20007f9c 	.word	0x20007f9c
 8001430:	005b8d80 	.word	0x005b8d80

08001434 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_UART4_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_UART4_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_UART4_Init+0x4c>)
 8001440:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001444:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_UART4_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_UART4_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_UART4_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_UART4_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_UART4_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_UART4_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_UART4_Init+0x4c>)
 800146c:	f005 fb98 	bl	8006ba0 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 fc5d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20007f5c 	.word	0x20007f5c
 8001484:	40004c00 	.word	0x40004c00

08001488 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_UART5_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_UART5_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_UART5_Init+0x4c>)
 8001494:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001498:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_UART5_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_UART5_Init+0x4c>)
 80014c0:	f005 fb6e 	bl	8006ba0 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 fc33 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20007ebc 	.word	0x20007ebc
 80014d8:	40005000 	.word	0x40005000

080014dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_UART7_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_UART7_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 38400;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_UART7_Init+0x4c>)
 80014e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_UART7_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_UART7_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_UART7_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_UART7_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_UART7_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_UART7_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_UART7_Init+0x4c>)
 8001514:	f005 fb44 	bl	8006ba0 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 fc09 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20007de8 	.word	0x20007de8
 800152c:	40007800 	.word	0x40007800

08001530 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_UART8_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_UART8_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_UART8_Init+0x4c>)
 800153c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001540:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_UART8_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_UART8_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_UART8_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_UART8_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_UART8_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_UART8_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_UART8_Init+0x4c>)
 8001568:	f005 fb1a 	bl	8006ba0 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001572:	f000 fbdf 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20007f1c 	.word	0x20007f1c
 8001580:	40007c00 	.word	0x40007c00

08001584 <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_UART9_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_UART9_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_UART9_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_UART9_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_UART9_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_UART9_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_UART9_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_UART9_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_UART9_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart9) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_UART9_Init+0x4c>)
 80015bc:	f005 faf0 	bl	8006ba0 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_UART9_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 fbb5 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20007da8 	.word	0x20007da8
 80015d4:	40011800 	.word	0x40011800

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART2_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART2_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART2_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x58>)
 8001610:	f005 fac6 	bl	8006ba0 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 fb8b 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  HAL_UART_Receive_DMA(&huart2,  ESP32.IO.buffer, BUFFER_SIZE);
 800161e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001622:	4905      	ldr	r1, [pc, #20]	; (8001638 <MX_USART2_UART_Init+0x60>)
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <MX_USART2_UART_Init+0x58>)
 8001626:	f005 fc47 	bl	8006eb8 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20007fdc 	.word	0x20007fdc
 8001634:	40004400 	.word	0x40004400
 8001638:	200002a8 	.word	0x200002a8

0800163c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART3_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001674:	f005 fa94 	bl	8006ba0 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f000 fb59 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20007e28 	.word	0x20007e28
 800168c:	40004800 	.word	0x40004800

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_DMA_Init+0x3c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2010      	movs	r0, #16
 80016b8:	f001 fe95 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016bc:	2010      	movs	r0, #16
 80016be:	f001 feae 	bl	800341e <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MX_GPIO_Init+0xa0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a24      	ldr	r2, [pc, #144]	; (8001770 <MX_GPIO_Init+0xa0>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <MX_GPIO_Init+0xa0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_GPIO_Init+0xa0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <MX_GPIO_Init+0xa0>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_GPIO_Init+0xa0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_GPIO_Init+0xa0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_GPIO_Init+0xa0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <Receive_Func>:

/* USER CODE BEGIN 4 */

int16_t Receive_Func( uint8_t *buffer, uint16_t buffer_size, uint32_t time_out)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800177a:	af00      	add	r7, sp, #0
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	6018      	str	r0, [r3, #0]
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f107 030a 	add.w	r3, r7, #10
 800178a:	460a      	mov	r2, r1
 800178c:	801a      	strh	r2, [r3, #0]
	uint32_t timeout = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	memset(buffer, 0, buffer_size);
 8001794:	f107 030a 	add.w	r3, r7, #10
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2100      	movs	r1, #0
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f006 fb10 	bl	8007dc6 <memset>
	uint16_t read_index = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	do
	{
		uint8_t check_buff[BUFFER_SIZE] = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4618      	mov	r0, r3
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	461a      	mov	r2, r3
 80017b8:	2100      	movs	r1, #0
 80017ba:	f006 fb04 	bl	8007dc6 <memset>
		uint8_t cnt=0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
		read_index = ESP32.IO.read_pos;
 80017c4:	4b5d      	ldr	r3, [pc, #372]	; (800193c <Receive_Func+0x1c8>)
 80017c6:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80017ca:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222

		do
		{
			check_buff[cnt++] = ESP32.IO.buffer[read_index];
 80017ce:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 80017d2:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 80017d6:	1c59      	adds	r1, r3, #1
 80017d8:	f887 1221 	strb.w	r1, [r7, #545]	; 0x221
 80017dc:	4619      	mov	r1, r3
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <Receive_Func+0x1c8>)
 80017e0:	4413      	add	r3, r2
 80017e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	545a      	strb	r2, [r3, r1]
			if(++read_index>=BUFFER_SIZE)
 80017ee:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 80017f2:	3301      	adds	r3, #1
 80017f4:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 80017f8:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 80017fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001800:	d302      	bcc.n	8001808 <Receive_Func+0x94>
				read_index = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
		}while(ESP32.IO.buffer[read_index] != 0);
 8001808:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <Receive_Func+0x1c8>)
 800180e:	4413      	add	r3, r2
 8001810:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1d9      	bne.n	80017ce <Receive_Func+0x5a>

		//if((strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nOK\r\n")!=0)||(strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nERROR\r\n")!=0))
		if((strstr((char*)check_buff, "\r\nOK")!=0)||(strstr((char*)check_buff, "ERROR")!=0)
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4948      	ldr	r1, [pc, #288]	; (8001940 <Receive_Func+0x1cc>)
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fb13 	bl	8008e4c <strstr>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <Receive_Func+0xee>
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4944      	ldr	r1, [pc, #272]	; (8001944 <Receive_Func+0x1d0>)
 8001832:	4618      	mov	r0, r3
 8001834:	f007 fb0a 	bl	8008e4c <strstr>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d111      	bne.n	8001862 <Receive_Func+0xee>
				||(strstr((char*)check_buff, "ready")!=0)||(strstr((char*)check_buff, "+MQTTPUB:OK")!=0))
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4941      	ldr	r1, [pc, #260]	; (8001948 <Receive_Func+0x1d4>)
 8001844:	4618      	mov	r0, r3
 8001846:	f007 fb01 	bl	8008e4c <strstr>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <Receive_Func+0xee>
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	493d      	ldr	r1, [pc, #244]	; (800194c <Receive_Func+0x1d8>)
 8001856:	4618      	mov	r0, r3
 8001858:	f007 faf8 	bl	8008e4c <strstr>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d055      	beq.n	800190e <Receive_Func+0x19a>
		{
			uint8_t index = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
			memcpy(buffer, check_buff, cnt);
 8001868:	f897 2221 	ldrb.w	r2, [r7, #545]	; 0x221
 800186c:	f107 0114 	add.w	r1, r7, #20
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f006 fa9b 	bl	8007db0 <memcpy>
			for(int i = 0; i < cnt; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001880:	e02b      	b.n	80018da <Receive_Func+0x166>
			{
				int temp = ((ESP32.IO.read_pos + i)<BUFFER_SIZE)?(ESP32.IO.read_pos + i):((ESP32.IO.read_pos + i)-BUFFER_SIZE);
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <Receive_Func+0x1c8>)
 8001884:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001888:	b29b      	uxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001890:	4413      	add	r3, r2
 8001892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001896:	da08      	bge.n	80018aa <Receive_Func+0x136>
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <Receive_Func+0x1c8>)
 800189a:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80018a6:	4413      	add	r3, r2
 80018a8:	e009      	b.n	80018be <Receive_Func+0x14a>
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <Receive_Func+0x1c8>)
 80018ac:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80018b8:	4413      	add	r3, r2
 80018ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80018be:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				ESP32.IO.buffer[temp] = 0;
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <Receive_Func+0x1c8>)
 80018c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018c8:	4413      	add	r3, r2
 80018ca:	334c      	adds	r3, #76	; 0x4c
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < cnt; i++)
 80018d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80018d4:	3301      	adds	r3, #1
 80018d6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80018da:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 80018de:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbcd      	blt.n	8001882 <Receive_Func+0x10e>
			}
			printf("[debug]: %s--position: %d\r\n", buffer, ESP32.IO.read_pos);
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <Receive_Func+0x1c8>)
 80018e8:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	4816      	ldr	r0, [pc, #88]	; (8001950 <Receive_Func+0x1dc>)
 80018f8:	f007 f95e 	bl	8008bb8 <iprintf>
			ESP32.IO.read_pos = read_index;
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <Receive_Func+0x1c8>)
 80018fe:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001902:	f8a2 324c 	strh.w	r3, [r2, #588]	; 0x24c
			return index;
 8001906:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 800190a:	b21b      	sxth	r3, r3
 800190c:	e011      	b.n	8001932 <Receive_Func+0x1be>
		}

		if(++timeout >= time_out)
 800190e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001912:	3301      	adds	r3, #1
 8001914:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d302      	bcc.n	800192a <Receive_Func+0x1b6>
			return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	e003      	b.n	8001932 <Receive_Func+0x1be>
		HAL_Delay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f001 fc5e 	bl	80031ec <HAL_Delay>
	{
 8001930:	e73c      	b.n	80017ac <Receive_Func+0x38>
	}while(1);
}
 8001932:	4618      	mov	r0, r3
 8001934:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000025c 	.word	0x2000025c
 8001940:	0800bec4 	.word	0x0800bec4
 8001944:	0800becc 	.word	0x0800becc
 8001948:	0800bed4 	.word	0x0800bed4
 800194c:	0800bedc 	.word	0x0800bedc
 8001950:	0800bee8 	.word	0x0800bee8

08001954 <Transmit_Func>:

int16_t Transmit_Func( uint8_t *data, uint16_t data_size)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = HAL_UART_Transmit(&huart2, data, data_size, HAL_MAX_DELAY);
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <Transmit_Func+0x34>)
 800196a:	f005 f966 	bl	8006c3a <HAL_UART_Transmit>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
	if(res != HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <Transmit_Func+0x2a>
		return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	e000      	b.n	8001980 <Transmit_Func+0x2c>
	else
		return 0;
 800197e:	2300      	movs	r3, #0

}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20007fdc 	.word	0x20007fdc

0800198c <Get_Time_Format>:

void Get_Time_Format(uint8_t* time_str, int size ,int timeZone)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b09b      	sub	sp, #108	; 0x6c
 8001990:	af06      	add	r7, sp, #24
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef stime = {0};
 8001998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sdate = {0};
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 80019ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <Get_Time_Format+0xcc>)
 80019b6:	f004 fb0f 	bl	8005fd8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 80019ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4825      	ldr	r0, [pc, #148]	; (8001a58 <Get_Time_Format+0xcc>)
 80019c4:	f004 fc0d 	bl	80061e2 <HAL_RTC_GetDate>

	struct tm proc_time = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2224      	movs	r2, #36	; 0x24
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 f9f8 	bl	8007dc6 <memset>

	proc_time.tm_year = 2000 + sdate.Year - 1900;
 80019d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019da:	3364      	adds	r3, #100	; 0x64
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
	proc_time.tm_mon = sdate.Month - 1;
 80019de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80019e2:	3b01      	subs	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
	proc_time.tm_mday = sdate.Date;
 80019e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80019ea:	623b      	str	r3, [r7, #32]
	proc_time.tm_hour = stime.Hours;
 80019ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019f0:	61fb      	str	r3, [r7, #28]
	proc_time.tm_min = stime.Minutes;
 80019f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019f6:	61bb      	str	r3, [r7, #24]
	proc_time.tm_sec = stime.Seconds;
 80019f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019fc:	617b      	str	r3, [r7, #20]

	mktime(&proc_time);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fac2 	bl	8007f8c <mktime>
	proc_time.tm_hour += timeZone;
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]
	mktime(&proc_time);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 fab9 	bl	8007f8c <mktime>
	//2021-01-12 12:00:00+09
	memset(time_str, 0, size);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f006 f9d0 	bl	8007dc6 <memset>
	sprintf(time_str, "%.4d-%.2d-%.2d %.2d:%.2d:%.2d+%.2d:00", (int)proc_time.tm_year + 1900, (int)proc_time.tm_mon + 1
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	1c5e      	adds	r6, r3, #1
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	69b9      	ldr	r1, [r7, #24]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	687c      	ldr	r4, [r7, #4]
 8001a3a:	9404      	str	r4, [sp, #16]
 8001a3c:	9003      	str	r0, [sp, #12]
 8001a3e:	9102      	str	r1, [sp, #8]
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4633      	mov	r3, r6
 8001a46:	462a      	mov	r2, r5
 8001a48:	4904      	ldr	r1, [pc, #16]	; (8001a5c <Get_Time_Format+0xd0>)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f007 f9de 	bl	8008e0c <siprintf>
	, (int)proc_time.tm_mday, (int)proc_time.tm_hour, (int)proc_time.tm_min, (int)proc_time.tm_sec, timeZone);
}
 8001a50:	bf00      	nop
 8001a52:	3754      	adds	r7, #84	; 0x54
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a58:	20007efc 	.word	0x20007efc
 8001a5c:	0800bf04 	.word	0x0800bf04

08001a60 <Format_Data>:

void Format_Data(Sensor_t Sensor_1,Sensor_t Sensor_2,Sensor_t Sensor_3,Sensor_t Sensor_4, SHTC3_Sensor_t HT_Sensor,char* data_format, char* time_str)
{
 8001a60:	b084      	sub	sp, #16
 8001a62:	b5b0      	push	{r4, r5, r7, lr}
 8001a64:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	f507 648d 	add.w	r4, r7, #1128	; 0x468
 8001a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor_t Sensors[4] = {Sensor_1, Sensor_2, Sensor_3, Sensor_4};
 8001a72:	f207 4404 	addw	r4, r7, #1028	; 0x404
 8001a76:	f507 658d 	add.w	r5, r7, #1128	; 0x468
 8001a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	6023      	str	r3, [r4, #0]
 8001a82:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8001a86:	f207 457c 	addw	r5, r7, #1148	; 0x47c
 8001a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	f207 442c 	addw	r4, r7, #1068	; 0x42c
 8001a96:	f507 6592 	add.w	r5, r7, #1168	; 0x490
 8001a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 8001aa6:	f207 45a4 	addw	r5, r7, #1188	; 0x4a4
 8001aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aae:	682b      	ldr	r3, [r5, #0]
 8001ab0:	6023      	str	r3, [r4, #0]
	char* sensor_value[256] = {0};
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	461a      	mov	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f006 f982 	bl	8007dc6 <memset>
	if(HT_Sensor.connection == shtc3_connected)
 8001ac2:	f897 34bc 	ldrb.w	r3, [r7, #1212]	; 0x4bc
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11d      	bne.n	8001b06 <Format_Data+0xa6>
	{
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Temp",HT_Sensor.data.tem);
 8001aca:	f8d7 34bd 	ldr.w	r3, [r7, #1213]	; 0x4bd
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd6c 	bl	80005ac <__aeabi_f2d>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	1d3a      	adds	r2, r7, #4
 8001ada:	1d38      	adds	r0, r7, #4
 8001adc:	e9cd 3400 	strd	r3, r4, [sp]
 8001ae0:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <Format_Data+0x1c8>)
 8001ae2:	4952      	ldr	r1, [pc, #328]	; (8001c2c <Format_Data+0x1cc>)
 8001ae4:	f007 f992 	bl	8008e0c <siprintf>
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Rh",HT_Sensor.data.hum);
 8001ae8:	f8d7 34c1 	ldr.w	r3, [r7, #1217]	; 0x4c1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd5d 	bl	80005ac <__aeabi_f2d>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	1d3a      	adds	r2, r7, #4
 8001af8:	1d38      	adds	r0, r7, #4
 8001afa:	e9cd 3400 	strd	r3, r4, [sp]
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <Format_Data+0x1d0>)
 8001b00:	494a      	ldr	r1, [pc, #296]	; (8001c2c <Format_Data+0x1cc>)
 8001b02:	f007 f983 	bl	8008e0c <siprintf>
	}

	for(int i = 0; i < 4; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001b0c:	e033      	b.n	8001b76 <Format_Data+0x116>
	{
		if(Sensors[i].isConnected == connected)
 8001b0e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b54      	subs	r3, #84	; 0x54
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d121      	bne.n	8001b6c <Format_Data+0x10c>
		{
			sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, Sensors[i].name, Sensors[i].value);
 8001b28:	f207 4104 	addw	r1, r7, #1028	; 0x404
 8001b2c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	1c5d      	adds	r5, r3, #1
 8001b3c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b48      	subs	r3, #72	; 0x48
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd2a 	bl	80005ac <__aeabi_f2d>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	1d3a      	adds	r2, r7, #4
 8001b5e:	1d38      	adds	r0, r7, #4
 8001b60:	e9cd 3400 	strd	r3, r4, [sp]
 8001b64:	462b      	mov	r3, r5
 8001b66:	4931      	ldr	r1, [pc, #196]	; (8001c2c <Format_Data+0x1cc>)
 8001b68:	f007 f950 	bl	8008e0c <siprintf>
	for(int i = 0; i < 4; i++)
 8001b6c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001b70:	3301      	adds	r3, #1
 8001b72:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001b76:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	ddc7      	ble.n	8001b0e <Format_Data+0xae>
//			if(i<(4-1))
//				sprintf(sensor_value,"%s,\r\n", sensor_value);
		}
	}
	if(HT_Sensor.connection == shtc3_connected)
 8001b7e:	f897 34bc 	ldrb.w	r3, [r7, #1212]	; 0x4bc
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d11e      	bne.n	8001bc4 <Format_Data+0x164>
	{
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Temp",HT_Sensor.data.tem);
 8001b86:	f8d7 34bd 	ldr.w	r3, [r7, #1213]	; 0x4bd
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd0e 	bl	80005ac <__aeabi_f2d>
 8001b90:	4603      	mov	r3, r0
 8001b92:	460c      	mov	r4, r1
 8001b94:	1d3a      	adds	r2, r7, #4
 8001b96:	1d38      	adds	r0, r7, #4
 8001b98:	e9cd 3400 	strd	r3, r4, [sp]
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <Format_Data+0x1c8>)
 8001b9e:	4923      	ldr	r1, [pc, #140]	; (8001c2c <Format_Data+0x1cc>)
 8001ba0:	f007 f934 	bl	8008e0c <siprintf>
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f\r\n", sensor_value, "Rh",HT_Sensor.data.hum);
 8001ba4:	f8d7 34c1 	ldr.w	r3, [r7, #1217]	; 0x4c1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcff 	bl	80005ac <__aeabi_f2d>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	1d3a      	adds	r2, r7, #4
 8001bb4:	1d38      	adds	r0, r7, #4
 8001bb6:	e9cd 3400 	strd	r3, r4, [sp]
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <Format_Data+0x1d0>)
 8001bbc:	491d      	ldr	r1, [pc, #116]	; (8001c34 <Format_Data+0x1d4>)
 8001bbe:	f007 f925 	bl	8008e0c <siprintf>
 8001bc2:	e01d      	b.n	8001c00 <Format_Data+0x1a0>
	}
	else
	{	//delete , in end of json
		sensor_value[strlen(sensor_value)-1] = 0;
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb2a 	bl	8000220 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		sensor_value[strlen(sensor_value)-2] = '\r';
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb20 	bl	8000220 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	1e9a      	subs	r2, r3, #2
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	210d      	movs	r1, #13
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		sensor_value[strlen(sensor_value)-3] = '\n';
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fb16 	bl	8000220 <strlen>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	1eda      	subs	r2, r3, #3
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	210a      	movs	r1, #10
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	sprintf(data_format, "{\r\n\t\"time\":\"%s\",\r\n\t\"product type\":\"%s\",\r\n\t\"number\":\"%s\",\r\n\t\"values\":\r\n\t{\r\n%s\r\n\t}\r\n}",
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <Format_Data+0x1d8>)
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <Format_Data+0x1dc>)
 8001c0a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8001c0e:	490c      	ldr	r1, [pc, #48]	; (8001c40 <Format_Data+0x1e0>)
 8001c10:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 8001c14:	f007 f8fa 	bl	8008e0c <siprintf>
			time_str, PRODUCT_TYPE, NUMBER, sensor_value);
}
 8001c18:	bf00      	nop
 8001c1a:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c24:	b004      	add	sp, #16
 8001c26:	4770      	bx	lr
 8001c28:	0800bf2c 	.word	0x0800bf2c
 8001c2c:	0800bf34 	.word	0x0800bf34
 8001c30:	0800bf48 	.word	0x0800bf48
 8001c34:	0800bf4c 	.word	0x0800bf4c
 8001c38:	0800bfc0 	.word	0x0800bfc0
 8001c3c:	0800bf5c 	.word	0x0800bf5c
 8001c40:	0800bf6c 	.word	0x0800bf6c

08001c44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
 8001c4a:	af16      	add	r7, sp, #88	; 0x58
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	6018      	str	r0, [r3, #0]
	Sensor_Get_Value(&Sensor_1);
 8001c50:	4830      	ldr	r0, [pc, #192]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c52:	f000 ffc5 	bl	8002be0 <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_2);
 8001c56:	4830      	ldr	r0, [pc, #192]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001c58:	f000 ffc2 	bl	8002be0 <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_3);
 8001c5c:	482f      	ldr	r0, [pc, #188]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c5e:	f000 ffbf 	bl	8002be0 <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_4);
 8001c62:	482f      	ldr	r0, [pc, #188]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c64:	f000 ffbc 	bl	8002be0 <Sensor_Get_Value>
	uint8_t time_str[128] = {0};
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 f8a8 	bl	8007dc6 <memset>
	Get_Time_Format(time_str, sizeof(time_str), 9);
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	2209      	movs	r2, #9
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe84 	bl	800198c <Get_Time_Format>

	SHTC3_Measurement(&HT_Sensor);
 8001c84:	4827      	ldr	r0, [pc, #156]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c86:	f001 f8cf 	bl	8002e28 <SHTC3_Measurement>
	char data2send[512] = {0};
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	461a      	mov	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	f006 f895 	bl	8007dc6 <memset>
	Format_Data(Sensor_1, Sensor_2, Sensor_3, Sensor_4, HT_Sensor, data2send, time_str);
 8001c9c:	4e1d      	ldr	r6, [pc, #116]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	9315      	str	r3, [sp, #84]	; 0x54
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001cac:	ac10      	add	r4, sp, #64	; 0x40
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	c407      	stmia	r4!, {r0, r1, r2}
 8001cb2:	7023      	strb	r3, [r4, #0]
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001cb6:	ac0b      	add	r4, sp, #44	; 0x2c
 8001cb8:	461d      	mov	r5, r3
 8001cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001cc4:	ac06      	add	r4, sp, #24
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	6023      	str	r3, [r4, #0]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001cd2:	ac01      	add	r4, sp, #4
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	6933      	ldr	r3, [r6, #16]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ce6:	f7ff febb 	bl	8001a60 <Format_Data>
	sprintf(mqttBuffer, "%s\r\n\"index_%d\":%s,",  mqttBuffer, msgIndex++, data2send);
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	b2d1      	uxtb	r1, r2
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001cf4:	7011      	strb	r1, [r2, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001d02:	490b      	ldr	r1, [pc, #44]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001d06:	f007 f881 	bl	8008e0c <siprintf>

}
 8001d0a:	bf00      	nop
 8001d0c:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d14:	200004ac 	.word	0x200004ac
 8001d18:	200004c0 	.word	0x200004c0
 8001d1c:	200004d4 	.word	0x200004d4
 8001d20:	200004e8 	.word	0x200004e8
 8001d24:	200004fc 	.word	0x200004fc
 8001d28:	20007d0c 	.word	0x20007d0c
 8001d2c:	2000050c 	.word	0x2000050c
 8001d30:	0800bfd0 	.word	0x0800bfd0

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <Error_Handler+0x6>

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_I2C_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dca:	23c0      	movs	r3, #192	; 0xc0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <HAL_I2C_MspInit+0x8c>)
 8001de6:	f001 fec5 	bl	8003b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020400 	.word	0x40020400

08001e1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_RTC_MspInit+0x24>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d102      	bne.n	8001e34 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RTC_MspInit+0x28>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40002800 	.word	0x40002800
 8001e44:	42470e3c 	.word	0x42470e3c

08001e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d115      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f001 fab3 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f001 facc 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b096      	sub	sp, #88	; 0x58
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a8d      	ldr	r2, [pc, #564]	; (80020e8 <HAL_UART_MspInit+0x254>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d14c      	bne.n	8001f50 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a8b      	ldr	r2, [pc, #556]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed6:	4b85      	ldr	r3, [pc, #532]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a84      	ldr	r2, [pc, #528]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b82      	ldr	r3, [pc, #520]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef2:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /**UART4 GPIO Configuration
    PD10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f24:	4619      	mov	r1, r3
 8001f26:	4872      	ldr	r0, [pc, #456]	; (80020f0 <HAL_UART_MspInit+0x25c>)
 8001f28:	f001 fe24 	bl	8003b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f46:	4619      	mov	r1, r3
 8001f48:	486a      	ldr	r0, [pc, #424]	; (80020f4 <HAL_UART_MspInit+0x260>)
 8001f4a:	f001 fe13 	bl	8003b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f4e:	e17a      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a68      	ldr	r2, [pc, #416]	; (80020f8 <HAL_UART_MspInit+0x264>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12d      	bne.n	8001fb6 <HAL_UART_MspInit+0x122>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a62      	ldr	r2, [pc, #392]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f92:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001fa4:	230b      	movs	r3, #11
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fac:	4619      	mov	r1, r3
 8001fae:	4853      	ldr	r0, [pc, #332]	; (80020fc <HAL_UART_MspInit+0x268>)
 8001fb0:	f001 fde0 	bl	8003b74 <HAL_GPIO_Init>
}
 8001fb4:	e147      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART7)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_UART_MspInit+0x26c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d12d      	bne.n	800201c <HAL_UART_MspInit+0x188>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <HAL_UART_MspInit+0x258>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ff8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	2301      	movs	r3, #1
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800200a:	2308      	movs	r3, #8
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002012:	4619      	mov	r1, r3
 8002014:	483b      	ldr	r0, [pc, #236]	; (8002104 <HAL_UART_MspInit+0x270>)
 8002016:	f001 fdad 	bl	8003b74 <HAL_GPIO_Init>
}
 800201a:	e114      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART8)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a39      	ldr	r2, [pc, #228]	; (8002108 <HAL_UART_MspInit+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_UART_MspInit+0x258>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_UART_MspInit+0x258>)
 800204c:	f043 0310 	orr.w	r3, r3, #16
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002066:	2301      	movs	r3, #1
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800206e:	2308      	movs	r3, #8
 8002070:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002072:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002076:	4619      	mov	r1, r3
 8002078:	4822      	ldr	r0, [pc, #136]	; (8002104 <HAL_UART_MspInit+0x270>)
 800207a:	f001 fd7b 	bl	8003b74 <HAL_GPIO_Init>
}
 800207e:	e0e2      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART9)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_UART_MspInit+0x278>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d142      	bne.n	8002110 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_UART9_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a16      	ldr	r2, [pc, #88]	; (80020ec <HAL_UART_MspInit+0x258>)
 8002094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_UART_MspInit+0x258>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_UART_MspInit+0x258>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_UART_MspInit+0x258>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_UART_MspInit+0x258>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 80020d4:	230b      	movs	r3, #11
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020dc:	4619      	mov	r1, r3
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <HAL_UART_MspInit+0x25c>)
 80020e0:	f001 fd48 	bl	8003b74 <HAL_GPIO_Init>
}
 80020e4:	e0af      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
 80020e6:	bf00      	nop
 80020e8:	40004c00 	.word	0x40004c00
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40005000 	.word	0x40005000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40007800 	.word	0x40007800
 8002104:	40021000 	.word	0x40021000
 8002108:	40007c00 	.word	0x40007c00
 800210c:	40011800 	.word	0x40011800
  else if(huart->Instance==USART2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_UART_MspInit+0x3bc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d163      	bne.n	80021e2 <HAL_UART_MspInit+0x34e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a45      	ldr	r2, [pc, #276]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002152:	230c      	movs	r3, #12
 8002154:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002162:	2307      	movs	r3, #7
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800216a:	4619      	mov	r1, r3
 800216c:	483a      	ldr	r0, [pc, #232]	; (8002258 <HAL_UART_MspInit+0x3c4>)
 800216e:	f001 fd01 	bl	8003b74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_UART_MspInit+0x3c8>)
 8002174:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <HAL_UART_MspInit+0x3cc>)
 8002176:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002178:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_UART_MspInit+0x3c8>)
 800217a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800217e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_UART_MspInit+0x3c8>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002186:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_UART_MspInit+0x3c8>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_UART_MspInit+0x3c8>)
 800218e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002192:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_UART_MspInit+0x3c8>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_UART_MspInit+0x3c8>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b4:	4829      	ldr	r0, [pc, #164]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021b6:	f001 f94d 	bl	8003454 <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x330>
      Error_Handler();
 80021c0:	f7ff fdb8 	bl	8001d34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <HAL_UART_MspInit+0x3c8>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2026      	movs	r0, #38	; 0x26
 80021d6:	f001 f906 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021da:	2026      	movs	r0, #38	; 0x26
 80021dc:	f001 f91f 	bl	800341e <HAL_NVIC_EnableIRQ>
}
 80021e0:	e031      	b.n	8002246 <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==USART3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <HAL_UART_MspInit+0x3d0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d12c      	bne.n	8002246 <HAL_UART_MspInit+0x3b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 80021f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_UART_MspInit+0x3c0>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002224:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002236:	2307      	movs	r3, #7
 8002238:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800223e:	4619      	mov	r1, r3
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <HAL_UART_MspInit+0x3d4>)
 8002242:	f001 fc97 	bl	8003b74 <HAL_GPIO_Init>
}
 8002246:	bf00      	nop
 8002248:	3758      	adds	r7, #88	; 0x58
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40004400 	.word	0x40004400
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000
 800225c:	20007d48 	.word	0x20007d48
 8002260:	40026088 	.word	0x40026088
 8002264:	40004800 	.word	0x40004800
 8002268:	40020c00 	.word	0x40020c00

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b8:	f000 ff78 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <DMA1_Stream5_IRQHandler+0x10>)
 80022c6:	f001 f9ed 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20007d48 	.word	0x20007d48

080022d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM2_IRQHandler+0x10>)
 80022da:	f004 f8b0 	bl	800643e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20007f9c 	.word	0x20007f9c

080022e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(++ESP32.IO.write_pos>BUFFER_SIZE)
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <USART2_IRQHandler+0x34>)
 80022ee:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 80022f2:	3301      	adds	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <USART2_IRQHandler+0x34>)
 80022f8:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <USART2_IRQHandler+0x34>)
 80022fe:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8002302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002306:	d903      	bls.n	8002310 <USART2_IRQHandler+0x28>
		ESP32.IO.write_pos = 0;
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <USART2_IRQHandler+0x34>)
 800230a:	2200      	movs	r2, #0
 800230c:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002310:	4803      	ldr	r0, [pc, #12]	; (8002320 <USART2_IRQHandler+0x38>)
 8002312:	f004 fe51 	bl	8006fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000025c 	.word	0x2000025c
 8002320:	20007fdc 	.word	0x20007fdc

08002324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <_sbrk+0x5c>)
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <_sbrk+0x60>)
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <_sbrk+0x64>)
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <_sbrk+0x68>)
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d207      	bcs.n	8002364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002354:	f005 fd02 	bl	8007d5c <__errno>
 8002358:	4602      	mov	r2, r0
 800235a:	230c      	movs	r3, #12
 800235c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e009      	b.n	8002378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <_sbrk+0x64>)
 8002374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20050000 	.word	0x20050000
 8002384:	00000400 	.word	0x00000400
 8002388:	20007d10 	.word	0x20007d10
 800238c:	20008028 	.word	0x20008028

08002390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <SystemInit+0x28>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <SystemInit+0x28>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SystemInit+0x28>)
 80023a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023aa:	609a      	str	r2, [r3, #8]
#endif
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80023c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023c2:	e003      	b.n	80023cc <LoopCopyDataInit>

080023c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ca:	3104      	adds	r1, #4

080023cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d4:	d3f6      	bcc.n	80023c4 <CopyDataInit>
  ldr  r2, =_sbss
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023d8:	e002      	b.n	80023e0 <LoopFillZerobss>

080023da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80023da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023dc:	f842 3b04 	str.w	r3, [r2], #4

080023e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e4:	d3f9      	bcc.n	80023da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023e6:	f7ff ffd3 	bl	8002390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ea:	f005 fcbd 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7fe fddd 	bl	8000fac <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023f4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80023f8:	0800c684 	.word	0x0800c684
  ldr  r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002400:	20000240 	.word	0x20000240
  ldr  r2, =_sbss
 8002404:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8002408:	20008028 	.word	0x20008028

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <ESP32_SendCommand>:

Network_t *Network = {0};


static Network_Status_t ESP32_SendCommand(uint8_t* cmd)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8002416:	af00      	add	r7, sp, #0
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	6018      	str	r0, [r3, #0]

	int16_t res = Network->IO.IO_Transmit(cmd, strlen((char*)cmd));
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <ESP32_SendCommand+0x94>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f7fd fefb 	bl	8000220 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	b29a      	uxth	r2, r3
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	4611      	mov	r1, r2
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	47a0      	blx	r4
 8002436:	4603      	mov	r3, r0
 8002438:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4618      	mov	r0, r3
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	461a      	mov	r2, r3
 8002448:	2100      	movs	r1, #0
 800244a:	f005 fcbc 	bl	8007dc6 <memset>

	if(res >=0 )
 800244e:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 8002452:	2b00      	cmp	r3, #0
 8002454:	db1f      	blt.n	8002496 <ESP32_SendCommand+0x86>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <ESP32_SendCommand+0x94>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f107 000c 	add.w	r0, r7, #12
 8002460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002468:	4798      	blx	r3
 800246a:	4603      	mov	r3, r0
 800246c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		if(res >=0 )
 8002470:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 8002474:	2b00      	cmp	r3, #0
 8002476:	db01      	blt.n	800247c <ESP32_SendCommand+0x6c>
		{
			//ESP_DEBUG(recv_buff);
			return NETWORK_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e00d      	b.n	8002498 <ESP32_SendCommand+0x88>
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 800247c:	480a      	ldr	r0, [pc, #40]	; (80024a8 <ESP32_SendCommand+0x98>)
 800247e:	f006 fb9b 	bl	8008bb8 <iprintf>
			ESP_DEBUG(recv_buff);
 8002482:	480a      	ldr	r0, [pc, #40]	; (80024ac <ESP32_SendCommand+0x9c>)
 8002484:	f006 fb98 	bl	8008bb8 <iprintf>
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4618      	mov	r0, r3
 800248e:	f006 fb93 	bl	8008bb8 <iprintf>
			return NETWORK_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <ESP32_SendCommand+0x88>
		}

	}
	return NETWORK_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20007d14 	.word	0x20007d14
 80024a8:	0800bfe4 	.word	0x0800bfe4
 80024ac:	0800bff0 	.word	0x0800bff0

080024b0 <ESP32_Init>:


Network_Status_t ESP32_Init(Network_t *network)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b094      	sub	sp, #80	; 0x50
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	Network = network;
 80024b8:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <ESP32_Init+0xc8>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]

	ESP32_SendCommand((uint8_t*)"AT+RST\r\n"); 						//Reset ESP32
 80024be:	482f      	ldr	r0, [pc, #188]	; (800257c <ESP32_Init+0xcc>)
 80024c0:	f7ff ffa6 	bl	8002410 <ESP32_SendCommand>
	ESP32_SendCommand((uint8_t*)"ATE0\r\n"); 						//turn off echo
 80024c4:	482e      	ldr	r0, [pc, #184]	; (8002580 <ESP32_Init+0xd0>)
 80024c6:	f7ff ffa3 	bl	8002410 <ESP32_SendCommand>
	Network_Status_t res = ESP32_SendCommand((uint8_t*)"AT\r\n");	//test with AT command
 80024ca:	482e      	ldr	r0, [pc, #184]	; (8002584 <ESP32_Init+0xd4>)
 80024cc:	f7ff ffa0 	bl	8002410 <ESP32_SendCommand>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(res == NETWORK_OK )
 80024d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d147      	bne.n	800256e <ESP32_Init+0xbe>
	{
		ESP_DEBUG("Set Station mode\r\n");
 80024de:	482a      	ldr	r0, [pc, #168]	; (8002588 <ESP32_Init+0xd8>)
 80024e0:	f006 fb6a 	bl	8008bb8 <iprintf>
 80024e4:	4829      	ldr	r0, [pc, #164]	; (800258c <ESP32_Init+0xdc>)
 80024e6:	f006 fbdb 	bl	8008ca0 <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CWMODE=1\r\n")>=0)
 80024ea:	4829      	ldr	r0, [pc, #164]	; (8002590 <ESP32_Init+0xe0>)
 80024ec:	f7ff ff90 	bl	8002410 <ESP32_SendCommand>
		{
			ESP_DEBUG("Connect wifi with ssid: %s, pass: %s\r\n",  Network->SSID, Network->Pass);
 80024f0:	4825      	ldr	r0, [pc, #148]	; (8002588 <ESP32_Init+0xd8>)
 80024f2:	f006 fb61 	bl	8008bb8 <iprintf>
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <ESP32_Init+0xc8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <ESP32_Init+0xc8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3320      	adds	r3, #32
 8002502:	461a      	mov	r2, r3
 8002504:	4823      	ldr	r0, [pc, #140]	; (8002594 <ESP32_Init+0xe4>)
 8002506:	f006 fb57 	bl	8008bb8 <iprintf>
			uint8_t cmd[64] = {0};
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fc57 	bl	8007dc6 <memset>
			sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", Network->SSID, Network->Pass);
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <ESP32_Init+0xc8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <ESP32_Init+0xc8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3320      	adds	r3, #32
 8002524:	f107 000c 	add.w	r0, r7, #12
 8002528:	491b      	ldr	r1, [pc, #108]	; (8002598 <ESP32_Init+0xe8>)
 800252a:	f006 fc6f 	bl	8008e0c <siprintf>
			if(ESP32_SendCommand(cmd)<0)
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff6c 	bl	8002410 <ESP32_SendCommand>
		else
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config SSL\r\n");
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <ESP32_Init+0xd8>)
 800253a:	f006 fb3d 	bl	8008bb8 <iprintf>
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <ESP32_Init+0xec>)
 8002540:	f006 fbae 	bl	8008ca0 <puts>
		if(ESP32_SendCommand("AT+CIPSSLCCONF=3,0,0\r\n")<0)
 8002544:	4816      	ldr	r0, [pc, #88]	; (80025a0 <ESP32_Init+0xf0>)
 8002546:	f7ff ff63 	bl	8002410 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config mode\r\n");
 800254a:	480f      	ldr	r0, [pc, #60]	; (8002588 <ESP32_Init+0xd8>)
 800254c:	f006 fb34 	bl	8008bb8 <iprintf>
 8002550:	4814      	ldr	r0, [pc, #80]	; (80025a4 <ESP32_Init+0xf4>)
 8002552:	f006 fba5 	bl	8008ca0 <puts>
		if(ESP32_SendCommand("AT+CWMODE=1\r\n")<0)
 8002556:	480e      	ldr	r0, [pc, #56]	; (8002590 <ESP32_Init+0xe0>)
 8002558:	f7ff ff5a 	bl	8002410 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config time server\r\n");
 800255c:	480a      	ldr	r0, [pc, #40]	; (8002588 <ESP32_Init+0xd8>)
 800255e:	f006 fb2b 	bl	8008bb8 <iprintf>
 8002562:	4811      	ldr	r0, [pc, #68]	; (80025a8 <ESP32_Init+0xf8>)
 8002564:	f006 fb9c 	bl	8008ca0 <puts>
		if(ESP32_SendCommand("AT+CIPSNTPCFG=1,0,\"sg.pool.ntp.org\"\r\n")<0)
 8002568:	4810      	ldr	r0, [pc, #64]	; (80025ac <ESP32_Init+0xfc>)
 800256a:	f7ff ff51 	bl	8002410 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

	}
	return NETWORK_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3750      	adds	r7, #80	; 0x50
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20007d14 	.word	0x20007d14
 800257c:	0800bff8 	.word	0x0800bff8
 8002580:	0800c004 	.word	0x0800c004
 8002584:	0800c00c 	.word	0x0800c00c
 8002588:	0800bff0 	.word	0x0800bff0
 800258c:	0800c014 	.word	0x0800c014
 8002590:	0800c028 	.word	0x0800c028
 8002594:	0800c038 	.word	0x0800c038
 8002598:	0800c060 	.word	0x0800c060
 800259c:	0800c078 	.word	0x0800c078
 80025a0:	0800c084 	.word	0x0800c084
 80025a4:	0800c09c 	.word	0x0800c09c
 80025a8:	0800c0ac 	.word	0x0800c0ac
 80025ac:	0800c0c0 	.word	0x0800c0c0

080025b0 <ESP32_MQTT_Connect>:

Network_Status_t ESP32_MQTT_Connect(Network_t *network, uint8_t* client_id)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0a2      	sub	sp, #136	; 0x88
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	uint8_t esp_cmd[128] = {0};
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f005 fbff 	bl	8007dc6 <memset>
	ESP_DEBUG("Set TLS: ");
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <ESP32_MQTT_Connect+0x64>)
 80025ca:	f006 faf5 	bl	8008bb8 <iprintf>
 80025ce:	4812      	ldr	r0, [pc, #72]	; (8002618 <ESP32_MQTT_Connect+0x68>)
 80025d0:	f006 faf2 	bl	8008bb8 <iprintf>
	sprintf(esp_cmd, "AT+MQTTUSERCFG=0,4,\"%s\",\"espressif\",\"1234567890\",0,0,\"\"\r\n", client_id);
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4910      	ldr	r1, [pc, #64]	; (800261c <ESP32_MQTT_Connect+0x6c>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f006 fc15 	bl	8008e0c <siprintf>
	if(ESP32_SendCommand(esp_cmd)<0)
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff12 	bl	8002410 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <ESP32_MQTT_Connect+0x70>)
 80025ee:	f006 fb57 	bl	8008ca0 <puts>
	ESP_DEBUG("Connect to IoT AWS: ");
 80025f2:	4808      	ldr	r0, [pc, #32]	; (8002614 <ESP32_MQTT_Connect+0x64>)
 80025f4:	f006 fae0 	bl	8008bb8 <iprintf>
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <ESP32_MQTT_Connect+0x74>)
 80025fa:	f006 fadd 	bl	8008bb8 <iprintf>
//	if(ESP32_SendCommand("AT+MQTTCONN=0,\"as76wtq33csyg-ats.iot.ap-southeast-1.amazonaws.com\",8883,1\r\n")<0)
	if(ESP32_SendCommand("AT+MQTTCONN=0,\"a2m7a41bhehfuw-ats.iot.us-east-2.amazonaws.com\",8883,1\r\n")<0)
 80025fe:	480a      	ldr	r0, [pc, #40]	; (8002628 <ESP32_MQTT_Connect+0x78>)
 8002600:	f7ff ff06 	bl	8002410 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <ESP32_MQTT_Connect+0x70>)
 8002606:	f006 fb4b 	bl	8008ca0 <puts>
	return NETWORK_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3788      	adds	r7, #136	; 0x88
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0800bff0 	.word	0x0800bff0
 8002618:	0800c0e8 	.word	0x0800c0e8
 800261c:	0800c0f4 	.word	0x0800c0f4
 8002620:	0800c130 	.word	0x0800c130
 8002624:	0800c134 	.word	0x0800c134
 8002628:	0800c14c 	.word	0x0800c14c

0800262c <ESP32_MQTT_Public>:

Network_Status_t ESP32_MQTT_Public(Network_t *network, uint8_t* topic, uint8_t* message)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002632:	af00      	add	r7, sp, #0
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	6018      	str	r0, [r3, #0]
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	6019      	str	r1, [r3, #0]
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	601a      	str	r2, [r3, #0]
	uint8_t esp_cmd[1024] = {0};
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264e:	461a      	mov	r2, r3
 8002650:	2100      	movs	r1, #0
 8002652:	f005 fbb8 	bl	8007dc6 <memset>

	//sprintf(esp_cmd, "AT+MQTTPUB=0,\"%s\",\"%s\",1,0\r\n", topic, message);
	sprintf(esp_cmd, "AT+MQTTPUBRAW=0,\"%s\",%d,1,0\r\n", topic, strlen(message));
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	f7fd fde1 	bl	8000220 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	f107 0208 	add.w	r2, r7, #8
 8002664:	f107 0010 	add.w	r0, r7, #16
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4913      	ldr	r1, [pc, #76]	; (80026b8 <ESP32_MQTT_Public+0x8c>)
 800266c:	f006 fbce 	bl	8008e0c <siprintf>
	ESP_DEBUG("[PUBLIC]: %s\r\n", esp_cmd);
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <ESP32_MQTT_Public+0x90>)
 8002672:	f006 faa1 	bl	8008bb8 <iprintf>
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4619      	mov	r1, r3
 800267c:	4810      	ldr	r0, [pc, #64]	; (80026c0 <ESP32_MQTT_Public+0x94>)
 800267e:	f006 fa9b 	bl	8008bb8 <iprintf>

	if(ESP32_SendCommand(esp_cmd)<0)
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fec2 	bl	8002410 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	ESP_DEBUG("[PUBLIC]: topic: %s, message: %s\r\n", topic, message);
 800268c:	480b      	ldr	r0, [pc, #44]	; (80026bc <ESP32_MQTT_Public+0x90>)
 800268e:	f006 fa93 	bl	8008bb8 <iprintf>
 8002692:	1d3a      	adds	r2, r7, #4
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <ESP32_MQTT_Public+0x98>)
 800269e:	f006 fa8b 	bl	8008bb8 <iprintf>

	if(ESP32_SendCommand(message)<0)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	f7ff feb3 	bl	8002410 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	return NETWORK_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800c194 	.word	0x0800c194
 80026bc:	0800bff0 	.word	0x0800bff0
 80026c0:	0800c1b4 	.word	0x0800c1b4
 80026c4:	0800c1c4 	.word	0x0800c1c4

080026c8 <standard_string_time>:
static void standard_string_time(uint8_t* time_str)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	int index = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]

	do
	{
		if(time_str[index] == 0)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <standard_string_time+0x42>
		{
			break;
		}
		else if ((time_str[index] < '0')||(time_str[index] > '9'))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b2f      	cmp	r3, #47	; 0x2f
 80026ea:	d905      	bls.n	80026f8 <standard_string_time+0x30>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b39      	cmp	r3, #57	; 0x39
 80026f6:	d904      	bls.n	8002702 <standard_string_time+0x3a>
		{
			time_str[index] = '0';
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	2230      	movs	r2, #48	; 0x30
 8002700:	701a      	strb	r2, [r3, #0]
		}
		index++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
		if(time_str[index] == 0)
 8002708:	e7e4      	b.n	80026d4 <standard_string_time+0xc>
			break;
 800270a:	bf00      	nop
	}while(1);

}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <month_encode>:
static uint8_t month_encode(uint8_t* month_str)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	if(strstr((char*)(char*)month_str, "Jan"))
 8002720:	4938      	ldr	r1, [pc, #224]	; (8002804 <month_encode+0xec>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f006 fb92 	bl	8008e4c <strstr>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <month_encode+0x1a>
		return 1;
 800272e:	2301      	movs	r3, #1
 8002730:	e063      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Feb"))
 8002732:	4935      	ldr	r1, [pc, #212]	; (8002808 <month_encode+0xf0>)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f006 fb89 	bl	8008e4c <strstr>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <month_encode+0x2c>
		return 2;
 8002740:	2302      	movs	r3, #2
 8002742:	e05a      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Mar"))
 8002744:	4931      	ldr	r1, [pc, #196]	; (800280c <month_encode+0xf4>)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f006 fb80 	bl	8008e4c <strstr>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <month_encode+0x3e>
		return 3;
 8002752:	2303      	movs	r3, #3
 8002754:	e051      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Apr"))
 8002756:	492e      	ldr	r1, [pc, #184]	; (8002810 <month_encode+0xf8>)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f006 fb77 	bl	8008e4c <strstr>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <month_encode+0x50>
		return 4;
 8002764:	2304      	movs	r3, #4
 8002766:	e048      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "May"))
 8002768:	492a      	ldr	r1, [pc, #168]	; (8002814 <month_encode+0xfc>)
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f006 fb6e 	bl	8008e4c <strstr>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <month_encode+0x62>
		return 5;
 8002776:	2305      	movs	r3, #5
 8002778:	e03f      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jun"))
 800277a:	4927      	ldr	r1, [pc, #156]	; (8002818 <month_encode+0x100>)
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f006 fb65 	bl	8008e4c <strstr>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <month_encode+0x74>
		return 6;
 8002788:	2306      	movs	r3, #6
 800278a:	e036      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jul"))
 800278c:	4923      	ldr	r1, [pc, #140]	; (800281c <month_encode+0x104>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 fb5c 	bl	8008e4c <strstr>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <month_encode+0x86>
		return 7;
 800279a:	2307      	movs	r3, #7
 800279c:	e02d      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Aug"))
 800279e:	4920      	ldr	r1, [pc, #128]	; (8002820 <month_encode+0x108>)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f006 fb53 	bl	8008e4c <strstr>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <month_encode+0x98>
		return 8;
 80027ac:	2308      	movs	r3, #8
 80027ae:	e024      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Sep"))
 80027b0:	491c      	ldr	r1, [pc, #112]	; (8002824 <month_encode+0x10c>)
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f006 fb4a 	bl	8008e4c <strstr>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <month_encode+0xaa>
		return 9;
 80027be:	2309      	movs	r3, #9
 80027c0:	e01b      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Oct"))
 80027c2:	4919      	ldr	r1, [pc, #100]	; (8002828 <month_encode+0x110>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f006 fb41 	bl	8008e4c <strstr>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <month_encode+0xbc>
		return 10;
 80027d0:	230a      	movs	r3, #10
 80027d2:	e012      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Nov"))
 80027d4:	4915      	ldr	r1, [pc, #84]	; (800282c <month_encode+0x114>)
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f006 fb38 	bl	8008e4c <strstr>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <month_encode+0xce>
		return 11;
 80027e2:	230b      	movs	r3, #11
 80027e4:	e009      	b.n	80027fa <month_encode+0xe2>
	else if(strstr((char*)month_str, "Dec"))
 80027e6:	4912      	ldr	r1, [pc, #72]	; (8002830 <month_encode+0x118>)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f006 fb2f 	bl	8008e4c <strstr>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <month_encode+0xe0>
		return 12;
 80027f4:	230c      	movs	r3, #12
 80027f6:	e000      	b.n	80027fa <month_encode+0xe2>
	else
		return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	0800c1e8 	.word	0x0800c1e8
 8002808:	0800c1ec 	.word	0x0800c1ec
 800280c:	0800c1f0 	.word	0x0800c1f0
 8002810:	0800c1f4 	.word	0x0800c1f4
 8002814:	0800c1f8 	.word	0x0800c1f8
 8002818:	0800c1fc 	.word	0x0800c1fc
 800281c:	0800c200 	.word	0x0800c200
 8002820:	0800c204 	.word	0x0800c204
 8002824:	0800c208 	.word	0x0800c208
 8002828:	0800c20c 	.word	0x0800c20c
 800282c:	0800c210 	.word	0x0800c210
 8002830:	0800c214 	.word	0x0800c214

08002834 <ESP32_GetTime>:

Network_time_t ESP32_GetTime()
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 800283a:	af04      	add	r7, sp, #16
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	6018      	str	r0, [r3, #0]
	uint8_t esp_cmd[256] = {0};
 8002840:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002844:	4618      	mov	r0, r3
 8002846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284a:	461a      	mov	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f005 faba 	bl	8007dc6 <memset>
	Network_time_t result = {0};
 8002852:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	809a      	strh	r2, [r3, #4]
	sprintf((char*)esp_cmd, "AT+CIPSNTPTIME?\r\n");
 800285c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002860:	4aa0      	ldr	r2, [pc, #640]	; (8002ae4 <ESP32_GetTime+0x2b0>)
 8002862:	461c      	mov	r4, r3
 8002864:	4615      	mov	r5, r2
 8002866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800286a:	682b      	ldr	r3, [r5, #0]
 800286c:	8023      	strh	r3, [r4, #0]
	int16_t res = Network->IO.IO_Transmit(esp_cmd, strlen((char*)esp_cmd));
 800286e:	4b9e      	ldr	r3, [pc, #632]	; (8002ae8 <ESP32_GetTime+0x2b4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002874:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fcd1 	bl	8000220 <strlen>
 800287e:	4603      	mov	r3, r0
 8002880:	b29a      	uxth	r2, r3
 8002882:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	47a0      	blx	r4
 800288c:	4603      	mov	r3, r0
 800288e:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 8002892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002896:	4618      	mov	r0, r3
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	461a      	mov	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f005 fa91 	bl	8007dc6 <memset>

	if(res >=0 )
 80028a4:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db1c      	blt.n	80028e6 <ESP32_GetTime+0xb2>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 80028ac:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <ESP32_GetTime+0x2b4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028be:	4798      	blx	r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
		if(res >=0 )
 80028c6:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da0b      	bge.n	80028e6 <ESP32_GetTime+0xb2>
		{
			//ESP_DEBUG(recv_buff);
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 80028ce:	4887      	ldr	r0, [pc, #540]	; (8002aec <ESP32_GetTime+0x2b8>)
 80028d0:	f006 f972 	bl	8008bb8 <iprintf>
			return result;
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80028dc:	6810      	ldr	r0, [r2, #0]
 80028de:	6018      	str	r0, [r3, #0]
 80028e0:	8892      	ldrh	r2, [r2, #4]
 80028e2:	809a      	strh	r2, [r3, #4]
 80028e4:	e0f8      	b.n	8002ad8 <ESP32_GetTime+0x2a4>
		}
	}
	char* time_str = strstr((char*)recv_buff, "+CIPSNTPTIME:");
 80028e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ea:	4981      	ldr	r1, [pc, #516]	; (8002af0 <ESP32_GetTime+0x2bc>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 faad 	bl	8008e4c <strstr>
 80028f2:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
	uint8_t day_str[3] 	= {0};
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	2100      	movs	r1, #0
 80028fc:	460a      	mov	r2, r1
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	460a      	mov	r2, r1
 8002902:	709a      	strb	r2, [r3, #2]
	uint8_t month_str[4]= {0};
 8002904:	f107 0320 	add.w	r3, r7, #32
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
	uint8_t year_str[5] = {0};
 800290c:	f107 0318 	add.w	r3, r7, #24
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	711a      	strb	r2, [r3, #4]

	uint8_t hour_str[3] = {0};
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	2100      	movs	r1, #0
 800291c:	460a      	mov	r2, r1
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	460a      	mov	r2, r1
 8002922:	709a      	strb	r2, [r3, #2]
	uint8_t min_str[3] 	= {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2100      	movs	r1, #0
 800292a:	460a      	mov	r2, r1
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	460a      	mov	r2, r1
 8002930:	709a      	strb	r2, [r3, #2]
	uint8_t sec_str[3]	= {0};
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2100      	movs	r1, #0
 8002938:	460a      	mov	r2, r1
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	460a      	mov	r2, r1
 800293e:	709a      	strb	r2, [r3, #2]

	memcpy(hour_str, time_str+24, 2);
 8002940:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002944:	3318      	adds	r3, #24
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29a      	uxth	r2, r3
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	801a      	strh	r2, [r3, #0]
	memcpy(min_str, time_str+27, 2);
 8002950:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002954:	331b      	adds	r3, #27
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29a      	uxth	r2, r3
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	801a      	strh	r2, [r3, #0]
	memcpy(sec_str, time_str+30, 2);
 8002960:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002964:	331e      	adds	r3, #30
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29a      	uxth	r2, r3
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	801a      	strh	r2, [r3, #0]

	memcpy(day_str, time_str+21, 2);
 8002970:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002974:	3315      	adds	r3, #21
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29a      	uxth	r2, r3
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	801a      	strh	r2, [r3, #0]
	memcpy(month_str, time_str+17, 3);
 8002980:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002984:	f103 0111 	add.w	r1, r3, #17
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	2203      	movs	r2, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f005 fa0e 	bl	8007db0 <memcpy>
	memcpy(year_str, time_str+33, 4);
 8002994:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002998:	3321      	adds	r3, #33	; 0x21
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	f107 0318 	add.w	r3, r7, #24
 80029a2:	601a      	str	r2, [r3, #0]

	standard_string_time(hour_str);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe8d 	bl	80026c8 <standard_string_time>
	standard_string_time(min_str);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe88 	bl	80026c8 <standard_string_time>
	standard_string_time(sec_str);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fe83 	bl	80026c8 <standard_string_time>

	standard_string_time(day_str);
 80029c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fe7e 	bl	80026c8 <standard_string_time>
	standard_string_time(year_str);
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fe79 	bl	80026c8 <standard_string_time>

	uint8_t day_num = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	uint8_t month_num = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint16_t year_num = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	uint8_t hour_num = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	uint8_t min_num = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	uint8_t sec_num = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

	day_num = atoi((char*)day_str);
 80029fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 f9a8 	bl	8007d54 <atoi>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	month_num = month_encode(month_str);
 8002a0a:	f107 0320 	add.w	r3, r7, #32
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe82 	bl	8002718 <month_encode>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	year_num = atoi(year_str);
 8002a1a:	f107 0318 	add.w	r3, r7, #24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f005 f998 	bl	8007d54 <atoi>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	hour_num = atoi(hour_str);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f005 f990 	bl	8007d54 <atoi>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	min_num = atoi(min_str);
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f005 f988 	bl	8007d54 <atoi>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	sec_num = atoi(sec_str);
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 f980 	bl	8007d54 <atoi>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
	ESP_DEBUG("TIME: %d/%d/%d, %d:%d:%d\r\n", day_num, month_num, year_num, hour_num, min_num, sec_num);
 8002a5a:	4826      	ldr	r0, [pc, #152]	; (8002af4 <ESP32_GetTime+0x2c0>)
 8002a5c:	f006 f8ac 	bl	8008bb8 <iprintf>
 8002a60:	f897 0337 	ldrb.w	r0, [r7, #823]	; 0x337
 8002a64:	f897 4336 	ldrb.w	r4, [r7, #822]	; 0x336
 8002a68:	f8b7 5334 	ldrh.w	r5, [r7, #820]	; 0x334
 8002a6c:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002a70:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002a74:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002a78:	9102      	str	r1, [sp, #8]
 8002a7a:	9201      	str	r2, [sp, #4]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	462b      	mov	r3, r5
 8002a80:	4622      	mov	r2, r4
 8002a82:	4601      	mov	r1, r0
 8002a84:	481c      	ldr	r0, [pc, #112]	; (8002af8 <ESP32_GetTime+0x2c4>)
 8002a86:	f006 f897 	bl	8008bb8 <iprintf>

	result.year		=	year_num;
 8002a8a:	f8b7 3334 	ldrh.w	r3, [r7, #820]	; 0x334
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a94:	701a      	strb	r2, [r3, #0]
	result.month	=	month_num;
 8002a96:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002a9a:	f897 2336 	ldrb.w	r2, [r7, #822]	; 0x336
 8002a9e:	705a      	strb	r2, [r3, #1]
	result.day		= 	day_num;
 8002aa0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002aa4:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 8002aa8:	709a      	strb	r2, [r3, #2]

	result.hour		=	hour_num;
 8002aaa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002aae:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8002ab2:	70da      	strb	r2, [r3, #3]
	result.min		=	min_num;
 8002ab4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002ab8:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002abc:	711a      	strb	r2, [r3, #4]
	result.sec		=	sec_num;
 8002abe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002ac2:	f897 2331 	ldrb.w	r2, [r7, #817]	; 0x331
 8002ac6:	715a      	strb	r2, [r3, #5]
	return result;
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002ad0:	6810      	ldr	r0, [r2, #0]
 8002ad2:	6018      	str	r0, [r3, #0]
 8002ad4:	8892      	ldrh	r2, [r2, #4]
 8002ad6:	809a      	strh	r2, [r3, #4]
}
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	f507 7750 	add.w	r7, r7, #832	; 0x340
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	0800c218 	.word	0x0800c218
 8002ae8:	20007d14 	.word	0x20007d14
 8002aec:	0800bfe4 	.word	0x0800bfe4
 8002af0:	0800c22c 	.word	0x0800c22c
 8002af4:	0800bff0 	.word	0x0800bff0
 8002af8:	0800c23c 	.word	0x0800c23c

08002afc <Sensor_Init>:
#include "RL78_Sensor.h"

Sensor_status_t Sensor_Init(Sensor_t* sensor)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	uint8_t temp_buff[12] = {0};
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
	if(Sensor_Send_Command(sensor, PING_CMD)!=Sensor_OK)
 8002b10:	2155      	movs	r1, #85	; 0x55
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8f8 	bl	8002d08 <Sensor_Send_Command>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <Sensor_Init+0x26>
		return Sensor_ERROR;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e057      	b.n	8002bd2 <Sensor_Init+0xd6>
	uint8_t try_get_name = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	77fb      	strb	r3, [r7, #31]
	do
	{
		uint8_t try_connect = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	77bb      	strb	r3, [r7, #30]
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 8002b2a:	e00a      	b.n	8002b42 <Sensor_Init+0x46>
		{
			if(++try_connect>=TRY_TIME_CONNECT)
 8002b2c:	7fbb      	ldrb	r3, [r7, #30]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	77bb      	strb	r3, [r7, #30]
 8002b32:	7fbb      	ldrb	r3, [r7, #30]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d904      	bls.n	8002b42 <Sensor_Init+0x46>
			{
				sensor->isConnected = unconnected;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
				return Sensor_ERROR;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e047      	b.n	8002bd2 <Sensor_Init+0xd6>
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 8002b42:	f107 010c 	add.w	r1, r7, #12
 8002b46:	2364      	movs	r3, #100	; 0x64
 8002b48:	220c      	movs	r2, #12
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8f4 	bl	8002d38 <Sensor_Recv_Respond>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1ea      	bne.n	8002b2c <Sensor_Init+0x30>
			}
		}
		if((temp_buff[1] <= strlen(&temp_buff[2]))&&(temp_buff[1] <= 10)&&(temp_buff[1] > 0))
 8002b56:	7b7b      	ldrb	r3, [r7, #13]
 8002b58:	461c      	mov	r4, r3
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	3302      	adds	r3, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fb5d 	bl	8000220 <strlen>
 8002b66:	4603      	mov	r3, r0
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	d828      	bhi.n	8002bbe <Sensor_Init+0xc2>
 8002b6c:	7b7b      	ldrb	r3, [r7, #13]
 8002b6e:	2b0a      	cmp	r3, #10
 8002b70:	d825      	bhi.n	8002bbe <Sensor_Init+0xc2>
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <Sensor_Init+0xc2>
		{
			for(int i = 0; i < temp_buff[1]; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e00f      	b.n	8002b9e <Sensor_Init+0xa2>
			{
				sensor->name[i] = temp_buff[2+i];
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	3302      	adds	r3, #2
 8002b82:	f107 0220 	add.w	r2, r7, #32
 8002b86:	4413      	add	r3, r2
 8002b88:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	3301      	adds	r3, #1
 8002b94:	460a      	mov	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < temp_buff[1]; i++)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	dbea      	blt.n	8002b7e <Sensor_Init+0x82>
			}
			printf("[Sensor]:name: %s\r\n", sensor->name);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4619      	mov	r1, r3
 8002bae:	480b      	ldr	r0, [pc, #44]	; (8002bdc <Sensor_Init+0xe0>)
 8002bb0:	f006 f802 	bl	8008bb8 <iprintf>
			sensor->isConnected = connected;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
			return Sensor_OK;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e009      	b.n	8002bd2 <Sensor_Init+0xd6>
		}
	}while(++try_get_name < TRY_TIME_GET_NAME);
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	7ffb      	ldrb	r3, [r7, #31]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d9ad      	bls.n	8002b26 <Sensor_Init+0x2a>
	
	sensor->isConnected = unconnected;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	return Sensor_ERROR;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800c258 	.word	0x0800c258

08002be0 <Sensor_Get_Value>:

Sensor_status_t Sensor_Get_Value(Sensor_t* sensor)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if(sensor->isConnected == connected)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d13d      	bne.n	8002c6c <Sensor_Get_Value+0x8c>
	{
		if(Sensor_Send_Command(sensor, WAKEUP_CMD)!= Sensor_OK)
 8002bf0:	21c0      	movs	r1, #192	; 0xc0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f888 	bl	8002d08 <Sensor_Send_Command>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <Sensor_Get_Value+0x22>
				return Sensor_ERROR;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e035      	b.n	8002c6e <Sensor_Get_Value+0x8e>
			uint8_t temp = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
			if(Sensor_Recv_Respond(sensor,&temp, sizeof(temp), 60000)!= Sensor_OK)
 8002c06:	f107 010f 	add.w	r1, r7, #15
 8002c0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f891 	bl	8002d38 <Sensor_Recv_Respond>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <Sensor_Get_Value+0x40>
				return Sensor_ERROR;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e026      	b.n	8002c6e <Sensor_Get_Value+0x8e>

			if(Sensor_Send_Command(sensor, GETVALUE_CMD)!= Sensor_OK)
 8002c20:	21aa      	movs	r1, #170	; 0xaa
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f870 	bl	8002d08 <Sensor_Send_Command>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <Sensor_Get_Value+0x52>
				return Sensor_ERROR;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e01d      	b.n	8002c6e <Sensor_Get_Value+0x8e>
			data_raw_t data_raw = {0};
 8002c32:	f107 030c 	add.w	r3, r7, #12
 8002c36:	2100      	movs	r1, #0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	709a      	strb	r2, [r3, #2]
			if(Sensor_Recv_Respond(sensor, &data_raw, sizeof(data_raw), 100) != Sensor_OK)
 8002c40:	f107 010c 	add.w	r1, r7, #12
 8002c44:	2364      	movs	r3, #100	; 0x64
 8002c46:	2203      	movs	r2, #3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f875 	bl	8002d38 <Sensor_Recv_Respond>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <Sensor_Get_Value+0x78>
				return Sensor_ERROR;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e00a      	b.n	8002c6e <Sensor_Get_Value+0x8e>
			sensor->value = Pare_Data(data_raw);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f80d 	bl	8002c78 <Pare_Data>
 8002c5e:	eef0 7a40 	vmov.f32	s15, s0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edc3 7a03 	vstr	s15, [r3, #12]
			return Sensor_OK;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <Sensor_Get_Value+0x8e>
	}
	else
	{
		return Sensor_ERROR;
 8002c6c:	2300      	movs	r3, #0
	}
	
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <Pare_Data>:

static float Pare_Data(data_raw_t data_raw)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	float result = 0.0;
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
	uint16_t value_interger = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	817b      	strh	r3, [r7, #10]
	uint8_t value_decimal = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	727b      	strb	r3, [r7, #9]
	
	value_interger	= (data_raw.data>>4)&(0x0fff);
 8002c8e:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	817b      	strh	r3, [r7, #10]
	value_decimal	= (data_raw.data)&(0x0f);
 8002c98:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	727b      	strb	r3, [r7, #9]
	
	result = (float)value_interger + (float)value_decimal/(10.0);
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb0:	ee17 0a90 	vmov	r0, s15
 8002cb4:	f7fd fc7a 	bl	80005ac <__aeabi_f2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	7a7b      	ldrb	r3, [r7, #9]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	ee17 0a90 	vmov	r0, s15
 8002cca:	f7fd fc6f 	bl	80005ac <__aeabi_f2d>
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <Pare_Data+0x8c>)
 8002cd4:	f7fd fdec 	bl	80008b0 <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f7fd fb06 	bl	80002f0 <__adddf3>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4621      	mov	r1, r4
 8002cec:	f7fd ff8e 	bl	8000c0c <__aeabi_d2f>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]
	
	return result;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	ee07 3a90 	vmov	s15, r3
}
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdb0      	pop	{r4, r5, r7, pc}
 8002d04:	40240000 	.word	0x40240000

08002d08 <Sensor_Send_Command>:

static Sensor_status_t Sensor_Send_Command(Sensor_t* sensor, uint8_t command)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
	if(HAL_UART_Transmit(sensor->uart_itf, &command, 1, HAL_MAX_DELAY) == HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6918      	ldr	r0, [r3, #16]
 8002d18:	1cf9      	adds	r1, r7, #3
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f003 ff8b 	bl	8006c3a <HAL_UART_Transmit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <Sensor_Send_Command+0x26>
		return Sensor_OK;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <Sensor_Send_Command+0x28>
	else
		return Sensor_ERROR;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <Sensor_Recv_Respond>:

static Sensor_status_t Sensor_Recv_Respond(Sensor_t* sensor, uint8_t* buff, uint8_t buffSize, uint16_t timeOut)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	460b      	mov	r3, r1
 8002d48:	71fb      	strb	r3, [r7, #7]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef res = HAL_UART_Receive(sensor->uart_itf, buff, buffSize, timeOut);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6918      	ldr	r0, [r3, #16]
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	88bb      	ldrh	r3, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	f004 f807 	bl	8006d6c <HAL_UART_Receive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_ERROR)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <Sensor_Recv_Respond+0x34>
		return Sensor_OK;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <Sensor_Recv_Respond+0x36>
	else
		return Sensor_ERROR;
 8002d6c:	2300      	movs	r3, #0

}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <crc8>:
#ifndef SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#define SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#include "SHTC3_Driver.h"

static uint8_t crc8(uint8_t *data, uint8_t len)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xff;
 8002d82:	23ff      	movs	r3, #255	; 0xff
 8002d84:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0, j = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73bb      	strb	r3, [r7, #14]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < len; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73bb      	strb	r3, [r7, #14]
 8002d92:	e021      	b.n	8002dd8 <crc8+0x62>
        crc ^= data[i];
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	4053      	eors	r3, r2
 8002da0:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002da2:	2300      	movs	r3, #0
 8002da4:	737b      	strb	r3, [r7, #13]
 8002da6:	e011      	b.n	8002dcc <crc8+0x56>
            if ((crc & 0x80) != 0)
 8002da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da07      	bge.n	8002dc0 <crc8+0x4a>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e002      	b.n	8002dc6 <crc8+0x50>
            else
                crc <<= 1;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002dc6:	7b7b      	ldrb	r3, [r7, #13]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	737b      	strb	r3, [r7, #13]
 8002dcc:	7b7b      	ldrb	r3, [r7, #13]
 8002dce:	2b07      	cmp	r3, #7
 8002dd0:	d9ea      	bls.n	8002da8 <crc8+0x32>
    for (i = 0; i < len; i++) {
 8002dd2:	7bbb      	ldrb	r3, [r7, #14]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	73bb      	strb	r3, [r7, #14]
 8002dd8:	7bba      	ldrb	r2, [r7, #14]
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3d9      	bcc.n	8002d94 <crc8+0x1e>
        }
    }
    return crc;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <SHTC3_Init>:

SHTC3_Status_t SHTC3_Init(SHTC3_Sensor_t *sensor)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 4, 1000) == HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfe:	2204      	movs	r2, #4
 8002e00:	218a      	movs	r1, #138	; 0x8a
 8002e02:	f001 fca5 	bl	8004750 <HAL_I2C_IsDeviceReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <SHTC3_Init+0x28>
	{
		sensor->connection=shtc3_connected;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	711a      	strb	r2, [r3, #4]
		return SHTC3_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e003      	b.n	8002e1e <SHTC3_Init+0x30>
	}
	else
	{
		sensor->connection=shtc3_disconnected;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	711a      	strb	r2, [r3, #4]
		return SHTC3_ERROR;
 8002e1c:	2301      	movs	r3, #1
	}
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <SHTC3_Measurement>:
	sensor->data.tem = ((float)(Rt*175))/(65535.0) - 45.0;
	return SHTC3_OK;
}
#else
SHTC3_Status_t SHTC3_Measurement(SHTC3_Sensor_t *sensor)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
	uint8_t measure_cmd[2] = {0x24, 0x0b};
 8002e30:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <SHTC3_Measurement+0x148>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	823b      	strh	r3, [r7, #16]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, measure_cmd, sizeof(measure_cmd), 5000)!=HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	f107 0210 	add.w	r2, r7, #16
 8002e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2302      	movs	r3, #2
 8002e46:	218a      	movs	r1, #138	; 0x8a
 8002e48:	f001 f95e 	bl	8004108 <HAL_I2C_Master_Transmit>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <SHTC3_Measurement+0x2e>
			return SHTC3_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e081      	b.n	8002f5a <SHTC3_Measurement+0x132>
	while(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 1, 1000) != HAL_OK);
 8002e56:	bf00      	nop
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e60:	2201      	movs	r2, #1
 8002e62:	218a      	movs	r1, #138	; 0x8a
 8002e64:	f001 fc74 	bl	8004750 <HAL_I2C_IsDeviceReady>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f4      	bne.n	8002e58 <SHTC3_Measurement+0x30>
	uint8_t data_raw[6] = {0};
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	809a      	strh	r2, [r3, #4]
	if(HAL_I2C_Master_Receive(sensor->interface, SHTC3_ADDR, data_raw, sizeof(data_raw), 5000)!=HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2306      	movs	r3, #6
 8002e88:	218a      	movs	r1, #138	; 0x8a
 8002e8a:	f001 fa3b 	bl	8004304 <HAL_I2C_Master_Receive>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <SHTC3_Measurement+0x70>
			return SHTC3_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e060      	b.n	8002f5a <SHTC3_Measurement+0x132>
	if(crc8(&data_raw[0], 2)!=data_raw[2])
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff69 	bl	8002d76 <crc8>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	7abb      	ldrb	r3, [r7, #10]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <SHTC3_Measurement+0x8a>
		return SHTC3_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e053      	b.n	8002f5a <SHTC3_Measurement+0x132>
	if(crc8(&data_raw[3], 2)!=data_raw[5])
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	2102      	movs	r1, #2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff5b 	bl	8002d76 <crc8>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	7b7b      	ldrb	r3, [r7, #13]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <SHTC3_Measurement+0xa6>
		return SHTC3_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e045      	b.n	8002f5a <SHTC3_Measurement+0x132>
	uint16_t Rt = (data_raw[0]<<8) | (data_raw[1]);
 8002ece:	7a3b      	ldrb	r3, [r7, #8]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	7a7b      	ldrb	r3, [r7, #9]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	82fb      	strh	r3, [r7, #22]
	uint16_t Rh = (data_raw[3]<<8) | (data_raw[4]);
 8002ede:	7afb      	ldrb	r3, [r7, #11]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	7b3b      	ldrb	r3, [r7, #12]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	82bb      	strh	r3, [r7, #20]

	sensor->data.hum = ((float)(Rh*100))/(65535.0 - 1);
 8002eee:	8abb      	ldrh	r3, [r7, #20]
 8002ef0:	2264      	movs	r2, #100	; 0x64
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f74 <SHTC3_Measurement+0x14c>
 8002f02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3309      	adds	r3, #9
 8002f0a:	ee16 2a90 	vmov	r2, s13
 8002f0e:	601a      	str	r2, [r3, #0]
	sensor->data.tem = ((float)(Rt*175))/(65535.0 - 1) - 45.0;	//resultin Co
 8002f10:	8afb      	ldrh	r3, [r7, #22]
 8002f12:	22af      	movs	r2, #175	; 0xaf
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f20:	ee17 0a90 	vmov	r0, s15
 8002f24:	f7fd fb42 	bl	80005ac <__aeabi_f2d>
 8002f28:	a30f      	add	r3, pc, #60	; (adr r3, 8002f68 <SHTC3_Measurement+0x140>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd fcbf 	bl	80008b0 <__aeabi_ddiv>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	4618      	mov	r0, r3
 8002f38:	4621      	mov	r1, r4
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <SHTC3_Measurement+0x150>)
 8002f40:	f7fd f9d4 	bl	80002ec <__aeabi_dsub>
 8002f44:	4603      	mov	r3, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	f7fd fe5e 	bl	8000c0c <__aeabi_d2f>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3305      	adds	r3, #5
 8002f56:	601a      	str	r2, [r3, #0]
	return SHTC3_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	f3af 8000 	nop.w
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40efffc0 	.word	0x40efffc0
 8002f70:	0800c26c 	.word	0x0800c26c
 8002f74:	477ffe00 	.word	0x477ffe00
 8002f78:	40468000 	.word	0x40468000

08002f7c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <RetargetInit+0x28>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <RetargetInit+0x2c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6898      	ldr	r0, [r3, #8]
 8002f90:	2300      	movs	r3, #0
 8002f92:	2202      	movs	r2, #2
 8002f94:	2100      	movs	r1, #0
 8002f96:	f005 fe8b 	bl	8008cb0 <setvbuf>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000801c 	.word	0x2000801c
 8002fa8:	2000000c 	.word	0x2000000c

08002fac <_isatty>:

int _isatty(int fd) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db04      	blt.n	8002fc4 <_isatty+0x18>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	dc01      	bgt.n	8002fc4 <_isatty+0x18>
    return 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e005      	b.n	8002fd0 <_isatty+0x24>

  errno = EBADF;
 8002fc4:	f004 feca 	bl	8007d5c <__errno>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	2309      	movs	r3, #9
 8002fcc:	6013      	str	r3, [r2, #0]
  return 0;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_write>:

int _write(int fd, char* ptr, int len) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d002      	beq.n	8002ff0 <_write+0x18>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d111      	bne.n	8003014 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <_write+0x54>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	f003 fe1c 	bl	8006c3a <HAL_UART_Transmit>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <_write+0x38>
      return len;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e008      	b.n	8003022 <_write+0x4a>
    else
      return EIO;
 8003010:	2305      	movs	r3, #5
 8003012:	e006      	b.n	8003022 <_write+0x4a>
  }
  errno = EBADF;
 8003014:	f004 fea2 	bl	8007d5c <__errno>
 8003018:	4602      	mov	r2, r0
 800301a:	2309      	movs	r3, #9
 800301c:	6013      	str	r3, [r2, #0]
  return -1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000801c 	.word	0x2000801c

08003030 <_close>:

int _close(int fd) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db04      	blt.n	8003048 <_close+0x18>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	dc01      	bgt.n	8003048 <_close+0x18>
    return 0;
 8003044:	2300      	movs	r3, #0
 8003046:	e006      	b.n	8003056 <_close+0x26>

  errno = EBADF;
 8003048:	f004 fe88 	bl	8007d5c <__errno>
 800304c:	4602      	mov	r2, r0
 800304e:	2309      	movs	r3, #9
 8003050:	6013      	str	r3, [r2, #0]
  return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800306a:	f004 fe77 	bl	8007d5c <__errno>
 800306e:	4602      	mov	r2, r0
 8003070:	2309      	movs	r3, #9
 8003072:	6013      	str	r3, [r2, #0]
  return -1;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_read>:

int _read(int fd, char* ptr, int len) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d110      	bne.n	80030b4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <_read+0x4c>)
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	2201      	movs	r2, #1
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	f003 fe65 	bl	8006d6c <HAL_UART_Receive>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <_read+0x30>
      return 1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e008      	b.n	80030c2 <_read+0x42>
    else
      return EIO;
 80030b0:	2305      	movs	r3, #5
 80030b2:	e006      	b.n	80030c2 <_read+0x42>
  }
  errno = EBADF;
 80030b4:	f004 fe52 	bl	8007d5c <__errno>
 80030b8:	4602      	mov	r2, r0
 80030ba:	2309      	movs	r3, #9
 80030bc:	6013      	str	r3, [r2, #0]
  return -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000801c 	.word	0x2000801c

080030d0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db08      	blt.n	80030f2 <_fstat+0x22>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	dc05      	bgt.n	80030f2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ec:	605a      	str	r2, [r3, #4]
    return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e005      	b.n	80030fe <_fstat+0x2e>
  }

  errno = EBADF;
 80030f2:	f004 fe33 	bl	8007d5c <__errno>
 80030f6:	4602      	mov	r2, r0
 80030f8:	2309      	movs	r3, #9
 80030fa:	6013      	str	r3, [r2, #0]
  return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_Init+0x40>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_Init+0x40>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x40>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 f94d 	bl	80033d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	2000      	movs	r0, #0
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7fe fdfe 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f965 	bl	800343a <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 f92d 	bl	80033e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000008 	.word	0x20000008
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x20>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_IncTick+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_IncTick+0x24>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008
 80031d0:	20008020 	.word	0x20008020

080031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return uwTick;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_GetTick+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20008020 	.word	0x20008020

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff ffee 	bl	80031d4 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d005      	beq.n	8003212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_Delay+0x40>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003212:	bf00      	nop
 8003214:	f7ff ffde 	bl	80031d4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8f7      	bhi.n	8003214 <HAL_Delay+0x28>
  {
  }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000008 	.word	0x20000008

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800339c:	d301      	bcc.n	80033a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <SysTick_Config+0x40>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033aa:	210f      	movs	r1, #15
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f7ff ff8e 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <SysTick_Config+0x40>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <SysTick_Config+0x40>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff29 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff3e 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ff8e 	bl	8003324 <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff31 	bl	8003294 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffa2 	bl	800338c <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff feb8 	bl	80031d4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e099      	b.n	80035a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003490:	e00f      	b.n	80034b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003492:	f7ff fe9f 	bl	80031d4 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b05      	cmp	r3, #5
 800349e:	d908      	bls.n	80034b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e078      	b.n	80035a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e8      	bne.n	8003492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_DMA_Init+0x158>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4313      	orrs	r3, r2
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b04      	cmp	r3, #4
 8003544:	d117      	bne.n	8003576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa91 	bl	8003a80 <DMA_CheckFifoParam>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003572:	2301      	movs	r3, #1
 8003574:	e016      	b.n	80035a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa48 	bl	8003a14 <DMA_CalcBaseAndBitshift>
 8003584:	4603      	mov	r3, r0
 8003586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	223f      	movs	r2, #63	; 0x3f
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	e010803f 	.word	0xe010803f

080035b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_DMA_Start_IT+0x26>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e040      	b.n	8003658 <HAL_DMA_Start_IT+0xa8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d12f      	bne.n	800364a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f9da 	bl	80039b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	223f      	movs	r2, #63	; 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0216 	orr.w	r2, r2, #22
 800361e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0208 	orr.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e005      	b.n	8003656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d004      	beq.n	800367e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e00c      	b.n	8003698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2205      	movs	r2, #5
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b0:	4b92      	ldr	r3, [pc, #584]	; (80038fc <HAL_DMA_IRQHandler+0x258>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a92      	ldr	r2, [pc, #584]	; (8003900 <HAL_DMA_IRQHandler+0x25c>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2208      	movs	r2, #8
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	2208      	movs	r2, #8
 80036fe:	409a      	lsls	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	2201      	movs	r2, #1
 8003734:	409a      	lsls	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2204      	movs	r2, #4
 800374c:	409a      	lsls	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2204      	movs	r2, #4
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2210      	movs	r2, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d043      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03c      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	2210      	movs	r2, #16
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d024      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	e01f      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e016      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0208 	bic.w	r2, r2, #8
 8003802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	2220      	movs	r2, #32
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 808e 	beq.w	8003942 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8086 	beq.w	8003942 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	2220      	movs	r2, #32
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b05      	cmp	r3, #5
 800384c:	d136      	bne.n	80038bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0216 	bic.w	r2, r2, #22
 800385c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_DMA_IRQHandler+0x1da>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0208 	bic.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	223f      	movs	r2, #63	; 0x3f
 8003894:	409a      	lsls	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07d      	beq.n	80039ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
        }
        return;
 80038ba:	e078      	b.n	80039ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d030      	beq.n	8003942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e02b      	b.n	8003942 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
 80038fa:	e022      	b.n	8003942 <HAL_DMA_IRQHandler+0x29e>
 80038fc:	20000000 	.word	0x20000000
 8003900:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0210 	bic.w	r2, r2, #16
 8003920:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d022      	beq.n	800399c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2205      	movs	r2, #5
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3301      	adds	r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	429a      	cmp	r2, r3
 8003978:	d307      	bcc.n	800398a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f2      	bne.n	800396e <HAL_DMA_IRQHandler+0x2ca>
 8003988:	e000      	b.n	800398c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800398a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80039ae:	bf00      	nop
    }
  }
}
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop

080039b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d108      	bne.n	80039f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039f6:	e007      	b.n	8003a08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3b10      	subs	r3, #16
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <DMA_CalcBaseAndBitshift+0x64>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <DMA_CalcBaseAndBitshift+0x68>)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d909      	bls.n	8003a56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	659a      	str	r2, [r3, #88]	; 0x58
 8003a54:	e007      	b.n	8003a66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	aaaaaaab 	.word	0xaaaaaaab
 8003a7c:	0800c294 	.word	0x0800c294

08003a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11f      	bne.n	8003ada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d855      	bhi.n	8003b4c <DMA_CheckFifoParam+0xcc>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <DMA_CheckFifoParam+0x28>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003acb 	.word	0x08003acb
 8003ab0:	08003ab9 	.word	0x08003ab9
 8003ab4:	08003b4d 	.word	0x08003b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d045      	beq.n	8003b50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e042      	b.n	8003b50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ad2:	d13f      	bne.n	8003b54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad8:	e03c      	b.n	8003b54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d121      	bne.n	8003b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d836      	bhi.n	8003b58 <DMA_CheckFifoParam+0xd8>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <DMA_CheckFifoParam+0x70>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b07 	.word	0x08003b07
 8003af8:	08003b01 	.word	0x08003b01
 8003afc:	08003b19 	.word	0x08003b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e02f      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d024      	beq.n	8003b5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b16:	e021      	b.n	8003b5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b20:	d11e      	bne.n	8003b60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b26:	e01b      	b.n	8003b60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <DMA_CheckFifoParam+0xb4>
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d003      	beq.n	8003b3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b32:	e018      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e015      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4a:	e00b      	b.n	8003b64 <DMA_CheckFifoParam+0xe4>
      break;
 8003b4c:	bf00      	nop
 8003b4e:	e00a      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;
 8003b50:	bf00      	nop
 8003b52:	e008      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;
 8003b54:	bf00      	nop
 8003b56:	e006      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;
 8003b58:	bf00      	nop
 8003b5a:	e004      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;   
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <DMA_CheckFifoParam+0xe6>
      break;
 8003b64:	bf00      	nop
    }
  } 
  
  return status; 
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e165      	b.n	8003e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b90:	2201      	movs	r2, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 8154 	bne.w	8003e56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d00b      	beq.n	8003bce <HAL_GPIO_Init+0x5a>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bc2:	2b11      	cmp	r3, #17
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	d130      	bne.n	8003c30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c04:	2201      	movs	r2, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 0201 	and.w	r2, r3, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0xfc>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b12      	cmp	r3, #18
 8003c6e:	d123      	bne.n	8003cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	08da      	lsrs	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3208      	adds	r2, #8
 8003c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80ae 	beq.w	8003e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <HAL_GPIO_Init+0x2fc>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	4a5b      	ldr	r2, [pc, #364]	; (8003e70 <HAL_GPIO_Init+0x2fc>)
 8003d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d08:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0a:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_GPIO_Init+0x2fc>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d16:	4a57      	ldr	r2, [pc, #348]	; (8003e74 <HAL_GPIO_Init+0x300>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4e      	ldr	r2, [pc, #312]	; (8003e78 <HAL_GPIO_Init+0x304>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d025      	beq.n	8003d8e <HAL_GPIO_Init+0x21a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <HAL_GPIO_Init+0x308>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <HAL_GPIO_Init+0x216>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a4c      	ldr	r2, [pc, #304]	; (8003e80 <HAL_GPIO_Init+0x30c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d019      	beq.n	8003d86 <HAL_GPIO_Init+0x212>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4b      	ldr	r2, [pc, #300]	; (8003e84 <HAL_GPIO_Init+0x310>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_GPIO_Init+0x20e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4a      	ldr	r2, [pc, #296]	; (8003e88 <HAL_GPIO_Init+0x314>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00d      	beq.n	8003d7e <HAL_GPIO_Init+0x20a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a49      	ldr	r2, [pc, #292]	; (8003e8c <HAL_GPIO_Init+0x318>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <HAL_GPIO_Init+0x206>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_GPIO_Init+0x31c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_GPIO_Init+0x202>
 8003d72:	2306      	movs	r3, #6
 8003d74:	e00c      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d76:	2307      	movs	r3, #7
 8003d78:	e00a      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e008      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e004      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x21c>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f002 0203 	and.w	r2, r2, #3
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da0:	4934      	ldr	r1, [pc, #208]	; (8003e74 <HAL_GPIO_Init+0x300>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	3302      	adds	r3, #2
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd2:	4a30      	ldr	r2, [pc, #192]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfc:	4a25      	ldr	r2, [pc, #148]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e50:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <HAL_GPIO_Init+0x320>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	f67f ae96 	bls.w	8003b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	3724      	adds	r7, #36	; 0x24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40020000 	.word	0x40020000
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020c00 	.word	0x40020c00
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40021400 	.word	0x40021400
 8003e90:	40021800 	.word	0x40021800
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e11f      	b.n	80040ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd ff64 	bl	8001d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2224      	movs	r2, #36	; 0x24
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003efc:	f001 fa28 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8003f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a7b      	ldr	r2, [pc, #492]	; (80040f4 <HAL_I2C_Init+0x25c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d807      	bhi.n	8003f1c <HAL_I2C_Init+0x84>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_I2C_Init+0x260>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e006      	b.n	8003f2a <HAL_I2C_Init+0x92>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a77      	ldr	r2, [pc, #476]	; (80040fc <HAL_I2C_Init+0x264>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0db      	b.n	80040ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a72      	ldr	r2, [pc, #456]	; (8004100 <HAL_I2C_Init+0x268>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0c9b      	lsrs	r3, r3, #18
 8003f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a64      	ldr	r2, [pc, #400]	; (80040f4 <HAL_I2C_Init+0x25c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d802      	bhi.n	8003f6c <HAL_I2C_Init+0xd4>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	e009      	b.n	8003f80 <HAL_I2C_Init+0xe8>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	4a63      	ldr	r2, [pc, #396]	; (8004104 <HAL_I2C_Init+0x26c>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	3301      	adds	r3, #1
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4956      	ldr	r1, [pc, #344]	; (80040f4 <HAL_I2C_Init+0x25c>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d80d      	bhi.n	8003fbc <HAL_I2C_Init+0x124>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e59      	subs	r1, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	bf38      	it	cc
 8003fb8:	2304      	movcc	r3, #4
 8003fba:	e04f      	b.n	800405c <HAL_I2C_Init+0x1c4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d111      	bne.n	8003fe8 <HAL_I2C_Init+0x150>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1e58      	subs	r0, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	440b      	add	r3, r1
 8003fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e012      	b.n	800400e <HAL_I2C_Init+0x176>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1e58      	subs	r0, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	0099      	lsls	r1, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Init+0x17e>
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <HAL_I2C_Init+0x1c4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10e      	bne.n	800403c <HAL_I2C_Init+0x1a4>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1e58      	subs	r0, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	440b      	add	r3, r1
 800402c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403a:	e00f      	b.n	800405c <HAL_I2C_Init+0x1c4>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e58      	subs	r0, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	0099      	lsls	r1, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	6809      	ldr	r1, [r1, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800408a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6911      	ldr	r1, [r2, #16]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	430b      	orrs	r3, r1
 800409e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	000186a0 	.word	0x000186a0
 80040f8:	001e847f 	.word	0x001e847f
 80040fc:	003d08ff 	.word	0x003d08ff
 8004100:	431bde83 	.word	0x431bde83
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7ff f85a 	bl	80031d4 <HAL_GetTick>
 8004120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	f040 80e0 	bne.w	80042f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2319      	movs	r3, #25
 8004136:	2201      	movs	r2, #1
 8004138:	4970      	ldr	r1, [pc, #448]	; (80042fc <HAL_I2C_Master_Transmit+0x1f4>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fd86 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
 8004148:	e0d3      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x50>
 8004154:	2302      	movs	r3, #2
 8004156:	e0cc      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d007      	beq.n	800417e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	; 0x21
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2210      	movs	r2, #16
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	893a      	ldrh	r2, [r7, #8]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4a50      	ldr	r2, [pc, #320]	; (8004300 <HAL_I2C_Master_Transmit+0x1f8>)
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fbf0 	bl	80049ac <I2C_MasterRequestWrite>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e08d      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041ec:	e066      	b.n	80042bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fe00 	bl	8004df8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06b      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <HAL_I2C_Master_Transmit+0x188>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d017      	beq.n	8004290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fdf0 	bl	8004e7a <I2C_WaitOnBTFFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e01a      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d194      	bne.n	80041ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	00100002 	.word	0x00100002
 8004300:	ffff0000 	.word	0xffff0000

08004304 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	460b      	mov	r3, r1
 8004312:	817b      	strh	r3, [r7, #10]
 8004314:	4613      	mov	r3, r2
 8004316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fe ff5c 	bl	80031d4 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 820b 	bne.w	8004742 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2319      	movs	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	497c      	ldr	r1, [pc, #496]	; (8004528 <HAL_I2C_Master_Receive+0x224>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fc88 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	e1fe      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2C_Master_Receive+0x50>
 8004350:	2302      	movs	r3, #2
 8004352:	e1f7      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d007      	beq.n	800437a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2222      	movs	r2, #34	; 0x22
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2210      	movs	r2, #16
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a5c      	ldr	r2, [pc, #368]	; (800452c <HAL_I2C_Master_Receive+0x228>)
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fb74 	bl	8004ab0 <I2C_MasterRequestRead>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1b8      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e18c      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b01      	cmp	r3, #1
 8004408:	d11b      	bne.n	8004442 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e16c      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b02      	cmp	r3, #2
 8004448:	d11b      	bne.n	8004482 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004468:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	e14c      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044a8:	e138      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	f200 80f1 	bhi.w	8004696 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d123      	bne.n	8004504 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fd1b 	bl	8004efc <I2C_WaitOnRXNEFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e139      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004502:	e10b      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	2b02      	cmp	r3, #2
 800450a:	d14e      	bne.n	80045aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2200      	movs	r2, #0
 8004514:	4906      	ldr	r1, [pc, #24]	; (8004530 <HAL_I2C_Master_Receive+0x22c>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fb98 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e10e      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
 8004526:	bf00      	nop
 8004528:	00100002 	.word	0x00100002
 800452c:	ffff0000 	.word	0xffff0000
 8004530:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a8:	e0b8      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	4966      	ldr	r1, [pc, #408]	; (800474c <HAL_I2C_Master_Receive+0x448>)
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fb49 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0bf      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2200      	movs	r2, #0
 800460e:	494f      	ldr	r1, [pc, #316]	; (800474c <HAL_I2C_Master_Receive+0x448>)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb1b 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e091      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004694:	e042      	b.n	800471c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fc2e 	bl	8004efc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e04c      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d118      	bne.n	800471c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f aec2 	bne.w	80044aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	00010004 	.word	0x00010004

08004750 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	460b      	mov	r3, r1
 800475e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7fe fd38 	bl	80031d4 <HAL_GetTick>
 8004764:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004766:	2301      	movs	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	f040 8111 	bne.w	800499a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2319      	movs	r3, #25
 800477e:	2201      	movs	r2, #1
 8004780:	4988      	ldr	r1, [pc, #544]	; (80049a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa62 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	e104      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_I2C_IsDeviceReady+0x50>
 800479c:	2302      	movs	r3, #2
 800479e:	e0fd      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d007      	beq.n	80047c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2224      	movs	r2, #36	; 0x24
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a70      	ldr	r2, [pc, #448]	; (80049a8 <HAL_I2C_IsDeviceReady+0x258>)
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa20 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d103      	bne.n	800482a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0b6      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800483c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800483e:	f7fe fcc9 	bl	80031d4 <HAL_GetTick>
 8004842:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004872:	e025      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004874:	f7fe fcae 	bl	80031d4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d302      	bcc.n	800488a <HAL_I2C_IsDeviceReady+0x13a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	22a0      	movs	r2, #160	; 0xa0
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2ba0      	cmp	r3, #160	; 0xa0
 80048ca:	d005      	beq.n	80048d8 <HAL_I2C_IsDeviceReady+0x188>
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_I2C_IsDeviceReady+0x188>
 80048d2:	7dbb      	ldrb	r3, [r7, #22]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0cd      	beq.n	8004874 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d129      	bne.n	8004942 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2319      	movs	r3, #25
 800491a:	2201      	movs	r2, #1
 800491c:	4921      	ldr	r1, [pc, #132]	; (80049a4 <HAL_I2C_IsDeviceReady+0x254>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f994 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e036      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e02c      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004950:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800495a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2319      	movs	r3, #25
 8004962:	2201      	movs	r2, #1
 8004964:	490f      	ldr	r1, [pc, #60]	; (80049a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f970 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e012      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3301      	adds	r3, #1
 800497a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	f4ff af32 	bcc.w	80047ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000

080049ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	460b      	mov	r3, r1
 80049ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d006      	beq.n	80049d6 <I2C_MasterRequestWrite+0x2a>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d003      	beq.n	80049d6 <I2C_MasterRequestWrite+0x2a>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d4:	d108      	bne.n	80049e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e00b      	b.n	8004a00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b12      	cmp	r3, #18
 80049ee:	d107      	bne.n	8004a00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f91d 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d103      	bne.n	8004a30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e035      	b.n	8004aa0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3c:	d108      	bne.n	8004a50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]
 8004a4e:	e01b      	b.n	8004a88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a50:	897b      	ldrh	r3, [r7, #10]
 8004a52:	11db      	asrs	r3, r3, #7
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 0306 	and.w	r3, r3, #6
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f063 030f 	orn	r3, r3, #15
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	490e      	ldr	r1, [pc, #56]	; (8004aa8 <I2C_MasterRequestWrite+0xfc>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f943 	bl	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e010      	b.n	8004aa0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4907      	ldr	r1, [pc, #28]	; (8004aac <I2C_MasterRequestWrite+0x100>)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f933 	bl	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	00010008 	.word	0x00010008
 8004aac:	00010002 	.word	0x00010002

08004ab0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	460b      	mov	r3, r1
 8004abe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d006      	beq.n	8004aea <I2C_MasterRequestRead+0x3a>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d003      	beq.n	8004aea <I2C_MasterRequestRead+0x3a>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae8:	d108      	bne.n	8004afc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e00b      	b.n	8004b14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	2b11      	cmp	r3, #17
 8004b02:	d107      	bne.n	8004b14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f893 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d103      	bne.n	8004b44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e079      	b.n	8004c3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b50:	d108      	bne.n	8004b64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	611a      	str	r2, [r3, #16]
 8004b62:	e05f      	b.n	8004c24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	11db      	asrs	r3, r3, #7
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f063 030f 	orn	r3, r3, #15
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4930      	ldr	r1, [pc, #192]	; (8004c44 <I2C_MasterRequestRead+0x194>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f8b9 	bl	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e054      	b.n	8004c3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4929      	ldr	r1, [pc, #164]	; (8004c48 <I2C_MasterRequestRead+0x198>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f8a9 	bl	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e044      	b.n	8004c3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f831 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d103      	bne.n	8004c08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e017      	b.n	8004c3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	11db      	asrs	r3, r3, #7
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 0306 	and.w	r3, r3, #6
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f063 030e 	orn	r3, r3, #14
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4907      	ldr	r1, [pc, #28]	; (8004c48 <I2C_MasterRequestRead+0x198>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f865 	bl	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	00010008 	.word	0x00010008
 8004c48:	00010002 	.word	0x00010002

08004c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c5c:	e025      	b.n	8004caa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d021      	beq.n	8004caa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7fe fab5 	bl	80031d4 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d116      	bne.n	8004caa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e023      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d10d      	bne.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	e00c      	b.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0b6      	beq.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d08:	e051      	b.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d18:	d123      	bne.n	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f043 0204 	orr.w	r2, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e046      	b.n	8004df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d021      	beq.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fa33 	bl	80031d4 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e020      	b.n	8004df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10c      	bne.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf14      	ite	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	2300      	moveq	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e00b      	b.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	43da      	mvns	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d18d      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e04:	e02d      	b.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f8ce 	bl	8004fa8 <I2C_IsAcknowledgeFailed>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e02d      	b.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d021      	beq.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1e:	f7fe f9d9 	bl	80031d4 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d116      	bne.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e007      	b.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b80      	cmp	r3, #128	; 0x80
 8004e6e:	d1ca      	bne.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e86:	e02d      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f88d 	bl	8004fa8 <I2C_IsAcknowledgeFailed>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e02d      	b.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d021      	beq.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea0:	f7fe f998 	bl	80031d4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d302      	bcc.n	8004eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d116      	bne.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e007      	b.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d1ca      	bne.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f08:	e042      	b.n	8004f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d119      	bne.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e029      	b.n	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4c:	f7fe f942 	bl	80031d4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d116      	bne.n	8004f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e007      	b.n	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d1b5      	bne.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d11b      	bne.n	8004ff8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cc      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b68      	ldr	r3, [pc, #416]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d90c      	bls.n	8005044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b65      	ldr	r3, [pc, #404]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0b8      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800505c:	4b59      	ldr	r3, [pc, #356]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a58      	ldr	r2, [pc, #352]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005074:	4b53      	ldr	r3, [pc, #332]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a52      	ldr	r2, [pc, #328]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800507e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	494d      	ldr	r1, [pc, #308]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d044      	beq.n	8005128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e067      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4934      	ldr	r1, [pc, #208]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f8:	f7fe f86c 	bl	80031d4 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fe f868 	bl	80031d4 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d20c      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e032      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4916      	ldr	r1, [pc, #88]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490e      	ldr	r1, [pc, #56]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f821 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005192:	4601      	mov	r1, r0
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	fa21 f303 	lsr.w	r3, r1, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd ffcc 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023c00 	.word	0x40023c00
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800c27c 	.word	0x0800c27c
 80051cc:	20000000 	.word	0x20000000
 80051d0:	20000004 	.word	0x20000004

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ea:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d007      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x32>
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d008      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x38>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 808d 	bne.w	800531a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005202:	60bb      	str	r3, [r7, #8]
       break;
 8005204:	e08c      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005206:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <HAL_RCC_GetSysClockFreq+0x160>)
 8005208:	60bb      	str	r3, [r7, #8]
      break;
 800520a:	e089      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800520c:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005216:	4b45      	ldr	r3, [pc, #276]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d023      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005222:	4b42      	ldr	r3, [pc, #264]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	ea03 0501 	and.w	r5, r3, r1
 8005238:	ea04 0602 	and.w	r6, r4, r2
 800523c:	4a3d      	ldr	r2, [pc, #244]	; (8005334 <HAL_RCC_GetSysClockFreq+0x160>)
 800523e:	fb02 f106 	mul.w	r1, r2, r6
 8005242:	2200      	movs	r2, #0
 8005244:	fb02 f205 	mul.w	r2, r2, r5
 8005248:	440a      	add	r2, r1
 800524a:	493a      	ldr	r1, [pc, #232]	; (8005334 <HAL_RCC_GetSysClockFreq+0x160>)
 800524c:	fba5 0101 	umull	r0, r1, r5, r1
 8005250:	1853      	adds	r3, r2, r1
 8005252:	4619      	mov	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	461a      	mov	r2, r3
 800525c:	4623      	mov	r3, r4
 800525e:	f7fb fd25 	bl	8000cac <__aeabi_uldivmod>
 8005262:	4603      	mov	r3, r0
 8005264:	460c      	mov	r4, r1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e049      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	ea03 0501 	and.w	r5, r3, r1
 8005280:	ea04 0602 	and.w	r6, r4, r2
 8005284:	4629      	mov	r1, r5
 8005286:	4632      	mov	r2, r6
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	f04f 0400 	mov.w	r4, #0
 8005290:	0154      	lsls	r4, r2, #5
 8005292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005296:	014b      	lsls	r3, r1, #5
 8005298:	4619      	mov	r1, r3
 800529a:	4622      	mov	r2, r4
 800529c:	1b49      	subs	r1, r1, r5
 800529e:	eb62 0206 	sbc.w	r2, r2, r6
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	0194      	lsls	r4, r2, #6
 80052ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052b0:	018b      	lsls	r3, r1, #6
 80052b2:	1a5b      	subs	r3, r3, r1
 80052b4:	eb64 0402 	sbc.w	r4, r4, r2
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	00e2      	lsls	r2, r4, #3
 80052c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052c6:	00d9      	lsls	r1, r3, #3
 80052c8:	460b      	mov	r3, r1
 80052ca:	4614      	mov	r4, r2
 80052cc:	195b      	adds	r3, r3, r5
 80052ce:	eb44 0406 	adc.w	r4, r4, r6
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	02a2      	lsls	r2, r4, #10
 80052dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052e0:	0299      	lsls	r1, r3, #10
 80052e2:	460b      	mov	r3, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	4621      	mov	r1, r4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	f7fb fcda 	bl	8000cac <__aeabi_uldivmod>
 80052f8:	4603      	mov	r3, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_GetSysClockFreq+0x158>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	3301      	adds	r3, #1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	60bb      	str	r3, [r7, #8]
      break;
 8005318:	e002      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetSysClockFreq+0x15c>)
 800531c:	60bb      	str	r3, [r7, #8]
      break;
 800531e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005320:	68bb      	ldr	r3, [r7, #8]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400
 8005334:	017d7840 	.word	0x017d7840

08005338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000000 	.word	0x20000000

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4601      	mov	r1, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a9b      	lsrs	r3, r3, #10
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4a03      	ldr	r2, [pc, #12]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	0800c28c 	.word	0x0800c28c

08005378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800537c:	f7ff ffdc 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005380:	4601      	mov	r1, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0b5b      	lsrs	r3, r3, #13
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4a03      	ldr	r2, [pc, #12]	; (800539c <HAL_RCC_GetPCLK2Freq+0x24>)
 800538e:	5cd3      	ldrb	r3, [r2, r3]
 8005390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	0800c28c 	.word	0x0800c28c

080053a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80053c4:	4b7a      	ldr	r3, [pc, #488]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80053c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4977      	ldr	r1, [pc, #476]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80053e2:	2301      	movs	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80053f2:	4b6f      	ldr	r3, [pc, #444]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80053f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	496b      	ldr	r1, [pc, #428]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005410:	2301      	movs	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d022      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005420:	4b63      	ldr	r3, [pc, #396]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	4960      	ldr	r1, [pc, #384]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800543e:	2301      	movs	r3, #1
 8005440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544a:	d10c      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800544c:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800544e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005452:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	3b01      	subs	r3, #1
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	4954      	ldr	r1, [pc, #336]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d022      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005472:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005480:	494b      	ldr	r1, [pc, #300]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005490:	2301      	movs	r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549c:	d10c      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800549e:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	493f      	ldr	r1, [pc, #252]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 808a 	beq.w	80055da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	4a38      	ldr	r2, [pc, #224]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	; 0x40
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054e2:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a33      	ldr	r2, [pc, #204]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80054e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ee:	f7fd fe71 	bl	80031d4 <HAL_GetTick>
 80054f2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054f6:	f7fd fe6d 	bl	80031d4 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1d1      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005508:	4b2a      	ldr	r3, [pc, #168]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	429a      	cmp	r2, r3
 8005530:	d028      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005548:	4a19      	ldr	r2, [pc, #100]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d114      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd fe3b 	bl	80031d4 <HAL_GetTick>
 800555e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fd fe37 	bl	80031d4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e199      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d114      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a6:	4902      	ldr	r1, [pc, #8]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]
 80055ac:	e00c      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40007000 	.word	0x40007000
 80055b8:	42470e40 	.word	0x42470e40
 80055bc:	4b89      	ldr	r3, [pc, #548]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a88      	ldr	r2, [pc, #544]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055c6:	6093      	str	r3, [r2, #8]
 80055c8:	4b86      	ldr	r3, [pc, #536]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	4983      	ldr	r1, [pc, #524]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80055ec:	4b7e      	ldr	r3, [pc, #504]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80055ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80055fc:	4b79      	ldr	r3, [pc, #484]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	4976      	ldr	r1, [pc, #472]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800561e:	4b71      	ldr	r3, [pc, #452]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	496d      	ldr	r1, [pc, #436]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563c:	d101      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800563e:	2301      	movs	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	4961      	ldr	r1, [pc, #388]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d004      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	f040 80c6 	bne.w	8005800 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005674:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800567a:	f7fd fdab 	bl	80031d4 <HAL_GetTick>
 800567e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005682:	f7fd fda7 	bl	80031d4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e10b      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005694:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f0      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80056a0:	4a53      	ldr	r2, [pc, #332]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d023      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d019      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e4:	d00e      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d019      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d115      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005702:	d110      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	4931      	ldr	r1, [pc, #196]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005742:	2b00      	cmp	r3, #0
 8005744:	d026      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d122      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800574e:	4b25      	ldr	r3, [pc, #148]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	431a      	orrs	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	061b      	lsls	r3, r3, #24
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	071b      	lsls	r3, r3, #28
 8005774:	491b      	ldr	r1, [pc, #108]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800577c:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800577e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005782:	f023 021f 	bic.w	r2, r3, #31
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	3b01      	subs	r3, #1
 800578c:	4915      	ldr	r1, [pc, #84]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	061b      	lsls	r3, r3, #24
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	490a      	ldr	r1, [pc, #40]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c8:	f7fd fd04 	bl	80031d4 <HAL_GetTick>
 80057cc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ce:	e011      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057d0:	f7fd fd00 	bl	80031d4 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d90a      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e064      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	424711e0 	.word	0x424711e0
 80057ec:	42470068 	.word	0x42470068
 80057f0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f4:	4b2f      	ldr	r3, [pc, #188]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0e7      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800580c:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800580e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005812:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	4926      	ldr	r1, [pc, #152]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005834:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	491d      	ldr	r1, [pc, #116]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005850:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	4915      	ldr	r1, [pc, #84]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005878:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	490c      	ldr	r1, [pc, #48]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800

080058b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d075      	beq.n	80059bc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058d0:	4ba2      	ldr	r3, [pc, #648]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d00c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058dc:	4b9f      	ldr	r3, [pc, #636]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d112      	bne.n	800590e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e8:	4b9c      	ldr	r3, [pc, #624]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f4:	d10b      	bne.n	800590e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f6:	4b99      	ldr	r3, [pc, #612]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d05b      	beq.n	80059ba <HAL_RCC_OscConfig+0x102>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d157      	bne.n	80059ba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e20b      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005916:	d106      	bne.n	8005926 <HAL_RCC_OscConfig+0x6e>
 8005918:	4b90      	ldr	r3, [pc, #576]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a8f      	ldr	r2, [pc, #572]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 800591e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e01d      	b.n	8005962 <HAL_RCC_OscConfig+0xaa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592e:	d10c      	bne.n	800594a <HAL_RCC_OscConfig+0x92>
 8005930:	4b8a      	ldr	r3, [pc, #552]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a89      	ldr	r2, [pc, #548]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b87      	ldr	r3, [pc, #540]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a86      	ldr	r2, [pc, #536]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e00b      	b.n	8005962 <HAL_RCC_OscConfig+0xaa>
 800594a:	4b84      	ldr	r3, [pc, #528]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a83      	ldr	r2, [pc, #524]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b81      	ldr	r3, [pc, #516]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a80      	ldr	r2, [pc, #512]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 800595c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d013      	beq.n	8005992 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fd fc33 	bl	80031d4 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005972:	f7fd fc2f 	bl	80031d4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b64      	cmp	r3, #100	; 0x64
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e1d0      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005984:	4b75      	ldr	r3, [pc, #468]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0xba>
 8005990:	e014      	b.n	80059bc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fd fc1f 	bl	80031d4 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800599a:	f7fd fc1b 	bl	80031d4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b64      	cmp	r3, #100	; 0x64
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e1bc      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ac:	4b6b      	ldr	r3, [pc, #428]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f0      	bne.n	800599a <HAL_RCC_OscConfig+0xe2>
 80059b8:	e000      	b.n	80059bc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d063      	beq.n	8005a90 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059c8:	4b64      	ldr	r3, [pc, #400]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d4:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d11c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e0:	4b5e      	ldr	r3, [pc, #376]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d116      	bne.n	8005a1a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ec:	4b5b      	ldr	r3, [pc, #364]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x14c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e190      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a04:	4b55      	ldr	r3, [pc, #340]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4952      	ldr	r1, [pc, #328]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a18:	e03a      	b.n	8005a90 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d020      	beq.n	8005a64 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a22:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <HAL_RCC_OscConfig+0x2a8>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fd fbd4 	bl	80031d4 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fd fbd0 	bl	80031d4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e171      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a42:	4b46      	ldr	r3, [pc, #280]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b43      	ldr	r3, [pc, #268]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	493f      	ldr	r1, [pc, #252]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	e015      	b.n	8005a90 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a64:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <HAL_RCC_OscConfig+0x2a8>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fd fbb3 	bl	80031d4 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fd fbaf 	bl	80031d4 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e150      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d030      	beq.n	8005afe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d016      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aaa:	f7fd fb93 	bl	80031d4 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab2:	f7fd fb8f 	bl	80031d4 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e130      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1fa>
 8005ad0:	e015      	b.n	8005afe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fb7c 	bl	80031d4 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fb78 	bl	80031d4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e119      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af2:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 809f 	beq.w	8005c4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b10:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10f      	bne.n	8005b3c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x2a4>)
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_RCC_OscConfig+0x2b0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d120      	bne.n	8005b8a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b48:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_RCC_OscConfig+0x2b0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <HAL_RCC_OscConfig+0x2b0>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b54:	f7fd fb3e 	bl	80031d4 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	e010      	b.n	8005b7e <HAL_RCC_OscConfig+0x2c6>
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	42470000 	.word	0x42470000
 8005b64:	42470e80 	.word	0x42470e80
 8005b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6c:	f7fd fb32 	bl	80031d4 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0d3      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7e:	4b6c      	ldr	r3, [pc, #432]	; (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2e8>
 8005b92:	4b68      	ldr	r3, [pc, #416]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a67      	ldr	r2, [pc, #412]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9e:	e01c      	b.n	8005bda <HAL_RCC_OscConfig+0x322>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x30a>
 8005ba8:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	4a61      	ldr	r2, [pc, #388]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb4:	4b5f      	ldr	r3, [pc, #380]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4a5e      	ldr	r2, [pc, #376]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc0:	e00b      	b.n	8005bda <HAL_RCC_OscConfig+0x322>
 8005bc2:	4b5c      	ldr	r3, [pc, #368]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	4a5b      	ldr	r2, [pc, #364]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005bd4:	f023 0304 	bic.w	r3, r3, #4
 8005bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d015      	beq.n	8005c0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be2:	f7fd faf7 	bl	80031d4 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be8:	e00a      	b.n	8005c00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fd faf3 	bl	80031d4 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e092      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c00:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ee      	beq.n	8005bea <HAL_RCC_OscConfig+0x332>
 8005c0c:	e014      	b.n	8005c38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0e:	f7fd fae1 	bl	80031d4 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fd fadd 	bl	80031d4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e07c      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2c:	4b41      	ldr	r3, [pc, #260]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ee      	bne.n	8005c16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3e:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d068      	beq.n	8005d24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c52:	4b38      	ldr	r3, [pc, #224]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d060      	beq.n	8005d20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d145      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <HAL_RCC_OscConfig+0x480>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fab2 	bl	80031d4 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fd faae 	bl	80031d4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e04f      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c86:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	019b      	lsls	r3, r3, #6
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	3b01      	subs	r3, #1
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	071b      	lsls	r3, r3, #28
 8005cbe:	491d      	ldr	r1, [pc, #116]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc4:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <HAL_RCC_OscConfig+0x480>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cca:	f7fd fa83 	bl	80031d4 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd2:	f7fd fa7f 	bl	80031d4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e020      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x41a>
 8005cf0:	e018      	b.n	8005d24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_RCC_OscConfig+0x480>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf8:	f7fd fa6c 	bl	80031d4 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d00:	f7fd fa68 	bl	80031d4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e009      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <HAL_RCC_OscConfig+0x47c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x448>
 8005d1e:	e001      	b.n	8005d24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40007000 	.word	0x40007000
 8005d34:	40023800 	.word	0x40023800
 8005d38:	42470060 	.word	0x42470060

08005d3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e083      	b.n	8005e56 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7f5b      	ldrb	r3, [r3, #29]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fc f85c 	bl	8001e1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	22ca      	movs	r2, #202	; 0xca
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2253      	movs	r2, #83	; 0x53
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 faa8 	bl	80062d0 <RTC_EnterInitMode>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2204      	movs	r2, #4
 8005d92:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e05e      	b.n	8005e56 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005daa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6899      	ldr	r1, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68d2      	ldr	r2, [r2, #12]
 8005dd2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6919      	ldr	r1, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa3a 	bl	8006280 <HAL_RTC_WaitForSynchro>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	22ff      	movs	r2, #255	; 0xff
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e018      	b.n	8005e56 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	22ff      	movs	r2, #255	; 0xff
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e5e:	b590      	push	{r4, r7, lr}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	7f1b      	ldrb	r3, [r3, #28]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_RTC_SetTime+0x1c>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0aa      	b.n	8005fd0 <HAL_RTC_SetTime+0x172>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2202      	movs	r2, #2
 8005e84:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d126      	bne.n	8005eda <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fa3f 	bl	8006328 <RTC_ByteToBcd2>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	785b      	ldrb	r3, [r3, #1]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fa38 	bl	8006328 <RTC_ByteToBcd2>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ebc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fa30 	bl	8006328 <RTC_ByteToBcd2>
 8005ec8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	78db      	ldrb	r3, [r3, #3]
 8005ed2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e018      	b.n	8005f0c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2200      	movs	r2, #0
 8005eec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005efa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f00:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	22ca      	movs	r2, #202	; 0xca
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2253      	movs	r2, #83	; 0x53
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f9d7 	bl	80062d0 <RTC_EnterInitMode>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2204      	movs	r2, #4
 8005f34:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e047      	b.n	8005fd0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6899      	ldr	r1, [r3, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d111      	bne.n	8005fba <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f972 	bl	8006280 <HAL_RTC_WaitForSynchro>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2204      	movs	r2, #4
 8005fae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	22ff      	movs	r2, #255	; 0xff
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005fce:	2300      	movs	r3, #0
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800600a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800600e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	b2da      	uxtb	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	b2da      	uxtb	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11a      	bne.n	800608a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f983 	bl	8006364 <RTC_Bcd2ToByte>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f97a 	bl	8006364 <RTC_Bcd2ToByte>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	789b      	ldrb	r3, [r3, #2]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f971 	bl	8006364 <RTC_Bcd2ToByte>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	7f1b      	ldrb	r3, [r3, #28]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_RTC_SetDate+0x1c>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e094      	b.n	80061da <HAL_RTC_SetDate+0x146>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2202      	movs	r2, #2
 80060ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10e      	bne.n	80060e0 <HAL_RTC_SetDate+0x4c>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	330a      	adds	r3, #10
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11c      	bne.n	8006120 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f91c 	bl	8006328 <RTC_ByteToBcd2>
 80060f0:	4603      	mov	r3, r0
 80060f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f915 	bl	8006328 <RTC_ByteToBcd2>
 80060fe:	4603      	mov	r3, r0
 8006100:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006102:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	789b      	ldrb	r3, [r3, #2]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f90d 	bl	8006328 <RTC_ByteToBcd2>
 800610e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006110:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e00e      	b.n	800613e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	78db      	ldrb	r3, [r3, #3]
 8006124:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800612c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006132:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	22ca      	movs	r2, #202	; 0xca
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2253      	movs	r2, #83	; 0x53
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f8be 	bl	80062d0 <RTC_EnterInitMode>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	22ff      	movs	r2, #255	; 0xff
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2204      	movs	r2, #4
 8006166:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e033      	b.n	80061da <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800617c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006180:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006190:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d111      	bne.n	80061c4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f86d 	bl	8006280 <HAL_RTC_WaitForSynchro>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	22ff      	movs	r2, #255	; 0xff
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2204      	movs	r2, #4
 80061b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e00a      	b.n	80061da <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	22ff      	movs	r2, #255	; 0xff
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd90      	pop	{r4, r7, pc}

080061e2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006200:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0b5b      	lsrs	r3, r3, #13
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11a      	bne.n	8006276 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f88d 	bl	8006364 <RTC_Bcd2ToByte>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f884 	bl	8006364 <RTC_Bcd2ToByte>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	789b      	ldrb	r3, [r3, #2]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f87b 	bl	8006364 <RTC_Bcd2ToByte>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800629a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800629c:	f7fc ff9a 	bl	80031d4 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062a2:	e009      	b.n	80062b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062a4:	f7fc ff96 	bl	80031d4 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b2:	d901      	bls.n	80062b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e007      	b.n	80062c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d119      	bne.n	800631e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f4:	f7fc ff6e 	bl	80031d4 <HAL_GetTick>
 80062f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062fa:	e009      	b.n	8006310 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062fc:	f7fc ff6a 	bl	80031d4 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630a:	d901      	bls.n	8006310 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e007      	b.n	8006320 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0ee      	beq.n	80062fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006336:	e005      	b.n	8006344 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	3b0a      	subs	r3, #10
 8006342:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d8f6      	bhi.n	8006338 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	b2da      	uxtb	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	4313      	orrs	r3, r2
 8006356:	b2db      	uxtb	r3, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4413      	add	r3, r2
 8006392:	b2db      	uxtb	r3, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e01d      	b.n	80063ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fb fd3e 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 fa14 	bl	800680c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b06      	cmp	r3, #6
 800641e:	d007      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d122      	bne.n	800649a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b02      	cmp	r3, #2
 8006460:	d11b      	bne.n	800649a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0202 	mvn.w	r2, #2
 800646a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9a5 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 8006486:	e005      	b.n	8006494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f997 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9a8 	bl	80067e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d122      	bne.n	80064ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d11b      	bne.n	80064ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f06f 0204 	mvn.w	r2, #4
 80064be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f97b 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 80064da:	e005      	b.n	80064e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f96d 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f97e 	bl	80067e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d122      	bne.n	8006542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11b      	bne.n	8006542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f06f 0208 	mvn.w	r2, #8
 8006512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2204      	movs	r2, #4
 8006518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f951 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 800652e:	e005      	b.n	800653c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f943 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f954 	bl	80067e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b10      	cmp	r3, #16
 800654e:	d122      	bne.n	8006596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d11b      	bne.n	8006596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0210 	mvn.w	r2, #16
 8006566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2208      	movs	r2, #8
 800656c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f927 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 8006582:	e005      	b.n	8006590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f919 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f92a 	bl	80067e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0201 	mvn.w	r2, #1
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb fb41 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065da:	2b80      	cmp	r3, #128	; 0x80
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 facf 	bl	8006b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d10e      	bne.n	800661a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d107      	bne.n	800661a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f8ef 	bl	80067f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b20      	cmp	r3, #32
 8006626:	d10e      	bne.n	8006646 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d107      	bne.n	8006646 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f06f 0220 	mvn.w	r2, #32
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fa99 	bl	8006b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_TIM_ConfigClockSource+0x18>
 8006662:	2302      	movs	r3, #2
 8006664:	e0a6      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x166>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006684:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800668c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d067      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x120>
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d80b      	bhi.n	80066ba <HAL_TIM_ConfigClockSource+0x6c>
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d073      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x140>
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d802      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x62>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d06f      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80066ae:	e078      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d06c      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x140>
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d06a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80066b8:	e073      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066ba:	2b70      	cmp	r3, #112	; 0x70
 80066bc:	d00d      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x8c>
 80066be:	2b70      	cmp	r3, #112	; 0x70
 80066c0:	d804      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x7e>
 80066c2:	2b50      	cmp	r3, #80	; 0x50
 80066c4:	d033      	beq.n	800672e <HAL_TIM_ConfigClockSource+0xe0>
 80066c6:	2b60      	cmp	r3, #96	; 0x60
 80066c8:	d041      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80066ca:	e06a      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	d066      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x152>
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d6:	d017      	beq.n	8006708 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80066d8:	e063      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f000 f9a9 	bl	8006a40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	609a      	str	r2, [r3, #8]
      break;
 8006706:	e04c      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f000 f992 	bl	8006a40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800672a:	609a      	str	r2, [r3, #8]
      break;
 800672c:	e039      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	461a      	mov	r2, r3
 800673c:	f000 f906 	bl	800694c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2150      	movs	r1, #80	; 0x50
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f95f 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 800674c:	e029      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	461a      	mov	r2, r3
 800675c:	f000 f925 	bl	80069aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2160      	movs	r1, #96	; 0x60
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f94f 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 800676c:	e019      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	461a      	mov	r2, r3
 800677c:	f000 f8e6 	bl	800694c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2140      	movs	r1, #64	; 0x40
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f93f 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 800678c:	e009      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f000 f936 	bl	8006a0a <TIM_ITRx_SetConfig>
      break;
 800679e:	e000      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80067a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a40      	ldr	r2, [pc, #256]	; (8006920 <TIM_Base_SetConfig+0x114>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d00f      	beq.n	800684c <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a3d      	ldr	r2, [pc, #244]	; (8006924 <TIM_Base_SetConfig+0x118>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00b      	beq.n	800684c <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <TIM_Base_SetConfig+0x11c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d007      	beq.n	800684c <TIM_Base_SetConfig+0x40>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a3b      	ldr	r2, [pc, #236]	; (800692c <TIM_Base_SetConfig+0x120>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <TIM_Base_SetConfig+0x124>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d108      	bne.n	800685e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2f      	ldr	r2, [pc, #188]	; (8006920 <TIM_Base_SetConfig+0x114>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d02b      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d027      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a2c      	ldr	r2, [pc, #176]	; (8006924 <TIM_Base_SetConfig+0x118>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d023      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a2b      	ldr	r2, [pc, #172]	; (8006928 <TIM_Base_SetConfig+0x11c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01f      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2a      	ldr	r2, [pc, #168]	; (800692c <TIM_Base_SetConfig+0x120>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01b      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a29      	ldr	r2, [pc, #164]	; (8006930 <TIM_Base_SetConfig+0x124>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d017      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a28      	ldr	r2, [pc, #160]	; (8006934 <TIM_Base_SetConfig+0x128>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a27      	ldr	r2, [pc, #156]	; (8006938 <TIM_Base_SetConfig+0x12c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00f      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a26      	ldr	r2, [pc, #152]	; (800693c <TIM_Base_SetConfig+0x130>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00b      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a25      	ldr	r2, [pc, #148]	; (8006940 <TIM_Base_SetConfig+0x134>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d007      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a24      	ldr	r2, [pc, #144]	; (8006944 <TIM_Base_SetConfig+0x138>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d003      	beq.n	80068be <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a23      	ldr	r2, [pc, #140]	; (8006948 <TIM_Base_SetConfig+0x13c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d108      	bne.n	80068d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <TIM_Base_SetConfig+0x114>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_Base_SetConfig+0xf8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <TIM_Base_SetConfig+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d103      	bne.n	800690c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	615a      	str	r2, [r3, #20]
}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40010000 	.word	0x40010000
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40010400 	.word	0x40010400
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800
 8006940:	40001800 	.word	0x40001800
 8006944:	40001c00 	.word	0x40001c00
 8006948:	40002000 	.word	0x40002000

0800694c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 0201 	bic.w	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 030a 	bic.w	r3, r3, #10
 8006988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b087      	sub	sp, #28
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0210 	bic.w	r2, r3, #16
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	031b      	lsls	r3, r3, #12
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f043 0307 	orr.w	r3, r3, #7
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	021a      	lsls	r2, r3, #8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	609a      	str	r2, [r3, #8]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e05a      	b.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d01d      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1a      	ldr	r2, [pc, #104]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10c      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40001800 	.word	0x40001800

08006b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e03f      	b.n	8006c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb f964 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2224      	movs	r2, #36	; 0x24
 8006bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fd1d 	bl	8007624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b088      	sub	sp, #32
 8006c3e:	af02      	add	r7, sp, #8
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	f040 8083 	bne.w	8006d62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_UART_Transmit+0x2e>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e07b      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Transmit+0x40>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e074      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2221      	movs	r2, #33	; 0x21
 8006c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c90:	f7fc faa0 	bl	80031d4 <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006caa:	e042      	b.n	8006d32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	d122      	bne.n	8006d0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fb26 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e042      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	60bb      	str	r3, [r7, #8]
 8006d00:	e017      	b.n	8006d32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60bb      	str	r3, [r7, #8]
 8006d08:	e013      	b.n	8006d32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fb03 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e01f      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	60ba      	str	r2, [r7, #8]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1b7      	bne.n	8006cac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 faea 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e006      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	f040 8090 	bne.w	8006eae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_UART_Receive+0x2e>
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e088      	b.n	8006eb0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Receive+0x40>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e081      	b.n	8006eb0 <HAL_UART_Receive+0x144>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2222      	movs	r2, #34	; 0x22
 8006dbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dc2:	f7fc fa07 	bl	80031d4 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006ddc:	e05c      	b.n	8006e98 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df4:	d12b      	bne.n	8006e4e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2120      	movs	r1, #32
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fa8d 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e04f      	b.n	8006eb0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3302      	adds	r3, #2
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	e030      	b.n	8006e98 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	e024      	b.n	8006e98 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	2120      	movs	r1, #32
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fa61 	bl	8007320 <UART_WaitOnFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e023      	b.n	8006eb0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d108      	bne.n	8006e82 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	60ba      	str	r2, [r7, #8]
 8006e7c:	b2ca      	uxtb	r2, r1
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	e00a      	b.n	8006e98 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d19d      	bne.n	8006dde <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
  }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d166      	bne.n	8006fa0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_UART_Receive_DMA+0x26>
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e05f      	b.n	8006fa2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Receive_DMA+0x38>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e058      	b.n	8006fa2 <HAL_UART_Receive_DMA+0xea>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2222      	movs	r2, #34	; 0x22
 8006f0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	4a25      	ldr	r2, [pc, #148]	; (8006fac <HAL_UART_Receive_DMA+0xf4>)
 8006f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_UART_Receive_DMA+0xf8>)
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	4a23      	ldr	r2, [pc, #140]	; (8006fb4 <HAL_UART_Receive_DMA+0xfc>)
 8006f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	2200      	movs	r2, #0
 8006f30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006f32:	f107 0308 	add.w	r3, r7, #8
 8006f36:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	f7fc fb31 	bl	80035b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f7a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e000      	b.n	8006fa2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	08007209 	.word	0x08007209
 8006fb0:	08007271 	.word	0x08007271
 8006fb4:	0800728d 	.word	0x0800728d

08006fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x52>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa8c 	bl	8007520 <UART_Receive_IT>
      return;
 8007008:	e0d1      	b.n	80071ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80b0 	beq.w	8007172 <HAL_UART_IRQHandler+0x1ba>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <HAL_UART_IRQHandler+0x70>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 80a5 	beq.w	8007172 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_UART_IRQHandler+0x90>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_UART_IRQHandler+0xb0>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	f043 0202 	orr.w	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_UART_IRQHandler+0xd0>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007080:	f043 0204 	orr.w	r2, r3, #4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <HAL_UART_IRQHandler+0xfa>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_UART_IRQHandler+0xee>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	f043 0208 	orr.w	r2, r3, #8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d078      	beq.n	80071ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <HAL_UART_IRQHandler+0x11c>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa26 	bl	8007520 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_UART_IRQHandler+0x144>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d031      	beq.n	8007160 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f96f 	bl	80073e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b40      	cmp	r3, #64	; 0x40
 800710e:	d123      	bne.n	8007158 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	2b00      	cmp	r3, #0
 8007126:	d013      	beq.n	8007150 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <HAL_UART_IRQHandler+0x1fc>)
 800712e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	4618      	mov	r0, r3
 8007136:	f7fc fa93 	bl	8003660 <HAL_DMA_Abort_IT>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d016      	beq.n	800716e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800714a:	4610      	mov	r0, r2
 800714c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714e:	e00e      	b.n	800716e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f84f 	bl	80071f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007156:	e00a      	b.n	800716e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f84b 	bl	80071f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715e:	e006      	b.n	800716e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f847 	bl	80071f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800716c:	e01e      	b.n	80071ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716e:	bf00      	nop
    return;
 8007170:	e01c      	b.n	80071ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_UART_IRQHandler+0x1d6>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f95c 	bl	8007444 <UART_Transmit_IT>
    return;
 800718c:	e00f      	b.n	80071ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_UART_IRQHandler+0x1f6>
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9a4 	bl	80074f0 <UART_EndTransmit_IT>
    return;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80071ac:	bf00      	nop
  }
}
 80071ae:	3720      	adds	r7, #32
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	0800741d 	.word	0x0800741d

080071b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11e      	bne.n	8007262 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007238:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007258:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff ffb2 	bl	80071cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007268:	bf00      	nop
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff ffae 	bl	80071e0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b21      	cmp	r3, #33	; 0x21
 80072be:	d108      	bne.n	80072d2 <UART_DMAError+0x46>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f871 	bl	80073b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b22      	cmp	r3, #34	; 0x22
 80072f2:	d108      	bne.n	8007306 <UART_DMAError+0x7a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007300:	68b8      	ldr	r0, [r7, #8]
 8007302:	f000 f86d 	bl	80073e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	f043 0210 	orr.w	r2, r3, #16
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007312:	68b8      	ldr	r0, [r7, #8]
 8007314:	f7ff ff6e 	bl	80071f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007330:	e02c      	b.n	800738c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d028      	beq.n	800738c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <UART_WaitOnFlagUntilTimeout+0x30>
 8007340:	f7fb ff48 	bl	80031d4 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	429a      	cmp	r2, r3
 800734e:	d21d      	bcs.n	800738c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800735e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e00f      	b.n	80073ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4013      	ands	r3, r2
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	429a      	cmp	r2, r3
 800739a:	bf0c      	ite	eq
 800739c:	2301      	moveq	r3, #1
 800739e:	2300      	movne	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d0c3      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80073ca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fedc 	bl	80071f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b21      	cmp	r3, #33	; 0x21
 8007456:	d144      	bne.n	80074e2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007460:	d11a      	bne.n	8007498 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007476:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]
 800748a:	e00e      	b.n	80074aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	621a      	str	r2, [r3, #32]
 8007496:	e008      	b.n	80074aa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	1c59      	adds	r1, r3, #1
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6211      	str	r1, [r2, #32]
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4619      	mov	r1, r3
 80074b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10f      	bne.n	80074de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e000      	b.n	80074e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007506:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fe51 	bl	80071b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b22      	cmp	r3, #34	; 0x22
 8007532:	d171      	bne.n	8007618 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753c:	d123      	bne.n	8007586 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10e      	bne.n	800756a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	1c9a      	adds	r2, r3, #2
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	629a      	str	r2, [r3, #40]	; 0x28
 8007568:	e029      	b.n	80075be <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	b29b      	uxth	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	629a      	str	r2, [r3, #40]	; 0x28
 8007584:	e01b      	b.n	80075be <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6858      	ldr	r0, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	1c59      	adds	r1, r3, #1
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6291      	str	r1, [r2, #40]	; 0x28
 800759e:	b2c2      	uxtb	r2, r0
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e00c      	b.n	80075be <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	1c58      	adds	r0, r3, #1
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	6288      	str	r0, [r1, #40]	; 0x28
 80075b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4619      	mov	r1, r3
 80075cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d120      	bne.n	8007614 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0220 	bic.w	r2, r2, #32
 80075e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695a      	ldr	r2, [r3, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fdde 	bl	80071cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e002      	b.n	800761a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007666:	f023 030c 	bic.w	r3, r3, #12
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	430b      	orrs	r3, r1
 8007672:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007692:	f040 8199 	bne.w	80079c8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4ac6      	ldr	r2, [pc, #792]	; (80079b4 <UART_SetConfig+0x390>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00f      	beq.n	80076c0 <UART_SetConfig+0x9c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4ac4      	ldr	r2, [pc, #784]	; (80079b8 <UART_SetConfig+0x394>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00a      	beq.n	80076c0 <UART_SetConfig+0x9c>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4ac3      	ldr	r2, [pc, #780]	; (80079bc <UART_SetConfig+0x398>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d005      	beq.n	80076c0 <UART_SetConfig+0x9c>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4ac1      	ldr	r2, [pc, #772]	; (80079c0 <UART_SetConfig+0x39c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	f040 80bd 	bne.w	800783a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fd fe5a 	bl	8005378 <HAL_RCC_GetPCLK2Freq>
 80076c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	461d      	mov	r5, r3
 80076ca:	f04f 0600 	mov.w	r6, #0
 80076ce:	46a8      	mov	r8, r5
 80076d0:	46b1      	mov	r9, r6
 80076d2:	eb18 0308 	adds.w	r3, r8, r8
 80076d6:	eb49 0409 	adc.w	r4, r9, r9
 80076da:	4698      	mov	r8, r3
 80076dc:	46a1      	mov	r9, r4
 80076de:	eb18 0805 	adds.w	r8, r8, r5
 80076e2:	eb49 0906 	adc.w	r9, r9, r6
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076fa:	4688      	mov	r8, r1
 80076fc:	4691      	mov	r9, r2
 80076fe:	eb18 0005 	adds.w	r0, r8, r5
 8007702:	eb49 0106 	adc.w	r1, r9, r6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	461d      	mov	r5, r3
 800770c:	f04f 0600 	mov.w	r6, #0
 8007710:	196b      	adds	r3, r5, r5
 8007712:	eb46 0406 	adc.w	r4, r6, r6
 8007716:	461a      	mov	r2, r3
 8007718:	4623      	mov	r3, r4
 800771a:	f7f9 fac7 	bl	8000cac <__aeabi_uldivmod>
 800771e:	4603      	mov	r3, r0
 8007720:	460c      	mov	r4, r1
 8007722:	461a      	mov	r2, r3
 8007724:	4ba7      	ldr	r3, [pc, #668]	; (80079c4 <UART_SetConfig+0x3a0>)
 8007726:	fba3 2302 	umull	r2, r3, r3, r2
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	461d      	mov	r5, r3
 8007734:	f04f 0600 	mov.w	r6, #0
 8007738:	46a9      	mov	r9, r5
 800773a:	46b2      	mov	sl, r6
 800773c:	eb19 0309 	adds.w	r3, r9, r9
 8007740:	eb4a 040a 	adc.w	r4, sl, sl
 8007744:	4699      	mov	r9, r3
 8007746:	46a2      	mov	sl, r4
 8007748:	eb19 0905 	adds.w	r9, r9, r5
 800774c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007750:	f04f 0100 	mov.w	r1, #0
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800775c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007764:	4689      	mov	r9, r1
 8007766:	4692      	mov	sl, r2
 8007768:	eb19 0005 	adds.w	r0, r9, r5
 800776c:	eb4a 0106 	adc.w	r1, sl, r6
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	461d      	mov	r5, r3
 8007776:	f04f 0600 	mov.w	r6, #0
 800777a:	196b      	adds	r3, r5, r5
 800777c:	eb46 0406 	adc.w	r4, r6, r6
 8007780:	461a      	mov	r2, r3
 8007782:	4623      	mov	r3, r4
 8007784:	f7f9 fa92 	bl	8000cac <__aeabi_uldivmod>
 8007788:	4603      	mov	r3, r0
 800778a:	460c      	mov	r4, r1
 800778c:	461a      	mov	r2, r3
 800778e:	4b8d      	ldr	r3, [pc, #564]	; (80079c4 <UART_SetConfig+0x3a0>)
 8007790:	fba3 1302 	umull	r1, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	2164      	movs	r1, #100	; 0x64
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	3332      	adds	r3, #50	; 0x32
 80077a2:	4a88      	ldr	r2, [pc, #544]	; (80079c4 <UART_SetConfig+0x3a0>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077b0:	4498      	add	r8, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	461d      	mov	r5, r3
 80077b6:	f04f 0600 	mov.w	r6, #0
 80077ba:	46a9      	mov	r9, r5
 80077bc:	46b2      	mov	sl, r6
 80077be:	eb19 0309 	adds.w	r3, r9, r9
 80077c2:	eb4a 040a 	adc.w	r4, sl, sl
 80077c6:	4699      	mov	r9, r3
 80077c8:	46a2      	mov	sl, r4
 80077ca:	eb19 0905 	adds.w	r9, r9, r5
 80077ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077e6:	4689      	mov	r9, r1
 80077e8:	4692      	mov	sl, r2
 80077ea:	eb19 0005 	adds.w	r0, r9, r5
 80077ee:	eb4a 0106 	adc.w	r1, sl, r6
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	461d      	mov	r5, r3
 80077f8:	f04f 0600 	mov.w	r6, #0
 80077fc:	196b      	adds	r3, r5, r5
 80077fe:	eb46 0406 	adc.w	r4, r6, r6
 8007802:	461a      	mov	r2, r3
 8007804:	4623      	mov	r3, r4
 8007806:	f7f9 fa51 	bl	8000cac <__aeabi_uldivmod>
 800780a:	4603      	mov	r3, r0
 800780c:	460c      	mov	r4, r1
 800780e:	461a      	mov	r2, r3
 8007810:	4b6c      	ldr	r3, [pc, #432]	; (80079c4 <UART_SetConfig+0x3a0>)
 8007812:	fba3 1302 	umull	r1, r3, r3, r2
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	2164      	movs	r1, #100	; 0x64
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	3332      	adds	r3, #50	; 0x32
 8007824:	4a67      	ldr	r2, [pc, #412]	; (80079c4 <UART_SetConfig+0x3a0>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	f003 0207 	and.w	r2, r3, #7
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4442      	add	r2, r8
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	e27d      	b.n	8007d36 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800783a:	f7fd fd89 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 800783e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	461d      	mov	r5, r3
 8007844:	f04f 0600 	mov.w	r6, #0
 8007848:	46a8      	mov	r8, r5
 800784a:	46b1      	mov	r9, r6
 800784c:	eb18 0308 	adds.w	r3, r8, r8
 8007850:	eb49 0409 	adc.w	r4, r9, r9
 8007854:	4698      	mov	r8, r3
 8007856:	46a1      	mov	r9, r4
 8007858:	eb18 0805 	adds.w	r8, r8, r5
 800785c:	eb49 0906 	adc.w	r9, r9, r6
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800786c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007874:	4688      	mov	r8, r1
 8007876:	4691      	mov	r9, r2
 8007878:	eb18 0005 	adds.w	r0, r8, r5
 800787c:	eb49 0106 	adc.w	r1, r9, r6
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	461d      	mov	r5, r3
 8007886:	f04f 0600 	mov.w	r6, #0
 800788a:	196b      	adds	r3, r5, r5
 800788c:	eb46 0406 	adc.w	r4, r6, r6
 8007890:	461a      	mov	r2, r3
 8007892:	4623      	mov	r3, r4
 8007894:	f7f9 fa0a 	bl	8000cac <__aeabi_uldivmod>
 8007898:	4603      	mov	r3, r0
 800789a:	460c      	mov	r4, r1
 800789c:	461a      	mov	r2, r3
 800789e:	4b49      	ldr	r3, [pc, #292]	; (80079c4 <UART_SetConfig+0x3a0>)
 80078a0:	fba3 2302 	umull	r2, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	461d      	mov	r5, r3
 80078ae:	f04f 0600 	mov.w	r6, #0
 80078b2:	46a9      	mov	r9, r5
 80078b4:	46b2      	mov	sl, r6
 80078b6:	eb19 0309 	adds.w	r3, r9, r9
 80078ba:	eb4a 040a 	adc.w	r4, sl, sl
 80078be:	4699      	mov	r9, r3
 80078c0:	46a2      	mov	sl, r4
 80078c2:	eb19 0905 	adds.w	r9, r9, r5
 80078c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078de:	4689      	mov	r9, r1
 80078e0:	4692      	mov	sl, r2
 80078e2:	eb19 0005 	adds.w	r0, r9, r5
 80078e6:	eb4a 0106 	adc.w	r1, sl, r6
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	461d      	mov	r5, r3
 80078f0:	f04f 0600 	mov.w	r6, #0
 80078f4:	196b      	adds	r3, r5, r5
 80078f6:	eb46 0406 	adc.w	r4, r6, r6
 80078fa:	461a      	mov	r2, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	f7f9 f9d5 	bl	8000cac <__aeabi_uldivmod>
 8007902:	4603      	mov	r3, r0
 8007904:	460c      	mov	r4, r1
 8007906:	461a      	mov	r2, r3
 8007908:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <UART_SetConfig+0x3a0>)
 800790a:	fba3 1302 	umull	r1, r3, r3, r2
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	2164      	movs	r1, #100	; 0x64
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	00db      	lsls	r3, r3, #3
 800791a:	3332      	adds	r3, #50	; 0x32
 800791c:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <UART_SetConfig+0x3a0>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800792a:	4498      	add	r8, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	461d      	mov	r5, r3
 8007930:	f04f 0600 	mov.w	r6, #0
 8007934:	46a9      	mov	r9, r5
 8007936:	46b2      	mov	sl, r6
 8007938:	eb19 0309 	adds.w	r3, r9, r9
 800793c:	eb4a 040a 	adc.w	r4, sl, sl
 8007940:	4699      	mov	r9, r3
 8007942:	46a2      	mov	sl, r4
 8007944:	eb19 0905 	adds.w	r9, r9, r5
 8007948:	eb4a 0a06 	adc.w	sl, sl, r6
 800794c:	f04f 0100 	mov.w	r1, #0
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800795c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007960:	4689      	mov	r9, r1
 8007962:	4692      	mov	sl, r2
 8007964:	eb19 0005 	adds.w	r0, r9, r5
 8007968:	eb4a 0106 	adc.w	r1, sl, r6
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	461d      	mov	r5, r3
 8007972:	f04f 0600 	mov.w	r6, #0
 8007976:	196b      	adds	r3, r5, r5
 8007978:	eb46 0406 	adc.w	r4, r6, r6
 800797c:	461a      	mov	r2, r3
 800797e:	4623      	mov	r3, r4
 8007980:	f7f9 f994 	bl	8000cac <__aeabi_uldivmod>
 8007984:	4603      	mov	r3, r0
 8007986:	460c      	mov	r4, r1
 8007988:	461a      	mov	r2, r3
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <UART_SetConfig+0x3a0>)
 800798c:	fba3 1302 	umull	r1, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	2164      	movs	r1, #100	; 0x64
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	3332      	adds	r3, #50	; 0x32
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <UART_SetConfig+0x3a0>)
 80079a0:	fba2 2303 	umull	r2, r3, r2, r3
 80079a4:	095b      	lsrs	r3, r3, #5
 80079a6:	f003 0207 	and.w	r2, r3, #7
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4442      	add	r2, r8
 80079b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80079b2:	e1c0      	b.n	8007d36 <UART_SetConfig+0x712>
 80079b4:	40011000 	.word	0x40011000
 80079b8:	40011400 	.word	0x40011400
 80079bc:	40011800 	.word	0x40011800
 80079c0:	40011c00 	.word	0x40011c00
 80079c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4adc      	ldr	r2, [pc, #880]	; (8007d40 <UART_SetConfig+0x71c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00f      	beq.n	80079f2 <UART_SetConfig+0x3ce>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4adb      	ldr	r2, [pc, #876]	; (8007d44 <UART_SetConfig+0x720>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00a      	beq.n	80079f2 <UART_SetConfig+0x3ce>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4ad9      	ldr	r2, [pc, #868]	; (8007d48 <UART_SetConfig+0x724>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d005      	beq.n	80079f2 <UART_SetConfig+0x3ce>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4ad8      	ldr	r2, [pc, #864]	; (8007d4c <UART_SetConfig+0x728>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	f040 80d1 	bne.w	8007b94 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f2:	f7fd fcc1 	bl	8005378 <HAL_RCC_GetPCLK2Freq>
 80079f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	469a      	mov	sl, r3
 80079fc:	f04f 0b00 	mov.w	fp, #0
 8007a00:	46d0      	mov	r8, sl
 8007a02:	46d9      	mov	r9, fp
 8007a04:	eb18 0308 	adds.w	r3, r8, r8
 8007a08:	eb49 0409 	adc.w	r4, r9, r9
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	46a1      	mov	r9, r4
 8007a10:	eb18 080a 	adds.w	r8, r8, sl
 8007a14:	eb49 090b 	adc.w	r9, r9, fp
 8007a18:	f04f 0100 	mov.w	r1, #0
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a2c:	4688      	mov	r8, r1
 8007a2e:	4691      	mov	r9, r2
 8007a30:	eb1a 0508 	adds.w	r5, sl, r8
 8007a34:	eb4b 0609 	adc.w	r6, fp, r9
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	f04f 0400 	mov.w	r4, #0
 8007a4a:	0094      	lsls	r4, r2, #2
 8007a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a50:	008b      	lsls	r3, r1, #2
 8007a52:	461a      	mov	r2, r3
 8007a54:	4623      	mov	r3, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	4631      	mov	r1, r6
 8007a5a:	f7f9 f927 	bl	8000cac <__aeabi_uldivmod>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	461a      	mov	r2, r3
 8007a64:	4bba      	ldr	r3, [pc, #744]	; (8007d50 <UART_SetConfig+0x72c>)
 8007a66:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	469b      	mov	fp, r3
 8007a74:	f04f 0c00 	mov.w	ip, #0
 8007a78:	46d9      	mov	r9, fp
 8007a7a:	46e2      	mov	sl, ip
 8007a7c:	eb19 0309 	adds.w	r3, r9, r9
 8007a80:	eb4a 040a 	adc.w	r4, sl, sl
 8007a84:	4699      	mov	r9, r3
 8007a86:	46a2      	mov	sl, r4
 8007a88:	eb19 090b 	adds.w	r9, r9, fp
 8007a8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a90:	f04f 0100 	mov.w	r1, #0
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	4692      	mov	sl, r2
 8007aa8:	eb1b 0509 	adds.w	r5, fp, r9
 8007aac:	eb4c 060a 	adc.w	r6, ip, sl
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	f04f 0400 	mov.w	r4, #0
 8007ac2:	0094      	lsls	r4, r2, #2
 8007ac4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ac8:	008b      	lsls	r3, r1, #2
 8007aca:	461a      	mov	r2, r3
 8007acc:	4623      	mov	r3, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	f7f9 f8eb 	bl	8000cac <__aeabi_uldivmod>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	461a      	mov	r2, r3
 8007adc:	4b9c      	ldr	r3, [pc, #624]	; (8007d50 <UART_SetConfig+0x72c>)
 8007ade:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2164      	movs	r1, #100	; 0x64
 8007ae6:	fb01 f303 	mul.w	r3, r1, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	3332      	adds	r3, #50	; 0x32
 8007af0:	4a97      	ldr	r2, [pc, #604]	; (8007d50 <UART_SetConfig+0x72c>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007afc:	4498      	add	r8, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	469b      	mov	fp, r3
 8007b02:	f04f 0c00 	mov.w	ip, #0
 8007b06:	46d9      	mov	r9, fp
 8007b08:	46e2      	mov	sl, ip
 8007b0a:	eb19 0309 	adds.w	r3, r9, r9
 8007b0e:	eb4a 040a 	adc.w	r4, sl, sl
 8007b12:	4699      	mov	r9, r3
 8007b14:	46a2      	mov	sl, r4
 8007b16:	eb19 090b 	adds.w	r9, r9, fp
 8007b1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b1e:	f04f 0100 	mov.w	r1, #0
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b32:	4689      	mov	r9, r1
 8007b34:	4692      	mov	sl, r2
 8007b36:	eb1b 0509 	adds.w	r5, fp, r9
 8007b3a:	eb4c 060a 	adc.w	r6, ip, sl
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4619      	mov	r1, r3
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	f04f 0400 	mov.w	r4, #0
 8007b50:	0094      	lsls	r4, r2, #2
 8007b52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b56:	008b      	lsls	r3, r1, #2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	4631      	mov	r1, r6
 8007b60:	f7f9 f8a4 	bl	8000cac <__aeabi_uldivmod>
 8007b64:	4603      	mov	r3, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b79      	ldr	r3, [pc, #484]	; (8007d50 <UART_SetConfig+0x72c>)
 8007b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	2164      	movs	r1, #100	; 0x64
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	3332      	adds	r3, #50	; 0x32
 8007b7e:	4a74      	ldr	r2, [pc, #464]	; (8007d50 <UART_SetConfig+0x72c>)
 8007b80:	fba2 2303 	umull	r2, r3, r2, r3
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4442      	add	r2, r8
 8007b90:	609a      	str	r2, [r3, #8]
 8007b92:	e0d0      	b.n	8007d36 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b94:	f7fd fbdc 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007b98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	469a      	mov	sl, r3
 8007b9e:	f04f 0b00 	mov.w	fp, #0
 8007ba2:	46d0      	mov	r8, sl
 8007ba4:	46d9      	mov	r9, fp
 8007ba6:	eb18 0308 	adds.w	r3, r8, r8
 8007baa:	eb49 0409 	adc.w	r4, r9, r9
 8007bae:	4698      	mov	r8, r3
 8007bb0:	46a1      	mov	r9, r4
 8007bb2:	eb18 080a 	adds.w	r8, r8, sl
 8007bb6:	eb49 090b 	adc.w	r9, r9, fp
 8007bba:	f04f 0100 	mov.w	r1, #0
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bce:	4688      	mov	r8, r1
 8007bd0:	4691      	mov	r9, r2
 8007bd2:	eb1a 0508 	adds.w	r5, sl, r8
 8007bd6:	eb4b 0609 	adc.w	r6, fp, r9
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	4619      	mov	r1, r3
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	f04f 0400 	mov.w	r4, #0
 8007bec:	0094      	lsls	r4, r2, #2
 8007bee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bf2:	008b      	lsls	r3, r1, #2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4623      	mov	r3, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	f7f9 f856 	bl	8000cac <__aeabi_uldivmod>
 8007c00:	4603      	mov	r3, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b52      	ldr	r3, [pc, #328]	; (8007d50 <UART_SetConfig+0x72c>)
 8007c08:	fba3 2302 	umull	r2, r3, r3, r2
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	469b      	mov	fp, r3
 8007c16:	f04f 0c00 	mov.w	ip, #0
 8007c1a:	46d9      	mov	r9, fp
 8007c1c:	46e2      	mov	sl, ip
 8007c1e:	eb19 0309 	adds.w	r3, r9, r9
 8007c22:	eb4a 040a 	adc.w	r4, sl, sl
 8007c26:	4699      	mov	r9, r3
 8007c28:	46a2      	mov	sl, r4
 8007c2a:	eb19 090b 	adds.w	r9, r9, fp
 8007c2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c32:	f04f 0100 	mov.w	r1, #0
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c46:	4689      	mov	r9, r1
 8007c48:	4692      	mov	sl, r2
 8007c4a:	eb1b 0509 	adds.w	r5, fp, r9
 8007c4e:	eb4c 060a 	adc.w	r6, ip, sl
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	4619      	mov	r1, r3
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	0094      	lsls	r4, r2, #2
 8007c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c6a:	008b      	lsls	r3, r1, #2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4623      	mov	r3, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	4631      	mov	r1, r6
 8007c74:	f7f9 f81a 	bl	8000cac <__aeabi_uldivmod>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4b34      	ldr	r3, [pc, #208]	; (8007d50 <UART_SetConfig+0x72c>)
 8007c80:	fba3 1302 	umull	r1, r3, r3, r2
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	2164      	movs	r1, #100	; 0x64
 8007c88:	fb01 f303 	mul.w	r3, r1, r3
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	3332      	adds	r3, #50	; 0x32
 8007c92:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <UART_SetConfig+0x72c>)
 8007c94:	fba2 2303 	umull	r2, r3, r2, r3
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c9e:	4498      	add	r8, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	469b      	mov	fp, r3
 8007ca4:	f04f 0c00 	mov.w	ip, #0
 8007ca8:	46d9      	mov	r9, fp
 8007caa:	46e2      	mov	sl, ip
 8007cac:	eb19 0309 	adds.w	r3, r9, r9
 8007cb0:	eb4a 040a 	adc.w	r4, sl, sl
 8007cb4:	4699      	mov	r9, r3
 8007cb6:	46a2      	mov	sl, r4
 8007cb8:	eb19 090b 	adds.w	r9, r9, fp
 8007cbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cc0:	f04f 0100 	mov.w	r1, #0
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ccc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cd4:	4689      	mov	r9, r1
 8007cd6:	4692      	mov	sl, r2
 8007cd8:	eb1b 0509 	adds.w	r5, fp, r9
 8007cdc:	eb4c 060a 	adc.w	r6, ip, sl
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	0094      	lsls	r4, r2, #2
 8007cf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cf8:	008b      	lsls	r3, r1, #2
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4623      	mov	r3, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	4631      	mov	r1, r6
 8007d02:	f7f8 ffd3 	bl	8000cac <__aeabi_uldivmod>
 8007d06:	4603      	mov	r3, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <UART_SetConfig+0x72c>)
 8007d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	2164      	movs	r1, #100	; 0x64
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	3332      	adds	r3, #50	; 0x32
 8007d20:	4a0b      	ldr	r2, [pc, #44]	; (8007d50 <UART_SetConfig+0x72c>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	f003 020f 	and.w	r2, r3, #15
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4442      	add	r2, r8
 8007d32:	609a      	str	r2, [r3, #8]
}
 8007d34:	e7ff      	b.n	8007d36 <UART_SetConfig+0x712>
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	40011000 	.word	0x40011000
 8007d44:	40011400 	.word	0x40011400
 8007d48:	40011800 	.word	0x40011800
 8007d4c:	40011c00 	.word	0x40011c00
 8007d50:	51eb851f 	.word	0x51eb851f

08007d54 <atoi>:
 8007d54:	220a      	movs	r2, #10
 8007d56:	2100      	movs	r1, #0
 8007d58:	f001 b920 	b.w	8008f9c <strtol>

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000000c 	.word	0x2000000c

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4e0d      	ldr	r6, [pc, #52]	; (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	; (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1ba4      	subs	r4, r4, r6
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2500      	movs	r5, #0
 8007d74:	42a5      	cmp	r5, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4e0b      	ldr	r6, [pc, #44]	; (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	; (8007dac <__libc_init_array+0x44>)
 8007d7c:	f004 f864 	bl	800be48 <_init>
 8007d80:	1ba4      	subs	r4, r4, r6
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2500      	movs	r5, #0
 8007d86:	42a5      	cmp	r5, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d90:	4798      	blx	r3
 8007d92:	3501      	adds	r5, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d9a:	4798      	blx	r3
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	0800c67c 	.word	0x0800c67c
 8007da4:	0800c67c 	.word	0x0800c67c
 8007da8:	0800c67c 	.word	0x0800c67c
 8007dac:	0800c680 	.word	0x0800c680

08007db0 <memcpy>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	1e43      	subs	r3, r0, #1
 8007db4:	440a      	add	r2, r1
 8007db6:	4291      	cmp	r1, r2
 8007db8:	d100      	bne.n	8007dbc <memcpy+0xc>
 8007dba:	bd10      	pop	{r4, pc}
 8007dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc4:	e7f7      	b.n	8007db6 <memcpy+0x6>

08007dc6 <memset>:
 8007dc6:	4402      	add	r2, r0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d100      	bne.n	8007dd0 <memset+0xa>
 8007dce:	4770      	bx	lr
 8007dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd4:	e7f9      	b.n	8007dca <memset+0x4>
	...

08007dd8 <validate_structure>:
 8007dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dda:	6801      	ldr	r1, [r0, #0]
 8007ddc:	293b      	cmp	r1, #59	; 0x3b
 8007dde:	4604      	mov	r4, r0
 8007de0:	d911      	bls.n	8007e06 <validate_structure+0x2e>
 8007de2:	223c      	movs	r2, #60	; 0x3c
 8007de4:	4668      	mov	r0, sp
 8007de6:	f001 fbdd 	bl	80095a4 <div>
 8007dea:	9a01      	ldr	r2, [sp, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	9900      	ldr	r1, [sp, #0]
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	440b      	add	r3, r1
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	bfbb      	ittet	lt
 8007df8:	323c      	addlt	r2, #60	; 0x3c
 8007dfa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007dfe:	6022      	strge	r2, [r4, #0]
 8007e00:	6022      	strlt	r2, [r4, #0]
 8007e02:	bfb8      	it	lt
 8007e04:	6063      	strlt	r3, [r4, #4]
 8007e06:	6861      	ldr	r1, [r4, #4]
 8007e08:	293b      	cmp	r1, #59	; 0x3b
 8007e0a:	d911      	bls.n	8007e30 <validate_structure+0x58>
 8007e0c:	223c      	movs	r2, #60	; 0x3c
 8007e0e:	4668      	mov	r0, sp
 8007e10:	f001 fbc8 	bl	80095a4 <div>
 8007e14:	9a01      	ldr	r2, [sp, #4]
 8007e16:	68a3      	ldr	r3, [r4, #8]
 8007e18:	9900      	ldr	r1, [sp, #0]
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	440b      	add	r3, r1
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	bfbb      	ittet	lt
 8007e22:	323c      	addlt	r2, #60	; 0x3c
 8007e24:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e28:	6062      	strge	r2, [r4, #4]
 8007e2a:	6062      	strlt	r2, [r4, #4]
 8007e2c:	bfb8      	it	lt
 8007e2e:	60a3      	strlt	r3, [r4, #8]
 8007e30:	68a1      	ldr	r1, [r4, #8]
 8007e32:	2917      	cmp	r1, #23
 8007e34:	d911      	bls.n	8007e5a <validate_structure+0x82>
 8007e36:	2218      	movs	r2, #24
 8007e38:	4668      	mov	r0, sp
 8007e3a:	f001 fbb3 	bl	80095a4 <div>
 8007e3e:	9a01      	ldr	r2, [sp, #4]
 8007e40:	68e3      	ldr	r3, [r4, #12]
 8007e42:	9900      	ldr	r1, [sp, #0]
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	440b      	add	r3, r1
 8007e48:	60e3      	str	r3, [r4, #12]
 8007e4a:	bfbb      	ittet	lt
 8007e4c:	3218      	addlt	r2, #24
 8007e4e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e52:	60a2      	strge	r2, [r4, #8]
 8007e54:	60a2      	strlt	r2, [r4, #8]
 8007e56:	bfb8      	it	lt
 8007e58:	60e3      	strlt	r3, [r4, #12]
 8007e5a:	6921      	ldr	r1, [r4, #16]
 8007e5c:	290b      	cmp	r1, #11
 8007e5e:	d911      	bls.n	8007e84 <validate_structure+0xac>
 8007e60:	220c      	movs	r2, #12
 8007e62:	4668      	mov	r0, sp
 8007e64:	f001 fb9e 	bl	80095a4 <div>
 8007e68:	9a01      	ldr	r2, [sp, #4]
 8007e6a:	6963      	ldr	r3, [r4, #20]
 8007e6c:	9900      	ldr	r1, [sp, #0]
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	440b      	add	r3, r1
 8007e72:	6163      	str	r3, [r4, #20]
 8007e74:	bfbb      	ittet	lt
 8007e76:	320c      	addlt	r2, #12
 8007e78:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e7c:	6122      	strge	r2, [r4, #16]
 8007e7e:	6122      	strlt	r2, [r4, #16]
 8007e80:	bfb8      	it	lt
 8007e82:	6163      	strlt	r3, [r4, #20]
 8007e84:	6963      	ldr	r3, [r4, #20]
 8007e86:	0799      	lsls	r1, r3, #30
 8007e88:	d120      	bne.n	8007ecc <validate_structure+0xf4>
 8007e8a:	2164      	movs	r1, #100	; 0x64
 8007e8c:	fb93 f2f1 	sdiv	r2, r3, r1
 8007e90:	fb01 3212 	mls	r2, r1, r2, r3
 8007e94:	b9e2      	cbnz	r2, 8007ed0 <validate_structure+0xf8>
 8007e96:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007e9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e9e:	fb93 f2f1 	sdiv	r2, r3, r1
 8007ea2:	fb01 3312 	mls	r3, r1, r2, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bf14      	ite	ne
 8007eaa:	231c      	movne	r3, #28
 8007eac:	231d      	moveq	r3, #29
 8007eae:	68e2      	ldr	r2, [r4, #12]
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	dc0f      	bgt.n	8007ed4 <validate_structure+0xfc>
 8007eb4:	4f34      	ldr	r7, [pc, #208]	; (8007f88 <validate_structure+0x1b0>)
 8007eb6:	260b      	movs	r6, #11
 8007eb8:	2064      	movs	r0, #100	; 0x64
 8007eba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007ebe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007ec2:	f1bc 0f00 	cmp.w	ip, #0
 8007ec6:	dd14      	ble.n	8007ef2 <validate_structure+0x11a>
 8007ec8:	b003      	add	sp, #12
 8007eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ecc:	231c      	movs	r3, #28
 8007ece:	e7ee      	b.n	8007eae <validate_structure+0xd6>
 8007ed0:	231d      	movs	r3, #29
 8007ed2:	e7ec      	b.n	8007eae <validate_structure+0xd6>
 8007ed4:	4f2c      	ldr	r7, [pc, #176]	; (8007f88 <validate_structure+0x1b0>)
 8007ed6:	f04f 0c00 	mov.w	ip, #0
 8007eda:	2564      	movs	r5, #100	; 0x64
 8007edc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8007ee0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007ee4:	2a01      	cmp	r2, #1
 8007ee6:	d02f      	beq.n	8007f48 <validate_structure+0x170>
 8007ee8:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007eec:	4281      	cmp	r1, r0
 8007eee:	dc2e      	bgt.n	8007f4e <validate_structure+0x176>
 8007ef0:	e7ea      	b.n	8007ec8 <validate_structure+0xf0>
 8007ef2:	6921      	ldr	r1, [r4, #16]
 8007ef4:	3901      	subs	r1, #1
 8007ef6:	6121      	str	r1, [r4, #16]
 8007ef8:	3101      	adds	r1, #1
 8007efa:	d114      	bne.n	8007f26 <validate_structure+0x14e>
 8007efc:	6963      	ldr	r3, [r4, #20]
 8007efe:	1e59      	subs	r1, r3, #1
 8007f00:	078a      	lsls	r2, r1, #30
 8007f02:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8007f06:	d117      	bne.n	8007f38 <validate_structure+0x160>
 8007f08:	fb91 f2f0 	sdiv	r2, r1, r0
 8007f0c:	fb00 1112 	mls	r1, r0, r2, r1
 8007f10:	b9a1      	cbnz	r1, 8007f3c <validate_structure+0x164>
 8007f12:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8007f16:	fb93 f2f5 	sdiv	r2, r3, r5
 8007f1a:	fb05 3312 	mls	r3, r5, r2, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bf14      	ite	ne
 8007f22:	231c      	movne	r3, #28
 8007f24:	231d      	moveq	r3, #29
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	2a01      	cmp	r2, #1
 8007f2a:	bf14      	ite	ne
 8007f2c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007f30:	461a      	moveq	r2, r3
 8007f32:	4462      	add	r2, ip
 8007f34:	60e2      	str	r2, [r4, #12]
 8007f36:	e7c2      	b.n	8007ebe <validate_structure+0xe6>
 8007f38:	231c      	movs	r3, #28
 8007f3a:	e7f4      	b.n	8007f26 <validate_structure+0x14e>
 8007f3c:	231d      	movs	r3, #29
 8007f3e:	e7f2      	b.n	8007f26 <validate_structure+0x14e>
 8007f40:	231c      	movs	r3, #28
 8007f42:	e7cd      	b.n	8007ee0 <validate_structure+0x108>
 8007f44:	231d      	movs	r3, #29
 8007f46:	e7cb      	b.n	8007ee0 <validate_structure+0x108>
 8007f48:	428b      	cmp	r3, r1
 8007f4a:	dabd      	bge.n	8007ec8 <validate_structure+0xf0>
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3201      	adds	r2, #1
 8007f50:	1a09      	subs	r1, r1, r0
 8007f52:	2a0c      	cmp	r2, #12
 8007f54:	60e1      	str	r1, [r4, #12]
 8007f56:	6122      	str	r2, [r4, #16]
 8007f58:	d1c2      	bne.n	8007ee0 <validate_structure+0x108>
 8007f5a:	6963      	ldr	r3, [r4, #20]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	0791      	lsls	r1, r2, #30
 8007f60:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8007f64:	d1ec      	bne.n	8007f40 <validate_structure+0x168>
 8007f66:	fb92 f1f5 	sdiv	r1, r2, r5
 8007f6a:	fb05 2211 	mls	r2, r5, r1, r2
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	d1e8      	bne.n	8007f44 <validate_structure+0x16c>
 8007f72:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8007f76:	fb93 f2f6 	sdiv	r2, r3, r6
 8007f7a:	fb06 3312 	mls	r3, r6, r2, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bf14      	ite	ne
 8007f82:	231c      	movne	r3, #28
 8007f84:	231d      	moveq	r3, #29
 8007f86:	e7ab      	b.n	8007ee0 <validate_structure+0x108>
 8007f88:	0800c2a0 	.word	0x0800c2a0

08007f8c <mktime>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b089      	sub	sp, #36	; 0x24
 8007f92:	4606      	mov	r6, r0
 8007f94:	f002 fb1e 	bl	800a5d4 <__gettzinfo>
 8007f98:	4680      	mov	r8, r0
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ff1c 	bl	8007dd8 <validate_structure>
 8007fa0:	e9d6 3000 	ldrd	r3, r0, [r6]
 8007fa4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8007fa8:	fb0a 3a00 	mla	sl, sl, r0, r3
 8007fac:	68b0      	ldr	r0, [r6, #8]
 8007fae:	4abe      	ldr	r2, [pc, #760]	; (80082a8 <mktime+0x31c>)
 8007fb0:	6975      	ldr	r5, [r6, #20]
 8007fb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007fb6:	fb03 aa00 	mla	sl, r3, r0, sl
 8007fba:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8007fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fc2:	3c01      	subs	r4, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8007fca:	4414      	add	r4, r2
 8007fcc:	dd11      	ble.n	8007ff2 <mktime+0x66>
 8007fce:	07a9      	lsls	r1, r5, #30
 8007fd0:	d10f      	bne.n	8007ff2 <mktime+0x66>
 8007fd2:	2264      	movs	r2, #100	; 0x64
 8007fd4:	fb95 f3f2 	sdiv	r3, r5, r2
 8007fd8:	fb02 5313 	mls	r3, r2, r3, r5
 8007fdc:	b943      	cbnz	r3, 8007ff0 <mktime+0x64>
 8007fde:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8007fe2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007fe6:	fb91 f3f2 	sdiv	r3, r1, r2
 8007fea:	fb02 1313 	mls	r3, r2, r3, r1
 8007fee:	b903      	cbnz	r3, 8007ff2 <mktime+0x66>
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	61f4      	str	r4, [r6, #28]
 8008000:	f200 8179 	bhi.w	80082f6 <mktime+0x36a>
 8008004:	2d46      	cmp	r5, #70	; 0x46
 8008006:	f340 8084 	ble.w	8008112 <mktime+0x186>
 800800a:	2346      	movs	r3, #70	; 0x46
 800800c:	f240 176d 	movw	r7, #365	; 0x16d
 8008010:	2164      	movs	r1, #100	; 0x64
 8008012:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008016:	079a      	lsls	r2, r3, #30
 8008018:	d175      	bne.n	8008106 <mktime+0x17a>
 800801a:	fb93 f2f1 	sdiv	r2, r3, r1
 800801e:	fb01 3212 	mls	r2, r1, r2, r3
 8008022:	2a00      	cmp	r2, #0
 8008024:	d172      	bne.n	800810c <mktime+0x180>
 8008026:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800802a:	fb9c f2f0 	sdiv	r2, ip, r0
 800802e:	fb00 c212 	mls	r2, r0, r2, ip
 8008032:	2a00      	cmp	r2, #0
 8008034:	bf14      	ite	ne
 8008036:	463a      	movne	r2, r7
 8008038:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800803c:	3301      	adds	r3, #1
 800803e:	429d      	cmp	r5, r3
 8008040:	4414      	add	r4, r2
 8008042:	d1e8      	bne.n	8008016 <mktime+0x8a>
 8008044:	4b99      	ldr	r3, [pc, #612]	; (80082ac <mktime+0x320>)
 8008046:	4363      	muls	r3, r4
 8008048:	eb1a 0103 	adds.w	r1, sl, r3
 800804c:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8008050:	e9cd 1200 	strd	r1, r2, [sp]
 8008054:	f001 f860 	bl	8009118 <__tz_lock>
 8008058:	f001 f860 	bl	800911c <_tzset_unlocked>
 800805c:	4b94      	ldr	r3, [pc, #592]	; (80082b0 <mktime+0x324>)
 800805e:	f8d3 9000 	ldr.w	r9, [r3]
 8008062:	f1b9 0f00 	cmp.w	r9, #0
 8008066:	d045      	beq.n	80080f4 <mktime+0x168>
 8008068:	f8d6 9020 	ldr.w	r9, [r6, #32]
 800806c:	6970      	ldr	r0, [r6, #20]
 800806e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008072:	464f      	mov	r7, r9
 8008074:	2f01      	cmp	r7, #1
 8008076:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800807a:	bfa8      	it	ge
 800807c:	2701      	movge	r7, #1
 800807e:	4283      	cmp	r3, r0
 8008080:	f040 8089 	bne.w	8008196 <mktime+0x20a>
 8008084:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8008088:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800808c:	460a      	mov	r2, r1
 800808e:	17cb      	asrs	r3, r1, #31
 8008090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008094:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8008098:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800809c:	1a12      	subs	r2, r2, r0
 800809e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 80080a2:	4692      	mov	sl, r2
 80080a4:	469b      	mov	fp, r3
 80080a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080aa:	4552      	cmp	r2, sl
 80080ac:	eb73 0c0b 	sbcs.w	ip, r3, fp
 80080b0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80080b4:	da76      	bge.n	80081a4 <mktime+0x218>
 80080b6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80080ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80080be:	ebb2 0a0a 	subs.w	sl, r2, sl
 80080c2:	eb63 0b0b 	sbc.w	fp, r3, fp
 80080c6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d079      	beq.n	80081c2 <mktime+0x236>
 80080ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d2:	4552      	cmp	r2, sl
 80080d4:	eb73 030b 	sbcs.w	r3, r3, fp
 80080d8:	db07      	blt.n	80080ea <mktime+0x15e>
 80080da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080de:	e9dd ab00 	ldrd	sl, fp, [sp]
 80080e2:	4592      	cmp	sl, r2
 80080e4:	eb7b 0303 	sbcs.w	r3, fp, r3
 80080e8:	db71      	blt.n	80081ce <mktime+0x242>
 80080ea:	f1b9 0f00 	cmp.w	r9, #0
 80080ee:	f04f 0900 	mov.w	r9, #0
 80080f2:	da71      	bge.n	80081d8 <mktime+0x24c>
 80080f4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80080f8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80080fc:	eb1a 0a03 	adds.w	sl, sl, r3
 8008100:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8008104:	e0b4      	b.n	8008270 <mktime+0x2e4>
 8008106:	f240 126d 	movw	r2, #365	; 0x16d
 800810a:	e797      	b.n	800803c <mktime+0xb0>
 800810c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008110:	e794      	b.n	800803c <mktime+0xb0>
 8008112:	d097      	beq.n	8008044 <mktime+0xb8>
 8008114:	2345      	movs	r3, #69	; 0x45
 8008116:	f240 176d 	movw	r7, #365	; 0x16d
 800811a:	2164      	movs	r1, #100	; 0x64
 800811c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008120:	e012      	b.n	8008148 <mktime+0x1bc>
 8008122:	bb62      	cbnz	r2, 800817e <mktime+0x1f2>
 8008124:	fb93 f2f1 	sdiv	r2, r3, r1
 8008128:	fb01 3212 	mls	r2, r1, r2, r3
 800812c:	bb52      	cbnz	r2, 8008184 <mktime+0x1f8>
 800812e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8008132:	fb9c f2f0 	sdiv	r2, ip, r0
 8008136:	fb00 c212 	mls	r2, r0, r2, ip
 800813a:	2a00      	cmp	r2, #0
 800813c:	bf14      	ite	ne
 800813e:	463a      	movne	r2, r7
 8008140:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008144:	1aa4      	subs	r4, r4, r2
 8008146:	3b01      	subs	r3, #1
 8008148:	429d      	cmp	r5, r3
 800814a:	f003 0203 	and.w	r2, r3, #3
 800814e:	dbe8      	blt.n	8008122 <mktime+0x196>
 8008150:	b9da      	cbnz	r2, 800818a <mktime+0x1fe>
 8008152:	2264      	movs	r2, #100	; 0x64
 8008154:	fb95 f3f2 	sdiv	r3, r5, r2
 8008158:	fb02 5313 	mls	r3, r2, r3, r5
 800815c:	b9c3      	cbnz	r3, 8008190 <mktime+0x204>
 800815e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8008162:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008166:	fb91 f3f2 	sdiv	r3, r1, r2
 800816a:	fb02 1313 	mls	r3, r2, r3, r1
 800816e:	2b00      	cmp	r3, #0
 8008170:	f240 136d 	movw	r3, #365	; 0x16d
 8008174:	bf08      	it	eq
 8008176:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800817a:	1ae4      	subs	r4, r4, r3
 800817c:	e762      	b.n	8008044 <mktime+0xb8>
 800817e:	f240 126d 	movw	r2, #365	; 0x16d
 8008182:	e7df      	b.n	8008144 <mktime+0x1b8>
 8008184:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008188:	e7dc      	b.n	8008144 <mktime+0x1b8>
 800818a:	f240 136d 	movw	r3, #365	; 0x16d
 800818e:	e7f4      	b.n	800817a <mktime+0x1ee>
 8008190:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008194:	e7f1      	b.n	800817a <mktime+0x1ee>
 8008196:	f000 ff17 	bl	8008fc8 <__tzcalc_limits>
 800819a:	2800      	cmp	r0, #0
 800819c:	f47f af72 	bne.w	8008084 <mktime+0xf8>
 80081a0:	46b9      	mov	r9, r7
 80081a2:	e057      	b.n	8008254 <mktime+0x2c8>
 80081a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ac:	ebb2 020a 	subs.w	r2, r2, sl
 80081b0:	eb63 030b 	sbc.w	r3, r3, fp
 80081b4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80081b8:	4592      	cmp	sl, r2
 80081ba:	eb7b 0303 	sbcs.w	r3, fp, r3
 80081be:	dbef      	blt.n	80081a0 <mktime+0x214>
 80081c0:	e779      	b.n	80080b6 <mktime+0x12a>
 80081c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c6:	4552      	cmp	r2, sl
 80081c8:	eb73 030b 	sbcs.w	r3, r3, fp
 80081cc:	db85      	blt.n	80080da <mktime+0x14e>
 80081ce:	f1b9 0f00 	cmp.w	r9, #0
 80081d2:	db43      	blt.n	800825c <mktime+0x2d0>
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	ea87 0709 	eor.w	r7, r7, r9
 80081dc:	2f01      	cmp	r7, #1
 80081de:	d139      	bne.n	8008254 <mktime+0x2c8>
 80081e0:	1a40      	subs	r0, r0, r1
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	d100      	bne.n	80081ea <mktime+0x25e>
 80081e8:	4240      	negs	r0, r0
 80081ea:	6833      	ldr	r3, [r6, #0]
 80081ec:	4403      	add	r3, r0
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f4:	1812      	adds	r2, r2, r0
 80081f6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80081fa:	e9cd 2300 	strd	r2, r3, [sp]
 80081fe:	4630      	mov	r0, r6
 8008200:	68f2      	ldr	r2, [r6, #12]
 8008202:	9202      	str	r2, [sp, #8]
 8008204:	f7ff fde8 	bl	8007dd8 <validate_structure>
 8008208:	68f3      	ldr	r3, [r6, #12]
 800820a:	9a02      	ldr	r2, [sp, #8]
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	d021      	beq.n	8008254 <mktime+0x2c8>
 8008210:	2b01      	cmp	r3, #1
 8008212:	dc40      	bgt.n	8008296 <mktime+0x30a>
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	bfa8      	it	ge
 800821a:	461f      	movge	r7, r3
 800821c:	69f3      	ldr	r3, [r6, #28]
 800821e:	443c      	add	r4, r7
 8008220:	18ff      	adds	r7, r7, r3
 8008222:	d547      	bpl.n	80082b4 <mktime+0x328>
 8008224:	1e6a      	subs	r2, r5, #1
 8008226:	0791      	lsls	r1, r2, #30
 8008228:	d138      	bne.n	800829c <mktime+0x310>
 800822a:	2164      	movs	r1, #100	; 0x64
 800822c:	fb92 f3f1 	sdiv	r3, r2, r1
 8008230:	fb01 2313 	mls	r3, r1, r3, r2
 8008234:	bbab      	cbnz	r3, 80082a2 <mktime+0x316>
 8008236:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800823a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800823e:	fb95 f3f2 	sdiv	r3, r5, r2
 8008242:	fb02 5513 	mls	r5, r2, r3, r5
 8008246:	2d00      	cmp	r5, #0
 8008248:	f240 136d 	movw	r3, #365	; 0x16d
 800824c:	bf18      	it	ne
 800824e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8008252:	61f3      	str	r3, [r6, #28]
 8008254:	f1b9 0f01 	cmp.w	r9, #1
 8008258:	f47f af4c 	bne.w	80080f4 <mktime+0x168>
 800825c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8008260:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8008264:	eb1a 0a03 	adds.w	sl, sl, r3
 8008268:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800826c:	f04f 0901 	mov.w	r9, #1
 8008270:	f000 ff53 	bl	800911a <__tz_unlock>
 8008274:	3404      	adds	r4, #4
 8008276:	2307      	movs	r3, #7
 8008278:	fb94 f3f3 	sdiv	r3, r4, r3
 800827c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bf48      	it	mi
 8008284:	3407      	addmi	r4, #7
 8008286:	f8c6 9020 	str.w	r9, [r6, #32]
 800828a:	61b4      	str	r4, [r6, #24]
 800828c:	4650      	mov	r0, sl
 800828e:	4659      	mov	r1, fp
 8008290:	b009      	add	sp, #36	; 0x24
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	f04f 37ff 	mov.w	r7, #4294967295
 800829a:	e7bf      	b.n	800821c <mktime+0x290>
 800829c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80082a0:	e7d7      	b.n	8008252 <mktime+0x2c6>
 80082a2:	f240 136d 	movw	r3, #365	; 0x16d
 80082a6:	e7d4      	b.n	8008252 <mktime+0x2c6>
 80082a8:	0800c2d0 	.word	0x0800c2d0
 80082ac:	00015180 	.word	0x00015180
 80082b0:	20007d34 	.word	0x20007d34
 80082b4:	07ab      	lsls	r3, r5, #30
 80082b6:	d118      	bne.n	80082ea <mktime+0x35e>
 80082b8:	2264      	movs	r2, #100	; 0x64
 80082ba:	fb95 f3f2 	sdiv	r3, r5, r2
 80082be:	fb02 5313 	mls	r3, r2, r3, r5
 80082c2:	b9ab      	cbnz	r3, 80082f0 <mktime+0x364>
 80082c4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80082c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80082cc:	fb95 f3f2 	sdiv	r3, r5, r2
 80082d0:	fb02 5513 	mls	r5, r2, r3, r5
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	f240 136d 	movw	r3, #365	; 0x16d
 80082da:	bf08      	it	eq
 80082dc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80082e0:	429f      	cmp	r7, r3
 80082e2:	bfa8      	it	ge
 80082e4:	1aff      	subge	r7, r7, r3
 80082e6:	61f7      	str	r7, [r6, #28]
 80082e8:	e7b4      	b.n	8008254 <mktime+0x2c8>
 80082ea:	f240 136d 	movw	r3, #365	; 0x16d
 80082ee:	e7f7      	b.n	80082e0 <mktime+0x354>
 80082f0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80082f4:	e7f4      	b.n	80082e0 <mktime+0x354>
 80082f6:	f04f 3aff 	mov.w	sl, #4294967295
 80082fa:	f04f 3bff 	mov.w	fp, #4294967295
 80082fe:	e7c5      	b.n	800828c <mktime+0x300>

08008300 <__cvt>:
 8008300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	ec55 4b10 	vmov	r4, r5, d0
 8008308:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800830a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800830e:	2d00      	cmp	r5, #0
 8008310:	460e      	mov	r6, r1
 8008312:	4691      	mov	r9, r2
 8008314:	4619      	mov	r1, r3
 8008316:	bfb8      	it	lt
 8008318:	4622      	movlt	r2, r4
 800831a:	462b      	mov	r3, r5
 800831c:	f027 0720 	bic.w	r7, r7, #32
 8008320:	bfbb      	ittet	lt
 8008322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008326:	461d      	movlt	r5, r3
 8008328:	2300      	movge	r3, #0
 800832a:	232d      	movlt	r3, #45	; 0x2d
 800832c:	bfb8      	it	lt
 800832e:	4614      	movlt	r4, r2
 8008330:	2f46      	cmp	r7, #70	; 0x46
 8008332:	700b      	strb	r3, [r1, #0]
 8008334:	d004      	beq.n	8008340 <__cvt+0x40>
 8008336:	2f45      	cmp	r7, #69	; 0x45
 8008338:	d100      	bne.n	800833c <__cvt+0x3c>
 800833a:	3601      	adds	r6, #1
 800833c:	2102      	movs	r1, #2
 800833e:	e000      	b.n	8008342 <__cvt+0x42>
 8008340:	2103      	movs	r1, #3
 8008342:	ab03      	add	r3, sp, #12
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	ab02      	add	r3, sp, #8
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4632      	mov	r2, r6
 800834c:	4653      	mov	r3, sl
 800834e:	ec45 4b10 	vmov	d0, r4, r5
 8008352:	f001 f9c9 	bl	80096e8 <_dtoa_r>
 8008356:	2f47      	cmp	r7, #71	; 0x47
 8008358:	4680      	mov	r8, r0
 800835a:	d102      	bne.n	8008362 <__cvt+0x62>
 800835c:	f019 0f01 	tst.w	r9, #1
 8008360:	d026      	beq.n	80083b0 <__cvt+0xb0>
 8008362:	2f46      	cmp	r7, #70	; 0x46
 8008364:	eb08 0906 	add.w	r9, r8, r6
 8008368:	d111      	bne.n	800838e <__cvt+0x8e>
 800836a:	f898 3000 	ldrb.w	r3, [r8]
 800836e:	2b30      	cmp	r3, #48	; 0x30
 8008370:	d10a      	bne.n	8008388 <__cvt+0x88>
 8008372:	2200      	movs	r2, #0
 8008374:	2300      	movs	r3, #0
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f8 fbd7 	bl	8000b2c <__aeabi_dcmpeq>
 800837e:	b918      	cbnz	r0, 8008388 <__cvt+0x88>
 8008380:	f1c6 0601 	rsb	r6, r6, #1
 8008384:	f8ca 6000 	str.w	r6, [sl]
 8008388:	f8da 3000 	ldr.w	r3, [sl]
 800838c:	4499      	add	r9, r3
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 fbc9 	bl	8000b2c <__aeabi_dcmpeq>
 800839a:	b938      	cbnz	r0, 80083ac <__cvt+0xac>
 800839c:	2230      	movs	r2, #48	; 0x30
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	454b      	cmp	r3, r9
 80083a2:	d205      	bcs.n	80083b0 <__cvt+0xb0>
 80083a4:	1c59      	adds	r1, r3, #1
 80083a6:	9103      	str	r1, [sp, #12]
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e7f8      	b.n	800839e <__cvt+0x9e>
 80083ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083b4:	eba3 0308 	sub.w	r3, r3, r8
 80083b8:	4640      	mov	r0, r8
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	b004      	add	sp, #16
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080083c2 <__exponent>:
 80083c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083c4:	2900      	cmp	r1, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	bfba      	itte	lt
 80083ca:	4249      	neglt	r1, r1
 80083cc:	232d      	movlt	r3, #45	; 0x2d
 80083ce:	232b      	movge	r3, #43	; 0x2b
 80083d0:	2909      	cmp	r1, #9
 80083d2:	f804 2b02 	strb.w	r2, [r4], #2
 80083d6:	7043      	strb	r3, [r0, #1]
 80083d8:	dd20      	ble.n	800841c <__exponent+0x5a>
 80083da:	f10d 0307 	add.w	r3, sp, #7
 80083de:	461f      	mov	r7, r3
 80083e0:	260a      	movs	r6, #10
 80083e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80083e6:	fb06 1115 	mls	r1, r6, r5, r1
 80083ea:	3130      	adds	r1, #48	; 0x30
 80083ec:	2d09      	cmp	r5, #9
 80083ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80083f6:	4629      	mov	r1, r5
 80083f8:	dc09      	bgt.n	800840e <__exponent+0x4c>
 80083fa:	3130      	adds	r1, #48	; 0x30
 80083fc:	3b02      	subs	r3, #2
 80083fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008402:	42bb      	cmp	r3, r7
 8008404:	4622      	mov	r2, r4
 8008406:	d304      	bcc.n	8008412 <__exponent+0x50>
 8008408:	1a10      	subs	r0, r2, r0
 800840a:	b003      	add	sp, #12
 800840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840e:	4613      	mov	r3, r2
 8008410:	e7e7      	b.n	80083e2 <__exponent+0x20>
 8008412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008416:	f804 2b01 	strb.w	r2, [r4], #1
 800841a:	e7f2      	b.n	8008402 <__exponent+0x40>
 800841c:	2330      	movs	r3, #48	; 0x30
 800841e:	4419      	add	r1, r3
 8008420:	7083      	strb	r3, [r0, #2]
 8008422:	1d02      	adds	r2, r0, #4
 8008424:	70c1      	strb	r1, [r0, #3]
 8008426:	e7ef      	b.n	8008408 <__exponent+0x46>

08008428 <_printf_float>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b08d      	sub	sp, #52	; 0x34
 800842e:	460c      	mov	r4, r1
 8008430:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008434:	4616      	mov	r6, r2
 8008436:	461f      	mov	r7, r3
 8008438:	4605      	mov	r5, r0
 800843a:	f002 f8e1 	bl	800a600 <_localeconv_r>
 800843e:	6803      	ldr	r3, [r0, #0]
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	4618      	mov	r0, r3
 8008444:	f7f7 feec 	bl	8000220 <strlen>
 8008448:	2300      	movs	r3, #0
 800844a:	930a      	str	r3, [sp, #40]	; 0x28
 800844c:	f8d8 3000 	ldr.w	r3, [r8]
 8008450:	9005      	str	r0, [sp, #20]
 8008452:	3307      	adds	r3, #7
 8008454:	f023 0307 	bic.w	r3, r3, #7
 8008458:	f103 0208 	add.w	r2, r3, #8
 800845c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008460:	f8d4 b000 	ldr.w	fp, [r4]
 8008464:	f8c8 2000 	str.w	r2, [r8]
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008470:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008474:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	f8cd 8018 	str.w	r8, [sp, #24]
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	4ba7      	ldr	r3, [pc, #668]	; (8008720 <_printf_float+0x2f8>)
 8008484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008488:	f7f8 fb82 	bl	8000b90 <__aeabi_dcmpun>
 800848c:	bb70      	cbnz	r0, 80084ec <_printf_float+0xc4>
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	4ba3      	ldr	r3, [pc, #652]	; (8008720 <_printf_float+0x2f8>)
 8008494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008498:	f7f8 fb5c 	bl	8000b54 <__aeabi_dcmple>
 800849c:	bb30      	cbnz	r0, 80084ec <_printf_float+0xc4>
 800849e:	2200      	movs	r2, #0
 80084a0:	2300      	movs	r3, #0
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f8 fb4b 	bl	8000b40 <__aeabi_dcmplt>
 80084aa:	b110      	cbz	r0, 80084b2 <_printf_float+0x8a>
 80084ac:	232d      	movs	r3, #45	; 0x2d
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	4a9c      	ldr	r2, [pc, #624]	; (8008724 <_printf_float+0x2fc>)
 80084b4:	4b9c      	ldr	r3, [pc, #624]	; (8008728 <_printf_float+0x300>)
 80084b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80084ba:	bf8c      	ite	hi
 80084bc:	4690      	movhi	r8, r2
 80084be:	4698      	movls	r8, r3
 80084c0:	2303      	movs	r3, #3
 80084c2:	f02b 0204 	bic.w	r2, fp, #4
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	f04f 0900 	mov.w	r9, #0
 80084ce:	9700      	str	r7, [sp, #0]
 80084d0:	4633      	mov	r3, r6
 80084d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f9e6 	bl	80088a8 <_printf_common>
 80084dc:	3001      	adds	r0, #1
 80084de:	f040 808d 	bne.w	80085fc <_printf_float+0x1d4>
 80084e2:	f04f 30ff 	mov.w	r0, #4294967295
 80084e6:	b00d      	add	sp, #52	; 0x34
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	4640      	mov	r0, r8
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f8 fb4c 	bl	8000b90 <__aeabi_dcmpun>
 80084f8:	b110      	cbz	r0, 8008500 <_printf_float+0xd8>
 80084fa:	4a8c      	ldr	r2, [pc, #560]	; (800872c <_printf_float+0x304>)
 80084fc:	4b8c      	ldr	r3, [pc, #560]	; (8008730 <_printf_float+0x308>)
 80084fe:	e7da      	b.n	80084b6 <_printf_float+0x8e>
 8008500:	6861      	ldr	r1, [r4, #4]
 8008502:	1c4b      	adds	r3, r1, #1
 8008504:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008508:	a80a      	add	r0, sp, #40	; 0x28
 800850a:	d13e      	bne.n	800858a <_printf_float+0x162>
 800850c:	2306      	movs	r3, #6
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	2300      	movs	r3, #0
 8008512:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008516:	ab09      	add	r3, sp, #36	; 0x24
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	ec49 8b10 	vmov	d0, r8, r9
 800851e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008522:	6022      	str	r2, [r4, #0]
 8008524:	f8cd a004 	str.w	sl, [sp, #4]
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	4628      	mov	r0, r5
 800852c:	f7ff fee8 	bl	8008300 <__cvt>
 8008530:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008534:	2b47      	cmp	r3, #71	; 0x47
 8008536:	4680      	mov	r8, r0
 8008538:	d109      	bne.n	800854e <_printf_float+0x126>
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	1cd8      	adds	r0, r3, #3
 800853e:	db02      	blt.n	8008546 <_printf_float+0x11e>
 8008540:	6862      	ldr	r2, [r4, #4]
 8008542:	4293      	cmp	r3, r2
 8008544:	dd47      	ble.n	80085d6 <_printf_float+0x1ae>
 8008546:	f1aa 0a02 	sub.w	sl, sl, #2
 800854a:	fa5f fa8a 	uxtb.w	sl, sl
 800854e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008554:	d824      	bhi.n	80085a0 <_printf_float+0x178>
 8008556:	3901      	subs	r1, #1
 8008558:	4652      	mov	r2, sl
 800855a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800855e:	9109      	str	r1, [sp, #36]	; 0x24
 8008560:	f7ff ff2f 	bl	80083c2 <__exponent>
 8008564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008566:	1813      	adds	r3, r2, r0
 8008568:	2a01      	cmp	r2, #1
 800856a:	4681      	mov	r9, r0
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	dc02      	bgt.n	8008576 <_printf_float+0x14e>
 8008570:	6822      	ldr	r2, [r4, #0]
 8008572:	07d1      	lsls	r1, r2, #31
 8008574:	d501      	bpl.n	800857a <_printf_float+0x152>
 8008576:	3301      	adds	r3, #1
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0a5      	beq.n	80084ce <_printf_float+0xa6>
 8008582:	232d      	movs	r3, #45	; 0x2d
 8008584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008588:	e7a1      	b.n	80084ce <_printf_float+0xa6>
 800858a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800858e:	f000 8177 	beq.w	8008880 <_printf_float+0x458>
 8008592:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008596:	d1bb      	bne.n	8008510 <_printf_float+0xe8>
 8008598:	2900      	cmp	r1, #0
 800859a:	d1b9      	bne.n	8008510 <_printf_float+0xe8>
 800859c:	2301      	movs	r3, #1
 800859e:	e7b6      	b.n	800850e <_printf_float+0xe6>
 80085a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80085a4:	d119      	bne.n	80085da <_printf_float+0x1b2>
 80085a6:	2900      	cmp	r1, #0
 80085a8:	6863      	ldr	r3, [r4, #4]
 80085aa:	dd0c      	ble.n	80085c6 <_printf_float+0x19e>
 80085ac:	6121      	str	r1, [r4, #16]
 80085ae:	b913      	cbnz	r3, 80085b6 <_printf_float+0x18e>
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	07d2      	lsls	r2, r2, #31
 80085b4:	d502      	bpl.n	80085bc <_printf_float+0x194>
 80085b6:	3301      	adds	r3, #1
 80085b8:	440b      	add	r3, r1
 80085ba:	6123      	str	r3, [r4, #16]
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	65a3      	str	r3, [r4, #88]	; 0x58
 80085c0:	f04f 0900 	mov.w	r9, #0
 80085c4:	e7d9      	b.n	800857a <_printf_float+0x152>
 80085c6:	b913      	cbnz	r3, 80085ce <_printf_float+0x1a6>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	07d0      	lsls	r0, r2, #31
 80085cc:	d501      	bpl.n	80085d2 <_printf_float+0x1aa>
 80085ce:	3302      	adds	r3, #2
 80085d0:	e7f3      	b.n	80085ba <_printf_float+0x192>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7f1      	b.n	80085ba <_printf_float+0x192>
 80085d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80085da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085de:	4293      	cmp	r3, r2
 80085e0:	db05      	blt.n	80085ee <_printf_float+0x1c6>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	07d1      	lsls	r1, r2, #31
 80085e8:	d5e8      	bpl.n	80085bc <_printf_float+0x194>
 80085ea:	3301      	adds	r3, #1
 80085ec:	e7e5      	b.n	80085ba <_printf_float+0x192>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfd4      	ite	le
 80085f2:	f1c3 0302 	rsble	r3, r3, #2
 80085f6:	2301      	movgt	r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	e7de      	b.n	80085ba <_printf_float+0x192>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	055a      	lsls	r2, r3, #21
 8008600:	d407      	bmi.n	8008612 <_printf_float+0x1ea>
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	4642      	mov	r2, r8
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	d12b      	bne.n	8008668 <_printf_float+0x240>
 8008610:	e767      	b.n	80084e2 <_printf_float+0xba>
 8008612:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008616:	f240 80dc 	bls.w	80087d2 <_printf_float+0x3aa>
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008622:	f7f8 fa83 	bl	8000b2c <__aeabi_dcmpeq>
 8008626:	2800      	cmp	r0, #0
 8008628:	d033      	beq.n	8008692 <_printf_float+0x26a>
 800862a:	2301      	movs	r3, #1
 800862c:	4a41      	ldr	r2, [pc, #260]	; (8008734 <_printf_float+0x30c>)
 800862e:	4631      	mov	r1, r6
 8008630:	4628      	mov	r0, r5
 8008632:	47b8      	blx	r7
 8008634:	3001      	adds	r0, #1
 8008636:	f43f af54 	beq.w	80084e2 <_printf_float+0xba>
 800863a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800863e:	429a      	cmp	r2, r3
 8008640:	db02      	blt.n	8008648 <_printf_float+0x220>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	07d8      	lsls	r0, r3, #31
 8008646:	d50f      	bpl.n	8008668 <_printf_float+0x240>
 8008648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800864c:	4631      	mov	r1, r6
 800864e:	4628      	mov	r0, r5
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	f43f af45 	beq.w	80084e2 <_printf_float+0xba>
 8008658:	f04f 0800 	mov.w	r8, #0
 800865c:	f104 091a 	add.w	r9, r4, #26
 8008660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008662:	3b01      	subs	r3, #1
 8008664:	4543      	cmp	r3, r8
 8008666:	dc09      	bgt.n	800867c <_printf_float+0x254>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	079b      	lsls	r3, r3, #30
 800866c:	f100 8103 	bmi.w	8008876 <_printf_float+0x44e>
 8008670:	68e0      	ldr	r0, [r4, #12]
 8008672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008674:	4298      	cmp	r0, r3
 8008676:	bfb8      	it	lt
 8008678:	4618      	movlt	r0, r3
 800867a:	e734      	b.n	80084e6 <_printf_float+0xbe>
 800867c:	2301      	movs	r3, #1
 800867e:	464a      	mov	r2, r9
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f af2b 	beq.w	80084e2 <_printf_float+0xba>
 800868c:	f108 0801 	add.w	r8, r8, #1
 8008690:	e7e6      	b.n	8008660 <_printf_float+0x238>
 8008692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	dc2b      	bgt.n	80086f0 <_printf_float+0x2c8>
 8008698:	2301      	movs	r3, #1
 800869a:	4a26      	ldr	r2, [pc, #152]	; (8008734 <_printf_float+0x30c>)
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f af1d 	beq.w	80084e2 <_printf_float+0xba>
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	b923      	cbnz	r3, 80086b6 <_printf_float+0x28e>
 80086ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ae:	b913      	cbnz	r3, 80086b6 <_printf_float+0x28e>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	07d9      	lsls	r1, r3, #31
 80086b4:	d5d8      	bpl.n	8008668 <_printf_float+0x240>
 80086b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	f43f af0e 	beq.w	80084e2 <_printf_float+0xba>
 80086c6:	f04f 0900 	mov.w	r9, #0
 80086ca:	f104 0a1a 	add.w	sl, r4, #26
 80086ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d0:	425b      	negs	r3, r3
 80086d2:	454b      	cmp	r3, r9
 80086d4:	dc01      	bgt.n	80086da <_printf_float+0x2b2>
 80086d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d8:	e794      	b.n	8008604 <_printf_float+0x1dc>
 80086da:	2301      	movs	r3, #1
 80086dc:	4652      	mov	r2, sl
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f aefc 	beq.w	80084e2 <_printf_float+0xba>
 80086ea:	f109 0901 	add.w	r9, r9, #1
 80086ee:	e7ee      	b.n	80086ce <_printf_float+0x2a6>
 80086f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086f4:	429a      	cmp	r2, r3
 80086f6:	bfa8      	it	ge
 80086f8:	461a      	movge	r2, r3
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	4691      	mov	r9, r2
 80086fe:	dd07      	ble.n	8008710 <_printf_float+0x2e8>
 8008700:	4613      	mov	r3, r2
 8008702:	4631      	mov	r1, r6
 8008704:	4642      	mov	r2, r8
 8008706:	4628      	mov	r0, r5
 8008708:	47b8      	blx	r7
 800870a:	3001      	adds	r0, #1
 800870c:	f43f aee9 	beq.w	80084e2 <_printf_float+0xba>
 8008710:	f104 031a 	add.w	r3, r4, #26
 8008714:	f04f 0b00 	mov.w	fp, #0
 8008718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	e015      	b.n	800874c <_printf_float+0x324>
 8008720:	7fefffff 	.word	0x7fefffff
 8008724:	0800c304 	.word	0x0800c304
 8008728:	0800c300 	.word	0x0800c300
 800872c:	0800c30c 	.word	0x0800c30c
 8008730:	0800c308 	.word	0x0800c308
 8008734:	0800c66c 	.word	0x0800c66c
 8008738:	2301      	movs	r3, #1
 800873a:	9a06      	ldr	r2, [sp, #24]
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	f43f aecd 	beq.w	80084e2 <_printf_float+0xba>
 8008748:	f10b 0b01 	add.w	fp, fp, #1
 800874c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008750:	ebaa 0309 	sub.w	r3, sl, r9
 8008754:	455b      	cmp	r3, fp
 8008756:	dcef      	bgt.n	8008738 <_printf_float+0x310>
 8008758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800875c:	429a      	cmp	r2, r3
 800875e:	44d0      	add	r8, sl
 8008760:	db15      	blt.n	800878e <_printf_float+0x366>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	07da      	lsls	r2, r3, #31
 8008766:	d412      	bmi.n	800878e <_printf_float+0x366>
 8008768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800876c:	eba3 020a 	sub.w	r2, r3, sl
 8008770:	eba3 0a01 	sub.w	sl, r3, r1
 8008774:	4592      	cmp	sl, r2
 8008776:	bfa8      	it	ge
 8008778:	4692      	movge	sl, r2
 800877a:	f1ba 0f00 	cmp.w	sl, #0
 800877e:	dc0e      	bgt.n	800879e <_printf_float+0x376>
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008788:	f104 091a 	add.w	r9, r4, #26
 800878c:	e019      	b.n	80087c2 <_printf_float+0x39a>
 800878e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008792:	4631      	mov	r1, r6
 8008794:	4628      	mov	r0, r5
 8008796:	47b8      	blx	r7
 8008798:	3001      	adds	r0, #1
 800879a:	d1e5      	bne.n	8008768 <_printf_float+0x340>
 800879c:	e6a1      	b.n	80084e2 <_printf_float+0xba>
 800879e:	4653      	mov	r3, sl
 80087a0:	4642      	mov	r2, r8
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	d1e9      	bne.n	8008780 <_printf_float+0x358>
 80087ac:	e699      	b.n	80084e2 <_printf_float+0xba>
 80087ae:	2301      	movs	r3, #1
 80087b0:	464a      	mov	r2, r9
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f ae92 	beq.w	80084e2 <_printf_float+0xba>
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	eba3 030a 	sub.w	r3, r3, sl
 80087cc:	4543      	cmp	r3, r8
 80087ce:	dcee      	bgt.n	80087ae <_printf_float+0x386>
 80087d0:	e74a      	b.n	8008668 <_printf_float+0x240>
 80087d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087d4:	2a01      	cmp	r2, #1
 80087d6:	dc01      	bgt.n	80087dc <_printf_float+0x3b4>
 80087d8:	07db      	lsls	r3, r3, #31
 80087da:	d53a      	bpl.n	8008852 <_printf_float+0x42a>
 80087dc:	2301      	movs	r3, #1
 80087de:	4642      	mov	r2, r8
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f ae7b 	beq.w	80084e2 <_printf_float+0xba>
 80087ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f108 0801 	add.w	r8, r8, #1
 80087fc:	f43f ae71 	beq.w	80084e2 <_printf_float+0xba>
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	2200      	movs	r2, #0
 8008804:	f103 3aff 	add.w	sl, r3, #4294967295
 8008808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800880c:	2300      	movs	r3, #0
 800880e:	f7f8 f98d 	bl	8000b2c <__aeabi_dcmpeq>
 8008812:	b9c8      	cbnz	r0, 8008848 <_printf_float+0x420>
 8008814:	4653      	mov	r3, sl
 8008816:	4642      	mov	r2, r8
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	d10e      	bne.n	8008840 <_printf_float+0x418>
 8008822:	e65e      	b.n	80084e2 <_printf_float+0xba>
 8008824:	2301      	movs	r3, #1
 8008826:	4652      	mov	r2, sl
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f ae57 	beq.w	80084e2 <_printf_float+0xba>
 8008834:	f108 0801 	add.w	r8, r8, #1
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	3b01      	subs	r3, #1
 800883c:	4543      	cmp	r3, r8
 800883e:	dcf1      	bgt.n	8008824 <_printf_float+0x3fc>
 8008840:	464b      	mov	r3, r9
 8008842:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008846:	e6de      	b.n	8008606 <_printf_float+0x1de>
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	f104 0a1a 	add.w	sl, r4, #26
 8008850:	e7f2      	b.n	8008838 <_printf_float+0x410>
 8008852:	2301      	movs	r3, #1
 8008854:	e7df      	b.n	8008816 <_printf_float+0x3ee>
 8008856:	2301      	movs	r3, #1
 8008858:	464a      	mov	r2, r9
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	47b8      	blx	r7
 8008860:	3001      	adds	r0, #1
 8008862:	f43f ae3e 	beq.w	80084e2 <_printf_float+0xba>
 8008866:	f108 0801 	add.w	r8, r8, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800886e:	1a9b      	subs	r3, r3, r2
 8008870:	4543      	cmp	r3, r8
 8008872:	dcf0      	bgt.n	8008856 <_printf_float+0x42e>
 8008874:	e6fc      	b.n	8008670 <_printf_float+0x248>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	f104 0919 	add.w	r9, r4, #25
 800887e:	e7f4      	b.n	800886a <_printf_float+0x442>
 8008880:	2900      	cmp	r1, #0
 8008882:	f43f ae8b 	beq.w	800859c <_printf_float+0x174>
 8008886:	2300      	movs	r3, #0
 8008888:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800888c:	ab09      	add	r3, sp, #36	; 0x24
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	ec49 8b10 	vmov	d0, r8, r9
 8008894:	6022      	str	r2, [r4, #0]
 8008896:	f8cd a004 	str.w	sl, [sp, #4]
 800889a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800889e:	4628      	mov	r0, r5
 80088a0:	f7ff fd2e 	bl	8008300 <__cvt>
 80088a4:	4680      	mov	r8, r0
 80088a6:	e648      	b.n	800853a <_printf_float+0x112>

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4691      	mov	r9, r2
 80088ae:	461f      	mov	r7, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	f8c9 3000 	str.w	r3, [r9]
 80088c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c6:	4606      	mov	r6, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	b112      	cbz	r2, 80088d2 <_printf_common+0x2a>
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c9 3000 	str.w	r3, [r9]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	0699      	lsls	r1, r3, #26
 80088d6:	bf42      	ittt	mi
 80088d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088dc:	3302      	addmi	r3, #2
 80088de:	f8c9 3000 	strmi.w	r3, [r9]
 80088e2:	6825      	ldr	r5, [r4, #0]
 80088e4:	f015 0506 	ands.w	r5, r5, #6
 80088e8:	d107      	bne.n	80088fa <_printf_common+0x52>
 80088ea:	f104 0a19 	add.w	sl, r4, #25
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	f8d9 2000 	ldr.w	r2, [r9]
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	42ab      	cmp	r3, r5
 80088f8:	dc28      	bgt.n	800894c <_printf_common+0xa4>
 80088fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	3300      	adds	r3, #0
 8008902:	bf18      	it	ne
 8008904:	2301      	movne	r3, #1
 8008906:	0692      	lsls	r2, r2, #26
 8008908:	d42d      	bmi.n	8008966 <_printf_common+0xbe>
 800890a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800890e:	4639      	mov	r1, r7
 8008910:	4630      	mov	r0, r6
 8008912:	47c0      	blx	r8
 8008914:	3001      	adds	r0, #1
 8008916:	d020      	beq.n	800895a <_printf_common+0xb2>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	68e5      	ldr	r5, [r4, #12]
 800891c:	f8d9 2000 	ldr.w	r2, [r9]
 8008920:	f003 0306 	and.w	r3, r3, #6
 8008924:	2b04      	cmp	r3, #4
 8008926:	bf08      	it	eq
 8008928:	1aad      	subeq	r5, r5, r2
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	bf0c      	ite	eq
 8008930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008934:	2500      	movne	r5, #0
 8008936:	4293      	cmp	r3, r2
 8008938:	bfc4      	itt	gt
 800893a:	1a9b      	subgt	r3, r3, r2
 800893c:	18ed      	addgt	r5, r5, r3
 800893e:	f04f 0900 	mov.w	r9, #0
 8008942:	341a      	adds	r4, #26
 8008944:	454d      	cmp	r5, r9
 8008946:	d11a      	bne.n	800897e <_printf_common+0xd6>
 8008948:	2000      	movs	r0, #0
 800894a:	e008      	b.n	800895e <_printf_common+0xb6>
 800894c:	2301      	movs	r3, #1
 800894e:	4652      	mov	r2, sl
 8008950:	4639      	mov	r1, r7
 8008952:	4630      	mov	r0, r6
 8008954:	47c0      	blx	r8
 8008956:	3001      	adds	r0, #1
 8008958:	d103      	bne.n	8008962 <_printf_common+0xba>
 800895a:	f04f 30ff 	mov.w	r0, #4294967295
 800895e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008962:	3501      	adds	r5, #1
 8008964:	e7c3      	b.n	80088ee <_printf_common+0x46>
 8008966:	18e1      	adds	r1, r4, r3
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	2030      	movs	r0, #48	; 0x30
 800896c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008970:	4422      	add	r2, r4
 8008972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800897a:	3302      	adds	r3, #2
 800897c:	e7c5      	b.n	800890a <_printf_common+0x62>
 800897e:	2301      	movs	r3, #1
 8008980:	4622      	mov	r2, r4
 8008982:	4639      	mov	r1, r7
 8008984:	4630      	mov	r0, r6
 8008986:	47c0      	blx	r8
 8008988:	3001      	adds	r0, #1
 800898a:	d0e6      	beq.n	800895a <_printf_common+0xb2>
 800898c:	f109 0901 	add.w	r9, r9, #1
 8008990:	e7d8      	b.n	8008944 <_printf_common+0x9c>
	...

08008994 <_printf_i>:
 8008994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800899c:	460c      	mov	r4, r1
 800899e:	7e09      	ldrb	r1, [r1, #24]
 80089a0:	b085      	sub	sp, #20
 80089a2:	296e      	cmp	r1, #110	; 0x6e
 80089a4:	4617      	mov	r7, r2
 80089a6:	4606      	mov	r6, r0
 80089a8:	4698      	mov	r8, r3
 80089aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ac:	f000 80b3 	beq.w	8008b16 <_printf_i+0x182>
 80089b0:	d822      	bhi.n	80089f8 <_printf_i+0x64>
 80089b2:	2963      	cmp	r1, #99	; 0x63
 80089b4:	d036      	beq.n	8008a24 <_printf_i+0x90>
 80089b6:	d80a      	bhi.n	80089ce <_printf_i+0x3a>
 80089b8:	2900      	cmp	r1, #0
 80089ba:	f000 80b9 	beq.w	8008b30 <_printf_i+0x19c>
 80089be:	2958      	cmp	r1, #88	; 0x58
 80089c0:	f000 8083 	beq.w	8008aca <_printf_i+0x136>
 80089c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80089cc:	e032      	b.n	8008a34 <_printf_i+0xa0>
 80089ce:	2964      	cmp	r1, #100	; 0x64
 80089d0:	d001      	beq.n	80089d6 <_printf_i+0x42>
 80089d2:	2969      	cmp	r1, #105	; 0x69
 80089d4:	d1f6      	bne.n	80089c4 <_printf_i+0x30>
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	6813      	ldr	r3, [r2, #0]
 80089da:	0605      	lsls	r5, r0, #24
 80089dc:	f103 0104 	add.w	r1, r3, #4
 80089e0:	d52a      	bpl.n	8008a38 <_printf_i+0xa4>
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6011      	str	r1, [r2, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da03      	bge.n	80089f2 <_printf_i+0x5e>
 80089ea:	222d      	movs	r2, #45	; 0x2d
 80089ec:	425b      	negs	r3, r3
 80089ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089f2:	486f      	ldr	r0, [pc, #444]	; (8008bb0 <_printf_i+0x21c>)
 80089f4:	220a      	movs	r2, #10
 80089f6:	e039      	b.n	8008a6c <_printf_i+0xd8>
 80089f8:	2973      	cmp	r1, #115	; 0x73
 80089fa:	f000 809d 	beq.w	8008b38 <_printf_i+0x1a4>
 80089fe:	d808      	bhi.n	8008a12 <_printf_i+0x7e>
 8008a00:	296f      	cmp	r1, #111	; 0x6f
 8008a02:	d020      	beq.n	8008a46 <_printf_i+0xb2>
 8008a04:	2970      	cmp	r1, #112	; 0x70
 8008a06:	d1dd      	bne.n	80089c4 <_printf_i+0x30>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	f043 0320 	orr.w	r3, r3, #32
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	e003      	b.n	8008a1a <_printf_i+0x86>
 8008a12:	2975      	cmp	r1, #117	; 0x75
 8008a14:	d017      	beq.n	8008a46 <_printf_i+0xb2>
 8008a16:	2978      	cmp	r1, #120	; 0x78
 8008a18:	d1d4      	bne.n	80089c4 <_printf_i+0x30>
 8008a1a:	2378      	movs	r3, #120	; 0x78
 8008a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a20:	4864      	ldr	r0, [pc, #400]	; (8008bb4 <_printf_i+0x220>)
 8008a22:	e055      	b.n	8008ad0 <_printf_i+0x13c>
 8008a24:	6813      	ldr	r3, [r2, #0]
 8008a26:	1d19      	adds	r1, r3, #4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6011      	str	r1, [r2, #0]
 8008a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a34:	2301      	movs	r3, #1
 8008a36:	e08c      	b.n	8008b52 <_printf_i+0x1be>
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6011      	str	r1, [r2, #0]
 8008a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a40:	bf18      	it	ne
 8008a42:	b21b      	sxthne	r3, r3
 8008a44:	e7cf      	b.n	80089e6 <_printf_i+0x52>
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1d18      	adds	r0, r3, #4
 8008a4c:	6010      	str	r0, [r2, #0]
 8008a4e:	0628      	lsls	r0, r5, #24
 8008a50:	d501      	bpl.n	8008a56 <_printf_i+0xc2>
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	e002      	b.n	8008a5c <_printf_i+0xc8>
 8008a56:	0668      	lsls	r0, r5, #25
 8008a58:	d5fb      	bpl.n	8008a52 <_printf_i+0xbe>
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	4854      	ldr	r0, [pc, #336]	; (8008bb0 <_printf_i+0x21c>)
 8008a5e:	296f      	cmp	r1, #111	; 0x6f
 8008a60:	bf14      	ite	ne
 8008a62:	220a      	movne	r2, #10
 8008a64:	2208      	moveq	r2, #8
 8008a66:	2100      	movs	r1, #0
 8008a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a6c:	6865      	ldr	r5, [r4, #4]
 8008a6e:	60a5      	str	r5, [r4, #8]
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	f2c0 8095 	blt.w	8008ba0 <_printf_i+0x20c>
 8008a76:	6821      	ldr	r1, [r4, #0]
 8008a78:	f021 0104 	bic.w	r1, r1, #4
 8008a7c:	6021      	str	r1, [r4, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d13d      	bne.n	8008afe <_printf_i+0x16a>
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	f040 808e 	bne.w	8008ba4 <_printf_i+0x210>
 8008a88:	4665      	mov	r5, ip
 8008a8a:	2a08      	cmp	r2, #8
 8008a8c:	d10b      	bne.n	8008aa6 <_printf_i+0x112>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	07db      	lsls	r3, r3, #31
 8008a92:	d508      	bpl.n	8008aa6 <_printf_i+0x112>
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	6862      	ldr	r2, [r4, #4]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	bfde      	ittt	le
 8008a9c:	2330      	movle	r3, #48	; 0x30
 8008a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008aa6:	ebac 0305 	sub.w	r3, ip, r5
 8008aaa:	6123      	str	r3, [r4, #16]
 8008aac:	f8cd 8000 	str.w	r8, [sp]
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	aa03      	add	r2, sp, #12
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff fef6 	bl	80088a8 <_printf_common>
 8008abc:	3001      	adds	r0, #1
 8008abe:	d14d      	bne.n	8008b5c <_printf_i+0x1c8>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	b005      	add	sp, #20
 8008ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aca:	4839      	ldr	r0, [pc, #228]	; (8008bb0 <_printf_i+0x21c>)
 8008acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ad0:	6813      	ldr	r3, [r2, #0]
 8008ad2:	6821      	ldr	r1, [r4, #0]
 8008ad4:	1d1d      	adds	r5, r3, #4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6015      	str	r5, [r2, #0]
 8008ada:	060a      	lsls	r2, r1, #24
 8008adc:	d50b      	bpl.n	8008af6 <_printf_i+0x162>
 8008ade:	07ca      	lsls	r2, r1, #31
 8008ae0:	bf44      	itt	mi
 8008ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8008ae6:	6021      	strmi	r1, [r4, #0]
 8008ae8:	b91b      	cbnz	r3, 8008af2 <_printf_i+0x15e>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	f022 0220 	bic.w	r2, r2, #32
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	2210      	movs	r2, #16
 8008af4:	e7b7      	b.n	8008a66 <_printf_i+0xd2>
 8008af6:	064d      	lsls	r5, r1, #25
 8008af8:	bf48      	it	mi
 8008afa:	b29b      	uxthmi	r3, r3
 8008afc:	e7ef      	b.n	8008ade <_printf_i+0x14a>
 8008afe:	4665      	mov	r5, ip
 8008b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b04:	fb02 3311 	mls	r3, r2, r1, r3
 8008b08:	5cc3      	ldrb	r3, [r0, r3]
 8008b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b0e:	460b      	mov	r3, r1
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d1f5      	bne.n	8008b00 <_printf_i+0x16c>
 8008b14:	e7b9      	b.n	8008a8a <_printf_i+0xf6>
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	6825      	ldr	r5, [r4, #0]
 8008b1a:	6961      	ldr	r1, [r4, #20]
 8008b1c:	1d18      	adds	r0, r3, #4
 8008b1e:	6010      	str	r0, [r2, #0]
 8008b20:	0628      	lsls	r0, r5, #24
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	d501      	bpl.n	8008b2a <_printf_i+0x196>
 8008b26:	6019      	str	r1, [r3, #0]
 8008b28:	e002      	b.n	8008b30 <_printf_i+0x19c>
 8008b2a:	066a      	lsls	r2, r5, #25
 8008b2c:	d5fb      	bpl.n	8008b26 <_printf_i+0x192>
 8008b2e:	8019      	strh	r1, [r3, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	4665      	mov	r5, ip
 8008b36:	e7b9      	b.n	8008aac <_printf_i+0x118>
 8008b38:	6813      	ldr	r3, [r2, #0]
 8008b3a:	1d19      	adds	r1, r3, #4
 8008b3c:	6011      	str	r1, [r2, #0]
 8008b3e:	681d      	ldr	r5, [r3, #0]
 8008b40:	6862      	ldr	r2, [r4, #4]
 8008b42:	2100      	movs	r1, #0
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7f7 fb73 	bl	8000230 <memchr>
 8008b4a:	b108      	cbz	r0, 8008b50 <_printf_i+0x1bc>
 8008b4c:	1b40      	subs	r0, r0, r5
 8008b4e:	6060      	str	r0, [r4, #4]
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	2300      	movs	r3, #0
 8008b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5a:	e7a7      	b.n	8008aac <_printf_i+0x118>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4639      	mov	r1, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	47c0      	blx	r8
 8008b66:	3001      	adds	r0, #1
 8008b68:	d0aa      	beq.n	8008ac0 <_printf_i+0x12c>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	079b      	lsls	r3, r3, #30
 8008b6e:	d413      	bmi.n	8008b98 <_printf_i+0x204>
 8008b70:	68e0      	ldr	r0, [r4, #12]
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	4298      	cmp	r0, r3
 8008b76:	bfb8      	it	lt
 8008b78:	4618      	movlt	r0, r3
 8008b7a:	e7a3      	b.n	8008ac4 <_printf_i+0x130>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	464a      	mov	r2, r9
 8008b80:	4639      	mov	r1, r7
 8008b82:	4630      	mov	r0, r6
 8008b84:	47c0      	blx	r8
 8008b86:	3001      	adds	r0, #1
 8008b88:	d09a      	beq.n	8008ac0 <_printf_i+0x12c>
 8008b8a:	3501      	adds	r5, #1
 8008b8c:	68e3      	ldr	r3, [r4, #12]
 8008b8e:	9a03      	ldr	r2, [sp, #12]
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	42ab      	cmp	r3, r5
 8008b94:	dcf2      	bgt.n	8008b7c <_printf_i+0x1e8>
 8008b96:	e7eb      	b.n	8008b70 <_printf_i+0x1dc>
 8008b98:	2500      	movs	r5, #0
 8008b9a:	f104 0919 	add.w	r9, r4, #25
 8008b9e:	e7f5      	b.n	8008b8c <_printf_i+0x1f8>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1ac      	bne.n	8008afe <_printf_i+0x16a>
 8008ba4:	7803      	ldrb	r3, [r0, #0]
 8008ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bae:	e76c      	b.n	8008a8a <_printf_i+0xf6>
 8008bb0:	0800c310 	.word	0x0800c310
 8008bb4:	0800c321 	.word	0x0800c321

08008bb8 <iprintf>:
 8008bb8:	b40f      	push	{r0, r1, r2, r3}
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <iprintf+0x2c>)
 8008bbc:	b513      	push	{r0, r1, r4, lr}
 8008bbe:	681c      	ldr	r4, [r3, #0]
 8008bc0:	b124      	cbz	r4, 8008bcc <iprintf+0x14>
 8008bc2:	69a3      	ldr	r3, [r4, #24]
 8008bc4:	b913      	cbnz	r3, 8008bcc <iprintf+0x14>
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f001 fc36 	bl	800a438 <__sinit>
 8008bcc:	ab05      	add	r3, sp, #20
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	68a1      	ldr	r1, [r4, #8]
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f002 fab5 	bl	800b144 <_vfiprintf_r>
 8008bda:	b002      	add	sp, #8
 8008bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be0:	b004      	add	sp, #16
 8008be2:	4770      	bx	lr
 8008be4:	2000000c 	.word	0x2000000c

08008be8 <_puts_r>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	460e      	mov	r6, r1
 8008bec:	4605      	mov	r5, r0
 8008bee:	b118      	cbz	r0, 8008bf8 <_puts_r+0x10>
 8008bf0:	6983      	ldr	r3, [r0, #24]
 8008bf2:	b90b      	cbnz	r3, 8008bf8 <_puts_r+0x10>
 8008bf4:	f001 fc20 	bl	800a438 <__sinit>
 8008bf8:	69ab      	ldr	r3, [r5, #24]
 8008bfa:	68ac      	ldr	r4, [r5, #8]
 8008bfc:	b913      	cbnz	r3, 8008c04 <_puts_r+0x1c>
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f001 fc1a 	bl	800a438 <__sinit>
 8008c04:	4b23      	ldr	r3, [pc, #140]	; (8008c94 <_puts_r+0xac>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d117      	bne.n	8008c3a <_puts_r+0x52>
 8008c0a:	686c      	ldr	r4, [r5, #4]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	071b      	lsls	r3, r3, #28
 8008c10:	d51d      	bpl.n	8008c4e <_puts_r+0x66>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	b1db      	cbz	r3, 8008c4e <_puts_r+0x66>
 8008c16:	3e01      	subs	r6, #1
 8008c18:	68a3      	ldr	r3, [r4, #8]
 8008c1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	b9e9      	cbnz	r1, 8008c60 <_puts_r+0x78>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	da2e      	bge.n	8008c86 <_puts_r+0x9e>
 8008c28:	4622      	mov	r2, r4
 8008c2a:	210a      	movs	r1, #10
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 fbf9 	bl	8009424 <__swbuf_r>
 8008c32:	3001      	adds	r0, #1
 8008c34:	d011      	beq.n	8008c5a <_puts_r+0x72>
 8008c36:	200a      	movs	r0, #10
 8008c38:	e011      	b.n	8008c5e <_puts_r+0x76>
 8008c3a:	4b17      	ldr	r3, [pc, #92]	; (8008c98 <_puts_r+0xb0>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	d101      	bne.n	8008c44 <_puts_r+0x5c>
 8008c40:	68ac      	ldr	r4, [r5, #8]
 8008c42:	e7e3      	b.n	8008c0c <_puts_r+0x24>
 8008c44:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <_puts_r+0xb4>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	bf08      	it	eq
 8008c4a:	68ec      	ldreq	r4, [r5, #12]
 8008c4c:	e7de      	b.n	8008c0c <_puts_r+0x24>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 fc39 	bl	80094c8 <__swsetup_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0dd      	beq.n	8008c16 <_puts_r+0x2e>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da04      	bge.n	8008c6e <_puts_r+0x86>
 8008c64:	69a2      	ldr	r2, [r4, #24]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	dc06      	bgt.n	8008c78 <_puts_r+0x90>
 8008c6a:	290a      	cmp	r1, #10
 8008c6c:	d004      	beq.n	8008c78 <_puts_r+0x90>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	7019      	strb	r1, [r3, #0]
 8008c76:	e7cf      	b.n	8008c18 <_puts_r+0x30>
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f000 fbd2 	bl	8009424 <__swbuf_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	d1c9      	bne.n	8008c18 <_puts_r+0x30>
 8008c84:	e7e9      	b.n	8008c5a <_puts_r+0x72>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	200a      	movs	r0, #10
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	6022      	str	r2, [r4, #0]
 8008c8e:	7018      	strb	r0, [r3, #0]
 8008c90:	e7e5      	b.n	8008c5e <_puts_r+0x76>
 8008c92:	bf00      	nop
 8008c94:	0800c39c 	.word	0x0800c39c
 8008c98:	0800c3bc 	.word	0x0800c3bc
 8008c9c:	0800c37c 	.word	0x0800c37c

08008ca0 <puts>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <puts+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f7ff bf9f 	b.w	8008be8 <_puts_r>
 8008caa:	bf00      	nop
 8008cac:	2000000c 	.word	0x2000000c

08008cb0 <setvbuf>:
 8008cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	461d      	mov	r5, r3
 8008cb6:	4b51      	ldr	r3, [pc, #324]	; (8008dfc <setvbuf+0x14c>)
 8008cb8:	681e      	ldr	r6, [r3, #0]
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	b126      	cbz	r6, 8008ccc <setvbuf+0x1c>
 8008cc2:	69b3      	ldr	r3, [r6, #24]
 8008cc4:	b913      	cbnz	r3, 8008ccc <setvbuf+0x1c>
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f001 fbb6 	bl	800a438 <__sinit>
 8008ccc:	4b4c      	ldr	r3, [pc, #304]	; (8008e00 <setvbuf+0x150>)
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d152      	bne.n	8008d78 <setvbuf+0xc8>
 8008cd2:	6874      	ldr	r4, [r6, #4]
 8008cd4:	f1b8 0f02 	cmp.w	r8, #2
 8008cd8:	d006      	beq.n	8008ce8 <setvbuf+0x38>
 8008cda:	f1b8 0f01 	cmp.w	r8, #1
 8008cde:	f200 8089 	bhi.w	8008df4 <setvbuf+0x144>
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	f2c0 8086 	blt.w	8008df4 <setvbuf+0x144>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4630      	mov	r0, r6
 8008cec:	f001 fb3a 	bl	800a364 <_fflush_r>
 8008cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf2:	b141      	cbz	r1, 8008d06 <setvbuf+0x56>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <setvbuf+0x52>
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f001 fffd 	bl	800acfc <_free_r>
 8008d02:	2300      	movs	r3, #0
 8008d04:	6363      	str	r3, [r4, #52]	; 0x34
 8008d06:	2300      	movs	r3, #0
 8008d08:	61a3      	str	r3, [r4, #24]
 8008d0a:	6063      	str	r3, [r4, #4]
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	061b      	lsls	r3, r3, #24
 8008d10:	d503      	bpl.n	8008d1a <setvbuf+0x6a>
 8008d12:	6921      	ldr	r1, [r4, #16]
 8008d14:	4630      	mov	r0, r6
 8008d16:	f001 fff1 	bl	800acfc <_free_r>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	f1b8 0f02 	cmp.w	r8, #2
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	d05d      	beq.n	8008de8 <setvbuf+0x138>
 8008d2c:	ab01      	add	r3, sp, #4
 8008d2e:	466a      	mov	r2, sp
 8008d30:	4621      	mov	r1, r4
 8008d32:	4630      	mov	r0, r6
 8008d34:	f001 fc72 	bl	800a61c <__swhatbuf_r>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	4318      	orrs	r0, r3
 8008d3c:	81a0      	strh	r0, [r4, #12]
 8008d3e:	bb2d      	cbnz	r5, 8008d8c <setvbuf+0xdc>
 8008d40:	9d00      	ldr	r5, [sp, #0]
 8008d42:	4628      	mov	r0, r5
 8008d44:	f001 fcce 	bl	800a6e4 <malloc>
 8008d48:	4607      	mov	r7, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d14e      	bne.n	8008dec <setvbuf+0x13c>
 8008d4e:	f8dd 9000 	ldr.w	r9, [sp]
 8008d52:	45a9      	cmp	r9, r5
 8008d54:	d13c      	bne.n	8008dd0 <setvbuf+0x120>
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f043 0302 	orr.w	r3, r3, #2
 8008d60:	81a3      	strh	r3, [r4, #12]
 8008d62:	2300      	movs	r3, #0
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	2301      	movs	r3, #1
 8008d70:	6163      	str	r3, [r4, #20]
 8008d72:	b003      	add	sp, #12
 8008d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d78:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <setvbuf+0x154>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	d101      	bne.n	8008d82 <setvbuf+0xd2>
 8008d7e:	68b4      	ldr	r4, [r6, #8]
 8008d80:	e7a8      	b.n	8008cd4 <setvbuf+0x24>
 8008d82:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <setvbuf+0x158>)
 8008d84:	429c      	cmp	r4, r3
 8008d86:	bf08      	it	eq
 8008d88:	68f4      	ldreq	r4, [r6, #12]
 8008d8a:	e7a3      	b.n	8008cd4 <setvbuf+0x24>
 8008d8c:	2f00      	cmp	r7, #0
 8008d8e:	d0d8      	beq.n	8008d42 <setvbuf+0x92>
 8008d90:	69b3      	ldr	r3, [r6, #24]
 8008d92:	b913      	cbnz	r3, 8008d9a <setvbuf+0xea>
 8008d94:	4630      	mov	r0, r6
 8008d96:	f001 fb4f 	bl	800a438 <__sinit>
 8008d9a:	f1b8 0f01 	cmp.w	r8, #1
 8008d9e:	bf08      	it	eq
 8008da0:	89a3      	ldrheq	r3, [r4, #12]
 8008da2:	6027      	str	r7, [r4, #0]
 8008da4:	bf04      	itt	eq
 8008da6:	f043 0301 	orreq.w	r3, r3, #1
 8008daa:	81a3      	strheq	r3, [r4, #12]
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f013 0008 	ands.w	r0, r3, #8
 8008db2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008db6:	d01b      	beq.n	8008df0 <setvbuf+0x140>
 8008db8:	f013 0001 	ands.w	r0, r3, #1
 8008dbc:	bf18      	it	ne
 8008dbe:	426d      	negne	r5, r5
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	bf1d      	ittte	ne
 8008dc6:	60a3      	strne	r3, [r4, #8]
 8008dc8:	61a5      	strne	r5, [r4, #24]
 8008dca:	4618      	movne	r0, r3
 8008dcc:	60a5      	streq	r5, [r4, #8]
 8008dce:	e7d0      	b.n	8008d72 <setvbuf+0xc2>
 8008dd0:	4648      	mov	r0, r9
 8008dd2:	f001 fc87 	bl	800a6e4 <malloc>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0bc      	beq.n	8008d56 <setvbuf+0xa6>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	464d      	mov	r5, r9
 8008de6:	e7d3      	b.n	8008d90 <setvbuf+0xe0>
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7b6      	b.n	8008d5a <setvbuf+0xaa>
 8008dec:	46a9      	mov	r9, r5
 8008dee:	e7f5      	b.n	8008ddc <setvbuf+0x12c>
 8008df0:	60a0      	str	r0, [r4, #8]
 8008df2:	e7be      	b.n	8008d72 <setvbuf+0xc2>
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e7bb      	b.n	8008d72 <setvbuf+0xc2>
 8008dfa:	bf00      	nop
 8008dfc:	2000000c 	.word	0x2000000c
 8008e00:	0800c39c 	.word	0x0800c39c
 8008e04:	0800c3bc 	.word	0x0800c3bc
 8008e08:	0800c37c 	.word	0x0800c37c

08008e0c <siprintf>:
 8008e0c:	b40e      	push	{r1, r2, r3}
 8008e0e:	b500      	push	{lr}
 8008e10:	b09c      	sub	sp, #112	; 0x70
 8008e12:	ab1d      	add	r3, sp, #116	; 0x74
 8008e14:	9002      	str	r0, [sp, #8]
 8008e16:	9006      	str	r0, [sp, #24]
 8008e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e1c:	4809      	ldr	r0, [pc, #36]	; (8008e44 <siprintf+0x38>)
 8008e1e:	9107      	str	r1, [sp, #28]
 8008e20:	9104      	str	r1, [sp, #16]
 8008e22:	4909      	ldr	r1, [pc, #36]	; (8008e48 <siprintf+0x3c>)
 8008e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e28:	9105      	str	r1, [sp, #20]
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	a902      	add	r1, sp, #8
 8008e30:	f002 f866 	bl	800af00 <_svfiprintf_r>
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	b01c      	add	sp, #112	; 0x70
 8008e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e40:	b003      	add	sp, #12
 8008e42:	4770      	bx	lr
 8008e44:	2000000c 	.word	0x2000000c
 8008e48:	ffff0208 	.word	0xffff0208

08008e4c <strstr>:
 8008e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e4e:	7803      	ldrb	r3, [r0, #0]
 8008e50:	b17b      	cbz	r3, 8008e72 <strstr+0x26>
 8008e52:	4604      	mov	r4, r0
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	4620      	mov	r0, r4
 8008e58:	1c66      	adds	r6, r4, #1
 8008e5a:	b17b      	cbz	r3, 8008e7c <strstr+0x30>
 8008e5c:	1e4a      	subs	r2, r1, #1
 8008e5e:	1e63      	subs	r3, r4, #1
 8008e60:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008e64:	b14d      	cbz	r5, 8008e7a <strstr+0x2e>
 8008e66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008e6a:	42af      	cmp	r7, r5
 8008e6c:	4634      	mov	r4, r6
 8008e6e:	d0f7      	beq.n	8008e60 <strstr+0x14>
 8008e70:	e7f0      	b.n	8008e54 <strstr+0x8>
 8008e72:	780b      	ldrb	r3, [r1, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bf18      	it	ne
 8008e78:	2000      	movne	r0, #0
 8008e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	e7fc      	b.n	8008e7a <strstr+0x2e>

08008e80 <_strtol_l.isra.0>:
 8008e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	4680      	mov	r8, r0
 8008e86:	4689      	mov	r9, r1
 8008e88:	4692      	mov	sl, r2
 8008e8a:	461e      	mov	r6, r3
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	463d      	mov	r5, r7
 8008e90:	9808      	ldr	r0, [sp, #32]
 8008e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e96:	f001 fba1 	bl	800a5dc <__locale_ctype_ptr_l>
 8008e9a:	4420      	add	r0, r4
 8008e9c:	7843      	ldrb	r3, [r0, #1]
 8008e9e:	f013 0308 	ands.w	r3, r3, #8
 8008ea2:	d132      	bne.n	8008f0a <_strtol_l.isra.0+0x8a>
 8008ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ea6:	d132      	bne.n	8008f0e <_strtol_l.isra.0+0x8e>
 8008ea8:	787c      	ldrb	r4, [r7, #1]
 8008eaa:	1cbd      	adds	r5, r7, #2
 8008eac:	2201      	movs	r2, #1
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d05d      	beq.n	8008f6e <_strtol_l.isra.0+0xee>
 8008eb2:	2e10      	cmp	r6, #16
 8008eb4:	d109      	bne.n	8008eca <_strtol_l.isra.0+0x4a>
 8008eb6:	2c30      	cmp	r4, #48	; 0x30
 8008eb8:	d107      	bne.n	8008eca <_strtol_l.isra.0+0x4a>
 8008eba:	782b      	ldrb	r3, [r5, #0]
 8008ebc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ec0:	2b58      	cmp	r3, #88	; 0x58
 8008ec2:	d14f      	bne.n	8008f64 <_strtol_l.isra.0+0xe4>
 8008ec4:	786c      	ldrb	r4, [r5, #1]
 8008ec6:	2610      	movs	r6, #16
 8008ec8:	3502      	adds	r5, #2
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	bf14      	ite	ne
 8008ece:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008ed2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008ed6:	2700      	movs	r7, #0
 8008ed8:	fbb1 fcf6 	udiv	ip, r1, r6
 8008edc:	4638      	mov	r0, r7
 8008ede:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008ee2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d817      	bhi.n	8008f1a <_strtol_l.isra.0+0x9a>
 8008eea:	461c      	mov	r4, r3
 8008eec:	42a6      	cmp	r6, r4
 8008eee:	dd23      	ble.n	8008f38 <_strtol_l.isra.0+0xb8>
 8008ef0:	1c7b      	adds	r3, r7, #1
 8008ef2:	d007      	beq.n	8008f04 <_strtol_l.isra.0+0x84>
 8008ef4:	4584      	cmp	ip, r0
 8008ef6:	d31c      	bcc.n	8008f32 <_strtol_l.isra.0+0xb2>
 8008ef8:	d101      	bne.n	8008efe <_strtol_l.isra.0+0x7e>
 8008efa:	45a6      	cmp	lr, r4
 8008efc:	db19      	blt.n	8008f32 <_strtol_l.isra.0+0xb2>
 8008efe:	fb00 4006 	mla	r0, r0, r6, r4
 8008f02:	2701      	movs	r7, #1
 8008f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f08:	e7eb      	b.n	8008ee2 <_strtol_l.isra.0+0x62>
 8008f0a:	462f      	mov	r7, r5
 8008f0c:	e7bf      	b.n	8008e8e <_strtol_l.isra.0+0xe>
 8008f0e:	2c2b      	cmp	r4, #43	; 0x2b
 8008f10:	bf04      	itt	eq
 8008f12:	1cbd      	addeq	r5, r7, #2
 8008f14:	787c      	ldrbeq	r4, [r7, #1]
 8008f16:	461a      	mov	r2, r3
 8008f18:	e7c9      	b.n	8008eae <_strtol_l.isra.0+0x2e>
 8008f1a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008f1e:	2b19      	cmp	r3, #25
 8008f20:	d801      	bhi.n	8008f26 <_strtol_l.isra.0+0xa6>
 8008f22:	3c37      	subs	r4, #55	; 0x37
 8008f24:	e7e2      	b.n	8008eec <_strtol_l.isra.0+0x6c>
 8008f26:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008f2a:	2b19      	cmp	r3, #25
 8008f2c:	d804      	bhi.n	8008f38 <_strtol_l.isra.0+0xb8>
 8008f2e:	3c57      	subs	r4, #87	; 0x57
 8008f30:	e7dc      	b.n	8008eec <_strtol_l.isra.0+0x6c>
 8008f32:	f04f 37ff 	mov.w	r7, #4294967295
 8008f36:	e7e5      	b.n	8008f04 <_strtol_l.isra.0+0x84>
 8008f38:	1c7b      	adds	r3, r7, #1
 8008f3a:	d108      	bne.n	8008f4e <_strtol_l.isra.0+0xce>
 8008f3c:	2322      	movs	r3, #34	; 0x22
 8008f3e:	f8c8 3000 	str.w	r3, [r8]
 8008f42:	4608      	mov	r0, r1
 8008f44:	f1ba 0f00 	cmp.w	sl, #0
 8008f48:	d107      	bne.n	8008f5a <_strtol_l.isra.0+0xda>
 8008f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4e:	b102      	cbz	r2, 8008f52 <_strtol_l.isra.0+0xd2>
 8008f50:	4240      	negs	r0, r0
 8008f52:	f1ba 0f00 	cmp.w	sl, #0
 8008f56:	d0f8      	beq.n	8008f4a <_strtol_l.isra.0+0xca>
 8008f58:	b10f      	cbz	r7, 8008f5e <_strtol_l.isra.0+0xde>
 8008f5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f5e:	f8ca 9000 	str.w	r9, [sl]
 8008f62:	e7f2      	b.n	8008f4a <_strtol_l.isra.0+0xca>
 8008f64:	2430      	movs	r4, #48	; 0x30
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d1af      	bne.n	8008eca <_strtol_l.isra.0+0x4a>
 8008f6a:	2608      	movs	r6, #8
 8008f6c:	e7ad      	b.n	8008eca <_strtol_l.isra.0+0x4a>
 8008f6e:	2c30      	cmp	r4, #48	; 0x30
 8008f70:	d0a3      	beq.n	8008eba <_strtol_l.isra.0+0x3a>
 8008f72:	260a      	movs	r6, #10
 8008f74:	e7a9      	b.n	8008eca <_strtol_l.isra.0+0x4a>
	...

08008f78 <_strtol_r>:
 8008f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f7a:	4c06      	ldr	r4, [pc, #24]	; (8008f94 <_strtol_r+0x1c>)
 8008f7c:	4d06      	ldr	r5, [pc, #24]	; (8008f98 <_strtol_r+0x20>)
 8008f7e:	6824      	ldr	r4, [r4, #0]
 8008f80:	6a24      	ldr	r4, [r4, #32]
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	bf08      	it	eq
 8008f86:	462c      	moveq	r4, r5
 8008f88:	9400      	str	r4, [sp, #0]
 8008f8a:	f7ff ff79 	bl	8008e80 <_strtol_l.isra.0>
 8008f8e:	b003      	add	sp, #12
 8008f90:	bd30      	pop	{r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	2000000c 	.word	0x2000000c
 8008f98:	200000d0 	.word	0x200000d0

08008f9c <strtol>:
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <strtol+0x24>)
 8008f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fa0:	681c      	ldr	r4, [r3, #0]
 8008fa2:	4d08      	ldr	r5, [pc, #32]	; (8008fc4 <strtol+0x28>)
 8008fa4:	6a23      	ldr	r3, [r4, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bf08      	it	eq
 8008faa:	462b      	moveq	r3, r5
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f7ff ff63 	bl	8008e80 <_strtol_l.isra.0>
 8008fba:	b003      	add	sp, #12
 8008fbc:	bd30      	pop	{r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	2000000c 	.word	0x2000000c
 8008fc4:	200000d0 	.word	0x200000d0

08008fc8 <__tzcalc_limits>:
 8008fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4680      	mov	r8, r0
 8008fce:	f001 fb01 	bl	800a5d4 <__gettzinfo>
 8008fd2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8008fd6:	4598      	cmp	r8, r3
 8008fd8:	f340 8098 	ble.w	800910c <__tzcalc_limits+0x144>
 8008fdc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8008fe0:	4443      	add	r3, r8
 8008fe2:	109b      	asrs	r3, r3, #2
 8008fe4:	f240 126d 	movw	r2, #365	; 0x16d
 8008fe8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8008fec:	fb02 3505 	mla	r5, r2, r5, r3
 8008ff0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8008ff4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8008ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ffc:	441d      	add	r5, r3
 8008ffe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009002:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009006:	fb98 f7f3 	sdiv	r7, r8, r3
 800900a:	fb03 8717 	mls	r7, r3, r7, r8
 800900e:	4442      	add	r2, r8
 8009010:	fab7 fc87 	clz	ip, r7
 8009014:	fb92 f2f3 	sdiv	r2, r2, r3
 8009018:	f008 0303 	and.w	r3, r8, #3
 800901c:	4415      	add	r5, r2
 800901e:	2264      	movs	r2, #100	; 0x64
 8009020:	f8c0 8004 	str.w	r8, [r0, #4]
 8009024:	fb98 f6f2 	sdiv	r6, r8, r2
 8009028:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800902c:	fb02 8616 	mls	r6, r2, r6, r8
 8009030:	4604      	mov	r4, r0
 8009032:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	f04f 0e07 	mov.w	lr, #7
 800903c:	7a22      	ldrb	r2, [r4, #8]
 800903e:	6963      	ldr	r3, [r4, #20]
 8009040:	2a4a      	cmp	r2, #74	; 0x4a
 8009042:	d128      	bne.n	8009096 <__tzcalc_limits+0xce>
 8009044:	9900      	ldr	r1, [sp, #0]
 8009046:	18ea      	adds	r2, r5, r3
 8009048:	b901      	cbnz	r1, 800904c <__tzcalc_limits+0x84>
 800904a:	b906      	cbnz	r6, 800904e <__tzcalc_limits+0x86>
 800904c:	bb0f      	cbnz	r7, 8009092 <__tzcalc_limits+0xca>
 800904e:	2b3b      	cmp	r3, #59	; 0x3b
 8009050:	bfd4      	ite	le
 8009052:	2300      	movle	r3, #0
 8009054:	2301      	movgt	r3, #1
 8009056:	4413      	add	r3, r2
 8009058:	1e5a      	subs	r2, r3, #1
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	492c      	ldr	r1, [pc, #176]	; (8009110 <__tzcalc_limits+0x148>)
 800905e:	fb01 3202 	mla	r2, r1, r2, r3
 8009062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009064:	4413      	add	r3, r2
 8009066:	461a      	mov	r2, r3
 8009068:	17db      	asrs	r3, r3, #31
 800906a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800906e:	3428      	adds	r4, #40	; 0x28
 8009070:	45a3      	cmp	fp, r4
 8009072:	d1e3      	bne.n	800903c <__tzcalc_limits+0x74>
 8009074:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009078:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800907c:	4294      	cmp	r4, r2
 800907e:	eb75 0303 	sbcs.w	r3, r5, r3
 8009082:	bfb4      	ite	lt
 8009084:	2301      	movlt	r3, #1
 8009086:	2300      	movge	r3, #0
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	2001      	movs	r0, #1
 800908c:	b003      	add	sp, #12
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	2300      	movs	r3, #0
 8009094:	e7df      	b.n	8009056 <__tzcalc_limits+0x8e>
 8009096:	2a44      	cmp	r2, #68	; 0x44
 8009098:	d101      	bne.n	800909e <__tzcalc_limits+0xd6>
 800909a:	18ea      	adds	r2, r5, r3
 800909c:	e7dd      	b.n	800905a <__tzcalc_limits+0x92>
 800909e:	9a00      	ldr	r2, [sp, #0]
 80090a0:	bb72      	cbnz	r2, 8009100 <__tzcalc_limits+0x138>
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	bf0c      	ite	eq
 80090a6:	46e1      	moveq	r9, ip
 80090a8:	f04f 0901 	movne.w	r9, #1
 80090ac:	2230      	movs	r2, #48	; 0x30
 80090ae:	fb02 f909 	mul.w	r9, r2, r9
 80090b2:	68e2      	ldr	r2, [r4, #12]
 80090b4:	9201      	str	r2, [sp, #4]
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	462a      	mov	r2, r5
 80090bc:	f108 0801 	add.w	r8, r8, #1
 80090c0:	4914      	ldr	r1, [pc, #80]	; (8009114 <__tzcalc_limits+0x14c>)
 80090c2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80090c6:	448a      	add	sl, r1
 80090c8:	9901      	ldr	r1, [sp, #4]
 80090ca:	f85a ac04 	ldr.w	sl, [sl, #-4]
 80090ce:	4541      	cmp	r1, r8
 80090d0:	dc18      	bgt.n	8009104 <__tzcalc_limits+0x13c>
 80090d2:	f102 0804 	add.w	r8, r2, #4
 80090d6:	fb98 f9fe 	sdiv	r9, r8, lr
 80090da:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80090de:	eba8 0909 	sub.w	r9, r8, r9
 80090e2:	ebb3 0909 	subs.w	r9, r3, r9
 80090e6:	6923      	ldr	r3, [r4, #16]
 80090e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ec:	bf48      	it	mi
 80090ee:	f109 0907 	addmi.w	r9, r9, #7
 80090f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80090f6:	444b      	add	r3, r9
 80090f8:	4553      	cmp	r3, sl
 80090fa:	da05      	bge.n	8009108 <__tzcalc_limits+0x140>
 80090fc:	441a      	add	r2, r3
 80090fe:	e7ac      	b.n	800905a <__tzcalc_limits+0x92>
 8009100:	46e1      	mov	r9, ip
 8009102:	e7d3      	b.n	80090ac <__tzcalc_limits+0xe4>
 8009104:	4452      	add	r2, sl
 8009106:	e7d9      	b.n	80090bc <__tzcalc_limits+0xf4>
 8009108:	3b07      	subs	r3, #7
 800910a:	e7f5      	b.n	80090f8 <__tzcalc_limits+0x130>
 800910c:	2000      	movs	r0, #0
 800910e:	e7bd      	b.n	800908c <__tzcalc_limits+0xc4>
 8009110:	00015180 	.word	0x00015180
 8009114:	0800c3e8 	.word	0x0800c3e8

08009118 <__tz_lock>:
 8009118:	4770      	bx	lr

0800911a <__tz_unlock>:
 800911a:	4770      	bx	lr

0800911c <_tzset_unlocked>:
 800911c:	4b01      	ldr	r3, [pc, #4]	; (8009124 <_tzset_unlocked+0x8>)
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	f000 b802 	b.w	8009128 <_tzset_unlocked_r>
 8009124:	2000000c 	.word	0x2000000c

08009128 <_tzset_unlocked_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b08d      	sub	sp, #52	; 0x34
 800912e:	4607      	mov	r7, r0
 8009130:	f001 fa50 	bl	800a5d4 <__gettzinfo>
 8009134:	49af      	ldr	r1, [pc, #700]	; (80093f4 <_tzset_unlocked_r+0x2cc>)
 8009136:	4eb0      	ldr	r6, [pc, #704]	; (80093f8 <_tzset_unlocked_r+0x2d0>)
 8009138:	4605      	mov	r5, r0
 800913a:	4638      	mov	r0, r7
 800913c:	f001 fa42 	bl	800a5c4 <_getenv_r>
 8009140:	4604      	mov	r4, r0
 8009142:	b970      	cbnz	r0, 8009162 <_tzset_unlocked_r+0x3a>
 8009144:	4bad      	ldr	r3, [pc, #692]	; (80093fc <_tzset_unlocked_r+0x2d4>)
 8009146:	4aae      	ldr	r2, [pc, #696]	; (8009400 <_tzset_unlocked_r+0x2d8>)
 8009148:	6018      	str	r0, [r3, #0]
 800914a:	4bae      	ldr	r3, [pc, #696]	; (8009404 <_tzset_unlocked_r+0x2dc>)
 800914c:	6018      	str	r0, [r3, #0]
 800914e:	4bae      	ldr	r3, [pc, #696]	; (8009408 <_tzset_unlocked_r+0x2e0>)
 8009150:	6830      	ldr	r0, [r6, #0]
 8009152:	e9c3 2200 	strd	r2, r2, [r3]
 8009156:	f001 facd 	bl	800a6f4 <free>
 800915a:	6034      	str	r4, [r6, #0]
 800915c:	b00d      	add	sp, #52	; 0x34
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	6831      	ldr	r1, [r6, #0]
 8009164:	2900      	cmp	r1, #0
 8009166:	d15f      	bne.n	8009228 <_tzset_unlocked_r+0x100>
 8009168:	6830      	ldr	r0, [r6, #0]
 800916a:	f001 fac3 	bl	800a6f4 <free>
 800916e:	4620      	mov	r0, r4
 8009170:	f7f7 f856 	bl	8000220 <strlen>
 8009174:	1c41      	adds	r1, r0, #1
 8009176:	4638      	mov	r0, r7
 8009178:	f001 fe0e 	bl	800ad98 <_malloc_r>
 800917c:	6030      	str	r0, [r6, #0]
 800917e:	2800      	cmp	r0, #0
 8009180:	d157      	bne.n	8009232 <_tzset_unlocked_r+0x10a>
 8009182:	7823      	ldrb	r3, [r4, #0]
 8009184:	4aa1      	ldr	r2, [pc, #644]	; (800940c <_tzset_unlocked_r+0x2e4>)
 8009186:	49a2      	ldr	r1, [pc, #648]	; (8009410 <_tzset_unlocked_r+0x2e8>)
 8009188:	2b3a      	cmp	r3, #58	; 0x3a
 800918a:	bf08      	it	eq
 800918c:	3401      	addeq	r4, #1
 800918e:	ae0a      	add	r6, sp, #40	; 0x28
 8009190:	4633      	mov	r3, r6
 8009192:	4620      	mov	r0, r4
 8009194:	f002 f8fc 	bl	800b390 <siscanf>
 8009198:	2800      	cmp	r0, #0
 800919a:	dddf      	ble.n	800915c <_tzset_unlocked_r+0x34>
 800919c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919e:	18e7      	adds	r7, r4, r3
 80091a0:	5ce3      	ldrb	r3, [r4, r3]
 80091a2:	2b2d      	cmp	r3, #45	; 0x2d
 80091a4:	d149      	bne.n	800923a <_tzset_unlocked_r+0x112>
 80091a6:	3701      	adds	r7, #1
 80091a8:	f04f 34ff 	mov.w	r4, #4294967295
 80091ac:	f10d 0a20 	add.w	sl, sp, #32
 80091b0:	f10d 0b1e 	add.w	fp, sp, #30
 80091b4:	f04f 0800 	mov.w	r8, #0
 80091b8:	9603      	str	r6, [sp, #12]
 80091ba:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80091be:	f8cd b000 	str.w	fp, [sp]
 80091c2:	4633      	mov	r3, r6
 80091c4:	aa07      	add	r2, sp, #28
 80091c6:	4993      	ldr	r1, [pc, #588]	; (8009414 <_tzset_unlocked_r+0x2ec>)
 80091c8:	f8ad 801e 	strh.w	r8, [sp, #30]
 80091cc:	4638      	mov	r0, r7
 80091ce:	f8ad 8020 	strh.w	r8, [sp, #32]
 80091d2:	f002 f8dd 	bl	800b390 <siscanf>
 80091d6:	4540      	cmp	r0, r8
 80091d8:	ddc0      	ble.n	800915c <_tzset_unlocked_r+0x34>
 80091da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80091de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80091e2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8009420 <_tzset_unlocked_r+0x2f8>
 80091e6:	213c      	movs	r1, #60	; 0x3c
 80091e8:	fb01 2203 	mla	r2, r1, r3, r2
 80091ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80091f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80091f4:	fb01 2303 	mla	r3, r1, r3, r2
 80091f8:	435c      	muls	r4, r3
 80091fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80091fc:	4c82      	ldr	r4, [pc, #520]	; (8009408 <_tzset_unlocked_r+0x2e0>)
 80091fe:	4b83      	ldr	r3, [pc, #524]	; (800940c <_tzset_unlocked_r+0x2e4>)
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009204:	4982      	ldr	r1, [pc, #520]	; (8009410 <_tzset_unlocked_r+0x2e8>)
 8009206:	441f      	add	r7, r3
 8009208:	464a      	mov	r2, r9
 800920a:	4633      	mov	r3, r6
 800920c:	4638      	mov	r0, r7
 800920e:	f002 f8bf 	bl	800b390 <siscanf>
 8009212:	4540      	cmp	r0, r8
 8009214:	dc16      	bgt.n	8009244 <_tzset_unlocked_r+0x11c>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	6063      	str	r3, [r4, #4]
 800921a:	4b78      	ldr	r3, [pc, #480]	; (80093fc <_tzset_unlocked_r+0x2d4>)
 800921c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	4b78      	ldr	r3, [pc, #480]	; (8009404 <_tzset_unlocked_r+0x2dc>)
 8009222:	f8c3 8000 	str.w	r8, [r3]
 8009226:	e799      	b.n	800915c <_tzset_unlocked_r+0x34>
 8009228:	f7f7 f852 	bl	80002d0 <strcmp>
 800922c:	2800      	cmp	r0, #0
 800922e:	d095      	beq.n	800915c <_tzset_unlocked_r+0x34>
 8009230:	e79a      	b.n	8009168 <_tzset_unlocked_r+0x40>
 8009232:	4621      	mov	r1, r4
 8009234:	f002 f91b 	bl	800b46e <strcpy>
 8009238:	e7a3      	b.n	8009182 <_tzset_unlocked_r+0x5a>
 800923a:	2b2b      	cmp	r3, #43	; 0x2b
 800923c:	bf08      	it	eq
 800923e:	3701      	addeq	r7, #1
 8009240:	2401      	movs	r4, #1
 8009242:	e7b3      	b.n	80091ac <_tzset_unlocked_r+0x84>
 8009244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009246:	f8c4 9004 	str.w	r9, [r4, #4]
 800924a:	18fc      	adds	r4, r7, r3
 800924c:	5cfb      	ldrb	r3, [r7, r3]
 800924e:	2b2d      	cmp	r3, #45	; 0x2d
 8009250:	f040 808b 	bne.w	800936a <_tzset_unlocked_r+0x242>
 8009254:	3401      	adds	r4, #1
 8009256:	f04f 37ff 	mov.w	r7, #4294967295
 800925a:	2300      	movs	r3, #0
 800925c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009260:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009264:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009268:	930a      	str	r3, [sp, #40]	; 0x28
 800926a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800926e:	e9cd b600 	strd	fp, r6, [sp]
 8009272:	4633      	mov	r3, r6
 8009274:	aa07      	add	r2, sp, #28
 8009276:	4967      	ldr	r1, [pc, #412]	; (8009414 <_tzset_unlocked_r+0x2ec>)
 8009278:	4620      	mov	r0, r4
 800927a:	f002 f889 	bl	800b390 <siscanf>
 800927e:	2800      	cmp	r0, #0
 8009280:	dc78      	bgt.n	8009374 <_tzset_unlocked_r+0x24c>
 8009282:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009284:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009288:	652b      	str	r3, [r5, #80]	; 0x50
 800928a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928c:	462f      	mov	r7, r5
 800928e:	441c      	add	r4, r3
 8009290:	f04f 0900 	mov.w	r9, #0
 8009294:	7823      	ldrb	r3, [r4, #0]
 8009296:	2b2c      	cmp	r3, #44	; 0x2c
 8009298:	bf08      	it	eq
 800929a:	3401      	addeq	r4, #1
 800929c:	f894 8000 	ldrb.w	r8, [r4]
 80092a0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80092a4:	d179      	bne.n	800939a <_tzset_unlocked_r+0x272>
 80092a6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80092aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80092ae:	ab09      	add	r3, sp, #36	; 0x24
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	9603      	str	r6, [sp, #12]
 80092b4:	4633      	mov	r3, r6
 80092b6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80092ba:	4957      	ldr	r1, [pc, #348]	; (8009418 <_tzset_unlocked_r+0x2f0>)
 80092bc:	4620      	mov	r0, r4
 80092be:	f002 f867 	bl	800b390 <siscanf>
 80092c2:	2803      	cmp	r0, #3
 80092c4:	f47f af4a 	bne.w	800915c <_tzset_unlocked_r+0x34>
 80092c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80092cc:	1e4b      	subs	r3, r1, #1
 80092ce:	2b0b      	cmp	r3, #11
 80092d0:	f63f af44 	bhi.w	800915c <_tzset_unlocked_r+0x34>
 80092d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80092d8:	1e53      	subs	r3, r2, #1
 80092da:	2b04      	cmp	r3, #4
 80092dc:	f63f af3e 	bhi.w	800915c <_tzset_unlocked_r+0x34>
 80092e0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80092e4:	2b06      	cmp	r3, #6
 80092e6:	f63f af39 	bhi.w	800915c <_tzset_unlocked_r+0x34>
 80092ea:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80092ee:	f887 8008 	strb.w	r8, [r7, #8]
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f6:	eb04 0803 	add.w	r8, r4, r3
 80092fa:	2302      	movs	r3, #2
 80092fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009300:	2300      	movs	r3, #0
 8009302:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009306:	f8ad 3020 	strh.w	r3, [sp, #32]
 800930a:	930a      	str	r3, [sp, #40]	; 0x28
 800930c:	f898 3000 	ldrb.w	r3, [r8]
 8009310:	2b2f      	cmp	r3, #47	; 0x2f
 8009312:	d109      	bne.n	8009328 <_tzset_unlocked_r+0x200>
 8009314:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009318:	e9cd b600 	strd	fp, r6, [sp]
 800931c:	4633      	mov	r3, r6
 800931e:	aa07      	add	r2, sp, #28
 8009320:	493e      	ldr	r1, [pc, #248]	; (800941c <_tzset_unlocked_r+0x2f4>)
 8009322:	4640      	mov	r0, r8
 8009324:	f002 f834 	bl	800b390 <siscanf>
 8009328:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800932c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009330:	213c      	movs	r1, #60	; 0x3c
 8009332:	fb01 2203 	mla	r2, r1, r3, r2
 8009336:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800933a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800933e:	fb01 2303 	mla	r3, r1, r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
 8009344:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009346:	3728      	adds	r7, #40	; 0x28
 8009348:	4444      	add	r4, r8
 800934a:	f1b9 0f00 	cmp.w	r9, #0
 800934e:	d021      	beq.n	8009394 <_tzset_unlocked_r+0x26c>
 8009350:	6868      	ldr	r0, [r5, #4]
 8009352:	f7ff fe39 	bl	8008fc8 <__tzcalc_limits>
 8009356:	4b29      	ldr	r3, [pc, #164]	; (80093fc <_tzset_unlocked_r+0x2d4>)
 8009358:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	4a28      	ldr	r2, [pc, #160]	; (8009404 <_tzset_unlocked_r+0x2dc>)
 8009362:	bf18      	it	ne
 8009364:	2301      	movne	r3, #1
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	e6f8      	b.n	800915c <_tzset_unlocked_r+0x34>
 800936a:	2b2b      	cmp	r3, #43	; 0x2b
 800936c:	bf08      	it	eq
 800936e:	3401      	addeq	r4, #1
 8009370:	2701      	movs	r7, #1
 8009372:	e772      	b.n	800925a <_tzset_unlocked_r+0x132>
 8009374:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009378:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800937c:	213c      	movs	r1, #60	; 0x3c
 800937e:	fb01 2203 	mla	r2, r1, r3, r2
 8009382:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009386:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800938a:	fb01 2303 	mla	r3, r1, r3, r2
 800938e:	435f      	muls	r7, r3
 8009390:	652f      	str	r7, [r5, #80]	; 0x50
 8009392:	e77a      	b.n	800928a <_tzset_unlocked_r+0x162>
 8009394:	f04f 0901 	mov.w	r9, #1
 8009398:	e77c      	b.n	8009294 <_tzset_unlocked_r+0x16c>
 800939a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800939e:	bf06      	itte	eq
 80093a0:	3401      	addeq	r4, #1
 80093a2:	4643      	moveq	r3, r8
 80093a4:	2344      	movne	r3, #68	; 0x44
 80093a6:	220a      	movs	r2, #10
 80093a8:	a90b      	add	r1, sp, #44	; 0x2c
 80093aa:	4620      	mov	r0, r4
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	f002 f905 	bl	800b5bc <strtoul>
 80093b2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80093b6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80093ba:	45a0      	cmp	r8, r4
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	d114      	bne.n	80093ea <_tzset_unlocked_r+0x2c2>
 80093c0:	234d      	movs	r3, #77	; 0x4d
 80093c2:	f1b9 0f00 	cmp.w	r9, #0
 80093c6:	d107      	bne.n	80093d8 <_tzset_unlocked_r+0x2b0>
 80093c8:	722b      	strb	r3, [r5, #8]
 80093ca:	2103      	movs	r1, #3
 80093cc:	2302      	movs	r3, #2
 80093ce:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80093d2:	f8c5 9014 	str.w	r9, [r5, #20]
 80093d6:	e790      	b.n	80092fa <_tzset_unlocked_r+0x1d2>
 80093d8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80093dc:	220b      	movs	r2, #11
 80093de:	2301      	movs	r3, #1
 80093e0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80093e4:	2300      	movs	r3, #0
 80093e6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80093e8:	e787      	b.n	80092fa <_tzset_unlocked_r+0x1d2>
 80093ea:	b280      	uxth	r0, r0
 80093ec:	723b      	strb	r3, [r7, #8]
 80093ee:	6178      	str	r0, [r7, #20]
 80093f0:	e783      	b.n	80092fa <_tzset_unlocked_r+0x1d2>
 80093f2:	bf00      	nop
 80093f4:	0800c332 	.word	0x0800c332
 80093f8:	20007d30 	.word	0x20007d30
 80093fc:	20007d38 	.word	0x20007d38
 8009400:	0800c335 	.word	0x0800c335
 8009404:	20007d34 	.word	0x20007d34
 8009408:	20000070 	.word	0x20000070
 800940c:	20007d23 	.word	0x20007d23
 8009410:	0800c339 	.word	0x0800c339
 8009414:	0800c35c 	.word	0x0800c35c
 8009418:	0800c348 	.word	0x0800c348
 800941c:	0800c35b 	.word	0x0800c35b
 8009420:	20007d18 	.word	0x20007d18

08009424 <__swbuf_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4614      	mov	r4, r2
 800942a:	4605      	mov	r5, r0
 800942c:	b118      	cbz	r0, 8009436 <__swbuf_r+0x12>
 800942e:	6983      	ldr	r3, [r0, #24]
 8009430:	b90b      	cbnz	r3, 8009436 <__swbuf_r+0x12>
 8009432:	f001 f801 	bl	800a438 <__sinit>
 8009436:	4b21      	ldr	r3, [pc, #132]	; (80094bc <__swbuf_r+0x98>)
 8009438:	429c      	cmp	r4, r3
 800943a:	d12a      	bne.n	8009492 <__swbuf_r+0x6e>
 800943c:	686c      	ldr	r4, [r5, #4]
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	071a      	lsls	r2, r3, #28
 8009446:	d52e      	bpl.n	80094a6 <__swbuf_r+0x82>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	b363      	cbz	r3, 80094a6 <__swbuf_r+0x82>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	1ac0      	subs	r0, r0, r3
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	b2f6      	uxtb	r6, r6
 8009456:	4283      	cmp	r3, r0
 8009458:	4637      	mov	r7, r6
 800945a:	dc04      	bgt.n	8009466 <__swbuf_r+0x42>
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 ff80 	bl	800a364 <_fflush_r>
 8009464:	bb28      	cbnz	r0, 80094b2 <__swbuf_r+0x8e>
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	3b01      	subs	r3, #1
 800946a:	60a3      	str	r3, [r4, #8]
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	701e      	strb	r6, [r3, #0]
 8009474:	6963      	ldr	r3, [r4, #20]
 8009476:	3001      	adds	r0, #1
 8009478:	4283      	cmp	r3, r0
 800947a:	d004      	beq.n	8009486 <__swbuf_r+0x62>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	07db      	lsls	r3, r3, #31
 8009480:	d519      	bpl.n	80094b6 <__swbuf_r+0x92>
 8009482:	2e0a      	cmp	r6, #10
 8009484:	d117      	bne.n	80094b6 <__swbuf_r+0x92>
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 ff6b 	bl	800a364 <_fflush_r>
 800948e:	b190      	cbz	r0, 80094b6 <__swbuf_r+0x92>
 8009490:	e00f      	b.n	80094b2 <__swbuf_r+0x8e>
 8009492:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <__swbuf_r+0x9c>)
 8009494:	429c      	cmp	r4, r3
 8009496:	d101      	bne.n	800949c <__swbuf_r+0x78>
 8009498:	68ac      	ldr	r4, [r5, #8]
 800949a:	e7d0      	b.n	800943e <__swbuf_r+0x1a>
 800949c:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <__swbuf_r+0xa0>)
 800949e:	429c      	cmp	r4, r3
 80094a0:	bf08      	it	eq
 80094a2:	68ec      	ldreq	r4, [r5, #12]
 80094a4:	e7cb      	b.n	800943e <__swbuf_r+0x1a>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 f80d 	bl	80094c8 <__swsetup_r>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d0cc      	beq.n	800944c <__swbuf_r+0x28>
 80094b2:	f04f 37ff 	mov.w	r7, #4294967295
 80094b6:	4638      	mov	r0, r7
 80094b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ba:	bf00      	nop
 80094bc:	0800c39c 	.word	0x0800c39c
 80094c0:	0800c3bc 	.word	0x0800c3bc
 80094c4:	0800c37c 	.word	0x0800c37c

080094c8 <__swsetup_r>:
 80094c8:	4b32      	ldr	r3, [pc, #200]	; (8009594 <__swsetup_r+0xcc>)
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	681d      	ldr	r5, [r3, #0]
 80094ce:	4606      	mov	r6, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	b125      	cbz	r5, 80094de <__swsetup_r+0x16>
 80094d4:	69ab      	ldr	r3, [r5, #24]
 80094d6:	b913      	cbnz	r3, 80094de <__swsetup_r+0x16>
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 ffad 	bl	800a438 <__sinit>
 80094de:	4b2e      	ldr	r3, [pc, #184]	; (8009598 <__swsetup_r+0xd0>)
 80094e0:	429c      	cmp	r4, r3
 80094e2:	d10f      	bne.n	8009504 <__swsetup_r+0x3c>
 80094e4:	686c      	ldr	r4, [r5, #4]
 80094e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	0715      	lsls	r5, r2, #28
 80094ee:	d42c      	bmi.n	800954a <__swsetup_r+0x82>
 80094f0:	06d0      	lsls	r0, r2, #27
 80094f2:	d411      	bmi.n	8009518 <__swsetup_r+0x50>
 80094f4:	2209      	movs	r2, #9
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009502:	e03e      	b.n	8009582 <__swsetup_r+0xba>
 8009504:	4b25      	ldr	r3, [pc, #148]	; (800959c <__swsetup_r+0xd4>)
 8009506:	429c      	cmp	r4, r3
 8009508:	d101      	bne.n	800950e <__swsetup_r+0x46>
 800950a:	68ac      	ldr	r4, [r5, #8]
 800950c:	e7eb      	b.n	80094e6 <__swsetup_r+0x1e>
 800950e:	4b24      	ldr	r3, [pc, #144]	; (80095a0 <__swsetup_r+0xd8>)
 8009510:	429c      	cmp	r4, r3
 8009512:	bf08      	it	eq
 8009514:	68ec      	ldreq	r4, [r5, #12]
 8009516:	e7e6      	b.n	80094e6 <__swsetup_r+0x1e>
 8009518:	0751      	lsls	r1, r2, #29
 800951a:	d512      	bpl.n	8009542 <__swsetup_r+0x7a>
 800951c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951e:	b141      	cbz	r1, 8009532 <__swsetup_r+0x6a>
 8009520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009524:	4299      	cmp	r1, r3
 8009526:	d002      	beq.n	800952e <__swsetup_r+0x66>
 8009528:	4630      	mov	r0, r6
 800952a:	f001 fbe7 	bl	800acfc <_free_r>
 800952e:	2300      	movs	r3, #0
 8009530:	6363      	str	r3, [r4, #52]	; 0x34
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	2300      	movs	r3, #0
 800953c:	6063      	str	r3, [r4, #4]
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f043 0308 	orr.w	r3, r3, #8
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	b94b      	cbnz	r3, 8009562 <__swsetup_r+0x9a>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009558:	d003      	beq.n	8009562 <__swsetup_r+0x9a>
 800955a:	4621      	mov	r1, r4
 800955c:	4630      	mov	r0, r6
 800955e:	f001 f881 	bl	800a664 <__smakebuf_r>
 8009562:	89a2      	ldrh	r2, [r4, #12]
 8009564:	f012 0301 	ands.w	r3, r2, #1
 8009568:	d00c      	beq.n	8009584 <__swsetup_r+0xbc>
 800956a:	2300      	movs	r3, #0
 800956c:	60a3      	str	r3, [r4, #8]
 800956e:	6963      	ldr	r3, [r4, #20]
 8009570:	425b      	negs	r3, r3
 8009572:	61a3      	str	r3, [r4, #24]
 8009574:	6923      	ldr	r3, [r4, #16]
 8009576:	b953      	cbnz	r3, 800958e <__swsetup_r+0xc6>
 8009578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009580:	d1ba      	bne.n	80094f8 <__swsetup_r+0x30>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	0792      	lsls	r2, r2, #30
 8009586:	bf58      	it	pl
 8009588:	6963      	ldrpl	r3, [r4, #20]
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	e7f2      	b.n	8009574 <__swsetup_r+0xac>
 800958e:	2000      	movs	r0, #0
 8009590:	e7f7      	b.n	8009582 <__swsetup_r+0xba>
 8009592:	bf00      	nop
 8009594:	2000000c 	.word	0x2000000c
 8009598:	0800c39c 	.word	0x0800c39c
 800959c:	0800c3bc 	.word	0x0800c3bc
 80095a0:	0800c37c 	.word	0x0800c37c

080095a4 <div>:
 80095a4:	2900      	cmp	r1, #0
 80095a6:	b510      	push	{r4, lr}
 80095a8:	fb91 f4f2 	sdiv	r4, r1, r2
 80095ac:	fb02 1314 	mls	r3, r2, r4, r1
 80095b0:	db06      	blt.n	80095c0 <div+0x1c>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da01      	bge.n	80095ba <div+0x16>
 80095b6:	3401      	adds	r4, #1
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	e9c0 4300 	strd	r4, r3, [r0]
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfc4      	itt	gt
 80095c4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80095c8:	189b      	addgt	r3, r3, r2
 80095ca:	e7f6      	b.n	80095ba <div+0x16>

080095cc <quorem>:
 80095cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	6903      	ldr	r3, [r0, #16]
 80095d2:	690c      	ldr	r4, [r1, #16]
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	4680      	mov	r8, r0
 80095d8:	f2c0 8082 	blt.w	80096e0 <quorem+0x114>
 80095dc:	3c01      	subs	r4, #1
 80095de:	f101 0714 	add.w	r7, r1, #20
 80095e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80095e6:	f100 0614 	add.w	r6, r0, #20
 80095ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80095ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80095f2:	eb06 030c 	add.w	r3, r6, ip
 80095f6:	3501      	adds	r5, #1
 80095f8:	eb07 090c 	add.w	r9, r7, ip
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8009602:	b395      	cbz	r5, 800966a <quorem+0x9e>
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	4638      	mov	r0, r7
 800960a:	46b6      	mov	lr, r6
 800960c:	46d3      	mov	fp, sl
 800960e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009612:	b293      	uxth	r3, r2
 8009614:	fb05 a303 	mla	r3, r5, r3, sl
 8009618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800961c:	b29b      	uxth	r3, r3
 800961e:	ebab 0303 	sub.w	r3, fp, r3
 8009622:	0c12      	lsrs	r2, r2, #16
 8009624:	f8de b000 	ldr.w	fp, [lr]
 8009628:	fb05 a202 	mla	r2, r5, r2, sl
 800962c:	fa13 f38b 	uxtah	r3, r3, fp
 8009630:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009634:	fa1f fb82 	uxth.w	fp, r2
 8009638:	f8de 2000 	ldr.w	r2, [lr]
 800963c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009644:	b29b      	uxth	r3, r3
 8009646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800964a:	4581      	cmp	r9, r0
 800964c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009650:	f84e 3b04 	str.w	r3, [lr], #4
 8009654:	d2db      	bcs.n	800960e <quorem+0x42>
 8009656:	f856 300c 	ldr.w	r3, [r6, ip]
 800965a:	b933      	cbnz	r3, 800966a <quorem+0x9e>
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	3b04      	subs	r3, #4
 8009660:	429e      	cmp	r6, r3
 8009662:	461a      	mov	r2, r3
 8009664:	d330      	bcc.n	80096c8 <quorem+0xfc>
 8009666:	f8c8 4010 	str.w	r4, [r8, #16]
 800966a:	4640      	mov	r0, r8
 800966c:	f001 fa72 	bl	800ab54 <__mcmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	db25      	blt.n	80096c0 <quorem+0xf4>
 8009674:	3501      	adds	r5, #1
 8009676:	4630      	mov	r0, r6
 8009678:	f04f 0c00 	mov.w	ip, #0
 800967c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009680:	f8d0 e000 	ldr.w	lr, [r0]
 8009684:	b293      	uxth	r3, r2
 8009686:	ebac 0303 	sub.w	r3, ip, r3
 800968a:	0c12      	lsrs	r2, r2, #16
 800968c:	fa13 f38e 	uxtah	r3, r3, lr
 8009690:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009698:	b29b      	uxth	r3, r3
 800969a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800969e:	45b9      	cmp	r9, r7
 80096a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096a4:	f840 3b04 	str.w	r3, [r0], #4
 80096a8:	d2e8      	bcs.n	800967c <quorem+0xb0>
 80096aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80096ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80096b2:	b92a      	cbnz	r2, 80096c0 <quorem+0xf4>
 80096b4:	3b04      	subs	r3, #4
 80096b6:	429e      	cmp	r6, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	d30b      	bcc.n	80096d4 <quorem+0x108>
 80096bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80096c0:	4628      	mov	r0, r5
 80096c2:	b003      	add	sp, #12
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	3b04      	subs	r3, #4
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d1ca      	bne.n	8009666 <quorem+0x9a>
 80096d0:	3c01      	subs	r4, #1
 80096d2:	e7c5      	b.n	8009660 <quorem+0x94>
 80096d4:	6812      	ldr	r2, [r2, #0]
 80096d6:	3b04      	subs	r3, #4
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d1ef      	bne.n	80096bc <quorem+0xf0>
 80096dc:	3c01      	subs	r4, #1
 80096de:	e7ea      	b.n	80096b6 <quorem+0xea>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e7ee      	b.n	80096c2 <quorem+0xf6>
 80096e4:	0000      	movs	r0, r0
	...

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ec57 6b10 	vmov	r6, r7, d0
 80096f0:	b097      	sub	sp, #92	; 0x5c
 80096f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f4:	9106      	str	r1, [sp, #24]
 80096f6:	4604      	mov	r4, r0
 80096f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80096fa:	9312      	str	r3, [sp, #72]	; 0x48
 80096fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009700:	e9cd 6700 	strd	r6, r7, [sp]
 8009704:	b93d      	cbnz	r5, 8009716 <_dtoa_r+0x2e>
 8009706:	2010      	movs	r0, #16
 8009708:	f000 ffec 	bl	800a6e4 <malloc>
 800970c:	6260      	str	r0, [r4, #36]	; 0x24
 800970e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009712:	6005      	str	r5, [r0, #0]
 8009714:	60c5      	str	r5, [r0, #12]
 8009716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	b151      	cbz	r1, 8009732 <_dtoa_r+0x4a>
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	604a      	str	r2, [r1, #4]
 8009720:	2301      	movs	r3, #1
 8009722:	4093      	lsls	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	4620      	mov	r0, r4
 8009728:	f001 f832 	bl	800a790 <_Bfree>
 800972c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	1e3b      	subs	r3, r7, #0
 8009734:	bfbb      	ittet	lt
 8009736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800973a:	9301      	strlt	r3, [sp, #4]
 800973c:	2300      	movge	r3, #0
 800973e:	2201      	movlt	r2, #1
 8009740:	bfac      	ite	ge
 8009742:	f8c8 3000 	strge.w	r3, [r8]
 8009746:	f8c8 2000 	strlt.w	r2, [r8]
 800974a:	4baf      	ldr	r3, [pc, #700]	; (8009a08 <_dtoa_r+0x320>)
 800974c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009750:	ea33 0308 	bics.w	r3, r3, r8
 8009754:	d114      	bne.n	8009780 <_dtoa_r+0x98>
 8009756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009758:	f242 730f 	movw	r3, #9999	; 0x270f
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	9b00      	ldr	r3, [sp, #0]
 8009760:	b923      	cbnz	r3, 800976c <_dtoa_r+0x84>
 8009762:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009766:	2800      	cmp	r0, #0
 8009768:	f000 8542 	beq.w	800a1f0 <_dtoa_r+0xb08>
 800976c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800976e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009a1c <_dtoa_r+0x334>
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8544 	beq.w	800a200 <_dtoa_r+0xb18>
 8009778:	f10b 0303 	add.w	r3, fp, #3
 800977c:	f000 bd3e 	b.w	800a1fc <_dtoa_r+0xb14>
 8009780:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 f9ce 	bl	8000b2c <__aeabi_dcmpeq>
 8009790:	4681      	mov	r9, r0
 8009792:	b168      	cbz	r0, 80097b0 <_dtoa_r+0xc8>
 8009794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009796:	2301      	movs	r3, #1
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8524 	beq.w	800a1ea <_dtoa_r+0xb02>
 80097a2:	4b9a      	ldr	r3, [pc, #616]	; (8009a0c <_dtoa_r+0x324>)
 80097a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	f000 bd28 	b.w	800a200 <_dtoa_r+0xb18>
 80097b0:	aa14      	add	r2, sp, #80	; 0x50
 80097b2:	a915      	add	r1, sp, #84	; 0x54
 80097b4:	ec47 6b10 	vmov	d0, r6, r7
 80097b8:	4620      	mov	r0, r4
 80097ba:	f001 fa42 	bl	800ac42 <__d2b>
 80097be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80097c2:	9004      	str	r0, [sp, #16]
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d07c      	beq.n	80098c2 <_dtoa_r+0x1da>
 80097c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80097d0:	46b2      	mov	sl, r6
 80097d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80097d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80097de:	2200      	movs	r2, #0
 80097e0:	4b8b      	ldr	r3, [pc, #556]	; (8009a10 <_dtoa_r+0x328>)
 80097e2:	4650      	mov	r0, sl
 80097e4:	4659      	mov	r1, fp
 80097e6:	f7f6 fd81 	bl	80002ec <__aeabi_dsub>
 80097ea:	a381      	add	r3, pc, #516	; (adr r3, 80099f0 <_dtoa_r+0x308>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 ff34 	bl	800065c <__aeabi_dmul>
 80097f4:	a380      	add	r3, pc, #512	; (adr r3, 80099f8 <_dtoa_r+0x310>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f7f6 fd79 	bl	80002f0 <__adddf3>
 80097fe:	4606      	mov	r6, r0
 8009800:	4628      	mov	r0, r5
 8009802:	460f      	mov	r7, r1
 8009804:	f7f6 fec0 	bl	8000588 <__aeabi_i2d>
 8009808:	a37d      	add	r3, pc, #500	; (adr r3, 8009a00 <_dtoa_r+0x318>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 ff25 	bl	800065c <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f6 fd69 	bl	80002f0 <__adddf3>
 800981e:	4606      	mov	r6, r0
 8009820:	460f      	mov	r7, r1
 8009822:	f7f7 f9cb 	bl	8000bbc <__aeabi_d2iz>
 8009826:	2200      	movs	r2, #0
 8009828:	4682      	mov	sl, r0
 800982a:	2300      	movs	r3, #0
 800982c:	4630      	mov	r0, r6
 800982e:	4639      	mov	r1, r7
 8009830:	f7f7 f986 	bl	8000b40 <__aeabi_dcmplt>
 8009834:	b148      	cbz	r0, 800984a <_dtoa_r+0x162>
 8009836:	4650      	mov	r0, sl
 8009838:	f7f6 fea6 	bl	8000588 <__aeabi_i2d>
 800983c:	4632      	mov	r2, r6
 800983e:	463b      	mov	r3, r7
 8009840:	f7f7 f974 	bl	8000b2c <__aeabi_dcmpeq>
 8009844:	b908      	cbnz	r0, 800984a <_dtoa_r+0x162>
 8009846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800984a:	f1ba 0f16 	cmp.w	sl, #22
 800984e:	d859      	bhi.n	8009904 <_dtoa_r+0x21c>
 8009850:	4970      	ldr	r1, [pc, #448]	; (8009a14 <_dtoa_r+0x32c>)
 8009852:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800985a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800985e:	f7f7 f98d 	bl	8000b7c <__aeabi_dcmpgt>
 8009862:	2800      	cmp	r0, #0
 8009864:	d050      	beq.n	8009908 <_dtoa_r+0x220>
 8009866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800986a:	2300      	movs	r3, #0
 800986c:	930f      	str	r3, [sp, #60]	; 0x3c
 800986e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009870:	1b5d      	subs	r5, r3, r5
 8009872:	f1b5 0801 	subs.w	r8, r5, #1
 8009876:	bf49      	itett	mi
 8009878:	f1c5 0301 	rsbmi	r3, r5, #1
 800987c:	2300      	movpl	r3, #0
 800987e:	9305      	strmi	r3, [sp, #20]
 8009880:	f04f 0800 	movmi.w	r8, #0
 8009884:	bf58      	it	pl
 8009886:	9305      	strpl	r3, [sp, #20]
 8009888:	f1ba 0f00 	cmp.w	sl, #0
 800988c:	db3e      	blt.n	800990c <_dtoa_r+0x224>
 800988e:	2300      	movs	r3, #0
 8009890:	44d0      	add	r8, sl
 8009892:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	9b06      	ldr	r3, [sp, #24]
 800989a:	2b09      	cmp	r3, #9
 800989c:	f200 8090 	bhi.w	80099c0 <_dtoa_r+0x2d8>
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	bfc4      	itt	gt
 80098a4:	3b04      	subgt	r3, #4
 80098a6:	9306      	strgt	r3, [sp, #24]
 80098a8:	9b06      	ldr	r3, [sp, #24]
 80098aa:	f1a3 0302 	sub.w	r3, r3, #2
 80098ae:	bfcc      	ite	gt
 80098b0:	2500      	movgt	r5, #0
 80098b2:	2501      	movle	r5, #1
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	f200 808f 	bhi.w	80099d8 <_dtoa_r+0x2f0>
 80098ba:	e8df f003 	tbb	[pc, r3]
 80098be:	7f7d      	.short	0x7f7d
 80098c0:	7131      	.short	0x7131
 80098c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80098c6:	441d      	add	r5, r3
 80098c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80098cc:	2820      	cmp	r0, #32
 80098ce:	dd13      	ble.n	80098f8 <_dtoa_r+0x210>
 80098d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	fa08 f800 	lsl.w	r8, r8, r0
 80098da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80098de:	fa23 f000 	lsr.w	r0, r3, r0
 80098e2:	ea48 0000 	orr.w	r0, r8, r0
 80098e6:	f7f6 fe3f 	bl	8000568 <__aeabi_ui2d>
 80098ea:	2301      	movs	r3, #1
 80098ec:	4682      	mov	sl, r0
 80098ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80098f2:	3d01      	subs	r5, #1
 80098f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80098f6:	e772      	b.n	80097de <_dtoa_r+0xf6>
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	f1c0 0020 	rsb	r0, r0, #32
 80098fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009902:	e7f0      	b.n	80098e6 <_dtoa_r+0x1fe>
 8009904:	2301      	movs	r3, #1
 8009906:	e7b1      	b.n	800986c <_dtoa_r+0x184>
 8009908:	900f      	str	r0, [sp, #60]	; 0x3c
 800990a:	e7b0      	b.n	800986e <_dtoa_r+0x186>
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	eba3 030a 	sub.w	r3, r3, sl
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	f1ca 0300 	rsb	r3, sl, #0
 8009918:	9307      	str	r3, [sp, #28]
 800991a:	2300      	movs	r3, #0
 800991c:	930e      	str	r3, [sp, #56]	; 0x38
 800991e:	e7bb      	b.n	8009898 <_dtoa_r+0x1b0>
 8009920:	2301      	movs	r3, #1
 8009922:	930a      	str	r3, [sp, #40]	; 0x28
 8009924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd59      	ble.n	80099de <_dtoa_r+0x2f6>
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	4699      	mov	r9, r3
 800992e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009930:	2200      	movs	r2, #0
 8009932:	6072      	str	r2, [r6, #4]
 8009934:	2204      	movs	r2, #4
 8009936:	f102 0014 	add.w	r0, r2, #20
 800993a:	4298      	cmp	r0, r3
 800993c:	6871      	ldr	r1, [r6, #4]
 800993e:	d953      	bls.n	80099e8 <_dtoa_r+0x300>
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fef1 	bl	800a728 <_Balloc>
 8009946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009948:	6030      	str	r0, [r6, #0]
 800994a:	f1b9 0f0e 	cmp.w	r9, #14
 800994e:	f8d3 b000 	ldr.w	fp, [r3]
 8009952:	f200 80e6 	bhi.w	8009b22 <_dtoa_r+0x43a>
 8009956:	2d00      	cmp	r5, #0
 8009958:	f000 80e3 	beq.w	8009b22 <_dtoa_r+0x43a>
 800995c:	ed9d 7b00 	vldr	d7, [sp]
 8009960:	f1ba 0f00 	cmp.w	sl, #0
 8009964:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009968:	dd74      	ble.n	8009a54 <_dtoa_r+0x36c>
 800996a:	4a2a      	ldr	r2, [pc, #168]	; (8009a14 <_dtoa_r+0x32c>)
 800996c:	f00a 030f 	and.w	r3, sl, #15
 8009970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009974:	ed93 7b00 	vldr	d7, [r3]
 8009978:	ea4f 162a 	mov.w	r6, sl, asr #4
 800997c:	06f0      	lsls	r0, r6, #27
 800997e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009982:	d565      	bpl.n	8009a50 <_dtoa_r+0x368>
 8009984:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <_dtoa_r+0x330>)
 8009986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800998a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800998e:	f7f6 ff8f 	bl	80008b0 <__aeabi_ddiv>
 8009992:	e9cd 0100 	strd	r0, r1, [sp]
 8009996:	f006 060f 	and.w	r6, r6, #15
 800999a:	2503      	movs	r5, #3
 800999c:	4f1e      	ldr	r7, [pc, #120]	; (8009a18 <_dtoa_r+0x330>)
 800999e:	e04c      	b.n	8009a3a <_dtoa_r+0x352>
 80099a0:	2301      	movs	r3, #1
 80099a2:	930a      	str	r3, [sp, #40]	; 0x28
 80099a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a6:	4453      	add	r3, sl
 80099a8:	f103 0901 	add.w	r9, r3, #1
 80099ac:	9302      	str	r3, [sp, #8]
 80099ae:	464b      	mov	r3, r9
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	bfb8      	it	lt
 80099b4:	2301      	movlt	r3, #1
 80099b6:	e7ba      	b.n	800992e <_dtoa_r+0x246>
 80099b8:	2300      	movs	r3, #0
 80099ba:	e7b2      	b.n	8009922 <_dtoa_r+0x23a>
 80099bc:	2300      	movs	r3, #0
 80099be:	e7f0      	b.n	80099a2 <_dtoa_r+0x2ba>
 80099c0:	2501      	movs	r5, #1
 80099c2:	2300      	movs	r3, #0
 80099c4:	9306      	str	r3, [sp, #24]
 80099c6:	950a      	str	r5, [sp, #40]	; 0x28
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295
 80099cc:	9302      	str	r3, [sp, #8]
 80099ce:	4699      	mov	r9, r3
 80099d0:	2200      	movs	r2, #0
 80099d2:	2312      	movs	r3, #18
 80099d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80099d6:	e7aa      	b.n	800992e <_dtoa_r+0x246>
 80099d8:	2301      	movs	r3, #1
 80099da:	930a      	str	r3, [sp, #40]	; 0x28
 80099dc:	e7f4      	b.n	80099c8 <_dtoa_r+0x2e0>
 80099de:	2301      	movs	r3, #1
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	4699      	mov	r9, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	e7f5      	b.n	80099d4 <_dtoa_r+0x2ec>
 80099e8:	3101      	adds	r1, #1
 80099ea:	6071      	str	r1, [r6, #4]
 80099ec:	0052      	lsls	r2, r2, #1
 80099ee:	e7a2      	b.n	8009936 <_dtoa_r+0x24e>
 80099f0:	636f4361 	.word	0x636f4361
 80099f4:	3fd287a7 	.word	0x3fd287a7
 80099f8:	8b60c8b3 	.word	0x8b60c8b3
 80099fc:	3fc68a28 	.word	0x3fc68a28
 8009a00:	509f79fb 	.word	0x509f79fb
 8009a04:	3fd34413 	.word	0x3fd34413
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	0800c66d 	.word	0x0800c66d
 8009a10:	3ff80000 	.word	0x3ff80000
 8009a14:	0800c470 	.word	0x0800c470
 8009a18:	0800c448 	.word	0x0800c448
 8009a1c:	0800c377 	.word	0x0800c377
 8009a20:	07f1      	lsls	r1, r6, #31
 8009a22:	d508      	bpl.n	8009a36 <_dtoa_r+0x34e>
 8009a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2c:	f7f6 fe16 	bl	800065c <__aeabi_dmul>
 8009a30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a34:	3501      	adds	r5, #1
 8009a36:	1076      	asrs	r6, r6, #1
 8009a38:	3708      	adds	r7, #8
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d1f0      	bne.n	8009a20 <_dtoa_r+0x338>
 8009a3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a46:	f7f6 ff33 	bl	80008b0 <__aeabi_ddiv>
 8009a4a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a4e:	e01a      	b.n	8009a86 <_dtoa_r+0x39e>
 8009a50:	2502      	movs	r5, #2
 8009a52:	e7a3      	b.n	800999c <_dtoa_r+0x2b4>
 8009a54:	f000 80a0 	beq.w	8009b98 <_dtoa_r+0x4b0>
 8009a58:	f1ca 0600 	rsb	r6, sl, #0
 8009a5c:	4b9f      	ldr	r3, [pc, #636]	; (8009cdc <_dtoa_r+0x5f4>)
 8009a5e:	4fa0      	ldr	r7, [pc, #640]	; (8009ce0 <_dtoa_r+0x5f8>)
 8009a60:	f006 020f 	and.w	r2, r6, #15
 8009a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a70:	f7f6 fdf4 	bl	800065c <__aeabi_dmul>
 8009a74:	e9cd 0100 	strd	r0, r1, [sp]
 8009a78:	1136      	asrs	r6, r6, #4
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2502      	movs	r5, #2
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d17f      	bne.n	8009b82 <_dtoa_r+0x49a>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e1      	bne.n	8009a4a <_dtoa_r+0x362>
 8009a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8087 	beq.w	8009b9c <_dtoa_r+0x4b4>
 8009a8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a92:	2200      	movs	r2, #0
 8009a94:	4b93      	ldr	r3, [pc, #588]	; (8009ce4 <_dtoa_r+0x5fc>)
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f7 f851 	bl	8000b40 <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d07c      	beq.n	8009b9c <_dtoa_r+0x4b4>
 8009aa2:	f1b9 0f00 	cmp.w	r9, #0
 8009aa6:	d079      	beq.n	8009b9c <_dtoa_r+0x4b4>
 8009aa8:	9b02      	ldr	r3, [sp, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dd35      	ble.n	8009b1a <_dtoa_r+0x432>
 8009aae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4b8b      	ldr	r3, [pc, #556]	; (8009ce8 <_dtoa_r+0x600>)
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7f6 fdce 	bl	800065c <__aeabi_dmul>
 8009ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ac4:	9f02      	ldr	r7, [sp, #8]
 8009ac6:	3501      	adds	r5, #1
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f7f6 fd5d 	bl	8000588 <__aeabi_i2d>
 8009ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad2:	f7f6 fdc3 	bl	800065c <__aeabi_dmul>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4b84      	ldr	r3, [pc, #528]	; (8009cec <_dtoa_r+0x604>)
 8009ada:	f7f6 fc09 	bl	80002f0 <__adddf3>
 8009ade:	4605      	mov	r5, r0
 8009ae0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	d15d      	bne.n	8009ba4 <_dtoa_r+0x4bc>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	4b81      	ldr	r3, [pc, #516]	; (8009cf0 <_dtoa_r+0x608>)
 8009aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009af0:	f7f6 fbfc 	bl	80002ec <__aeabi_dsub>
 8009af4:	462a      	mov	r2, r5
 8009af6:	4633      	mov	r3, r6
 8009af8:	e9cd 0100 	strd	r0, r1, [sp]
 8009afc:	f7f7 f83e 	bl	8000b7c <__aeabi_dcmpgt>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f040 8288 	bne.w	800a016 <_dtoa_r+0x92e>
 8009b06:	462a      	mov	r2, r5
 8009b08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b10:	f7f7 f816 	bl	8000b40 <__aeabi_dcmplt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 827c 	bne.w	800a012 <_dtoa_r+0x92a>
 8009b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8009b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f2c0 8150 	blt.w	8009dca <_dtoa_r+0x6e2>
 8009b2a:	f1ba 0f0e 	cmp.w	sl, #14
 8009b2e:	f300 814c 	bgt.w	8009dca <_dtoa_r+0x6e2>
 8009b32:	4b6a      	ldr	r3, [pc, #424]	; (8009cdc <_dtoa_r+0x5f4>)
 8009b34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b38:	ed93 7b00 	vldr	d7, [r3]
 8009b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b44:	f280 80d8 	bge.w	8009cf8 <_dtoa_r+0x610>
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	f300 80d4 	bgt.w	8009cf8 <_dtoa_r+0x610>
 8009b50:	f040 825e 	bne.w	800a010 <_dtoa_r+0x928>
 8009b54:	2200      	movs	r2, #0
 8009b56:	4b66      	ldr	r3, [pc, #408]	; (8009cf0 <_dtoa_r+0x608>)
 8009b58:	ec51 0b17 	vmov	r0, r1, d7
 8009b5c:	f7f6 fd7e 	bl	800065c <__aeabi_dmul>
 8009b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b64:	f7f7 f800 	bl	8000b68 <__aeabi_dcmpge>
 8009b68:	464f      	mov	r7, r9
 8009b6a:	464e      	mov	r6, r9
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f040 8234 	bne.w	8009fda <_dtoa_r+0x8f2>
 8009b72:	2331      	movs	r3, #49	; 0x31
 8009b74:	f10b 0501 	add.w	r5, fp, #1
 8009b78:	f88b 3000 	strb.w	r3, [fp]
 8009b7c:	f10a 0a01 	add.w	sl, sl, #1
 8009b80:	e22f      	b.n	8009fe2 <_dtoa_r+0x8fa>
 8009b82:	07f2      	lsls	r2, r6, #31
 8009b84:	d505      	bpl.n	8009b92 <_dtoa_r+0x4aa>
 8009b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8a:	f7f6 fd67 	bl	800065c <__aeabi_dmul>
 8009b8e:	3501      	adds	r5, #1
 8009b90:	2301      	movs	r3, #1
 8009b92:	1076      	asrs	r6, r6, #1
 8009b94:	3708      	adds	r7, #8
 8009b96:	e772      	b.n	8009a7e <_dtoa_r+0x396>
 8009b98:	2502      	movs	r5, #2
 8009b9a:	e774      	b.n	8009a86 <_dtoa_r+0x39e>
 8009b9c:	f8cd a020 	str.w	sl, [sp, #32]
 8009ba0:	464f      	mov	r7, r9
 8009ba2:	e791      	b.n	8009ac8 <_dtoa_r+0x3e0>
 8009ba4:	4b4d      	ldr	r3, [pc, #308]	; (8009cdc <_dtoa_r+0x5f4>)
 8009ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009baa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d047      	beq.n	8009c44 <_dtoa_r+0x55c>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	2000      	movs	r0, #0
 8009bba:	494e      	ldr	r1, [pc, #312]	; (8009cf4 <_dtoa_r+0x60c>)
 8009bbc:	f7f6 fe78 	bl	80008b0 <__aeabi_ddiv>
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	4633      	mov	r3, r6
 8009bc4:	f7f6 fb92 	bl	80002ec <__aeabi_dsub>
 8009bc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009bcc:	465d      	mov	r5, fp
 8009bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd2:	f7f6 fff3 	bl	8000bbc <__aeabi_d2iz>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	f7f6 fcd6 	bl	8000588 <__aeabi_i2d>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be4:	f7f6 fb82 	bl	80002ec <__aeabi_dsub>
 8009be8:	3630      	adds	r6, #48	; 0x30
 8009bea:	f805 6b01 	strb.w	r6, [r5], #1
 8009bee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8009bf6:	f7f6 ffa3 	bl	8000b40 <__aeabi_dcmplt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d163      	bne.n	8009cc6 <_dtoa_r+0x5de>
 8009bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c02:	2000      	movs	r0, #0
 8009c04:	4937      	ldr	r1, [pc, #220]	; (8009ce4 <_dtoa_r+0x5fc>)
 8009c06:	f7f6 fb71 	bl	80002ec <__aeabi_dsub>
 8009c0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c0e:	f7f6 ff97 	bl	8000b40 <__aeabi_dcmplt>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f040 80b7 	bne.w	8009d86 <_dtoa_r+0x69e>
 8009c18:	eba5 030b 	sub.w	r3, r5, fp
 8009c1c:	429f      	cmp	r7, r3
 8009c1e:	f77f af7c 	ble.w	8009b1a <_dtoa_r+0x432>
 8009c22:	2200      	movs	r2, #0
 8009c24:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <_dtoa_r+0x600>)
 8009c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c2a:	f7f6 fd17 	bl	800065c <__aeabi_dmul>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c34:	4b2c      	ldr	r3, [pc, #176]	; (8009ce8 <_dtoa_r+0x600>)
 8009c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c3a:	f7f6 fd0f 	bl	800065c <__aeabi_dmul>
 8009c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009c42:	e7c4      	b.n	8009bce <_dtoa_r+0x4e6>
 8009c44:	462a      	mov	r2, r5
 8009c46:	4633      	mov	r3, r6
 8009c48:	f7f6 fd08 	bl	800065c <__aeabi_dmul>
 8009c4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c50:	eb0b 0507 	add.w	r5, fp, r7
 8009c54:	465e      	mov	r6, fp
 8009c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c5a:	f7f6 ffaf 	bl	8000bbc <__aeabi_d2iz>
 8009c5e:	4607      	mov	r7, r0
 8009c60:	f7f6 fc92 	bl	8000588 <__aeabi_i2d>
 8009c64:	3730      	adds	r7, #48	; 0x30
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c6e:	f7f6 fb3d 	bl	80002ec <__aeabi_dsub>
 8009c72:	f806 7b01 	strb.w	r7, [r6], #1
 8009c76:	42ae      	cmp	r6, r5
 8009c78:	e9cd 0100 	strd	r0, r1, [sp]
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	d126      	bne.n	8009cd0 <_dtoa_r+0x5e8>
 8009c82:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <_dtoa_r+0x60c>)
 8009c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c88:	f7f6 fb32 	bl	80002f0 <__adddf3>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c94:	f7f6 ff72 	bl	8000b7c <__aeabi_dcmpgt>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d174      	bne.n	8009d86 <_dtoa_r+0x69e>
 8009c9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	4914      	ldr	r1, [pc, #80]	; (8009cf4 <_dtoa_r+0x60c>)
 8009ca4:	f7f6 fb22 	bl	80002ec <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb0:	f7f6 ff46 	bl	8000b40 <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f43f af30 	beq.w	8009b1a <_dtoa_r+0x432>
 8009cba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cbe:	2b30      	cmp	r3, #48	; 0x30
 8009cc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cc4:	d002      	beq.n	8009ccc <_dtoa_r+0x5e4>
 8009cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009cca:	e04a      	b.n	8009d62 <_dtoa_r+0x67a>
 8009ccc:	4615      	mov	r5, r2
 8009cce:	e7f4      	b.n	8009cba <_dtoa_r+0x5d2>
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <_dtoa_r+0x600>)
 8009cd2:	f7f6 fcc3 	bl	800065c <__aeabi_dmul>
 8009cd6:	e9cd 0100 	strd	r0, r1, [sp]
 8009cda:	e7bc      	b.n	8009c56 <_dtoa_r+0x56e>
 8009cdc:	0800c470 	.word	0x0800c470
 8009ce0:	0800c448 	.word	0x0800c448
 8009ce4:	3ff00000 	.word	0x3ff00000
 8009ce8:	40240000 	.word	0x40240000
 8009cec:	401c0000 	.word	0x401c0000
 8009cf0:	40140000 	.word	0x40140000
 8009cf4:	3fe00000 	.word	0x3fe00000
 8009cf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cfc:	465d      	mov	r5, fp
 8009cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d02:	4630      	mov	r0, r6
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 fdd3 	bl	80008b0 <__aeabi_ddiv>
 8009d0a:	f7f6 ff57 	bl	8000bbc <__aeabi_d2iz>
 8009d0e:	4680      	mov	r8, r0
 8009d10:	f7f6 fc3a 	bl	8000588 <__aeabi_i2d>
 8009d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d18:	f7f6 fca0 	bl	800065c <__aeabi_dmul>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009d28:	f7f6 fae0 	bl	80002ec <__aeabi_dsub>
 8009d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d30:	eba5 060b 	sub.w	r6, r5, fp
 8009d34:	45b1      	cmp	r9, r6
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	d139      	bne.n	8009db0 <_dtoa_r+0x6c8>
 8009d3c:	f7f6 fad8 	bl	80002f0 <__adddf3>
 8009d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	f7f6 ff18 	bl	8000b7c <__aeabi_dcmpgt>
 8009d4c:	b9c8      	cbnz	r0, 8009d82 <_dtoa_r+0x69a>
 8009d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	f7f6 fee9 	bl	8000b2c <__aeabi_dcmpeq>
 8009d5a:	b110      	cbz	r0, 8009d62 <_dtoa_r+0x67a>
 8009d5c:	f018 0f01 	tst.w	r8, #1
 8009d60:	d10f      	bne.n	8009d82 <_dtoa_r+0x69a>
 8009d62:	9904      	ldr	r1, [sp, #16]
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fd13 	bl	800a790 <_Bfree>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d6e:	702b      	strb	r3, [r5, #0]
 8009d70:	f10a 0301 	add.w	r3, sl, #1
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 8241 	beq.w	800a200 <_dtoa_r+0xb18>
 8009d7e:	601d      	str	r5, [r3, #0]
 8009d80:	e23e      	b.n	800a200 <_dtoa_r+0xb18>
 8009d82:	f8cd a020 	str.w	sl, [sp, #32]
 8009d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d8a:	2a39      	cmp	r2, #57	; 0x39
 8009d8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009d90:	d108      	bne.n	8009da4 <_dtoa_r+0x6bc>
 8009d92:	459b      	cmp	fp, r3
 8009d94:	d10a      	bne.n	8009dac <_dtoa_r+0x6c4>
 8009d96:	9b08      	ldr	r3, [sp, #32]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	2330      	movs	r3, #48	; 0x30
 8009d9e:	f88b 3000 	strb.w	r3, [fp]
 8009da2:	465b      	mov	r3, fp
 8009da4:	781a      	ldrb	r2, [r3, #0]
 8009da6:	3201      	adds	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	e78c      	b.n	8009cc6 <_dtoa_r+0x5de>
 8009dac:	461d      	mov	r5, r3
 8009dae:	e7ea      	b.n	8009d86 <_dtoa_r+0x69e>
 8009db0:	2200      	movs	r2, #0
 8009db2:	4b9b      	ldr	r3, [pc, #620]	; (800a020 <_dtoa_r+0x938>)
 8009db4:	f7f6 fc52 	bl	800065c <__aeabi_dmul>
 8009db8:	2200      	movs	r2, #0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	f7f6 feb4 	bl	8000b2c <__aeabi_dcmpeq>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d09a      	beq.n	8009cfe <_dtoa_r+0x616>
 8009dc8:	e7cb      	b.n	8009d62 <_dtoa_r+0x67a>
 8009dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	f000 808b 	beq.w	8009ee8 <_dtoa_r+0x800>
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	2a01      	cmp	r2, #1
 8009dd6:	dc6e      	bgt.n	8009eb6 <_dtoa_r+0x7ce>
 8009dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	d067      	beq.n	8009eae <_dtoa_r+0x7c6>
 8009dde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009de2:	9f07      	ldr	r7, [sp, #28]
 8009de4:	9d05      	ldr	r5, [sp, #20]
 8009de6:	9a05      	ldr	r2, [sp, #20]
 8009de8:	2101      	movs	r1, #1
 8009dea:	441a      	add	r2, r3
 8009dec:	4620      	mov	r0, r4
 8009dee:	9205      	str	r2, [sp, #20]
 8009df0:	4498      	add	r8, r3
 8009df2:	f000 fd6d 	bl	800a8d0 <__i2b>
 8009df6:	4606      	mov	r6, r0
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	dd0c      	ble.n	8009e16 <_dtoa_r+0x72e>
 8009dfc:	f1b8 0f00 	cmp.w	r8, #0
 8009e00:	dd09      	ble.n	8009e16 <_dtoa_r+0x72e>
 8009e02:	4545      	cmp	r5, r8
 8009e04:	9a05      	ldr	r2, [sp, #20]
 8009e06:	462b      	mov	r3, r5
 8009e08:	bfa8      	it	ge
 8009e0a:	4643      	movge	r3, r8
 8009e0c:	1ad2      	subs	r2, r2, r3
 8009e0e:	9205      	str	r2, [sp, #20]
 8009e10:	1aed      	subs	r5, r5, r3
 8009e12:	eba8 0803 	sub.w	r8, r8, r3
 8009e16:	9b07      	ldr	r3, [sp, #28]
 8009e18:	b1eb      	cbz	r3, 8009e56 <_dtoa_r+0x76e>
 8009e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d067      	beq.n	8009ef0 <_dtoa_r+0x808>
 8009e20:	b18f      	cbz	r7, 8009e46 <_dtoa_r+0x75e>
 8009e22:	4631      	mov	r1, r6
 8009e24:	463a      	mov	r2, r7
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fdf2 	bl	800aa10 <__pow5mult>
 8009e2c:	9a04      	ldr	r2, [sp, #16]
 8009e2e:	4601      	mov	r1, r0
 8009e30:	4606      	mov	r6, r0
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fd55 	bl	800a8e2 <__multiply>
 8009e38:	9904      	ldr	r1, [sp, #16]
 8009e3a:	9008      	str	r0, [sp, #32]
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fca7 	bl	800a790 <_Bfree>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	1bda      	subs	r2, r3, r7
 8009e4a:	d004      	beq.n	8009e56 <_dtoa_r+0x76e>
 8009e4c:	9904      	ldr	r1, [sp, #16]
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 fdde 	bl	800aa10 <__pow5mult>
 8009e54:	9004      	str	r0, [sp, #16]
 8009e56:	2101      	movs	r1, #1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fd39 	bl	800a8d0 <__i2b>
 8009e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e60:	4607      	mov	r7, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 81d0 	beq.w	800a208 <_dtoa_r+0xb20>
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fdcf 	bl	800aa10 <__pow5mult>
 8009e72:	9b06      	ldr	r3, [sp, #24]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	4607      	mov	r7, r0
 8009e78:	dc40      	bgt.n	8009efc <_dtoa_r+0x814>
 8009e7a:	9b00      	ldr	r3, [sp, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d139      	bne.n	8009ef4 <_dtoa_r+0x80c>
 8009e80:	9b01      	ldr	r3, [sp, #4]
 8009e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d136      	bne.n	8009ef8 <_dtoa_r+0x810>
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e90:	0d1b      	lsrs	r3, r3, #20
 8009e92:	051b      	lsls	r3, r3, #20
 8009e94:	b12b      	cbz	r3, 8009ea2 <_dtoa_r+0x7ba>
 8009e96:	9b05      	ldr	r3, [sp, #20]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	f108 0801 	add.w	r8, r8, #1
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	9307      	str	r3, [sp, #28]
 8009ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d12a      	bne.n	8009f00 <_dtoa_r+0x818>
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e030      	b.n	8009f10 <_dtoa_r+0x828>
 8009eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eb4:	e795      	b.n	8009de2 <_dtoa_r+0x6fa>
 8009eb6:	9b07      	ldr	r3, [sp, #28]
 8009eb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8009ebc:	42bb      	cmp	r3, r7
 8009ebe:	bfbf      	itttt	lt
 8009ec0:	9b07      	ldrlt	r3, [sp, #28]
 8009ec2:	9707      	strlt	r7, [sp, #28]
 8009ec4:	1afa      	sublt	r2, r7, r3
 8009ec6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009ec8:	bfbb      	ittet	lt
 8009eca:	189b      	addlt	r3, r3, r2
 8009ecc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009ece:	1bdf      	subge	r7, r3, r7
 8009ed0:	2700      	movlt	r7, #0
 8009ed2:	f1b9 0f00 	cmp.w	r9, #0
 8009ed6:	bfb5      	itete	lt
 8009ed8:	9b05      	ldrlt	r3, [sp, #20]
 8009eda:	9d05      	ldrge	r5, [sp, #20]
 8009edc:	eba3 0509 	sublt.w	r5, r3, r9
 8009ee0:	464b      	movge	r3, r9
 8009ee2:	bfb8      	it	lt
 8009ee4:	2300      	movlt	r3, #0
 8009ee6:	e77e      	b.n	8009de6 <_dtoa_r+0x6fe>
 8009ee8:	9f07      	ldr	r7, [sp, #28]
 8009eea:	9d05      	ldr	r5, [sp, #20]
 8009eec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009eee:	e783      	b.n	8009df8 <_dtoa_r+0x710>
 8009ef0:	9a07      	ldr	r2, [sp, #28]
 8009ef2:	e7ab      	b.n	8009e4c <_dtoa_r+0x764>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e7d4      	b.n	8009ea2 <_dtoa_r+0x7ba>
 8009ef8:	9b00      	ldr	r3, [sp, #0]
 8009efa:	e7d2      	b.n	8009ea2 <_dtoa_r+0x7ba>
 8009efc:	2300      	movs	r3, #0
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009f06:	6918      	ldr	r0, [r3, #16]
 8009f08:	f000 fc94 	bl	800a834 <__hi0bits>
 8009f0c:	f1c0 0020 	rsb	r0, r0, #32
 8009f10:	4440      	add	r0, r8
 8009f12:	f010 001f 	ands.w	r0, r0, #31
 8009f16:	d047      	beq.n	8009fa8 <_dtoa_r+0x8c0>
 8009f18:	f1c0 0320 	rsb	r3, r0, #32
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	dd3b      	ble.n	8009f98 <_dtoa_r+0x8b0>
 8009f20:	9b05      	ldr	r3, [sp, #20]
 8009f22:	f1c0 001c 	rsb	r0, r0, #28
 8009f26:	4403      	add	r3, r0
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	4405      	add	r5, r0
 8009f2c:	4480      	add	r8, r0
 8009f2e:	9b05      	ldr	r3, [sp, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dd05      	ble.n	8009f40 <_dtoa_r+0x858>
 8009f34:	461a      	mov	r2, r3
 8009f36:	9904      	ldr	r1, [sp, #16]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 fdb7 	bl	800aaac <__lshift>
 8009f3e:	9004      	str	r0, [sp, #16]
 8009f40:	f1b8 0f00 	cmp.w	r8, #0
 8009f44:	dd05      	ble.n	8009f52 <_dtoa_r+0x86a>
 8009f46:	4639      	mov	r1, r7
 8009f48:	4642      	mov	r2, r8
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 fdae 	bl	800aaac <__lshift>
 8009f50:	4607      	mov	r7, r0
 8009f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f54:	b353      	cbz	r3, 8009fac <_dtoa_r+0x8c4>
 8009f56:	4639      	mov	r1, r7
 8009f58:	9804      	ldr	r0, [sp, #16]
 8009f5a:	f000 fdfb 	bl	800ab54 <__mcmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	da24      	bge.n	8009fac <_dtoa_r+0x8c4>
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	9904      	ldr	r1, [sp, #16]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fc28 	bl	800a7be <__multadd>
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	9004      	str	r0, [sp, #16]
 8009f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 814d 	beq.w	800a216 <_dtoa_r+0xb2e>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4631      	mov	r1, r6
 8009f80:	220a      	movs	r2, #10
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fc1b 	bl	800a7be <__multadd>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	dc4f      	bgt.n	800a030 <_dtoa_r+0x948>
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	dd4c      	ble.n	800a030 <_dtoa_r+0x948>
 8009f96:	e011      	b.n	8009fbc <_dtoa_r+0x8d4>
 8009f98:	d0c9      	beq.n	8009f2e <_dtoa_r+0x846>
 8009f9a:	9a05      	ldr	r2, [sp, #20]
 8009f9c:	331c      	adds	r3, #28
 8009f9e:	441a      	add	r2, r3
 8009fa0:	9205      	str	r2, [sp, #20]
 8009fa2:	441d      	add	r5, r3
 8009fa4:	4498      	add	r8, r3
 8009fa6:	e7c2      	b.n	8009f2e <_dtoa_r+0x846>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	e7f6      	b.n	8009f9a <_dtoa_r+0x8b2>
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	dc38      	bgt.n	800a024 <_dtoa_r+0x93c>
 8009fb2:	9b06      	ldr	r3, [sp, #24]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	dd35      	ble.n	800a024 <_dtoa_r+0x93c>
 8009fb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	b963      	cbnz	r3, 8009fda <_dtoa_r+0x8f2>
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	2205      	movs	r2, #5
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fbfa 	bl	800a7be <__multadd>
 8009fca:	4601      	mov	r1, r0
 8009fcc:	4607      	mov	r7, r0
 8009fce:	9804      	ldr	r0, [sp, #16]
 8009fd0:	f000 fdc0 	bl	800ab54 <__mcmp>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f73f adcc 	bgt.w	8009b72 <_dtoa_r+0x48a>
 8009fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fdc:	465d      	mov	r5, fp
 8009fde:	ea6f 0a03 	mvn.w	sl, r3
 8009fe2:	f04f 0900 	mov.w	r9, #0
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fbd1 	bl	800a790 <_Bfree>
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	f43f aeb7 	beq.w	8009d62 <_dtoa_r+0x67a>
 8009ff4:	f1b9 0f00 	cmp.w	r9, #0
 8009ff8:	d005      	beq.n	800a006 <_dtoa_r+0x91e>
 8009ffa:	45b1      	cmp	r9, r6
 8009ffc:	d003      	beq.n	800a006 <_dtoa_r+0x91e>
 8009ffe:	4649      	mov	r1, r9
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fbc5 	bl	800a790 <_Bfree>
 800a006:	4631      	mov	r1, r6
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fbc1 	bl	800a790 <_Bfree>
 800a00e:	e6a8      	b.n	8009d62 <_dtoa_r+0x67a>
 800a010:	2700      	movs	r7, #0
 800a012:	463e      	mov	r6, r7
 800a014:	e7e1      	b.n	8009fda <_dtoa_r+0x8f2>
 800a016:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a01a:	463e      	mov	r6, r7
 800a01c:	e5a9      	b.n	8009b72 <_dtoa_r+0x48a>
 800a01e:	bf00      	nop
 800a020:	40240000 	.word	0x40240000
 800a024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a026:	f8cd 9008 	str.w	r9, [sp, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 80fa 	beq.w	800a224 <_dtoa_r+0xb3c>
 800a030:	2d00      	cmp	r5, #0
 800a032:	dd05      	ble.n	800a040 <_dtoa_r+0x958>
 800a034:	4631      	mov	r1, r6
 800a036:	462a      	mov	r2, r5
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fd37 	bl	800aaac <__lshift>
 800a03e:	4606      	mov	r6, r0
 800a040:	9b07      	ldr	r3, [sp, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d04c      	beq.n	800a0e0 <_dtoa_r+0x9f8>
 800a046:	6871      	ldr	r1, [r6, #4]
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb6d 	bl	800a728 <_Balloc>
 800a04e:	6932      	ldr	r2, [r6, #16]
 800a050:	3202      	adds	r2, #2
 800a052:	4605      	mov	r5, r0
 800a054:	0092      	lsls	r2, r2, #2
 800a056:	f106 010c 	add.w	r1, r6, #12
 800a05a:	300c      	adds	r0, #12
 800a05c:	f7fd fea8 	bl	8007db0 <memcpy>
 800a060:	2201      	movs	r2, #1
 800a062:	4629      	mov	r1, r5
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fd21 	bl	800aaac <__lshift>
 800a06a:	9b00      	ldr	r3, [sp, #0]
 800a06c:	f8cd b014 	str.w	fp, [sp, #20]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	46b1      	mov	r9, r6
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	4606      	mov	r6, r0
 800a07a:	4639      	mov	r1, r7
 800a07c:	9804      	ldr	r0, [sp, #16]
 800a07e:	f7ff faa5 	bl	80095cc <quorem>
 800a082:	4649      	mov	r1, r9
 800a084:	4605      	mov	r5, r0
 800a086:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a08a:	9804      	ldr	r0, [sp, #16]
 800a08c:	f000 fd62 	bl	800ab54 <__mcmp>
 800a090:	4632      	mov	r2, r6
 800a092:	9000      	str	r0, [sp, #0]
 800a094:	4639      	mov	r1, r7
 800a096:	4620      	mov	r0, r4
 800a098:	f000 fd76 	bl	800ab88 <__mdiff>
 800a09c:	68c3      	ldr	r3, [r0, #12]
 800a09e:	4602      	mov	r2, r0
 800a0a0:	bb03      	cbnz	r3, 800a0e4 <_dtoa_r+0x9fc>
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	9008      	str	r0, [sp, #32]
 800a0a6:	9804      	ldr	r0, [sp, #16]
 800a0a8:	f000 fd54 	bl	800ab54 <__mcmp>
 800a0ac:	9a08      	ldr	r2, [sp, #32]
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	9308      	str	r3, [sp, #32]
 800a0b6:	f000 fb6b 	bl	800a790 <_Bfree>
 800a0ba:	9b08      	ldr	r3, [sp, #32]
 800a0bc:	b9a3      	cbnz	r3, 800a0e8 <_dtoa_r+0xa00>
 800a0be:	9a06      	ldr	r2, [sp, #24]
 800a0c0:	b992      	cbnz	r2, 800a0e8 <_dtoa_r+0xa00>
 800a0c2:	9a07      	ldr	r2, [sp, #28]
 800a0c4:	b982      	cbnz	r2, 800a0e8 <_dtoa_r+0xa00>
 800a0c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0ca:	d029      	beq.n	800a120 <_dtoa_r+0xa38>
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dd01      	ble.n	800a0d6 <_dtoa_r+0x9ee>
 800a0d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a0d6:	9b05      	ldr	r3, [sp, #20]
 800a0d8:	1c5d      	adds	r5, r3, #1
 800a0da:	f883 8000 	strb.w	r8, [r3]
 800a0de:	e782      	b.n	8009fe6 <_dtoa_r+0x8fe>
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	e7c2      	b.n	800a06a <_dtoa_r+0x982>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e7e3      	b.n	800a0b0 <_dtoa_r+0x9c8>
 800a0e8:	9a00      	ldr	r2, [sp, #0]
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	db04      	blt.n	800a0f8 <_dtoa_r+0xa10>
 800a0ee:	d125      	bne.n	800a13c <_dtoa_r+0xa54>
 800a0f0:	9a06      	ldr	r2, [sp, #24]
 800a0f2:	bb1a      	cbnz	r2, 800a13c <_dtoa_r+0xa54>
 800a0f4:	9a07      	ldr	r2, [sp, #28]
 800a0f6:	bb0a      	cbnz	r2, 800a13c <_dtoa_r+0xa54>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	ddec      	ble.n	800a0d6 <_dtoa_r+0x9ee>
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	9904      	ldr	r1, [sp, #16]
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fcd3 	bl	800aaac <__lshift>
 800a106:	4639      	mov	r1, r7
 800a108:	9004      	str	r0, [sp, #16]
 800a10a:	f000 fd23 	bl	800ab54 <__mcmp>
 800a10e:	2800      	cmp	r0, #0
 800a110:	dc03      	bgt.n	800a11a <_dtoa_r+0xa32>
 800a112:	d1e0      	bne.n	800a0d6 <_dtoa_r+0x9ee>
 800a114:	f018 0f01 	tst.w	r8, #1
 800a118:	d0dd      	beq.n	800a0d6 <_dtoa_r+0x9ee>
 800a11a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a11e:	d1d8      	bne.n	800a0d2 <_dtoa_r+0x9ea>
 800a120:	9b05      	ldr	r3, [sp, #20]
 800a122:	9a05      	ldr	r2, [sp, #20]
 800a124:	1c5d      	adds	r5, r3, #1
 800a126:	2339      	movs	r3, #57	; 0x39
 800a128:	7013      	strb	r3, [r2, #0]
 800a12a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a12e:	2b39      	cmp	r3, #57	; 0x39
 800a130:	f105 32ff 	add.w	r2, r5, #4294967295
 800a134:	d04f      	beq.n	800a1d6 <_dtoa_r+0xaee>
 800a136:	3301      	adds	r3, #1
 800a138:	7013      	strb	r3, [r2, #0]
 800a13a:	e754      	b.n	8009fe6 <_dtoa_r+0x8fe>
 800a13c:	9a05      	ldr	r2, [sp, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f102 0501 	add.w	r5, r2, #1
 800a144:	dd06      	ble.n	800a154 <_dtoa_r+0xa6c>
 800a146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a14a:	d0e9      	beq.n	800a120 <_dtoa_r+0xa38>
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	9b05      	ldr	r3, [sp, #20]
 800a152:	e7c2      	b.n	800a0da <_dtoa_r+0x9f2>
 800a154:	9a02      	ldr	r2, [sp, #8]
 800a156:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a15a:	eba5 030b 	sub.w	r3, r5, fp
 800a15e:	4293      	cmp	r3, r2
 800a160:	d021      	beq.n	800a1a6 <_dtoa_r+0xabe>
 800a162:	2300      	movs	r3, #0
 800a164:	220a      	movs	r2, #10
 800a166:	9904      	ldr	r1, [sp, #16]
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fb28 	bl	800a7be <__multadd>
 800a16e:	45b1      	cmp	r9, r6
 800a170:	9004      	str	r0, [sp, #16]
 800a172:	f04f 0300 	mov.w	r3, #0
 800a176:	f04f 020a 	mov.w	r2, #10
 800a17a:	4649      	mov	r1, r9
 800a17c:	4620      	mov	r0, r4
 800a17e:	d105      	bne.n	800a18c <_dtoa_r+0xaa4>
 800a180:	f000 fb1d 	bl	800a7be <__multadd>
 800a184:	4681      	mov	r9, r0
 800a186:	4606      	mov	r6, r0
 800a188:	9505      	str	r5, [sp, #20]
 800a18a:	e776      	b.n	800a07a <_dtoa_r+0x992>
 800a18c:	f000 fb17 	bl	800a7be <__multadd>
 800a190:	4631      	mov	r1, r6
 800a192:	4681      	mov	r9, r0
 800a194:	2300      	movs	r3, #0
 800a196:	220a      	movs	r2, #10
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fb10 	bl	800a7be <__multadd>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	e7f2      	b.n	800a188 <_dtoa_r+0xaa0>
 800a1a2:	f04f 0900 	mov.w	r9, #0
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	9904      	ldr	r1, [sp, #16]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fc7e 	bl	800aaac <__lshift>
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	9004      	str	r0, [sp, #16]
 800a1b4:	f000 fcce 	bl	800ab54 <__mcmp>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	dcb6      	bgt.n	800a12a <_dtoa_r+0xa42>
 800a1bc:	d102      	bne.n	800a1c4 <_dtoa_r+0xadc>
 800a1be:	f018 0f01 	tst.w	r8, #1
 800a1c2:	d1b2      	bne.n	800a12a <_dtoa_r+0xa42>
 800a1c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1c8:	2b30      	cmp	r3, #48	; 0x30
 800a1ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800a1ce:	f47f af0a 	bne.w	8009fe6 <_dtoa_r+0x8fe>
 800a1d2:	4615      	mov	r5, r2
 800a1d4:	e7f6      	b.n	800a1c4 <_dtoa_r+0xadc>
 800a1d6:	4593      	cmp	fp, r2
 800a1d8:	d105      	bne.n	800a1e6 <_dtoa_r+0xafe>
 800a1da:	2331      	movs	r3, #49	; 0x31
 800a1dc:	f10a 0a01 	add.w	sl, sl, #1
 800a1e0:	f88b 3000 	strb.w	r3, [fp]
 800a1e4:	e6ff      	b.n	8009fe6 <_dtoa_r+0x8fe>
 800a1e6:	4615      	mov	r5, r2
 800a1e8:	e79f      	b.n	800a12a <_dtoa_r+0xa42>
 800a1ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a250 <_dtoa_r+0xb68>
 800a1ee:	e007      	b.n	800a200 <_dtoa_r+0xb18>
 800a1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a254 <_dtoa_r+0xb6c>
 800a1f6:	b11b      	cbz	r3, 800a200 <_dtoa_r+0xb18>
 800a1f8:	f10b 0308 	add.w	r3, fp, #8
 800a1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	4658      	mov	r0, fp
 800a202:	b017      	add	sp, #92	; 0x5c
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	9b06      	ldr	r3, [sp, #24]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	f77f ae35 	ble.w	8009e7a <_dtoa_r+0x792>
 800a210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a212:	9307      	str	r3, [sp, #28]
 800a214:	e649      	b.n	8009eaa <_dtoa_r+0x7c2>
 800a216:	9b02      	ldr	r3, [sp, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc03      	bgt.n	800a224 <_dtoa_r+0xb3c>
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	f73f aecc 	bgt.w	8009fbc <_dtoa_r+0x8d4>
 800a224:	465d      	mov	r5, fp
 800a226:	4639      	mov	r1, r7
 800a228:	9804      	ldr	r0, [sp, #16]
 800a22a:	f7ff f9cf 	bl	80095cc <quorem>
 800a22e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a232:	f805 8b01 	strb.w	r8, [r5], #1
 800a236:	9a02      	ldr	r2, [sp, #8]
 800a238:	eba5 030b 	sub.w	r3, r5, fp
 800a23c:	429a      	cmp	r2, r3
 800a23e:	ddb0      	ble.n	800a1a2 <_dtoa_r+0xaba>
 800a240:	2300      	movs	r3, #0
 800a242:	220a      	movs	r2, #10
 800a244:	9904      	ldr	r1, [sp, #16]
 800a246:	4620      	mov	r0, r4
 800a248:	f000 fab9 	bl	800a7be <__multadd>
 800a24c:	9004      	str	r0, [sp, #16]
 800a24e:	e7ea      	b.n	800a226 <_dtoa_r+0xb3e>
 800a250:	0800c66c 	.word	0x0800c66c
 800a254:	0800c36e 	.word	0x0800c36e

0800a258 <__sflush_r>:
 800a258:	898a      	ldrh	r2, [r1, #12]
 800a25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25e:	4605      	mov	r5, r0
 800a260:	0710      	lsls	r0, r2, #28
 800a262:	460c      	mov	r4, r1
 800a264:	d458      	bmi.n	800a318 <__sflush_r+0xc0>
 800a266:	684b      	ldr	r3, [r1, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dc05      	bgt.n	800a278 <__sflush_r+0x20>
 800a26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dc02      	bgt.n	800a278 <__sflush_r+0x20>
 800a272:	2000      	movs	r0, #0
 800a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d0f9      	beq.n	800a272 <__sflush_r+0x1a>
 800a27e:	2300      	movs	r3, #0
 800a280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a284:	682f      	ldr	r7, [r5, #0]
 800a286:	6a21      	ldr	r1, [r4, #32]
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	d032      	beq.n	800a2f2 <__sflush_r+0x9a>
 800a28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	075a      	lsls	r2, r3, #29
 800a292:	d505      	bpl.n	800a2a0 <__sflush_r+0x48>
 800a294:	6863      	ldr	r3, [r4, #4]
 800a296:	1ac0      	subs	r0, r0, r3
 800a298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a29a:	b10b      	cbz	r3, 800a2a0 <__sflush_r+0x48>
 800a29c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a29e:	1ac0      	subs	r0, r0, r3
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2a6:	6a21      	ldr	r1, [r4, #32]
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b0      	blx	r6
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	d106      	bne.n	800a2c0 <__sflush_r+0x68>
 800a2b2:	6829      	ldr	r1, [r5, #0]
 800a2b4:	291d      	cmp	r1, #29
 800a2b6:	d848      	bhi.n	800a34a <__sflush_r+0xf2>
 800a2b8:	4a29      	ldr	r2, [pc, #164]	; (800a360 <__sflush_r+0x108>)
 800a2ba:	40ca      	lsrs	r2, r1
 800a2bc:	07d6      	lsls	r6, r2, #31
 800a2be:	d544      	bpl.n	800a34a <__sflush_r+0xf2>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	6062      	str	r2, [r4, #4]
 800a2c4:	04d9      	lsls	r1, r3, #19
 800a2c6:	6922      	ldr	r2, [r4, #16]
 800a2c8:	6022      	str	r2, [r4, #0]
 800a2ca:	d504      	bpl.n	800a2d6 <__sflush_r+0x7e>
 800a2cc:	1c42      	adds	r2, r0, #1
 800a2ce:	d101      	bne.n	800a2d4 <__sflush_r+0x7c>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	b903      	cbnz	r3, 800a2d6 <__sflush_r+0x7e>
 800a2d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a2d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2d8:	602f      	str	r7, [r5, #0]
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	d0c9      	beq.n	800a272 <__sflush_r+0x1a>
 800a2de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e2:	4299      	cmp	r1, r3
 800a2e4:	d002      	beq.n	800a2ec <__sflush_r+0x94>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f000 fd08 	bl	800acfc <_free_r>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a2f0:	e7c0      	b.n	800a274 <__sflush_r+0x1c>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	47b0      	blx	r6
 800a2f8:	1c41      	adds	r1, r0, #1
 800a2fa:	d1c8      	bne.n	800a28e <__sflush_r+0x36>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0c5      	beq.n	800a28e <__sflush_r+0x36>
 800a302:	2b1d      	cmp	r3, #29
 800a304:	d001      	beq.n	800a30a <__sflush_r+0xb2>
 800a306:	2b16      	cmp	r3, #22
 800a308:	d101      	bne.n	800a30e <__sflush_r+0xb6>
 800a30a:	602f      	str	r7, [r5, #0]
 800a30c:	e7b1      	b.n	800a272 <__sflush_r+0x1a>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e7ad      	b.n	800a274 <__sflush_r+0x1c>
 800a318:	690f      	ldr	r7, [r1, #16]
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	d0a9      	beq.n	800a272 <__sflush_r+0x1a>
 800a31e:	0793      	lsls	r3, r2, #30
 800a320:	680e      	ldr	r6, [r1, #0]
 800a322:	bf08      	it	eq
 800a324:	694b      	ldreq	r3, [r1, #20]
 800a326:	600f      	str	r7, [r1, #0]
 800a328:	bf18      	it	ne
 800a32a:	2300      	movne	r3, #0
 800a32c:	eba6 0807 	sub.w	r8, r6, r7
 800a330:	608b      	str	r3, [r1, #8]
 800a332:	f1b8 0f00 	cmp.w	r8, #0
 800a336:	dd9c      	ble.n	800a272 <__sflush_r+0x1a>
 800a338:	4643      	mov	r3, r8
 800a33a:	463a      	mov	r2, r7
 800a33c:	6a21      	ldr	r1, [r4, #32]
 800a33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a340:	4628      	mov	r0, r5
 800a342:	47b0      	blx	r6
 800a344:	2800      	cmp	r0, #0
 800a346:	dc06      	bgt.n	800a356 <__sflush_r+0xfe>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	e78e      	b.n	800a274 <__sflush_r+0x1c>
 800a356:	4407      	add	r7, r0
 800a358:	eba8 0800 	sub.w	r8, r8, r0
 800a35c:	e7e9      	b.n	800a332 <__sflush_r+0xda>
 800a35e:	bf00      	nop
 800a360:	20400001 	.word	0x20400001

0800a364 <_fflush_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	690b      	ldr	r3, [r1, #16]
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b1db      	cbz	r3, 800a3a6 <_fflush_r+0x42>
 800a36e:	b118      	cbz	r0, 800a378 <_fflush_r+0x14>
 800a370:	6983      	ldr	r3, [r0, #24]
 800a372:	b90b      	cbnz	r3, 800a378 <_fflush_r+0x14>
 800a374:	f000 f860 	bl	800a438 <__sinit>
 800a378:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <_fflush_r+0x48>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d109      	bne.n	800a392 <_fflush_r+0x2e>
 800a37e:	686c      	ldr	r4, [r5, #4]
 800a380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a384:	b17b      	cbz	r3, 800a3a6 <_fflush_r+0x42>
 800a386:	4621      	mov	r1, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a38e:	f7ff bf63 	b.w	800a258 <__sflush_r>
 800a392:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <_fflush_r+0x4c>)
 800a394:	429c      	cmp	r4, r3
 800a396:	d101      	bne.n	800a39c <_fflush_r+0x38>
 800a398:	68ac      	ldr	r4, [r5, #8]
 800a39a:	e7f1      	b.n	800a380 <_fflush_r+0x1c>
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_fflush_r+0x50>)
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	bf08      	it	eq
 800a3a2:	68ec      	ldreq	r4, [r5, #12]
 800a3a4:	e7ec      	b.n	800a380 <_fflush_r+0x1c>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	bd38      	pop	{r3, r4, r5, pc}
 800a3aa:	bf00      	nop
 800a3ac:	0800c39c 	.word	0x0800c39c
 800a3b0:	0800c3bc 	.word	0x0800c3bc
 800a3b4:	0800c37c 	.word	0x0800c37c

0800a3b8 <std>:
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c2:	6083      	str	r3, [r0, #8]
 800a3c4:	8181      	strh	r1, [r0, #12]
 800a3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3c8:	81c2      	strh	r2, [r0, #14]
 800a3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ce:	6183      	str	r3, [r0, #24]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	305c      	adds	r0, #92	; 0x5c
 800a3d6:	f7fd fcf6 	bl	8007dc6 <memset>
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <std+0x38>)
 800a3dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <std+0x3c>)
 800a3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x40>)
 800a3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x44>)
 800a3e8:	6224      	str	r4, [r4, #32]
 800a3ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0800b3e5 	.word	0x0800b3e5
 800a3f4:	0800b40b 	.word	0x0800b40b
 800a3f8:	0800b443 	.word	0x0800b443
 800a3fc:	0800b467 	.word	0x0800b467

0800a400 <_cleanup_r>:
 800a400:	4901      	ldr	r1, [pc, #4]	; (800a408 <_cleanup_r+0x8>)
 800a402:	f000 b885 	b.w	800a510 <_fwalk_reent>
 800a406:	bf00      	nop
 800a408:	0800a365 	.word	0x0800a365

0800a40c <__sfmoreglue>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	1e4a      	subs	r2, r1, #1
 800a410:	2568      	movs	r5, #104	; 0x68
 800a412:	4355      	muls	r5, r2
 800a414:	460e      	mov	r6, r1
 800a416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a41a:	f000 fcbd 	bl	800ad98 <_malloc_r>
 800a41e:	4604      	mov	r4, r0
 800a420:	b140      	cbz	r0, 800a434 <__sfmoreglue+0x28>
 800a422:	2100      	movs	r1, #0
 800a424:	e9c0 1600 	strd	r1, r6, [r0]
 800a428:	300c      	adds	r0, #12
 800a42a:	60a0      	str	r0, [r4, #8]
 800a42c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a430:	f7fd fcc9 	bl	8007dc6 <memset>
 800a434:	4620      	mov	r0, r4
 800a436:	bd70      	pop	{r4, r5, r6, pc}

0800a438 <__sinit>:
 800a438:	6983      	ldr	r3, [r0, #24]
 800a43a:	b510      	push	{r4, lr}
 800a43c:	4604      	mov	r4, r0
 800a43e:	bb33      	cbnz	r3, 800a48e <__sinit+0x56>
 800a440:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a444:	6503      	str	r3, [r0, #80]	; 0x50
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <__sinit+0x58>)
 800a448:	4a12      	ldr	r2, [pc, #72]	; (800a494 <__sinit+0x5c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6282      	str	r2, [r0, #40]	; 0x28
 800a44e:	4298      	cmp	r0, r3
 800a450:	bf04      	itt	eq
 800a452:	2301      	moveq	r3, #1
 800a454:	6183      	streq	r3, [r0, #24]
 800a456:	f000 f81f 	bl	800a498 <__sfp>
 800a45a:	6060      	str	r0, [r4, #4]
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 f81b 	bl	800a498 <__sfp>
 800a462:	60a0      	str	r0, [r4, #8]
 800a464:	4620      	mov	r0, r4
 800a466:	f000 f817 	bl	800a498 <__sfp>
 800a46a:	2200      	movs	r2, #0
 800a46c:	60e0      	str	r0, [r4, #12]
 800a46e:	2104      	movs	r1, #4
 800a470:	6860      	ldr	r0, [r4, #4]
 800a472:	f7ff ffa1 	bl	800a3b8 <std>
 800a476:	2201      	movs	r2, #1
 800a478:	2109      	movs	r1, #9
 800a47a:	68a0      	ldr	r0, [r4, #8]
 800a47c:	f7ff ff9c 	bl	800a3b8 <std>
 800a480:	2202      	movs	r2, #2
 800a482:	2112      	movs	r1, #18
 800a484:	68e0      	ldr	r0, [r4, #12]
 800a486:	f7ff ff97 	bl	800a3b8 <std>
 800a48a:	2301      	movs	r3, #1
 800a48c:	61a3      	str	r3, [r4, #24]
 800a48e:	bd10      	pop	{r4, pc}
 800a490:	0800c29c 	.word	0x0800c29c
 800a494:	0800a401 	.word	0x0800a401

0800a498 <__sfp>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	4b1b      	ldr	r3, [pc, #108]	; (800a508 <__sfp+0x70>)
 800a49c:	681e      	ldr	r6, [r3, #0]
 800a49e:	69b3      	ldr	r3, [r6, #24]
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	b913      	cbnz	r3, 800a4aa <__sfp+0x12>
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f7ff ffc7 	bl	800a438 <__sinit>
 800a4aa:	3648      	adds	r6, #72	; 0x48
 800a4ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	d503      	bpl.n	800a4bc <__sfp+0x24>
 800a4b4:	6833      	ldr	r3, [r6, #0]
 800a4b6:	b133      	cbz	r3, 800a4c6 <__sfp+0x2e>
 800a4b8:	6836      	ldr	r6, [r6, #0]
 800a4ba:	e7f7      	b.n	800a4ac <__sfp+0x14>
 800a4bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4c0:	b16d      	cbz	r5, 800a4de <__sfp+0x46>
 800a4c2:	3468      	adds	r4, #104	; 0x68
 800a4c4:	e7f4      	b.n	800a4b0 <__sfp+0x18>
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ff9f 	bl	800a40c <__sfmoreglue>
 800a4ce:	6030      	str	r0, [r6, #0]
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1f1      	bne.n	800a4b8 <__sfp+0x20>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4604      	mov	r4, r0
 800a4da:	4620      	mov	r0, r4
 800a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4de:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <__sfp+0x74>)
 800a4e0:	6665      	str	r5, [r4, #100]	; 0x64
 800a4e2:	e9c4 5500 	strd	r5, r5, [r4]
 800a4e6:	60a5      	str	r5, [r4, #8]
 800a4e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a4ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a4f0:	2208      	movs	r2, #8
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4f8:	f7fd fc65 	bl	8007dc6 <memset>
 800a4fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a504:	e7e9      	b.n	800a4da <__sfp+0x42>
 800a506:	bf00      	nop
 800a508:	0800c29c 	.word	0x0800c29c
 800a50c:	ffff0001 	.word	0xffff0001

0800a510 <_fwalk_reent>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	4680      	mov	r8, r0
 800a516:	4689      	mov	r9, r1
 800a518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a51c:	2600      	movs	r6, #0
 800a51e:	b914      	cbnz	r4, 800a526 <_fwalk_reent+0x16>
 800a520:	4630      	mov	r0, r6
 800a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a526:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a52a:	3f01      	subs	r7, #1
 800a52c:	d501      	bpl.n	800a532 <_fwalk_reent+0x22>
 800a52e:	6824      	ldr	r4, [r4, #0]
 800a530:	e7f5      	b.n	800a51e <_fwalk_reent+0xe>
 800a532:	89ab      	ldrh	r3, [r5, #12]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d907      	bls.n	800a548 <_fwalk_reent+0x38>
 800a538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a53c:	3301      	adds	r3, #1
 800a53e:	d003      	beq.n	800a548 <_fwalk_reent+0x38>
 800a540:	4629      	mov	r1, r5
 800a542:	4640      	mov	r0, r8
 800a544:	47c8      	blx	r9
 800a546:	4306      	orrs	r6, r0
 800a548:	3568      	adds	r5, #104	; 0x68
 800a54a:	e7ee      	b.n	800a52a <_fwalk_reent+0x1a>

0800a54c <_findenv_r>:
 800a54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	4607      	mov	r7, r0
 800a552:	468b      	mov	fp, r1
 800a554:	4690      	mov	r8, r2
 800a556:	f001 f877 	bl	800b648 <__env_lock>
 800a55a:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <_findenv_r+0x74>)
 800a55c:	681d      	ldr	r5, [r3, #0]
 800a55e:	469a      	mov	sl, r3
 800a560:	b13d      	cbz	r5, 800a572 <_findenv_r+0x26>
 800a562:	465c      	mov	r4, fp
 800a564:	4623      	mov	r3, r4
 800a566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a56a:	b32a      	cbz	r2, 800a5b8 <_findenv_r+0x6c>
 800a56c:	2a3d      	cmp	r2, #61	; 0x3d
 800a56e:	461c      	mov	r4, r3
 800a570:	d1f8      	bne.n	800a564 <_findenv_r+0x18>
 800a572:	4638      	mov	r0, r7
 800a574:	f001 f869 	bl	800b64a <__env_unlock>
 800a578:	2000      	movs	r0, #0
 800a57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	464d      	mov	r5, r9
 800a580:	46a9      	mov	r9, r5
 800a582:	f859 0b04 	ldr.w	r0, [r9], #4
 800a586:	2800      	cmp	r0, #0
 800a588:	d0f3      	beq.n	800a572 <_findenv_r+0x26>
 800a58a:	4622      	mov	r2, r4
 800a58c:	4659      	mov	r1, fp
 800a58e:	f000 ff76 	bl	800b47e <strncmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	d1f3      	bne.n	800a57e <_findenv_r+0x32>
 800a596:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a59a:	191e      	adds	r6, r3, r4
 800a59c:	5d1b      	ldrb	r3, [r3, r4]
 800a59e:	2b3d      	cmp	r3, #61	; 0x3d
 800a5a0:	d1ed      	bne.n	800a57e <_findenv_r+0x32>
 800a5a2:	f8da 3000 	ldr.w	r3, [sl]
 800a5a6:	1aed      	subs	r5, r5, r3
 800a5a8:	10ad      	asrs	r5, r5, #2
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f8c8 5000 	str.w	r5, [r8]
 800a5b0:	f001 f84b 	bl	800b64a <__env_unlock>
 800a5b4:	1c70      	adds	r0, r6, #1
 800a5b6:	e7e0      	b.n	800a57a <_findenv_r+0x2e>
 800a5b8:	eba4 040b 	sub.w	r4, r4, fp
 800a5bc:	e7e0      	b.n	800a580 <_findenv_r+0x34>
 800a5be:	bf00      	nop
 800a5c0:	2000023c 	.word	0x2000023c

0800a5c4 <_getenv_r>:
 800a5c4:	b507      	push	{r0, r1, r2, lr}
 800a5c6:	aa01      	add	r2, sp, #4
 800a5c8:	f7ff ffc0 	bl	800a54c <_findenv_r>
 800a5cc:	b003      	add	sp, #12
 800a5ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a5d4 <__gettzinfo>:
 800a5d4:	4800      	ldr	r0, [pc, #0]	; (800a5d8 <__gettzinfo+0x4>)
 800a5d6:	4770      	bx	lr
 800a5d8:	20000078 	.word	0x20000078

0800a5dc <__locale_ctype_ptr_l>:
 800a5dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <__locale_ctype_ptr>:
 800a5e4:	4b04      	ldr	r3, [pc, #16]	; (800a5f8 <__locale_ctype_ptr+0x14>)
 800a5e6:	4a05      	ldr	r2, [pc, #20]	; (800a5fc <__locale_ctype_ptr+0x18>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf08      	it	eq
 800a5f0:	4613      	moveq	r3, r2
 800a5f2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a5f6:	4770      	bx	lr
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	200000d0 	.word	0x200000d0

0800a600 <_localeconv_r>:
 800a600:	4b04      	ldr	r3, [pc, #16]	; (800a614 <_localeconv_r+0x14>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6a18      	ldr	r0, [r3, #32]
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <_localeconv_r+0x18>)
 800a608:	2800      	cmp	r0, #0
 800a60a:	bf08      	it	eq
 800a60c:	4618      	moveq	r0, r3
 800a60e:	30f0      	adds	r0, #240	; 0xf0
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2000000c 	.word	0x2000000c
 800a618:	200000d0 	.word	0x200000d0

0800a61c <__swhatbuf_r>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a624:	2900      	cmp	r1, #0
 800a626:	b096      	sub	sp, #88	; 0x58
 800a628:	4614      	mov	r4, r2
 800a62a:	461d      	mov	r5, r3
 800a62c:	da07      	bge.n	800a63e <__swhatbuf_r+0x22>
 800a62e:	2300      	movs	r3, #0
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	89b3      	ldrh	r3, [r6, #12]
 800a634:	061a      	lsls	r2, r3, #24
 800a636:	d410      	bmi.n	800a65a <__swhatbuf_r+0x3e>
 800a638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63c:	e00e      	b.n	800a65c <__swhatbuf_r+0x40>
 800a63e:	466a      	mov	r2, sp
 800a640:	f001 f804 	bl	800b64c <_fstat_r>
 800a644:	2800      	cmp	r0, #0
 800a646:	dbf2      	blt.n	800a62e <__swhatbuf_r+0x12>
 800a648:	9a01      	ldr	r2, [sp, #4]
 800a64a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a64e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a652:	425a      	negs	r2, r3
 800a654:	415a      	adcs	r2, r3
 800a656:	602a      	str	r2, [r5, #0]
 800a658:	e7ee      	b.n	800a638 <__swhatbuf_r+0x1c>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	2000      	movs	r0, #0
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	b016      	add	sp, #88	; 0x58
 800a662:	bd70      	pop	{r4, r5, r6, pc}

0800a664 <__smakebuf_r>:
 800a664:	898b      	ldrh	r3, [r1, #12]
 800a666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a668:	079d      	lsls	r5, r3, #30
 800a66a:	4606      	mov	r6, r0
 800a66c:	460c      	mov	r4, r1
 800a66e:	d507      	bpl.n	800a680 <__smakebuf_r+0x1c>
 800a670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	2301      	movs	r3, #1
 800a67a:	6163      	str	r3, [r4, #20]
 800a67c:	b002      	add	sp, #8
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	ab01      	add	r3, sp, #4
 800a682:	466a      	mov	r2, sp
 800a684:	f7ff ffca 	bl	800a61c <__swhatbuf_r>
 800a688:	9900      	ldr	r1, [sp, #0]
 800a68a:	4605      	mov	r5, r0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 fb83 	bl	800ad98 <_malloc_r>
 800a692:	b948      	cbnz	r0, 800a6a8 <__smakebuf_r+0x44>
 800a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d4ef      	bmi.n	800a67c <__smakebuf_r+0x18>
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	f043 0302 	orr.w	r3, r3, #2
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7e3      	b.n	800a670 <__smakebuf_r+0xc>
 800a6a8:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <__smakebuf_r+0x7c>)
 800a6aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	6020      	str	r0, [r4, #0]
 800a6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	9b00      	ldr	r3, [sp, #0]
 800a6b8:	6163      	str	r3, [r4, #20]
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	6120      	str	r0, [r4, #16]
 800a6be:	b15b      	cbz	r3, 800a6d8 <__smakebuf_r+0x74>
 800a6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 ffd3 	bl	800b670 <_isatty_r>
 800a6ca:	b128      	cbz	r0, 800a6d8 <__smakebuf_r+0x74>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	431d      	orrs	r5, r3
 800a6dc:	81a5      	strh	r5, [r4, #12]
 800a6de:	e7cd      	b.n	800a67c <__smakebuf_r+0x18>
 800a6e0:	0800a401 	.word	0x0800a401

0800a6e4 <malloc>:
 800a6e4:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <malloc+0xc>)
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f000 bb55 	b.w	800ad98 <_malloc_r>
 800a6ee:	bf00      	nop
 800a6f0:	2000000c 	.word	0x2000000c

0800a6f4 <free>:
 800a6f4:	4b02      	ldr	r3, [pc, #8]	; (800a700 <free+0xc>)
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f000 baff 	b.w	800acfc <_free_r>
 800a6fe:	bf00      	nop
 800a700:	2000000c 	.word	0x2000000c

0800a704 <__ascii_mbtowc>:
 800a704:	b082      	sub	sp, #8
 800a706:	b901      	cbnz	r1, 800a70a <__ascii_mbtowc+0x6>
 800a708:	a901      	add	r1, sp, #4
 800a70a:	b142      	cbz	r2, 800a71e <__ascii_mbtowc+0x1a>
 800a70c:	b14b      	cbz	r3, 800a722 <__ascii_mbtowc+0x1e>
 800a70e:	7813      	ldrb	r3, [r2, #0]
 800a710:	600b      	str	r3, [r1, #0]
 800a712:	7812      	ldrb	r2, [r2, #0]
 800a714:	1c10      	adds	r0, r2, #0
 800a716:	bf18      	it	ne
 800a718:	2001      	movne	r0, #1
 800a71a:	b002      	add	sp, #8
 800a71c:	4770      	bx	lr
 800a71e:	4610      	mov	r0, r2
 800a720:	e7fb      	b.n	800a71a <__ascii_mbtowc+0x16>
 800a722:	f06f 0001 	mvn.w	r0, #1
 800a726:	e7f8      	b.n	800a71a <__ascii_mbtowc+0x16>

0800a728 <_Balloc>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a72c:	4604      	mov	r4, r0
 800a72e:	460e      	mov	r6, r1
 800a730:	b93d      	cbnz	r5, 800a742 <_Balloc+0x1a>
 800a732:	2010      	movs	r0, #16
 800a734:	f7ff ffd6 	bl	800a6e4 <malloc>
 800a738:	6260      	str	r0, [r4, #36]	; 0x24
 800a73a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a73e:	6005      	str	r5, [r0, #0]
 800a740:	60c5      	str	r5, [r0, #12]
 800a742:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a744:	68eb      	ldr	r3, [r5, #12]
 800a746:	b183      	cbz	r3, 800a76a <_Balloc+0x42>
 800a748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a750:	b9b8      	cbnz	r0, 800a782 <_Balloc+0x5a>
 800a752:	2101      	movs	r1, #1
 800a754:	fa01 f506 	lsl.w	r5, r1, r6
 800a758:	1d6a      	adds	r2, r5, #5
 800a75a:	0092      	lsls	r2, r2, #2
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 fabf 	bl	800ace0 <_calloc_r>
 800a762:	b160      	cbz	r0, 800a77e <_Balloc+0x56>
 800a764:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a768:	e00e      	b.n	800a788 <_Balloc+0x60>
 800a76a:	2221      	movs	r2, #33	; 0x21
 800a76c:	2104      	movs	r1, #4
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 fab6 	bl	800ace0 <_calloc_r>
 800a774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a776:	60e8      	str	r0, [r5, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e4      	bne.n	800a748 <_Balloc+0x20>
 800a77e:	2000      	movs	r0, #0
 800a780:	bd70      	pop	{r4, r5, r6, pc}
 800a782:	6802      	ldr	r2, [r0, #0]
 800a784:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a788:	2300      	movs	r3, #0
 800a78a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a78e:	e7f7      	b.n	800a780 <_Balloc+0x58>

0800a790 <_Bfree>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a794:	4606      	mov	r6, r0
 800a796:	460d      	mov	r5, r1
 800a798:	b93c      	cbnz	r4, 800a7aa <_Bfree+0x1a>
 800a79a:	2010      	movs	r0, #16
 800a79c:	f7ff ffa2 	bl	800a6e4 <malloc>
 800a7a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a7a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7a6:	6004      	str	r4, [r0, #0]
 800a7a8:	60c4      	str	r4, [r0, #12]
 800a7aa:	b13d      	cbz	r5, 800a7bc <_Bfree+0x2c>
 800a7ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a7ae:	686a      	ldr	r2, [r5, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7b6:	6029      	str	r1, [r5, #0]
 800a7b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a7bc:	bd70      	pop	{r4, r5, r6, pc}

0800a7be <__multadd>:
 800a7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c2:	690d      	ldr	r5, [r1, #16]
 800a7c4:	461f      	mov	r7, r3
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	f101 0c14 	add.w	ip, r1, #20
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f8dc 0000 	ldr.w	r0, [ip]
 800a7d4:	b281      	uxth	r1, r0
 800a7d6:	fb02 7101 	mla	r1, r2, r1, r7
 800a7da:	0c0f      	lsrs	r7, r1, #16
 800a7dc:	0c00      	lsrs	r0, r0, #16
 800a7de:	fb02 7000 	mla	r0, r2, r0, r7
 800a7e2:	b289      	uxth	r1, r1
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a7ea:	429d      	cmp	r5, r3
 800a7ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a7f0:	f84c 1b04 	str.w	r1, [ip], #4
 800a7f4:	dcec      	bgt.n	800a7d0 <__multadd+0x12>
 800a7f6:	b1d7      	cbz	r7, 800a82e <__multadd+0x70>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	42ab      	cmp	r3, r5
 800a7fc:	dc12      	bgt.n	800a824 <__multadd+0x66>
 800a7fe:	6861      	ldr	r1, [r4, #4]
 800a800:	4630      	mov	r0, r6
 800a802:	3101      	adds	r1, #1
 800a804:	f7ff ff90 	bl	800a728 <_Balloc>
 800a808:	6922      	ldr	r2, [r4, #16]
 800a80a:	3202      	adds	r2, #2
 800a80c:	f104 010c 	add.w	r1, r4, #12
 800a810:	4680      	mov	r8, r0
 800a812:	0092      	lsls	r2, r2, #2
 800a814:	300c      	adds	r0, #12
 800a816:	f7fd facb 	bl	8007db0 <memcpy>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ffb7 	bl	800a790 <_Bfree>
 800a822:	4644      	mov	r4, r8
 800a824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a828:	3501      	adds	r5, #1
 800a82a:	615f      	str	r7, [r3, #20]
 800a82c:	6125      	str	r5, [r4, #16]
 800a82e:	4620      	mov	r0, r4
 800a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a834 <__hi0bits>:
 800a834:	0c02      	lsrs	r2, r0, #16
 800a836:	0412      	lsls	r2, r2, #16
 800a838:	4603      	mov	r3, r0
 800a83a:	b9b2      	cbnz	r2, 800a86a <__hi0bits+0x36>
 800a83c:	0403      	lsls	r3, r0, #16
 800a83e:	2010      	movs	r0, #16
 800a840:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a844:	bf04      	itt	eq
 800a846:	021b      	lsleq	r3, r3, #8
 800a848:	3008      	addeq	r0, #8
 800a84a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a84e:	bf04      	itt	eq
 800a850:	011b      	lsleq	r3, r3, #4
 800a852:	3004      	addeq	r0, #4
 800a854:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a858:	bf04      	itt	eq
 800a85a:	009b      	lsleq	r3, r3, #2
 800a85c:	3002      	addeq	r0, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	db06      	blt.n	800a870 <__hi0bits+0x3c>
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	d503      	bpl.n	800a86e <__hi0bits+0x3a>
 800a866:	3001      	adds	r0, #1
 800a868:	4770      	bx	lr
 800a86a:	2000      	movs	r0, #0
 800a86c:	e7e8      	b.n	800a840 <__hi0bits+0xc>
 800a86e:	2020      	movs	r0, #32
 800a870:	4770      	bx	lr

0800a872 <__lo0bits>:
 800a872:	6803      	ldr	r3, [r0, #0]
 800a874:	f013 0207 	ands.w	r2, r3, #7
 800a878:	4601      	mov	r1, r0
 800a87a:	d00b      	beq.n	800a894 <__lo0bits+0x22>
 800a87c:	07da      	lsls	r2, r3, #31
 800a87e:	d423      	bmi.n	800a8c8 <__lo0bits+0x56>
 800a880:	0798      	lsls	r0, r3, #30
 800a882:	bf49      	itett	mi
 800a884:	085b      	lsrmi	r3, r3, #1
 800a886:	089b      	lsrpl	r3, r3, #2
 800a888:	2001      	movmi	r0, #1
 800a88a:	600b      	strmi	r3, [r1, #0]
 800a88c:	bf5c      	itt	pl
 800a88e:	600b      	strpl	r3, [r1, #0]
 800a890:	2002      	movpl	r0, #2
 800a892:	4770      	bx	lr
 800a894:	b298      	uxth	r0, r3
 800a896:	b9a8      	cbnz	r0, 800a8c4 <__lo0bits+0x52>
 800a898:	0c1b      	lsrs	r3, r3, #16
 800a89a:	2010      	movs	r0, #16
 800a89c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8a0:	bf04      	itt	eq
 800a8a2:	0a1b      	lsreq	r3, r3, #8
 800a8a4:	3008      	addeq	r0, #8
 800a8a6:	071a      	lsls	r2, r3, #28
 800a8a8:	bf04      	itt	eq
 800a8aa:	091b      	lsreq	r3, r3, #4
 800a8ac:	3004      	addeq	r0, #4
 800a8ae:	079a      	lsls	r2, r3, #30
 800a8b0:	bf04      	itt	eq
 800a8b2:	089b      	lsreq	r3, r3, #2
 800a8b4:	3002      	addeq	r0, #2
 800a8b6:	07da      	lsls	r2, r3, #31
 800a8b8:	d402      	bmi.n	800a8c0 <__lo0bits+0x4e>
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	d006      	beq.n	800a8cc <__lo0bits+0x5a>
 800a8be:	3001      	adds	r0, #1
 800a8c0:	600b      	str	r3, [r1, #0]
 800a8c2:	4770      	bx	lr
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	e7e9      	b.n	800a89c <__lo0bits+0x2a>
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	4770      	bx	lr
 800a8cc:	2020      	movs	r0, #32
 800a8ce:	4770      	bx	lr

0800a8d0 <__i2b>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	f7ff ff27 	bl	800a728 <_Balloc>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	6144      	str	r4, [r0, #20]
 800a8de:	6102      	str	r2, [r0, #16]
 800a8e0:	bd10      	pop	{r4, pc}

0800a8e2 <__multiply>:
 800a8e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	690a      	ldr	r2, [r1, #16]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	bfb8      	it	lt
 800a8f0:	460b      	movlt	r3, r1
 800a8f2:	4688      	mov	r8, r1
 800a8f4:	bfbc      	itt	lt
 800a8f6:	46a0      	movlt	r8, r4
 800a8f8:	461c      	movlt	r4, r3
 800a8fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a906:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a90a:	eb07 0609 	add.w	r6, r7, r9
 800a90e:	42b3      	cmp	r3, r6
 800a910:	bfb8      	it	lt
 800a912:	3101      	addlt	r1, #1
 800a914:	f7ff ff08 	bl	800a728 <_Balloc>
 800a918:	f100 0514 	add.w	r5, r0, #20
 800a91c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a920:	462b      	mov	r3, r5
 800a922:	2200      	movs	r2, #0
 800a924:	4573      	cmp	r3, lr
 800a926:	d316      	bcc.n	800a956 <__multiply+0x74>
 800a928:	f104 0214 	add.w	r2, r4, #20
 800a92c:	f108 0114 	add.w	r1, r8, #20
 800a930:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a934:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	9b00      	ldr	r3, [sp, #0]
 800a93c:	9201      	str	r2, [sp, #4]
 800a93e:	4293      	cmp	r3, r2
 800a940:	d80c      	bhi.n	800a95c <__multiply+0x7a>
 800a942:	2e00      	cmp	r6, #0
 800a944:	dd03      	ble.n	800a94e <__multiply+0x6c>
 800a946:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d05d      	beq.n	800aa0a <__multiply+0x128>
 800a94e:	6106      	str	r6, [r0, #16]
 800a950:	b003      	add	sp, #12
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	f843 2b04 	str.w	r2, [r3], #4
 800a95a:	e7e3      	b.n	800a924 <__multiply+0x42>
 800a95c:	f8b2 b000 	ldrh.w	fp, [r2]
 800a960:	f1bb 0f00 	cmp.w	fp, #0
 800a964:	d023      	beq.n	800a9ae <__multiply+0xcc>
 800a966:	4689      	mov	r9, r1
 800a968:	46ac      	mov	ip, r5
 800a96a:	f04f 0800 	mov.w	r8, #0
 800a96e:	f859 4b04 	ldr.w	r4, [r9], #4
 800a972:	f8dc a000 	ldr.w	sl, [ip]
 800a976:	b2a3      	uxth	r3, r4
 800a978:	fa1f fa8a 	uxth.w	sl, sl
 800a97c:	fb0b a303 	mla	r3, fp, r3, sl
 800a980:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a984:	f8dc 4000 	ldr.w	r4, [ip]
 800a988:	4443      	add	r3, r8
 800a98a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a98e:	fb0b 840a 	mla	r4, fp, sl, r8
 800a992:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a996:	46e2      	mov	sl, ip
 800a998:	b29b      	uxth	r3, r3
 800a99a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a99e:	454f      	cmp	r7, r9
 800a9a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a9a8:	d82b      	bhi.n	800aa02 <__multiply+0x120>
 800a9aa:	f8cc 8004 	str.w	r8, [ip, #4]
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a9b4:	3204      	adds	r2, #4
 800a9b6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ba:	d020      	beq.n	800a9fe <__multiply+0x11c>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	4689      	mov	r9, r1
 800a9c0:	46a8      	mov	r8, r5
 800a9c2:	f04f 0b00 	mov.w	fp, #0
 800a9c6:	f8b9 c000 	ldrh.w	ip, [r9]
 800a9ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a9ce:	fb0a 440c 	mla	r4, sl, ip, r4
 800a9d2:	445c      	add	r4, fp
 800a9d4:	46c4      	mov	ip, r8
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9dc:	f84c 3b04 	str.w	r3, [ip], #4
 800a9e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a9e8:	0c1b      	lsrs	r3, r3, #16
 800a9ea:	fb0a b303 	mla	r3, sl, r3, fp
 800a9ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9f2:	454f      	cmp	r7, r9
 800a9f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a9f8:	d805      	bhi.n	800aa06 <__multiply+0x124>
 800a9fa:	f8c8 3004 	str.w	r3, [r8, #4]
 800a9fe:	3504      	adds	r5, #4
 800aa00:	e79b      	b.n	800a93a <__multiply+0x58>
 800aa02:	46d4      	mov	ip, sl
 800aa04:	e7b3      	b.n	800a96e <__multiply+0x8c>
 800aa06:	46e0      	mov	r8, ip
 800aa08:	e7dd      	b.n	800a9c6 <__multiply+0xe4>
 800aa0a:	3e01      	subs	r6, #1
 800aa0c:	e799      	b.n	800a942 <__multiply+0x60>
	...

0800aa10 <__pow5mult>:
 800aa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa14:	4615      	mov	r5, r2
 800aa16:	f012 0203 	ands.w	r2, r2, #3
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	460f      	mov	r7, r1
 800aa1e:	d007      	beq.n	800aa30 <__pow5mult+0x20>
 800aa20:	3a01      	subs	r2, #1
 800aa22:	4c21      	ldr	r4, [pc, #132]	; (800aaa8 <__pow5mult+0x98>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa2a:	f7ff fec8 	bl	800a7be <__multadd>
 800aa2e:	4607      	mov	r7, r0
 800aa30:	10ad      	asrs	r5, r5, #2
 800aa32:	d035      	beq.n	800aaa0 <__pow5mult+0x90>
 800aa34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa36:	b93c      	cbnz	r4, 800aa48 <__pow5mult+0x38>
 800aa38:	2010      	movs	r0, #16
 800aa3a:	f7ff fe53 	bl	800a6e4 <malloc>
 800aa3e:	6270      	str	r0, [r6, #36]	; 0x24
 800aa40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa44:	6004      	str	r4, [r0, #0]
 800aa46:	60c4      	str	r4, [r0, #12]
 800aa48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa50:	b94c      	cbnz	r4, 800aa66 <__pow5mult+0x56>
 800aa52:	f240 2171 	movw	r1, #625	; 0x271
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff ff3a 	bl	800a8d0 <__i2b>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa62:	4604      	mov	r4, r0
 800aa64:	6003      	str	r3, [r0, #0]
 800aa66:	f04f 0800 	mov.w	r8, #0
 800aa6a:	07eb      	lsls	r3, r5, #31
 800aa6c:	d50a      	bpl.n	800aa84 <__pow5mult+0x74>
 800aa6e:	4639      	mov	r1, r7
 800aa70:	4622      	mov	r2, r4
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ff35 	bl	800a8e2 <__multiply>
 800aa78:	4639      	mov	r1, r7
 800aa7a:	4681      	mov	r9, r0
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f7ff fe87 	bl	800a790 <_Bfree>
 800aa82:	464f      	mov	r7, r9
 800aa84:	106d      	asrs	r5, r5, #1
 800aa86:	d00b      	beq.n	800aaa0 <__pow5mult+0x90>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	b938      	cbnz	r0, 800aa9c <__pow5mult+0x8c>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7ff ff26 	bl	800a8e2 <__multiply>
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	f8c0 8000 	str.w	r8, [r0]
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	e7e4      	b.n	800aa6a <__pow5mult+0x5a>
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0800c538 	.word	0x0800c538

0800aaac <__lshift>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	6849      	ldr	r1, [r1, #4]
 800aaba:	eb0a 0903 	add.w	r9, sl, r3
 800aabe:	68a3      	ldr	r3, [r4, #8]
 800aac0:	4607      	mov	r7, r0
 800aac2:	4616      	mov	r6, r2
 800aac4:	f109 0501 	add.w	r5, r9, #1
 800aac8:	42ab      	cmp	r3, r5
 800aaca:	db32      	blt.n	800ab32 <__lshift+0x86>
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff fe2b 	bl	800a728 <_Balloc>
 800aad2:	2300      	movs	r3, #0
 800aad4:	4680      	mov	r8, r0
 800aad6:	f100 0114 	add.w	r1, r0, #20
 800aada:	461a      	mov	r2, r3
 800aadc:	4553      	cmp	r3, sl
 800aade:	db2b      	blt.n	800ab38 <__lshift+0x8c>
 800aae0:	6920      	ldr	r0, [r4, #16]
 800aae2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aae6:	f104 0314 	add.w	r3, r4, #20
 800aaea:	f016 021f 	ands.w	r2, r6, #31
 800aaee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaf6:	d025      	beq.n	800ab44 <__lshift+0x98>
 800aaf8:	f1c2 0e20 	rsb	lr, r2, #32
 800aafc:	2000      	movs	r0, #0
 800aafe:	681e      	ldr	r6, [r3, #0]
 800ab00:	468a      	mov	sl, r1
 800ab02:	4096      	lsls	r6, r2
 800ab04:	4330      	orrs	r0, r6
 800ab06:	f84a 0b04 	str.w	r0, [sl], #4
 800ab0a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab0e:	459c      	cmp	ip, r3
 800ab10:	fa20 f00e 	lsr.w	r0, r0, lr
 800ab14:	d814      	bhi.n	800ab40 <__lshift+0x94>
 800ab16:	6048      	str	r0, [r1, #4]
 800ab18:	b108      	cbz	r0, 800ab1e <__lshift+0x72>
 800ab1a:	f109 0502 	add.w	r5, r9, #2
 800ab1e:	3d01      	subs	r5, #1
 800ab20:	4638      	mov	r0, r7
 800ab22:	f8c8 5010 	str.w	r5, [r8, #16]
 800ab26:	4621      	mov	r1, r4
 800ab28:	f7ff fe32 	bl	800a790 <_Bfree>
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	3101      	adds	r1, #1
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	e7c7      	b.n	800aac8 <__lshift+0x1c>
 800ab38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	e7cd      	b.n	800aadc <__lshift+0x30>
 800ab40:	4651      	mov	r1, sl
 800ab42:	e7dc      	b.n	800aafe <__lshift+0x52>
 800ab44:	3904      	subs	r1, #4
 800ab46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab4a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab4e:	459c      	cmp	ip, r3
 800ab50:	d8f9      	bhi.n	800ab46 <__lshift+0x9a>
 800ab52:	e7e4      	b.n	800ab1e <__lshift+0x72>

0800ab54 <__mcmp>:
 800ab54:	6903      	ldr	r3, [r0, #16]
 800ab56:	690a      	ldr	r2, [r1, #16]
 800ab58:	1a9b      	subs	r3, r3, r2
 800ab5a:	b530      	push	{r4, r5, lr}
 800ab5c:	d10c      	bne.n	800ab78 <__mcmp+0x24>
 800ab5e:	0092      	lsls	r2, r2, #2
 800ab60:	3014      	adds	r0, #20
 800ab62:	3114      	adds	r1, #20
 800ab64:	1884      	adds	r4, r0, r2
 800ab66:	4411      	add	r1, r2
 800ab68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab70:	4295      	cmp	r5, r2
 800ab72:	d003      	beq.n	800ab7c <__mcmp+0x28>
 800ab74:	d305      	bcc.n	800ab82 <__mcmp+0x2e>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4618      	mov	r0, r3
 800ab7a:	bd30      	pop	{r4, r5, pc}
 800ab7c:	42a0      	cmp	r0, r4
 800ab7e:	d3f3      	bcc.n	800ab68 <__mcmp+0x14>
 800ab80:	e7fa      	b.n	800ab78 <__mcmp+0x24>
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
 800ab86:	e7f7      	b.n	800ab78 <__mcmp+0x24>

0800ab88 <__mdiff>:
 800ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	4607      	mov	r7, r0
 800ab90:	4611      	mov	r1, r2
 800ab92:	4628      	mov	r0, r5
 800ab94:	4614      	mov	r4, r2
 800ab96:	f7ff ffdd 	bl	800ab54 <__mcmp>
 800ab9a:	1e06      	subs	r6, r0, #0
 800ab9c:	d108      	bne.n	800abb0 <__mdiff+0x28>
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7ff fdc1 	bl	800a728 <_Balloc>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800abac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb0:	bfa4      	itt	ge
 800abb2:	4623      	movge	r3, r4
 800abb4:	462c      	movge	r4, r5
 800abb6:	4638      	mov	r0, r7
 800abb8:	6861      	ldr	r1, [r4, #4]
 800abba:	bfa6      	itte	ge
 800abbc:	461d      	movge	r5, r3
 800abbe:	2600      	movge	r6, #0
 800abc0:	2601      	movlt	r6, #1
 800abc2:	f7ff fdb1 	bl	800a728 <_Balloc>
 800abc6:	692b      	ldr	r3, [r5, #16]
 800abc8:	60c6      	str	r6, [r0, #12]
 800abca:	6926      	ldr	r6, [r4, #16]
 800abcc:	f105 0914 	add.w	r9, r5, #20
 800abd0:	f104 0214 	add.w	r2, r4, #20
 800abd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800abd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800abdc:	f100 0514 	add.w	r5, r0, #20
 800abe0:	f04f 0e00 	mov.w	lr, #0
 800abe4:	f852 ab04 	ldr.w	sl, [r2], #4
 800abe8:	f859 4b04 	ldr.w	r4, [r9], #4
 800abec:	fa1e f18a 	uxtah	r1, lr, sl
 800abf0:	b2a3      	uxth	r3, r4
 800abf2:	1ac9      	subs	r1, r1, r3
 800abf4:	0c23      	lsrs	r3, r4, #16
 800abf6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800abfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800abfe:	b289      	uxth	r1, r1
 800ac00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ac04:	45c8      	cmp	r8, r9
 800ac06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac0a:	4694      	mov	ip, r2
 800ac0c:	f845 3b04 	str.w	r3, [r5], #4
 800ac10:	d8e8      	bhi.n	800abe4 <__mdiff+0x5c>
 800ac12:	45bc      	cmp	ip, r7
 800ac14:	d304      	bcc.n	800ac20 <__mdiff+0x98>
 800ac16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ac1a:	b183      	cbz	r3, 800ac3e <__mdiff+0xb6>
 800ac1c:	6106      	str	r6, [r0, #16]
 800ac1e:	e7c5      	b.n	800abac <__mdiff+0x24>
 800ac20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac24:	fa1e f381 	uxtah	r3, lr, r1
 800ac28:	141a      	asrs	r2, r3, #16
 800ac2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ac38:	f845 3b04 	str.w	r3, [r5], #4
 800ac3c:	e7e9      	b.n	800ac12 <__mdiff+0x8a>
 800ac3e:	3e01      	subs	r6, #1
 800ac40:	e7e9      	b.n	800ac16 <__mdiff+0x8e>

0800ac42 <__d2b>:
 800ac42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac46:	460e      	mov	r6, r1
 800ac48:	2101      	movs	r1, #1
 800ac4a:	ec59 8b10 	vmov	r8, r9, d0
 800ac4e:	4615      	mov	r5, r2
 800ac50:	f7ff fd6a 	bl	800a728 <_Balloc>
 800ac54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac58:	4607      	mov	r7, r0
 800ac5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac5e:	bb34      	cbnz	r4, 800acae <__d2b+0x6c>
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f1b8 0300 	subs.w	r3, r8, #0
 800ac66:	d027      	beq.n	800acb8 <__d2b+0x76>
 800ac68:	a802      	add	r0, sp, #8
 800ac6a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ac6e:	f7ff fe00 	bl	800a872 <__lo0bits>
 800ac72:	9900      	ldr	r1, [sp, #0]
 800ac74:	b1f0      	cbz	r0, 800acb4 <__d2b+0x72>
 800ac76:	9a01      	ldr	r2, [sp, #4]
 800ac78:	f1c0 0320 	rsb	r3, r0, #32
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	430b      	orrs	r3, r1
 800ac82:	40c2      	lsrs	r2, r0
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	61bb      	str	r3, [r7, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bf14      	ite	ne
 800ac90:	2102      	movne	r1, #2
 800ac92:	2101      	moveq	r1, #1
 800ac94:	6139      	str	r1, [r7, #16]
 800ac96:	b1c4      	cbz	r4, 800acca <__d2b+0x88>
 800ac98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac9c:	4404      	add	r4, r0
 800ac9e:	6034      	str	r4, [r6, #0]
 800aca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aca4:	6028      	str	r0, [r5, #0]
 800aca6:	4638      	mov	r0, r7
 800aca8:	b003      	add	sp, #12
 800acaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acb2:	e7d5      	b.n	800ac60 <__d2b+0x1e>
 800acb4:	6179      	str	r1, [r7, #20]
 800acb6:	e7e7      	b.n	800ac88 <__d2b+0x46>
 800acb8:	a801      	add	r0, sp, #4
 800acba:	f7ff fdda 	bl	800a872 <__lo0bits>
 800acbe:	9b01      	ldr	r3, [sp, #4]
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	2101      	movs	r1, #1
 800acc4:	6139      	str	r1, [r7, #16]
 800acc6:	3020      	adds	r0, #32
 800acc8:	e7e5      	b.n	800ac96 <__d2b+0x54>
 800acca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800acce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acd2:	6030      	str	r0, [r6, #0]
 800acd4:	6918      	ldr	r0, [r3, #16]
 800acd6:	f7ff fdad 	bl	800a834 <__hi0bits>
 800acda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800acde:	e7e1      	b.n	800aca4 <__d2b+0x62>

0800ace0 <_calloc_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	fb02 f401 	mul.w	r4, r2, r1
 800ace6:	4621      	mov	r1, r4
 800ace8:	f000 f856 	bl	800ad98 <_malloc_r>
 800acec:	4605      	mov	r5, r0
 800acee:	b118      	cbz	r0, 800acf8 <_calloc_r+0x18>
 800acf0:	4622      	mov	r2, r4
 800acf2:	2100      	movs	r1, #0
 800acf4:	f7fd f867 	bl	8007dc6 <memset>
 800acf8:	4628      	mov	r0, r5
 800acfa:	bd38      	pop	{r3, r4, r5, pc}

0800acfc <_free_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4605      	mov	r5, r0
 800ad00:	2900      	cmp	r1, #0
 800ad02:	d045      	beq.n	800ad90 <_free_r+0x94>
 800ad04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad08:	1f0c      	subs	r4, r1, #4
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfb8      	it	lt
 800ad0e:	18e4      	addlt	r4, r4, r3
 800ad10:	f000 fce9 	bl	800b6e6 <__malloc_lock>
 800ad14:	4a1f      	ldr	r2, [pc, #124]	; (800ad94 <_free_r+0x98>)
 800ad16:	6813      	ldr	r3, [r2, #0]
 800ad18:	4610      	mov	r0, r2
 800ad1a:	b933      	cbnz	r3, 800ad2a <_free_r+0x2e>
 800ad1c:	6063      	str	r3, [r4, #4]
 800ad1e:	6014      	str	r4, [r2, #0]
 800ad20:	4628      	mov	r0, r5
 800ad22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad26:	f000 bcdf 	b.w	800b6e8 <__malloc_unlock>
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	d90c      	bls.n	800ad48 <_free_r+0x4c>
 800ad2e:	6821      	ldr	r1, [r4, #0]
 800ad30:	1862      	adds	r2, r4, r1
 800ad32:	4293      	cmp	r3, r2
 800ad34:	bf04      	itt	eq
 800ad36:	681a      	ldreq	r2, [r3, #0]
 800ad38:	685b      	ldreq	r3, [r3, #4]
 800ad3a:	6063      	str	r3, [r4, #4]
 800ad3c:	bf04      	itt	eq
 800ad3e:	1852      	addeq	r2, r2, r1
 800ad40:	6022      	streq	r2, [r4, #0]
 800ad42:	6004      	str	r4, [r0, #0]
 800ad44:	e7ec      	b.n	800ad20 <_free_r+0x24>
 800ad46:	4613      	mov	r3, r2
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	b10a      	cbz	r2, 800ad50 <_free_r+0x54>
 800ad4c:	42a2      	cmp	r2, r4
 800ad4e:	d9fa      	bls.n	800ad46 <_free_r+0x4a>
 800ad50:	6819      	ldr	r1, [r3, #0]
 800ad52:	1858      	adds	r0, r3, r1
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d10b      	bne.n	800ad70 <_free_r+0x74>
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	4401      	add	r1, r0
 800ad5c:	1858      	adds	r0, r3, r1
 800ad5e:	4282      	cmp	r2, r0
 800ad60:	6019      	str	r1, [r3, #0]
 800ad62:	d1dd      	bne.n	800ad20 <_free_r+0x24>
 800ad64:	6810      	ldr	r0, [r2, #0]
 800ad66:	6852      	ldr	r2, [r2, #4]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	4401      	add	r1, r0
 800ad6c:	6019      	str	r1, [r3, #0]
 800ad6e:	e7d7      	b.n	800ad20 <_free_r+0x24>
 800ad70:	d902      	bls.n	800ad78 <_free_r+0x7c>
 800ad72:	230c      	movs	r3, #12
 800ad74:	602b      	str	r3, [r5, #0]
 800ad76:	e7d3      	b.n	800ad20 <_free_r+0x24>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	1821      	adds	r1, r4, r0
 800ad7c:	428a      	cmp	r2, r1
 800ad7e:	bf04      	itt	eq
 800ad80:	6811      	ldreq	r1, [r2, #0]
 800ad82:	6852      	ldreq	r2, [r2, #4]
 800ad84:	6062      	str	r2, [r4, #4]
 800ad86:	bf04      	itt	eq
 800ad88:	1809      	addeq	r1, r1, r0
 800ad8a:	6021      	streq	r1, [r4, #0]
 800ad8c:	605c      	str	r4, [r3, #4]
 800ad8e:	e7c7      	b.n	800ad20 <_free_r+0x24>
 800ad90:	bd38      	pop	{r3, r4, r5, pc}
 800ad92:	bf00      	nop
 800ad94:	20007d3c 	.word	0x20007d3c

0800ad98 <_malloc_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	1ccd      	adds	r5, r1, #3
 800ad9c:	f025 0503 	bic.w	r5, r5, #3
 800ada0:	3508      	adds	r5, #8
 800ada2:	2d0c      	cmp	r5, #12
 800ada4:	bf38      	it	cc
 800ada6:	250c      	movcc	r5, #12
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	4606      	mov	r6, r0
 800adac:	db01      	blt.n	800adb2 <_malloc_r+0x1a>
 800adae:	42a9      	cmp	r1, r5
 800adb0:	d903      	bls.n	800adba <_malloc_r+0x22>
 800adb2:	230c      	movs	r3, #12
 800adb4:	6033      	str	r3, [r6, #0]
 800adb6:	2000      	movs	r0, #0
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	f000 fc94 	bl	800b6e6 <__malloc_lock>
 800adbe:	4a21      	ldr	r2, [pc, #132]	; (800ae44 <_malloc_r+0xac>)
 800adc0:	6814      	ldr	r4, [r2, #0]
 800adc2:	4621      	mov	r1, r4
 800adc4:	b991      	cbnz	r1, 800adec <_malloc_r+0x54>
 800adc6:	4c20      	ldr	r4, [pc, #128]	; (800ae48 <_malloc_r+0xb0>)
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	b91b      	cbnz	r3, 800add4 <_malloc_r+0x3c>
 800adcc:	4630      	mov	r0, r6
 800adce:	f000 facf 	bl	800b370 <_sbrk_r>
 800add2:	6020      	str	r0, [r4, #0]
 800add4:	4629      	mov	r1, r5
 800add6:	4630      	mov	r0, r6
 800add8:	f000 faca 	bl	800b370 <_sbrk_r>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d124      	bne.n	800ae2a <_malloc_r+0x92>
 800ade0:	230c      	movs	r3, #12
 800ade2:	6033      	str	r3, [r6, #0]
 800ade4:	4630      	mov	r0, r6
 800ade6:	f000 fc7f 	bl	800b6e8 <__malloc_unlock>
 800adea:	e7e4      	b.n	800adb6 <_malloc_r+0x1e>
 800adec:	680b      	ldr	r3, [r1, #0]
 800adee:	1b5b      	subs	r3, r3, r5
 800adf0:	d418      	bmi.n	800ae24 <_malloc_r+0x8c>
 800adf2:	2b0b      	cmp	r3, #11
 800adf4:	d90f      	bls.n	800ae16 <_malloc_r+0x7e>
 800adf6:	600b      	str	r3, [r1, #0]
 800adf8:	50cd      	str	r5, [r1, r3]
 800adfa:	18cc      	adds	r4, r1, r3
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 fc73 	bl	800b6e8 <__malloc_unlock>
 800ae02:	f104 000b 	add.w	r0, r4, #11
 800ae06:	1d23      	adds	r3, r4, #4
 800ae08:	f020 0007 	bic.w	r0, r0, #7
 800ae0c:	1ac3      	subs	r3, r0, r3
 800ae0e:	d0d3      	beq.n	800adb8 <_malloc_r+0x20>
 800ae10:	425a      	negs	r2, r3
 800ae12:	50e2      	str	r2, [r4, r3]
 800ae14:	e7d0      	b.n	800adb8 <_malloc_r+0x20>
 800ae16:	428c      	cmp	r4, r1
 800ae18:	684b      	ldr	r3, [r1, #4]
 800ae1a:	bf16      	itet	ne
 800ae1c:	6063      	strne	r3, [r4, #4]
 800ae1e:	6013      	streq	r3, [r2, #0]
 800ae20:	460c      	movne	r4, r1
 800ae22:	e7eb      	b.n	800adfc <_malloc_r+0x64>
 800ae24:	460c      	mov	r4, r1
 800ae26:	6849      	ldr	r1, [r1, #4]
 800ae28:	e7cc      	b.n	800adc4 <_malloc_r+0x2c>
 800ae2a:	1cc4      	adds	r4, r0, #3
 800ae2c:	f024 0403 	bic.w	r4, r4, #3
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d005      	beq.n	800ae40 <_malloc_r+0xa8>
 800ae34:	1a21      	subs	r1, r4, r0
 800ae36:	4630      	mov	r0, r6
 800ae38:	f000 fa9a 	bl	800b370 <_sbrk_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d0cf      	beq.n	800ade0 <_malloc_r+0x48>
 800ae40:	6025      	str	r5, [r4, #0]
 800ae42:	e7db      	b.n	800adfc <_malloc_r+0x64>
 800ae44:	20007d3c 	.word	0x20007d3c
 800ae48:	20007d40 	.word	0x20007d40

0800ae4c <__ssputs_r>:
 800ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae50:	688e      	ldr	r6, [r1, #8]
 800ae52:	429e      	cmp	r6, r3
 800ae54:	4682      	mov	sl, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	4690      	mov	r8, r2
 800ae5a:	4699      	mov	r9, r3
 800ae5c:	d837      	bhi.n	800aece <__ssputs_r+0x82>
 800ae5e:	898a      	ldrh	r2, [r1, #12]
 800ae60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae64:	d031      	beq.n	800aeca <__ssputs_r+0x7e>
 800ae66:	6825      	ldr	r5, [r4, #0]
 800ae68:	6909      	ldr	r1, [r1, #16]
 800ae6a:	1a6f      	subs	r7, r5, r1
 800ae6c:	6965      	ldr	r5, [r4, #20]
 800ae6e:	2302      	movs	r3, #2
 800ae70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae74:	fb95 f5f3 	sdiv	r5, r5, r3
 800ae78:	f109 0301 	add.w	r3, r9, #1
 800ae7c:	443b      	add	r3, r7
 800ae7e:	429d      	cmp	r5, r3
 800ae80:	bf38      	it	cc
 800ae82:	461d      	movcc	r5, r3
 800ae84:	0553      	lsls	r3, r2, #21
 800ae86:	d530      	bpl.n	800aeea <__ssputs_r+0x9e>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7ff ff85 	bl	800ad98 <_malloc_r>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	b950      	cbnz	r0, 800aea8 <__ssputs_r+0x5c>
 800ae92:	230c      	movs	r3, #12
 800ae94:	f8ca 3000 	str.w	r3, [sl]
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea8:	463a      	mov	r2, r7
 800aeaa:	6921      	ldr	r1, [r4, #16]
 800aeac:	f7fc ff80 	bl	8007db0 <memcpy>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	6126      	str	r6, [r4, #16]
 800aebe:	6165      	str	r5, [r4, #20]
 800aec0:	443e      	add	r6, r7
 800aec2:	1bed      	subs	r5, r5, r7
 800aec4:	6026      	str	r6, [r4, #0]
 800aec6:	60a5      	str	r5, [r4, #8]
 800aec8:	464e      	mov	r6, r9
 800aeca:	454e      	cmp	r6, r9
 800aecc:	d900      	bls.n	800aed0 <__ssputs_r+0x84>
 800aece:	464e      	mov	r6, r9
 800aed0:	4632      	mov	r2, r6
 800aed2:	4641      	mov	r1, r8
 800aed4:	6820      	ldr	r0, [r4, #0]
 800aed6:	f000 fbed 	bl	800b6b4 <memmove>
 800aeda:	68a3      	ldr	r3, [r4, #8]
 800aedc:	1b9b      	subs	r3, r3, r6
 800aede:	60a3      	str	r3, [r4, #8]
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	441e      	add	r6, r3
 800aee4:	6026      	str	r6, [r4, #0]
 800aee6:	2000      	movs	r0, #0
 800aee8:	e7dc      	b.n	800aea4 <__ssputs_r+0x58>
 800aeea:	462a      	mov	r2, r5
 800aeec:	f000 fbfd 	bl	800b6ea <_realloc_r>
 800aef0:	4606      	mov	r6, r0
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d1e2      	bne.n	800aebc <__ssputs_r+0x70>
 800aef6:	6921      	ldr	r1, [r4, #16]
 800aef8:	4650      	mov	r0, sl
 800aefa:	f7ff feff 	bl	800acfc <_free_r>
 800aefe:	e7c8      	b.n	800ae92 <__ssputs_r+0x46>

0800af00 <_svfiprintf_r>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	461d      	mov	r5, r3
 800af06:	898b      	ldrh	r3, [r1, #12]
 800af08:	061f      	lsls	r7, r3, #24
 800af0a:	b09d      	sub	sp, #116	; 0x74
 800af0c:	4680      	mov	r8, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	4616      	mov	r6, r2
 800af12:	d50f      	bpl.n	800af34 <_svfiprintf_r+0x34>
 800af14:	690b      	ldr	r3, [r1, #16]
 800af16:	b96b      	cbnz	r3, 800af34 <_svfiprintf_r+0x34>
 800af18:	2140      	movs	r1, #64	; 0x40
 800af1a:	f7ff ff3d 	bl	800ad98 <_malloc_r>
 800af1e:	6020      	str	r0, [r4, #0]
 800af20:	6120      	str	r0, [r4, #16]
 800af22:	b928      	cbnz	r0, 800af30 <_svfiprintf_r+0x30>
 800af24:	230c      	movs	r3, #12
 800af26:	f8c8 3000 	str.w	r3, [r8]
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295
 800af2e:	e0c8      	b.n	800b0c2 <_svfiprintf_r+0x1c2>
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	6163      	str	r3, [r4, #20]
 800af34:	2300      	movs	r3, #0
 800af36:	9309      	str	r3, [sp, #36]	; 0x24
 800af38:	2320      	movs	r3, #32
 800af3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af3e:	2330      	movs	r3, #48	; 0x30
 800af40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af44:	9503      	str	r5, [sp, #12]
 800af46:	f04f 0b01 	mov.w	fp, #1
 800af4a:	4637      	mov	r7, r6
 800af4c:	463d      	mov	r5, r7
 800af4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af52:	b10b      	cbz	r3, 800af58 <_svfiprintf_r+0x58>
 800af54:	2b25      	cmp	r3, #37	; 0x25
 800af56:	d13e      	bne.n	800afd6 <_svfiprintf_r+0xd6>
 800af58:	ebb7 0a06 	subs.w	sl, r7, r6
 800af5c:	d00b      	beq.n	800af76 <_svfiprintf_r+0x76>
 800af5e:	4653      	mov	r3, sl
 800af60:	4632      	mov	r2, r6
 800af62:	4621      	mov	r1, r4
 800af64:	4640      	mov	r0, r8
 800af66:	f7ff ff71 	bl	800ae4c <__ssputs_r>
 800af6a:	3001      	adds	r0, #1
 800af6c:	f000 80a4 	beq.w	800b0b8 <_svfiprintf_r+0x1b8>
 800af70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af72:	4453      	add	r3, sl
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	783b      	ldrb	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 809d 	beq.w	800b0b8 <_svfiprintf_r+0x1b8>
 800af7e:	2300      	movs	r3, #0
 800af80:	f04f 32ff 	mov.w	r2, #4294967295
 800af84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af88:	9304      	str	r3, [sp, #16]
 800af8a:	9307      	str	r3, [sp, #28]
 800af8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af90:	931a      	str	r3, [sp, #104]	; 0x68
 800af92:	462f      	mov	r7, r5
 800af94:	2205      	movs	r2, #5
 800af96:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af9a:	4850      	ldr	r0, [pc, #320]	; (800b0dc <_svfiprintf_r+0x1dc>)
 800af9c:	f7f5 f948 	bl	8000230 <memchr>
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	b9d0      	cbnz	r0, 800afda <_svfiprintf_r+0xda>
 800afa4:	06d9      	lsls	r1, r3, #27
 800afa6:	bf44      	itt	mi
 800afa8:	2220      	movmi	r2, #32
 800afaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afae:	071a      	lsls	r2, r3, #28
 800afb0:	bf44      	itt	mi
 800afb2:	222b      	movmi	r2, #43	; 0x2b
 800afb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afb8:	782a      	ldrb	r2, [r5, #0]
 800afba:	2a2a      	cmp	r2, #42	; 0x2a
 800afbc:	d015      	beq.n	800afea <_svfiprintf_r+0xea>
 800afbe:	9a07      	ldr	r2, [sp, #28]
 800afc0:	462f      	mov	r7, r5
 800afc2:	2000      	movs	r0, #0
 800afc4:	250a      	movs	r5, #10
 800afc6:	4639      	mov	r1, r7
 800afc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afcc:	3b30      	subs	r3, #48	; 0x30
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d94d      	bls.n	800b06e <_svfiprintf_r+0x16e>
 800afd2:	b1b8      	cbz	r0, 800b004 <_svfiprintf_r+0x104>
 800afd4:	e00f      	b.n	800aff6 <_svfiprintf_r+0xf6>
 800afd6:	462f      	mov	r7, r5
 800afd8:	e7b8      	b.n	800af4c <_svfiprintf_r+0x4c>
 800afda:	4a40      	ldr	r2, [pc, #256]	; (800b0dc <_svfiprintf_r+0x1dc>)
 800afdc:	1a80      	subs	r0, r0, r2
 800afde:	fa0b f000 	lsl.w	r0, fp, r0
 800afe2:	4318      	orrs	r0, r3
 800afe4:	9004      	str	r0, [sp, #16]
 800afe6:	463d      	mov	r5, r7
 800afe8:	e7d3      	b.n	800af92 <_svfiprintf_r+0x92>
 800afea:	9a03      	ldr	r2, [sp, #12]
 800afec:	1d11      	adds	r1, r2, #4
 800afee:	6812      	ldr	r2, [r2, #0]
 800aff0:	9103      	str	r1, [sp, #12]
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	db01      	blt.n	800affa <_svfiprintf_r+0xfa>
 800aff6:	9207      	str	r2, [sp, #28]
 800aff8:	e004      	b.n	800b004 <_svfiprintf_r+0x104>
 800affa:	4252      	negs	r2, r2
 800affc:	f043 0302 	orr.w	r3, r3, #2
 800b000:	9207      	str	r2, [sp, #28]
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	783b      	ldrb	r3, [r7, #0]
 800b006:	2b2e      	cmp	r3, #46	; 0x2e
 800b008:	d10c      	bne.n	800b024 <_svfiprintf_r+0x124>
 800b00a:	787b      	ldrb	r3, [r7, #1]
 800b00c:	2b2a      	cmp	r3, #42	; 0x2a
 800b00e:	d133      	bne.n	800b078 <_svfiprintf_r+0x178>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	1d1a      	adds	r2, r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	9203      	str	r2, [sp, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfb8      	it	lt
 800b01c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b020:	3702      	adds	r7, #2
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	4d2e      	ldr	r5, [pc, #184]	; (800b0e0 <_svfiprintf_r+0x1e0>)
 800b026:	7839      	ldrb	r1, [r7, #0]
 800b028:	2203      	movs	r2, #3
 800b02a:	4628      	mov	r0, r5
 800b02c:	f7f5 f900 	bl	8000230 <memchr>
 800b030:	b138      	cbz	r0, 800b042 <_svfiprintf_r+0x142>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	1b40      	subs	r0, r0, r5
 800b036:	fa03 f000 	lsl.w	r0, r3, r0
 800b03a:	9b04      	ldr	r3, [sp, #16]
 800b03c:	4303      	orrs	r3, r0
 800b03e:	3701      	adds	r7, #1
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	7839      	ldrb	r1, [r7, #0]
 800b044:	4827      	ldr	r0, [pc, #156]	; (800b0e4 <_svfiprintf_r+0x1e4>)
 800b046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b04a:	2206      	movs	r2, #6
 800b04c:	1c7e      	adds	r6, r7, #1
 800b04e:	f7f5 f8ef 	bl	8000230 <memchr>
 800b052:	2800      	cmp	r0, #0
 800b054:	d038      	beq.n	800b0c8 <_svfiprintf_r+0x1c8>
 800b056:	4b24      	ldr	r3, [pc, #144]	; (800b0e8 <_svfiprintf_r+0x1e8>)
 800b058:	bb13      	cbnz	r3, 800b0a0 <_svfiprintf_r+0x1a0>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	3307      	adds	r3, #7
 800b05e:	f023 0307 	bic.w	r3, r3, #7
 800b062:	3308      	adds	r3, #8
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	444b      	add	r3, r9
 800b06a:	9309      	str	r3, [sp, #36]	; 0x24
 800b06c:	e76d      	b.n	800af4a <_svfiprintf_r+0x4a>
 800b06e:	fb05 3202 	mla	r2, r5, r2, r3
 800b072:	2001      	movs	r0, #1
 800b074:	460f      	mov	r7, r1
 800b076:	e7a6      	b.n	800afc6 <_svfiprintf_r+0xc6>
 800b078:	2300      	movs	r3, #0
 800b07a:	3701      	adds	r7, #1
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	4619      	mov	r1, r3
 800b080:	250a      	movs	r5, #10
 800b082:	4638      	mov	r0, r7
 800b084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b088:	3a30      	subs	r2, #48	; 0x30
 800b08a:	2a09      	cmp	r2, #9
 800b08c:	d903      	bls.n	800b096 <_svfiprintf_r+0x196>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0c8      	beq.n	800b024 <_svfiprintf_r+0x124>
 800b092:	9105      	str	r1, [sp, #20]
 800b094:	e7c6      	b.n	800b024 <_svfiprintf_r+0x124>
 800b096:	fb05 2101 	mla	r1, r5, r1, r2
 800b09a:	2301      	movs	r3, #1
 800b09c:	4607      	mov	r7, r0
 800b09e:	e7f0      	b.n	800b082 <_svfiprintf_r+0x182>
 800b0a0:	ab03      	add	r3, sp, #12
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <_svfiprintf_r+0x1ec>)
 800b0a8:	a904      	add	r1, sp, #16
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f7fd f9bc 	bl	8008428 <_printf_float>
 800b0b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b0b4:	4681      	mov	r9, r0
 800b0b6:	d1d6      	bne.n	800b066 <_svfiprintf_r+0x166>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	065b      	lsls	r3, r3, #25
 800b0bc:	f53f af35 	bmi.w	800af2a <_svfiprintf_r+0x2a>
 800b0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0c2:	b01d      	add	sp, #116	; 0x74
 800b0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c8:	ab03      	add	r3, sp, #12
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <_svfiprintf_r+0x1ec>)
 800b0d0:	a904      	add	r1, sp, #16
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	f7fd fc5e 	bl	8008994 <_printf_i>
 800b0d8:	e7ea      	b.n	800b0b0 <_svfiprintf_r+0x1b0>
 800b0da:	bf00      	nop
 800b0dc:	0800c544 	.word	0x0800c544
 800b0e0:	0800c54a 	.word	0x0800c54a
 800b0e4:	0800c54e 	.word	0x0800c54e
 800b0e8:	08008429 	.word	0x08008429
 800b0ec:	0800ae4d 	.word	0x0800ae4d

0800b0f0 <__sfputc_r>:
 800b0f0:	6893      	ldr	r3, [r2, #8]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	b410      	push	{r4}
 800b0f8:	6093      	str	r3, [r2, #8]
 800b0fa:	da08      	bge.n	800b10e <__sfputc_r+0x1e>
 800b0fc:	6994      	ldr	r4, [r2, #24]
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	db01      	blt.n	800b106 <__sfputc_r+0x16>
 800b102:	290a      	cmp	r1, #10
 800b104:	d103      	bne.n	800b10e <__sfputc_r+0x1e>
 800b106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10a:	f7fe b98b 	b.w	8009424 <__swbuf_r>
 800b10e:	6813      	ldr	r3, [r2, #0]
 800b110:	1c58      	adds	r0, r3, #1
 800b112:	6010      	str	r0, [r2, #0]
 800b114:	7019      	strb	r1, [r3, #0]
 800b116:	4608      	mov	r0, r1
 800b118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <__sfputs_r>:
 800b11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	4614      	mov	r4, r2
 800b126:	18d5      	adds	r5, r2, r3
 800b128:	42ac      	cmp	r4, r5
 800b12a:	d101      	bne.n	800b130 <__sfputs_r+0x12>
 800b12c:	2000      	movs	r0, #0
 800b12e:	e007      	b.n	800b140 <__sfputs_r+0x22>
 800b130:	463a      	mov	r2, r7
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ffda 	bl	800b0f0 <__sfputc_r>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d1f3      	bne.n	800b128 <__sfputs_r+0xa>
 800b140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b144 <_vfiprintf_r>:
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	460c      	mov	r4, r1
 800b14a:	b09d      	sub	sp, #116	; 0x74
 800b14c:	4617      	mov	r7, r2
 800b14e:	461d      	mov	r5, r3
 800b150:	4606      	mov	r6, r0
 800b152:	b118      	cbz	r0, 800b15c <_vfiprintf_r+0x18>
 800b154:	6983      	ldr	r3, [r0, #24]
 800b156:	b90b      	cbnz	r3, 800b15c <_vfiprintf_r+0x18>
 800b158:	f7ff f96e 	bl	800a438 <__sinit>
 800b15c:	4b7c      	ldr	r3, [pc, #496]	; (800b350 <_vfiprintf_r+0x20c>)
 800b15e:	429c      	cmp	r4, r3
 800b160:	d158      	bne.n	800b214 <_vfiprintf_r+0xd0>
 800b162:	6874      	ldr	r4, [r6, #4]
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	0718      	lsls	r0, r3, #28
 800b168:	d55e      	bpl.n	800b228 <_vfiprintf_r+0xe4>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d05b      	beq.n	800b228 <_vfiprintf_r+0xe4>
 800b170:	2300      	movs	r3, #0
 800b172:	9309      	str	r3, [sp, #36]	; 0x24
 800b174:	2320      	movs	r3, #32
 800b176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b17a:	2330      	movs	r3, #48	; 0x30
 800b17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b180:	9503      	str	r5, [sp, #12]
 800b182:	f04f 0b01 	mov.w	fp, #1
 800b186:	46b8      	mov	r8, r7
 800b188:	4645      	mov	r5, r8
 800b18a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b18e:	b10b      	cbz	r3, 800b194 <_vfiprintf_r+0x50>
 800b190:	2b25      	cmp	r3, #37	; 0x25
 800b192:	d154      	bne.n	800b23e <_vfiprintf_r+0xfa>
 800b194:	ebb8 0a07 	subs.w	sl, r8, r7
 800b198:	d00b      	beq.n	800b1b2 <_vfiprintf_r+0x6e>
 800b19a:	4653      	mov	r3, sl
 800b19c:	463a      	mov	r2, r7
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff ffbc 	bl	800b11e <__sfputs_r>
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f000 80c2 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ae:	4453      	add	r3, sl
 800b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b2:	f898 3000 	ldrb.w	r3, [r8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 80ba 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	9307      	str	r3, [sp, #28]
 800b1ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d0:	46a8      	mov	r8, r5
 800b1d2:	2205      	movs	r2, #5
 800b1d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b1d8:	485e      	ldr	r0, [pc, #376]	; (800b354 <_vfiprintf_r+0x210>)
 800b1da:	f7f5 f829 	bl	8000230 <memchr>
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	bb78      	cbnz	r0, 800b242 <_vfiprintf_r+0xfe>
 800b1e2:	06d9      	lsls	r1, r3, #27
 800b1e4:	bf44      	itt	mi
 800b1e6:	2220      	movmi	r2, #32
 800b1e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1ec:	071a      	lsls	r2, r3, #28
 800b1ee:	bf44      	itt	mi
 800b1f0:	222b      	movmi	r2, #43	; 0x2b
 800b1f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1f6:	782a      	ldrb	r2, [r5, #0]
 800b1f8:	2a2a      	cmp	r2, #42	; 0x2a
 800b1fa:	d02a      	beq.n	800b252 <_vfiprintf_r+0x10e>
 800b1fc:	9a07      	ldr	r2, [sp, #28]
 800b1fe:	46a8      	mov	r8, r5
 800b200:	2000      	movs	r0, #0
 800b202:	250a      	movs	r5, #10
 800b204:	4641      	mov	r1, r8
 800b206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b20a:	3b30      	subs	r3, #48	; 0x30
 800b20c:	2b09      	cmp	r3, #9
 800b20e:	d969      	bls.n	800b2e4 <_vfiprintf_r+0x1a0>
 800b210:	b360      	cbz	r0, 800b26c <_vfiprintf_r+0x128>
 800b212:	e024      	b.n	800b25e <_vfiprintf_r+0x11a>
 800b214:	4b50      	ldr	r3, [pc, #320]	; (800b358 <_vfiprintf_r+0x214>)
 800b216:	429c      	cmp	r4, r3
 800b218:	d101      	bne.n	800b21e <_vfiprintf_r+0xda>
 800b21a:	68b4      	ldr	r4, [r6, #8]
 800b21c:	e7a2      	b.n	800b164 <_vfiprintf_r+0x20>
 800b21e:	4b4f      	ldr	r3, [pc, #316]	; (800b35c <_vfiprintf_r+0x218>)
 800b220:	429c      	cmp	r4, r3
 800b222:	bf08      	it	eq
 800b224:	68f4      	ldreq	r4, [r6, #12]
 800b226:	e79d      	b.n	800b164 <_vfiprintf_r+0x20>
 800b228:	4621      	mov	r1, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7fe f94c 	bl	80094c8 <__swsetup_r>
 800b230:	2800      	cmp	r0, #0
 800b232:	d09d      	beq.n	800b170 <_vfiprintf_r+0x2c>
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	b01d      	add	sp, #116	; 0x74
 800b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23e:	46a8      	mov	r8, r5
 800b240:	e7a2      	b.n	800b188 <_vfiprintf_r+0x44>
 800b242:	4a44      	ldr	r2, [pc, #272]	; (800b354 <_vfiprintf_r+0x210>)
 800b244:	1a80      	subs	r0, r0, r2
 800b246:	fa0b f000 	lsl.w	r0, fp, r0
 800b24a:	4318      	orrs	r0, r3
 800b24c:	9004      	str	r0, [sp, #16]
 800b24e:	4645      	mov	r5, r8
 800b250:	e7be      	b.n	800b1d0 <_vfiprintf_r+0x8c>
 800b252:	9a03      	ldr	r2, [sp, #12]
 800b254:	1d11      	adds	r1, r2, #4
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	9103      	str	r1, [sp, #12]
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	db01      	blt.n	800b262 <_vfiprintf_r+0x11e>
 800b25e:	9207      	str	r2, [sp, #28]
 800b260:	e004      	b.n	800b26c <_vfiprintf_r+0x128>
 800b262:	4252      	negs	r2, r2
 800b264:	f043 0302 	orr.w	r3, r3, #2
 800b268:	9207      	str	r2, [sp, #28]
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	f898 3000 	ldrb.w	r3, [r8]
 800b270:	2b2e      	cmp	r3, #46	; 0x2e
 800b272:	d10e      	bne.n	800b292 <_vfiprintf_r+0x14e>
 800b274:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b278:	2b2a      	cmp	r3, #42	; 0x2a
 800b27a:	d138      	bne.n	800b2ee <_vfiprintf_r+0x1aa>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	1d1a      	adds	r2, r3, #4
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	9203      	str	r2, [sp, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	bfb8      	it	lt
 800b288:	f04f 33ff 	movlt.w	r3, #4294967295
 800b28c:	f108 0802 	add.w	r8, r8, #2
 800b290:	9305      	str	r3, [sp, #20]
 800b292:	4d33      	ldr	r5, [pc, #204]	; (800b360 <_vfiprintf_r+0x21c>)
 800b294:	f898 1000 	ldrb.w	r1, [r8]
 800b298:	2203      	movs	r2, #3
 800b29a:	4628      	mov	r0, r5
 800b29c:	f7f4 ffc8 	bl	8000230 <memchr>
 800b2a0:	b140      	cbz	r0, 800b2b4 <_vfiprintf_r+0x170>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	1b40      	subs	r0, r0, r5
 800b2a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	4303      	orrs	r3, r0
 800b2ae:	f108 0801 	add.w	r8, r8, #1
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	f898 1000 	ldrb.w	r1, [r8]
 800b2b8:	482a      	ldr	r0, [pc, #168]	; (800b364 <_vfiprintf_r+0x220>)
 800b2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2be:	2206      	movs	r2, #6
 800b2c0:	f108 0701 	add.w	r7, r8, #1
 800b2c4:	f7f4 ffb4 	bl	8000230 <memchr>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d037      	beq.n	800b33c <_vfiprintf_r+0x1f8>
 800b2cc:	4b26      	ldr	r3, [pc, #152]	; (800b368 <_vfiprintf_r+0x224>)
 800b2ce:	bb1b      	cbnz	r3, 800b318 <_vfiprintf_r+0x1d4>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	3307      	adds	r3, #7
 800b2d4:	f023 0307 	bic.w	r3, r3, #7
 800b2d8:	3308      	adds	r3, #8
 800b2da:	9303      	str	r3, [sp, #12]
 800b2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2de:	444b      	add	r3, r9
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	e750      	b.n	800b186 <_vfiprintf_r+0x42>
 800b2e4:	fb05 3202 	mla	r2, r5, r2, r3
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	4688      	mov	r8, r1
 800b2ec:	e78a      	b.n	800b204 <_vfiprintf_r+0xc0>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f108 0801 	add.w	r8, r8, #1
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	250a      	movs	r5, #10
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b300:	3a30      	subs	r2, #48	; 0x30
 800b302:	2a09      	cmp	r2, #9
 800b304:	d903      	bls.n	800b30e <_vfiprintf_r+0x1ca>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0c3      	beq.n	800b292 <_vfiprintf_r+0x14e>
 800b30a:	9105      	str	r1, [sp, #20]
 800b30c:	e7c1      	b.n	800b292 <_vfiprintf_r+0x14e>
 800b30e:	fb05 2101 	mla	r1, r5, r1, r2
 800b312:	2301      	movs	r3, #1
 800b314:	4680      	mov	r8, r0
 800b316:	e7f0      	b.n	800b2fa <_vfiprintf_r+0x1b6>
 800b318:	ab03      	add	r3, sp, #12
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	4622      	mov	r2, r4
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <_vfiprintf_r+0x228>)
 800b320:	a904      	add	r1, sp, #16
 800b322:	4630      	mov	r0, r6
 800b324:	f7fd f880 	bl	8008428 <_printf_float>
 800b328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b32c:	4681      	mov	r9, r0
 800b32e:	d1d5      	bne.n	800b2dc <_vfiprintf_r+0x198>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	065b      	lsls	r3, r3, #25
 800b334:	f53f af7e 	bmi.w	800b234 <_vfiprintf_r+0xf0>
 800b338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b33a:	e77d      	b.n	800b238 <_vfiprintf_r+0xf4>
 800b33c:	ab03      	add	r3, sp, #12
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	4622      	mov	r2, r4
 800b342:	4b0a      	ldr	r3, [pc, #40]	; (800b36c <_vfiprintf_r+0x228>)
 800b344:	a904      	add	r1, sp, #16
 800b346:	4630      	mov	r0, r6
 800b348:	f7fd fb24 	bl	8008994 <_printf_i>
 800b34c:	e7ec      	b.n	800b328 <_vfiprintf_r+0x1e4>
 800b34e:	bf00      	nop
 800b350:	0800c39c 	.word	0x0800c39c
 800b354:	0800c544 	.word	0x0800c544
 800b358:	0800c3bc 	.word	0x0800c3bc
 800b35c:	0800c37c 	.word	0x0800c37c
 800b360:	0800c54a 	.word	0x0800c54a
 800b364:	0800c54e 	.word	0x0800c54e
 800b368:	08008429 	.word	0x08008429
 800b36c:	0800b11f 	.word	0x0800b11f

0800b370 <_sbrk_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4c06      	ldr	r4, [pc, #24]	; (800b38c <_sbrk_r+0x1c>)
 800b374:	2300      	movs	r3, #0
 800b376:	4605      	mov	r5, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	f7f6 ffd2 	bl	8002324 <_sbrk>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_sbrk_r+0x1a>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	b103      	cbz	r3, 800b38a <_sbrk_r+0x1a>
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20008024 	.word	0x20008024

0800b390 <siscanf>:
 800b390:	b40e      	push	{r1, r2, r3}
 800b392:	b530      	push	{r4, r5, lr}
 800b394:	b09c      	sub	sp, #112	; 0x70
 800b396:	ac1f      	add	r4, sp, #124	; 0x7c
 800b398:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b39c:	f854 5b04 	ldr.w	r5, [r4], #4
 800b3a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	9006      	str	r0, [sp, #24]
 800b3a8:	f7f4 ff3a 	bl	8000220 <strlen>
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <siscanf+0x4c>)
 800b3ae:	9003      	str	r0, [sp, #12]
 800b3b0:	9007      	str	r0, [sp, #28]
 800b3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b4:	480a      	ldr	r0, [pc, #40]	; (800b3e0 <siscanf+0x50>)
 800b3b6:	9401      	str	r4, [sp, #4]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3bc:	9314      	str	r3, [sp, #80]	; 0x50
 800b3be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4623      	mov	r3, r4
 800b3ca:	a902      	add	r1, sp, #8
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f000 fa0d 	bl	800b7ec <__ssvfiscanf_r>
 800b3d2:	b01c      	add	sp, #112	; 0x70
 800b3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3d8:	b003      	add	sp, #12
 800b3da:	4770      	bx	lr
 800b3dc:	0800b407 	.word	0x0800b407
 800b3e0:	2000000c 	.word	0x2000000c

0800b3e4 <__sread>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	f000 fca6 	bl	800bd3c <_read_r>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	bfab      	itete	ge
 800b3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3f8:	181b      	addge	r3, r3, r0
 800b3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3fe:	bfac      	ite	ge
 800b400:	6563      	strge	r3, [r4, #84]	; 0x54
 800b402:	81a3      	strhlt	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__seofread>:
 800b406:	2000      	movs	r0, #0
 800b408:	4770      	bx	lr

0800b40a <__swrite>:
 800b40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40e:	461f      	mov	r7, r3
 800b410:	898b      	ldrh	r3, [r1, #12]
 800b412:	05db      	lsls	r3, r3, #23
 800b414:	4605      	mov	r5, r0
 800b416:	460c      	mov	r4, r1
 800b418:	4616      	mov	r6, r2
 800b41a:	d505      	bpl.n	800b428 <__swrite+0x1e>
 800b41c:	2302      	movs	r3, #2
 800b41e:	2200      	movs	r2, #0
 800b420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b424:	f000 f934 	bl	800b690 <_lseek_r>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b432:	81a3      	strh	r3, [r4, #12]
 800b434:	4632      	mov	r2, r6
 800b436:	463b      	mov	r3, r7
 800b438:	4628      	mov	r0, r5
 800b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	f000 b8e1 	b.w	800b604 <_write_r>

0800b442 <__sseek>:
 800b442:	b510      	push	{r4, lr}
 800b444:	460c      	mov	r4, r1
 800b446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44a:	f000 f921 	bl	800b690 <_lseek_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	bf15      	itete	ne
 800b454:	6560      	strne	r0, [r4, #84]	; 0x54
 800b456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b45a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b45e:	81a3      	strheq	r3, [r4, #12]
 800b460:	bf18      	it	ne
 800b462:	81a3      	strhne	r3, [r4, #12]
 800b464:	bd10      	pop	{r4, pc}

0800b466 <__sclose>:
 800b466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46a:	f000 b8dd 	b.w	800b628 <_close_r>

0800b46e <strcpy>:
 800b46e:	4603      	mov	r3, r0
 800b470:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b474:	f803 2b01 	strb.w	r2, [r3], #1
 800b478:	2a00      	cmp	r2, #0
 800b47a:	d1f9      	bne.n	800b470 <strcpy+0x2>
 800b47c:	4770      	bx	lr

0800b47e <strncmp>:
 800b47e:	b510      	push	{r4, lr}
 800b480:	b16a      	cbz	r2, 800b49e <strncmp+0x20>
 800b482:	3901      	subs	r1, #1
 800b484:	1884      	adds	r4, r0, r2
 800b486:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b48a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b48e:	4293      	cmp	r3, r2
 800b490:	d103      	bne.n	800b49a <strncmp+0x1c>
 800b492:	42a0      	cmp	r0, r4
 800b494:	d001      	beq.n	800b49a <strncmp+0x1c>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1f5      	bne.n	800b486 <strncmp+0x8>
 800b49a:	1a98      	subs	r0, r3, r2
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	4610      	mov	r0, r2
 800b4a0:	e7fc      	b.n	800b49c <strncmp+0x1e>

0800b4a2 <_strtoul_l.isra.0>:
 800b4a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	4689      	mov	r9, r1
 800b4aa:	4692      	mov	sl, r2
 800b4ac:	461e      	mov	r6, r3
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	463d      	mov	r5, r7
 800b4b2:	9808      	ldr	r0, [sp, #32]
 800b4b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b8:	f7ff f890 	bl	800a5dc <__locale_ctype_ptr_l>
 800b4bc:	4420      	add	r0, r4
 800b4be:	7843      	ldrb	r3, [r0, #1]
 800b4c0:	f013 0308 	ands.w	r3, r3, #8
 800b4c4:	d130      	bne.n	800b528 <_strtoul_l.isra.0+0x86>
 800b4c6:	2c2d      	cmp	r4, #45	; 0x2d
 800b4c8:	d130      	bne.n	800b52c <_strtoul_l.isra.0+0x8a>
 800b4ca:	787c      	ldrb	r4, [r7, #1]
 800b4cc:	1cbd      	adds	r5, r7, #2
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	d05c      	beq.n	800b58e <_strtoul_l.isra.0+0xec>
 800b4d4:	2e10      	cmp	r6, #16
 800b4d6:	d109      	bne.n	800b4ec <_strtoul_l.isra.0+0x4a>
 800b4d8:	2c30      	cmp	r4, #48	; 0x30
 800b4da:	d107      	bne.n	800b4ec <_strtoul_l.isra.0+0x4a>
 800b4dc:	782b      	ldrb	r3, [r5, #0]
 800b4de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4e2:	2b58      	cmp	r3, #88	; 0x58
 800b4e4:	d14e      	bne.n	800b584 <_strtoul_l.isra.0+0xe2>
 800b4e6:	786c      	ldrb	r4, [r5, #1]
 800b4e8:	2610      	movs	r6, #16
 800b4ea:	3502      	adds	r5, #2
 800b4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	fbb2 f2f6 	udiv	r2, r2, r6
 800b4f6:	fb06 fc02 	mul.w	ip, r6, r2
 800b4fa:	ea6f 0c0c 	mvn.w	ip, ip
 800b4fe:	4618      	mov	r0, r3
 800b500:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b504:	2f09      	cmp	r7, #9
 800b506:	d817      	bhi.n	800b538 <_strtoul_l.isra.0+0x96>
 800b508:	463c      	mov	r4, r7
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	dd23      	ble.n	800b556 <_strtoul_l.isra.0+0xb4>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	db1e      	blt.n	800b550 <_strtoul_l.isra.0+0xae>
 800b512:	4282      	cmp	r2, r0
 800b514:	d31c      	bcc.n	800b550 <_strtoul_l.isra.0+0xae>
 800b516:	d101      	bne.n	800b51c <_strtoul_l.isra.0+0x7a>
 800b518:	45a4      	cmp	ip, r4
 800b51a:	db19      	blt.n	800b550 <_strtoul_l.isra.0+0xae>
 800b51c:	fb00 4006 	mla	r0, r0, r6, r4
 800b520:	2301      	movs	r3, #1
 800b522:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b526:	e7eb      	b.n	800b500 <_strtoul_l.isra.0+0x5e>
 800b528:	462f      	mov	r7, r5
 800b52a:	e7c1      	b.n	800b4b0 <_strtoul_l.isra.0+0xe>
 800b52c:	2c2b      	cmp	r4, #43	; 0x2b
 800b52e:	bf04      	itt	eq
 800b530:	1cbd      	addeq	r5, r7, #2
 800b532:	787c      	ldrbeq	r4, [r7, #1]
 800b534:	4619      	mov	r1, r3
 800b536:	e7cb      	b.n	800b4d0 <_strtoul_l.isra.0+0x2e>
 800b538:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b53c:	2f19      	cmp	r7, #25
 800b53e:	d801      	bhi.n	800b544 <_strtoul_l.isra.0+0xa2>
 800b540:	3c37      	subs	r4, #55	; 0x37
 800b542:	e7e2      	b.n	800b50a <_strtoul_l.isra.0+0x68>
 800b544:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b548:	2f19      	cmp	r7, #25
 800b54a:	d804      	bhi.n	800b556 <_strtoul_l.isra.0+0xb4>
 800b54c:	3c57      	subs	r4, #87	; 0x57
 800b54e:	e7dc      	b.n	800b50a <_strtoul_l.isra.0+0x68>
 800b550:	f04f 33ff 	mov.w	r3, #4294967295
 800b554:	e7e5      	b.n	800b522 <_strtoul_l.isra.0+0x80>
 800b556:	2b00      	cmp	r3, #0
 800b558:	da09      	bge.n	800b56e <_strtoul_l.isra.0+0xcc>
 800b55a:	2322      	movs	r3, #34	; 0x22
 800b55c:	f8c8 3000 	str.w	r3, [r8]
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	f1ba 0f00 	cmp.w	sl, #0
 800b568:	d107      	bne.n	800b57a <_strtoul_l.isra.0+0xd8>
 800b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56e:	b101      	cbz	r1, 800b572 <_strtoul_l.isra.0+0xd0>
 800b570:	4240      	negs	r0, r0
 800b572:	f1ba 0f00 	cmp.w	sl, #0
 800b576:	d0f8      	beq.n	800b56a <_strtoul_l.isra.0+0xc8>
 800b578:	b10b      	cbz	r3, 800b57e <_strtoul_l.isra.0+0xdc>
 800b57a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b57e:	f8ca 9000 	str.w	r9, [sl]
 800b582:	e7f2      	b.n	800b56a <_strtoul_l.isra.0+0xc8>
 800b584:	2430      	movs	r4, #48	; 0x30
 800b586:	2e00      	cmp	r6, #0
 800b588:	d1b0      	bne.n	800b4ec <_strtoul_l.isra.0+0x4a>
 800b58a:	2608      	movs	r6, #8
 800b58c:	e7ae      	b.n	800b4ec <_strtoul_l.isra.0+0x4a>
 800b58e:	2c30      	cmp	r4, #48	; 0x30
 800b590:	d0a4      	beq.n	800b4dc <_strtoul_l.isra.0+0x3a>
 800b592:	260a      	movs	r6, #10
 800b594:	e7aa      	b.n	800b4ec <_strtoul_l.isra.0+0x4a>
	...

0800b598 <_strtoul_r>:
 800b598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b59a:	4c06      	ldr	r4, [pc, #24]	; (800b5b4 <_strtoul_r+0x1c>)
 800b59c:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_strtoul_r+0x20>)
 800b59e:	6824      	ldr	r4, [r4, #0]
 800b5a0:	6a24      	ldr	r4, [r4, #32]
 800b5a2:	2c00      	cmp	r4, #0
 800b5a4:	bf08      	it	eq
 800b5a6:	462c      	moveq	r4, r5
 800b5a8:	9400      	str	r4, [sp, #0]
 800b5aa:	f7ff ff7a 	bl	800b4a2 <_strtoul_l.isra.0>
 800b5ae:	b003      	add	sp, #12
 800b5b0:	bd30      	pop	{r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2000000c 	.word	0x2000000c
 800b5b8:	200000d0 	.word	0x200000d0

0800b5bc <strtoul>:
 800b5bc:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <strtoul+0x24>)
 800b5be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5c0:	681c      	ldr	r4, [r3, #0]
 800b5c2:	4d08      	ldr	r5, [pc, #32]	; (800b5e4 <strtoul+0x28>)
 800b5c4:	6a23      	ldr	r3, [r4, #32]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bf08      	it	eq
 800b5ca:	462b      	moveq	r3, r5
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	460a      	mov	r2, r1
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7ff ff64 	bl	800b4a2 <_strtoul_l.isra.0>
 800b5da:	b003      	add	sp, #12
 800b5dc:	bd30      	pop	{r4, r5, pc}
 800b5de:	bf00      	nop
 800b5e0:	2000000c 	.word	0x2000000c
 800b5e4:	200000d0 	.word	0x200000d0

0800b5e8 <__ascii_wctomb>:
 800b5e8:	b149      	cbz	r1, 800b5fe <__ascii_wctomb+0x16>
 800b5ea:	2aff      	cmp	r2, #255	; 0xff
 800b5ec:	bf85      	ittet	hi
 800b5ee:	238a      	movhi	r3, #138	; 0x8a
 800b5f0:	6003      	strhi	r3, [r0, #0]
 800b5f2:	700a      	strbls	r2, [r1, #0]
 800b5f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5f8:	bf98      	it	ls
 800b5fa:	2001      	movls	r0, #1
 800b5fc:	4770      	bx	lr
 800b5fe:	4608      	mov	r0, r1
 800b600:	4770      	bx	lr
	...

0800b604 <_write_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4c07      	ldr	r4, [pc, #28]	; (800b624 <_write_r+0x20>)
 800b608:	4605      	mov	r5, r0
 800b60a:	4608      	mov	r0, r1
 800b60c:	4611      	mov	r1, r2
 800b60e:	2200      	movs	r2, #0
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	f7f7 fce0 	bl	8002fd8 <_write>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_write_r+0x1e>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_write_r+0x1e>
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	20008024 	.word	0x20008024

0800b628 <_close_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4c06      	ldr	r4, [pc, #24]	; (800b644 <_close_r+0x1c>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4605      	mov	r5, r0
 800b630:	4608      	mov	r0, r1
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	f7f7 fcfc 	bl	8003030 <_close>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_close_r+0x1a>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_close_r+0x1a>
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	20008024 	.word	0x20008024

0800b648 <__env_lock>:
 800b648:	4770      	bx	lr

0800b64a <__env_unlock>:
 800b64a:	4770      	bx	lr

0800b64c <_fstat_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4c07      	ldr	r4, [pc, #28]	; (800b66c <_fstat_r+0x20>)
 800b650:	2300      	movs	r3, #0
 800b652:	4605      	mov	r5, r0
 800b654:	4608      	mov	r0, r1
 800b656:	4611      	mov	r1, r2
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	f7f7 fd39 	bl	80030d0 <_fstat>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	d102      	bne.n	800b668 <_fstat_r+0x1c>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	b103      	cbz	r3, 800b668 <_fstat_r+0x1c>
 800b666:	602b      	str	r3, [r5, #0]
 800b668:	bd38      	pop	{r3, r4, r5, pc}
 800b66a:	bf00      	nop
 800b66c:	20008024 	.word	0x20008024

0800b670 <_isatty_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4c06      	ldr	r4, [pc, #24]	; (800b68c <_isatty_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4605      	mov	r5, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	f7f7 fc96 	bl	8002fac <_isatty>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_isatty_r+0x1a>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	b103      	cbz	r3, 800b68a <_isatty_r+0x1a>
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20008024 	.word	0x20008024

0800b690 <_lseek_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4c07      	ldr	r4, [pc, #28]	; (800b6b0 <_lseek_r+0x20>)
 800b694:	4605      	mov	r5, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	6022      	str	r2, [r4, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f7 fcdd 	bl	800305e <_lseek>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_lseek_r+0x1e>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_lseek_r+0x1e>
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20008024 	.word	0x20008024

0800b6b4 <memmove>:
 800b6b4:	4288      	cmp	r0, r1
 800b6b6:	b510      	push	{r4, lr}
 800b6b8:	eb01 0302 	add.w	r3, r1, r2
 800b6bc:	d807      	bhi.n	800b6ce <memmove+0x1a>
 800b6be:	1e42      	subs	r2, r0, #1
 800b6c0:	4299      	cmp	r1, r3
 800b6c2:	d00a      	beq.n	800b6da <memmove+0x26>
 800b6c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b6cc:	e7f8      	b.n	800b6c0 <memmove+0xc>
 800b6ce:	4283      	cmp	r3, r0
 800b6d0:	d9f5      	bls.n	800b6be <memmove+0xa>
 800b6d2:	1881      	adds	r1, r0, r2
 800b6d4:	1ad2      	subs	r2, r2, r3
 800b6d6:	42d3      	cmn	r3, r2
 800b6d8:	d100      	bne.n	800b6dc <memmove+0x28>
 800b6da:	bd10      	pop	{r4, pc}
 800b6dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b6e4:	e7f7      	b.n	800b6d6 <memmove+0x22>

0800b6e6 <__malloc_lock>:
 800b6e6:	4770      	bx	lr

0800b6e8 <__malloc_unlock>:
 800b6e8:	4770      	bx	lr

0800b6ea <_realloc_r>:
 800b6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	4614      	mov	r4, r2
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	b921      	cbnz	r1, 800b6fe <_realloc_r+0x14>
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6fa:	f7ff bb4d 	b.w	800ad98 <_malloc_r>
 800b6fe:	b922      	cbnz	r2, 800b70a <_realloc_r+0x20>
 800b700:	f7ff fafc 	bl	800acfc <_free_r>
 800b704:	4625      	mov	r5, r4
 800b706:	4628      	mov	r0, r5
 800b708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70a:	f000 fb95 	bl	800be38 <_malloc_usable_size_r>
 800b70e:	42a0      	cmp	r0, r4
 800b710:	d20f      	bcs.n	800b732 <_realloc_r+0x48>
 800b712:	4621      	mov	r1, r4
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff fb3f 	bl	800ad98 <_malloc_r>
 800b71a:	4605      	mov	r5, r0
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0f2      	beq.n	800b706 <_realloc_r+0x1c>
 800b720:	4631      	mov	r1, r6
 800b722:	4622      	mov	r2, r4
 800b724:	f7fc fb44 	bl	8007db0 <memcpy>
 800b728:	4631      	mov	r1, r6
 800b72a:	4638      	mov	r0, r7
 800b72c:	f7ff fae6 	bl	800acfc <_free_r>
 800b730:	e7e9      	b.n	800b706 <_realloc_r+0x1c>
 800b732:	4635      	mov	r5, r6
 800b734:	e7e7      	b.n	800b706 <_realloc_r+0x1c>

0800b736 <_sungetc_r>:
 800b736:	b538      	push	{r3, r4, r5, lr}
 800b738:	1c4b      	adds	r3, r1, #1
 800b73a:	4614      	mov	r4, r2
 800b73c:	d103      	bne.n	800b746 <_sungetc_r+0x10>
 800b73e:	f04f 35ff 	mov.w	r5, #4294967295
 800b742:	4628      	mov	r0, r5
 800b744:	bd38      	pop	{r3, r4, r5, pc}
 800b746:	8993      	ldrh	r3, [r2, #12]
 800b748:	f023 0320 	bic.w	r3, r3, #32
 800b74c:	8193      	strh	r3, [r2, #12]
 800b74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b750:	6852      	ldr	r2, [r2, #4]
 800b752:	b2cd      	uxtb	r5, r1
 800b754:	b18b      	cbz	r3, 800b77a <_sungetc_r+0x44>
 800b756:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b758:	4293      	cmp	r3, r2
 800b75a:	dd08      	ble.n	800b76e <_sungetc_r+0x38>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	1e5a      	subs	r2, r3, #1
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	3301      	adds	r3, #1
 800b76a:	6063      	str	r3, [r4, #4]
 800b76c:	e7e9      	b.n	800b742 <_sungetc_r+0xc>
 800b76e:	4621      	mov	r1, r4
 800b770:	f000 fb28 	bl	800bdc4 <__submore>
 800b774:	2800      	cmp	r0, #0
 800b776:	d0f1      	beq.n	800b75c <_sungetc_r+0x26>
 800b778:	e7e1      	b.n	800b73e <_sungetc_r+0x8>
 800b77a:	6921      	ldr	r1, [r4, #16]
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	b151      	cbz	r1, 800b796 <_sungetc_r+0x60>
 800b780:	4299      	cmp	r1, r3
 800b782:	d208      	bcs.n	800b796 <_sungetc_r+0x60>
 800b784:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b788:	42a9      	cmp	r1, r5
 800b78a:	d104      	bne.n	800b796 <_sungetc_r+0x60>
 800b78c:	3b01      	subs	r3, #1
 800b78e:	3201      	adds	r2, #1
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	6062      	str	r2, [r4, #4]
 800b794:	e7d5      	b.n	800b742 <_sungetc_r+0xc>
 800b796:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b79a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79e:	6363      	str	r3, [r4, #52]	; 0x34
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e7dc      	b.n	800b76a <_sungetc_r+0x34>

0800b7b0 <__ssrefill_r>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b7b6:	b169      	cbz	r1, 800b7d4 <__ssrefill_r+0x24>
 800b7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	d001      	beq.n	800b7c4 <__ssrefill_r+0x14>
 800b7c0:	f7ff fa9c 	bl	800acfc <_free_r>
 800b7c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7c6:	6063      	str	r3, [r4, #4]
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	6360      	str	r0, [r4, #52]	; 0x34
 800b7cc:	b113      	cbz	r3, 800b7d4 <__ssrefill_r+0x24>
 800b7ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	6063      	str	r3, [r4, #4]
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f043 0320 	orr.w	r3, r3, #32
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	e7f3      	b.n	800b7d2 <__ssrefill_r+0x22>
	...

0800b7ec <__ssvfiscanf_r>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	9144      	str	r1, [sp, #272]	; 0x110
 800b7fa:	9145      	str	r1, [sp, #276]	; 0x114
 800b7fc:	499f      	ldr	r1, [pc, #636]	; (800ba7c <__ssvfiscanf_r+0x290>)
 800b7fe:	91a0      	str	r1, [sp, #640]	; 0x280
 800b800:	f10d 0804 	add.w	r8, sp, #4
 800b804:	499e      	ldr	r1, [pc, #632]	; (800ba80 <__ssvfiscanf_r+0x294>)
 800b806:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800ba84 <__ssvfiscanf_r+0x298>
 800b80a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b80e:	4606      	mov	r6, r0
 800b810:	4692      	mov	sl, r2
 800b812:	91a1      	str	r1, [sp, #644]	; 0x284
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	270a      	movs	r7, #10
 800b818:	f89a 3000 	ldrb.w	r3, [sl]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 812a 	beq.w	800ba76 <__ssvfiscanf_r+0x28a>
 800b822:	4655      	mov	r5, sl
 800b824:	f7fe fede 	bl	800a5e4 <__locale_ctype_ptr>
 800b828:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b82c:	4458      	add	r0, fp
 800b82e:	7843      	ldrb	r3, [r0, #1]
 800b830:	f013 0308 	ands.w	r3, r3, #8
 800b834:	d01c      	beq.n	800b870 <__ssvfiscanf_r+0x84>
 800b836:	6863      	ldr	r3, [r4, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dd12      	ble.n	800b862 <__ssvfiscanf_r+0x76>
 800b83c:	f7fe fed2 	bl	800a5e4 <__locale_ctype_ptr>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	781a      	ldrb	r2, [r3, #0]
 800b844:	4410      	add	r0, r2
 800b846:	7842      	ldrb	r2, [r0, #1]
 800b848:	0712      	lsls	r2, r2, #28
 800b84a:	d401      	bmi.n	800b850 <__ssvfiscanf_r+0x64>
 800b84c:	46aa      	mov	sl, r5
 800b84e:	e7e3      	b.n	800b818 <__ssvfiscanf_r+0x2c>
 800b850:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b852:	3201      	adds	r2, #1
 800b854:	9245      	str	r2, [sp, #276]	; 0x114
 800b856:	6862      	ldr	r2, [r4, #4]
 800b858:	3301      	adds	r3, #1
 800b85a:	3a01      	subs	r2, #1
 800b85c:	6062      	str	r2, [r4, #4]
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	e7e9      	b.n	800b836 <__ssvfiscanf_r+0x4a>
 800b862:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b864:	4621      	mov	r1, r4
 800b866:	4630      	mov	r0, r6
 800b868:	4798      	blx	r3
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d0e6      	beq.n	800b83c <__ssvfiscanf_r+0x50>
 800b86e:	e7ed      	b.n	800b84c <__ssvfiscanf_r+0x60>
 800b870:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b874:	f040 8082 	bne.w	800b97c <__ssvfiscanf_r+0x190>
 800b878:	9343      	str	r3, [sp, #268]	; 0x10c
 800b87a:	9341      	str	r3, [sp, #260]	; 0x104
 800b87c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b880:	2b2a      	cmp	r3, #42	; 0x2a
 800b882:	d103      	bne.n	800b88c <__ssvfiscanf_r+0xa0>
 800b884:	2310      	movs	r3, #16
 800b886:	9341      	str	r3, [sp, #260]	; 0x104
 800b888:	f10a 0502 	add.w	r5, sl, #2
 800b88c:	46aa      	mov	sl, r5
 800b88e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b892:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b896:	2a09      	cmp	r2, #9
 800b898:	d922      	bls.n	800b8e0 <__ssvfiscanf_r+0xf4>
 800b89a:	2203      	movs	r2, #3
 800b89c:	4879      	ldr	r0, [pc, #484]	; (800ba84 <__ssvfiscanf_r+0x298>)
 800b89e:	f7f4 fcc7 	bl	8000230 <memchr>
 800b8a2:	b138      	cbz	r0, 800b8b4 <__ssvfiscanf_r+0xc8>
 800b8a4:	eba0 0309 	sub.w	r3, r0, r9
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	4098      	lsls	r0, r3
 800b8ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8ae:	4318      	orrs	r0, r3
 800b8b0:	9041      	str	r0, [sp, #260]	; 0x104
 800b8b2:	46aa      	mov	sl, r5
 800b8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b8:	2b67      	cmp	r3, #103	; 0x67
 800b8ba:	f10a 0501 	add.w	r5, sl, #1
 800b8be:	d82b      	bhi.n	800b918 <__ssvfiscanf_r+0x12c>
 800b8c0:	2b65      	cmp	r3, #101	; 0x65
 800b8c2:	f080 809f 	bcs.w	800ba04 <__ssvfiscanf_r+0x218>
 800b8c6:	2b47      	cmp	r3, #71	; 0x47
 800b8c8:	d810      	bhi.n	800b8ec <__ssvfiscanf_r+0x100>
 800b8ca:	2b45      	cmp	r3, #69	; 0x45
 800b8cc:	f080 809a 	bcs.w	800ba04 <__ssvfiscanf_r+0x218>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d06c      	beq.n	800b9ae <__ssvfiscanf_r+0x1c2>
 800b8d4:	2b25      	cmp	r3, #37	; 0x25
 800b8d6:	d051      	beq.n	800b97c <__ssvfiscanf_r+0x190>
 800b8d8:	2303      	movs	r3, #3
 800b8da:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8dc:	9742      	str	r7, [sp, #264]	; 0x108
 800b8de:	e027      	b.n	800b930 <__ssvfiscanf_r+0x144>
 800b8e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b8e2:	fb07 1303 	mla	r3, r7, r3, r1
 800b8e6:	3b30      	subs	r3, #48	; 0x30
 800b8e8:	9343      	str	r3, [sp, #268]	; 0x10c
 800b8ea:	e7cf      	b.n	800b88c <__ssvfiscanf_r+0xa0>
 800b8ec:	2b5b      	cmp	r3, #91	; 0x5b
 800b8ee:	d06a      	beq.n	800b9c6 <__ssvfiscanf_r+0x1da>
 800b8f0:	d80c      	bhi.n	800b90c <__ssvfiscanf_r+0x120>
 800b8f2:	2b58      	cmp	r3, #88	; 0x58
 800b8f4:	d1f0      	bne.n	800b8d8 <__ssvfiscanf_r+0xec>
 800b8f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8fc:	9241      	str	r2, [sp, #260]	; 0x104
 800b8fe:	2210      	movs	r2, #16
 800b900:	9242      	str	r2, [sp, #264]	; 0x108
 800b902:	2b6e      	cmp	r3, #110	; 0x6e
 800b904:	bf8c      	ite	hi
 800b906:	2304      	movhi	r3, #4
 800b908:	2303      	movls	r3, #3
 800b90a:	e010      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800b90c:	2b63      	cmp	r3, #99	; 0x63
 800b90e:	d065      	beq.n	800b9dc <__ssvfiscanf_r+0x1f0>
 800b910:	2b64      	cmp	r3, #100	; 0x64
 800b912:	d1e1      	bne.n	800b8d8 <__ssvfiscanf_r+0xec>
 800b914:	9742      	str	r7, [sp, #264]	; 0x108
 800b916:	e7f4      	b.n	800b902 <__ssvfiscanf_r+0x116>
 800b918:	2b70      	cmp	r3, #112	; 0x70
 800b91a:	d04b      	beq.n	800b9b4 <__ssvfiscanf_r+0x1c8>
 800b91c:	d826      	bhi.n	800b96c <__ssvfiscanf_r+0x180>
 800b91e:	2b6e      	cmp	r3, #110	; 0x6e
 800b920:	d062      	beq.n	800b9e8 <__ssvfiscanf_r+0x1fc>
 800b922:	d84c      	bhi.n	800b9be <__ssvfiscanf_r+0x1d2>
 800b924:	2b69      	cmp	r3, #105	; 0x69
 800b926:	d1d7      	bne.n	800b8d8 <__ssvfiscanf_r+0xec>
 800b928:	2300      	movs	r3, #0
 800b92a:	9342      	str	r3, [sp, #264]	; 0x108
 800b92c:	2303      	movs	r3, #3
 800b92e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b930:	6863      	ldr	r3, [r4, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	dd68      	ble.n	800ba08 <__ssvfiscanf_r+0x21c>
 800b936:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b938:	0659      	lsls	r1, r3, #25
 800b93a:	d407      	bmi.n	800b94c <__ssvfiscanf_r+0x160>
 800b93c:	f7fe fe52 	bl	800a5e4 <__locale_ctype_ptr>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	781a      	ldrb	r2, [r3, #0]
 800b944:	4410      	add	r0, r2
 800b946:	7842      	ldrb	r2, [r0, #1]
 800b948:	0712      	lsls	r2, r2, #28
 800b94a:	d464      	bmi.n	800ba16 <__ssvfiscanf_r+0x22a>
 800b94c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b94e:	2b02      	cmp	r3, #2
 800b950:	dc73      	bgt.n	800ba3a <__ssvfiscanf_r+0x24e>
 800b952:	466b      	mov	r3, sp
 800b954:	4622      	mov	r2, r4
 800b956:	a941      	add	r1, sp, #260	; 0x104
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f897 	bl	800ba8c <_scanf_chars>
 800b95e:	2801      	cmp	r0, #1
 800b960:	f000 8089 	beq.w	800ba76 <__ssvfiscanf_r+0x28a>
 800b964:	2802      	cmp	r0, #2
 800b966:	f47f af71 	bne.w	800b84c <__ssvfiscanf_r+0x60>
 800b96a:	e01d      	b.n	800b9a8 <__ssvfiscanf_r+0x1bc>
 800b96c:	2b75      	cmp	r3, #117	; 0x75
 800b96e:	d0d1      	beq.n	800b914 <__ssvfiscanf_r+0x128>
 800b970:	2b78      	cmp	r3, #120	; 0x78
 800b972:	d0c0      	beq.n	800b8f6 <__ssvfiscanf_r+0x10a>
 800b974:	2b73      	cmp	r3, #115	; 0x73
 800b976:	d1af      	bne.n	800b8d8 <__ssvfiscanf_r+0xec>
 800b978:	2302      	movs	r3, #2
 800b97a:	e7d8      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800b97c:	6863      	ldr	r3, [r4, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd0c      	ble.n	800b99c <__ssvfiscanf_r+0x1b0>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	781a      	ldrb	r2, [r3, #0]
 800b986:	455a      	cmp	r2, fp
 800b988:	d175      	bne.n	800ba76 <__ssvfiscanf_r+0x28a>
 800b98a:	3301      	adds	r3, #1
 800b98c:	6862      	ldr	r2, [r4, #4]
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b992:	3a01      	subs	r2, #1
 800b994:	3301      	adds	r3, #1
 800b996:	6062      	str	r2, [r4, #4]
 800b998:	9345      	str	r3, [sp, #276]	; 0x114
 800b99a:	e757      	b.n	800b84c <__ssvfiscanf_r+0x60>
 800b99c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4798      	blx	r3
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d0ec      	beq.n	800b982 <__ssvfiscanf_r+0x196>
 800b9a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d159      	bne.n	800ba62 <__ssvfiscanf_r+0x276>
 800b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b2:	e05c      	b.n	800ba6e <__ssvfiscanf_r+0x282>
 800b9b4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b9b6:	f042 0220 	orr.w	r2, r2, #32
 800b9ba:	9241      	str	r2, [sp, #260]	; 0x104
 800b9bc:	e79b      	b.n	800b8f6 <__ssvfiscanf_r+0x10a>
 800b9be:	2308      	movs	r3, #8
 800b9c0:	9342      	str	r3, [sp, #264]	; 0x108
 800b9c2:	2304      	movs	r3, #4
 800b9c4:	e7b3      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	f000 f9c9 	bl	800bd60 <__sccl>
 800b9ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d4:	9341      	str	r3, [sp, #260]	; 0x104
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7a8      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800b9dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e2:	9341      	str	r3, [sp, #260]	; 0x104
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	e7a2      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800b9e8:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b9ea:	06c3      	lsls	r3, r0, #27
 800b9ec:	f53f af2e 	bmi.w	800b84c <__ssvfiscanf_r+0x60>
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b9f4:	1d19      	adds	r1, r3, #4
 800b9f6:	9100      	str	r1, [sp, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	07c0      	lsls	r0, r0, #31
 800b9fc:	bf4c      	ite	mi
 800b9fe:	801a      	strhmi	r2, [r3, #0]
 800ba00:	601a      	strpl	r2, [r3, #0]
 800ba02:	e723      	b.n	800b84c <__ssvfiscanf_r+0x60>
 800ba04:	2305      	movs	r3, #5
 800ba06:	e792      	b.n	800b92e <__ssvfiscanf_r+0x142>
 800ba08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	4798      	blx	r3
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d090      	beq.n	800b936 <__ssvfiscanf_r+0x14a>
 800ba14:	e7c8      	b.n	800b9a8 <__ssvfiscanf_r+0x1bc>
 800ba16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba18:	3201      	adds	r2, #1
 800ba1a:	9245      	str	r2, [sp, #276]	; 0x114
 800ba1c:	6862      	ldr	r2, [r4, #4]
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	6062      	str	r2, [r4, #4]
 800ba24:	dd02      	ble.n	800ba2c <__ssvfiscanf_r+0x240>
 800ba26:	3301      	adds	r3, #1
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	e787      	b.n	800b93c <__ssvfiscanf_r+0x150>
 800ba2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	4798      	blx	r3
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d081      	beq.n	800b93c <__ssvfiscanf_r+0x150>
 800ba38:	e7b6      	b.n	800b9a8 <__ssvfiscanf_r+0x1bc>
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	dc06      	bgt.n	800ba4c <__ssvfiscanf_r+0x260>
 800ba3e:	466b      	mov	r3, sp
 800ba40:	4622      	mov	r2, r4
 800ba42:	a941      	add	r1, sp, #260	; 0x104
 800ba44:	4630      	mov	r0, r6
 800ba46:	f000 f885 	bl	800bb54 <_scanf_i>
 800ba4a:	e788      	b.n	800b95e <__ssvfiscanf_r+0x172>
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <__ssvfiscanf_r+0x29c>)
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f43f aefc 	beq.w	800b84c <__ssvfiscanf_r+0x60>
 800ba54:	466b      	mov	r3, sp
 800ba56:	4622      	mov	r2, r4
 800ba58:	a941      	add	r1, sp, #260	; 0x104
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f3af 8000 	nop.w
 800ba60:	e77d      	b.n	800b95e <__ssvfiscanf_r+0x172>
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba68:	bf18      	it	ne
 800ba6a:	f04f 30ff 	movne.w	r0, #4294967295
 800ba6e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba78:	e7f9      	b.n	800ba6e <__ssvfiscanf_r+0x282>
 800ba7a:	bf00      	nop
 800ba7c:	0800b737 	.word	0x0800b737
 800ba80:	0800b7b1 	.word	0x0800b7b1
 800ba84:	0800c54a 	.word	0x0800c54a
 800ba88:	00000000 	.word	0x00000000

0800ba8c <_scanf_chars>:
 800ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba90:	4615      	mov	r5, r2
 800ba92:	688a      	ldr	r2, [r1, #8]
 800ba94:	4680      	mov	r8, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	b932      	cbnz	r2, 800baa8 <_scanf_chars+0x1c>
 800ba9a:	698a      	ldr	r2, [r1, #24]
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	f04f 32ff 	movne.w	r2, #4294967295
 800baa4:	2201      	moveq	r2, #1
 800baa6:	608a      	str	r2, [r1, #8]
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	06d1      	lsls	r1, r2, #27
 800baac:	bf5f      	itttt	pl
 800baae:	681a      	ldrpl	r2, [r3, #0]
 800bab0:	1d11      	addpl	r1, r2, #4
 800bab2:	6019      	strpl	r1, [r3, #0]
 800bab4:	6817      	ldrpl	r7, [r2, #0]
 800bab6:	2600      	movs	r6, #0
 800bab8:	69a3      	ldr	r3, [r4, #24]
 800baba:	b1db      	cbz	r3, 800baf4 <_scanf_chars+0x68>
 800babc:	2b01      	cmp	r3, #1
 800babe:	d107      	bne.n	800bad0 <_scanf_chars+0x44>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	6962      	ldr	r2, [r4, #20]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	5cd3      	ldrb	r3, [r2, r3]
 800bac8:	b9a3      	cbnz	r3, 800baf4 <_scanf_chars+0x68>
 800baca:	2e00      	cmp	r6, #0
 800bacc:	d132      	bne.n	800bb34 <_scanf_chars+0xa8>
 800bace:	e006      	b.n	800bade <_scanf_chars+0x52>
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d007      	beq.n	800bae4 <_scanf_chars+0x58>
 800bad4:	2e00      	cmp	r6, #0
 800bad6:	d12d      	bne.n	800bb34 <_scanf_chars+0xa8>
 800bad8:	69a3      	ldr	r3, [r4, #24]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d12a      	bne.n	800bb34 <_scanf_chars+0xa8>
 800bade:	2001      	movs	r0, #1
 800bae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae4:	f7fe fd7e 	bl	800a5e4 <__locale_ctype_ptr>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	4418      	add	r0, r3
 800baee:	7843      	ldrb	r3, [r0, #1]
 800baf0:	071b      	lsls	r3, r3, #28
 800baf2:	d4ef      	bmi.n	800bad4 <_scanf_chars+0x48>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	06da      	lsls	r2, r3, #27
 800baf8:	bf5e      	ittt	pl
 800bafa:	682b      	ldrpl	r3, [r5, #0]
 800bafc:	781b      	ldrbpl	r3, [r3, #0]
 800bafe:	703b      	strbpl	r3, [r7, #0]
 800bb00:	682a      	ldr	r2, [r5, #0]
 800bb02:	686b      	ldr	r3, [r5, #4]
 800bb04:	f102 0201 	add.w	r2, r2, #1
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	68a2      	ldr	r2, [r4, #8]
 800bb0c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb10:	f102 32ff 	add.w	r2, r2, #4294967295
 800bb14:	606b      	str	r3, [r5, #4]
 800bb16:	f106 0601 	add.w	r6, r6, #1
 800bb1a:	bf58      	it	pl
 800bb1c:	3701      	addpl	r7, #1
 800bb1e:	60a2      	str	r2, [r4, #8]
 800bb20:	b142      	cbz	r2, 800bb34 <_scanf_chars+0xa8>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dcc8      	bgt.n	800bab8 <_scanf_chars+0x2c>
 800bb26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4798      	blx	r3
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d0c1      	beq.n	800bab8 <_scanf_chars+0x2c>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	f013 0310 	ands.w	r3, r3, #16
 800bb3a:	d105      	bne.n	800bb48 <_scanf_chars+0xbc>
 800bb3c:	68e2      	ldr	r2, [r4, #12]
 800bb3e:	3201      	adds	r2, #1
 800bb40:	60e2      	str	r2, [r4, #12]
 800bb42:	69a2      	ldr	r2, [r4, #24]
 800bb44:	b102      	cbz	r2, 800bb48 <_scanf_chars+0xbc>
 800bb46:	703b      	strb	r3, [r7, #0]
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	441e      	add	r6, r3
 800bb4c:	6126      	str	r6, [r4, #16]
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e7c6      	b.n	800bae0 <_scanf_chars+0x54>
	...

0800bb54 <_scanf_i>:
 800bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	469a      	mov	sl, r3
 800bb5a:	4b74      	ldr	r3, [pc, #464]	; (800bd2c <_scanf_i+0x1d8>)
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	4683      	mov	fp, r0
 800bb60:	4616      	mov	r6, r2
 800bb62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb66:	b087      	sub	sp, #28
 800bb68:	ab03      	add	r3, sp, #12
 800bb6a:	68a7      	ldr	r7, [r4, #8]
 800bb6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bb70:	4b6f      	ldr	r3, [pc, #444]	; (800bd30 <_scanf_i+0x1dc>)
 800bb72:	69a1      	ldr	r1, [r4, #24]
 800bb74:	4a6f      	ldr	r2, [pc, #444]	; (800bd34 <_scanf_i+0x1e0>)
 800bb76:	2903      	cmp	r1, #3
 800bb78:	bf08      	it	eq
 800bb7a:	461a      	moveq	r2, r3
 800bb7c:	1e7b      	subs	r3, r7, #1
 800bb7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bb82:	bf84      	itt	hi
 800bb84:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bb88:	60a3      	strhi	r3, [r4, #8]
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	9200      	str	r2, [sp, #0]
 800bb8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bb92:	bf88      	it	hi
 800bb94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bb98:	f104 091c 	add.w	r9, r4, #28
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	bf8c      	ite	hi
 800bba0:	197f      	addhi	r7, r7, r5
 800bba2:	2700      	movls	r7, #0
 800bba4:	464b      	mov	r3, r9
 800bba6:	f04f 0800 	mov.w	r8, #0
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	6831      	ldr	r1, [r6, #0]
 800bbae:	ab03      	add	r3, sp, #12
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bbb6:	7809      	ldrb	r1, [r1, #0]
 800bbb8:	f7f4 fb3a 	bl	8000230 <memchr>
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	b330      	cbz	r0, 800bc0e <_scanf_i+0xba>
 800bbc0:	f1b8 0f01 	cmp.w	r8, #1
 800bbc4:	d15a      	bne.n	800bc7c <_scanf_i+0x128>
 800bbc6:	6862      	ldr	r2, [r4, #4]
 800bbc8:	b92a      	cbnz	r2, 800bbd6 <_scanf_i+0x82>
 800bbca:	6822      	ldr	r2, [r4, #0]
 800bbcc:	2108      	movs	r1, #8
 800bbce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd2:	6061      	str	r1, [r4, #4]
 800bbd4:	6022      	str	r2, [r4, #0]
 800bbd6:	6822      	ldr	r2, [r4, #0]
 800bbd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bbdc:	6022      	str	r2, [r4, #0]
 800bbde:	68a2      	ldr	r2, [r4, #8]
 800bbe0:	1e51      	subs	r1, r2, #1
 800bbe2:	60a1      	str	r1, [r4, #8]
 800bbe4:	b19a      	cbz	r2, 800bc0e <_scanf_i+0xba>
 800bbe6:	6832      	ldr	r2, [r6, #0]
 800bbe8:	1c51      	adds	r1, r2, #1
 800bbea:	6031      	str	r1, [r6, #0]
 800bbec:	7812      	ldrb	r2, [r2, #0]
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	1c5d      	adds	r5, r3, #1
 800bbf2:	6873      	ldr	r3, [r6, #4]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	6073      	str	r3, [r6, #4]
 800bbfa:	dc07      	bgt.n	800bc0c <_scanf_i+0xb8>
 800bbfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc00:	4631      	mov	r1, r6
 800bc02:	4658      	mov	r0, fp
 800bc04:	4798      	blx	r3
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f040 8086 	bne.w	800bd18 <_scanf_i+0x1c4>
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	f108 0801 	add.w	r8, r8, #1
 800bc12:	f1b8 0f03 	cmp.w	r8, #3
 800bc16:	d1c8      	bne.n	800bbaa <_scanf_i+0x56>
 800bc18:	6862      	ldr	r2, [r4, #4]
 800bc1a:	b90a      	cbnz	r2, 800bc20 <_scanf_i+0xcc>
 800bc1c:	220a      	movs	r2, #10
 800bc1e:	6062      	str	r2, [r4, #4]
 800bc20:	6862      	ldr	r2, [r4, #4]
 800bc22:	4945      	ldr	r1, [pc, #276]	; (800bd38 <_scanf_i+0x1e4>)
 800bc24:	6960      	ldr	r0, [r4, #20]
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	1a89      	subs	r1, r1, r2
 800bc2a:	f000 f899 	bl	800bd60 <__sccl>
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	f04f 0800 	mov.w	r8, #0
 800bc34:	461d      	mov	r5, r3
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	6822      	ldr	r2, [r4, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d03a      	beq.n	800bcb4 <_scanf_i+0x160>
 800bc3e:	6831      	ldr	r1, [r6, #0]
 800bc40:	6960      	ldr	r0, [r4, #20]
 800bc42:	f891 c000 	ldrb.w	ip, [r1]
 800bc46:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d032      	beq.n	800bcb4 <_scanf_i+0x160>
 800bc4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bc52:	d121      	bne.n	800bc98 <_scanf_i+0x144>
 800bc54:	0510      	lsls	r0, r2, #20
 800bc56:	d51f      	bpl.n	800bc98 <_scanf_i+0x144>
 800bc58:	f108 0801 	add.w	r8, r8, #1
 800bc5c:	b117      	cbz	r7, 800bc64 <_scanf_i+0x110>
 800bc5e:	3301      	adds	r3, #1
 800bc60:	3f01      	subs	r7, #1
 800bc62:	60a3      	str	r3, [r4, #8]
 800bc64:	6873      	ldr	r3, [r6, #4]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	6073      	str	r3, [r6, #4]
 800bc6c:	dd1b      	ble.n	800bca6 <_scanf_i+0x152>
 800bc6e:	6833      	ldr	r3, [r6, #0]
 800bc70:	3301      	adds	r3, #1
 800bc72:	6033      	str	r3, [r6, #0]
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	e7dc      	b.n	800bc36 <_scanf_i+0xe2>
 800bc7c:	f1b8 0f02 	cmp.w	r8, #2
 800bc80:	d1ad      	bne.n	800bbde <_scanf_i+0x8a>
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bc88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bc8c:	d1bf      	bne.n	800bc0e <_scanf_i+0xba>
 800bc8e:	2110      	movs	r1, #16
 800bc90:	6061      	str	r1, [r4, #4]
 800bc92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc96:	e7a1      	b.n	800bbdc <_scanf_i+0x88>
 800bc98:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	780b      	ldrb	r3, [r1, #0]
 800bca0:	702b      	strb	r3, [r5, #0]
 800bca2:	3501      	adds	r5, #1
 800bca4:	e7de      	b.n	800bc64 <_scanf_i+0x110>
 800bca6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4658      	mov	r0, fp
 800bcae:	4798      	blx	r3
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d0df      	beq.n	800bc74 <_scanf_i+0x120>
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	05d9      	lsls	r1, r3, #23
 800bcb8:	d50c      	bpl.n	800bcd4 <_scanf_i+0x180>
 800bcba:	454d      	cmp	r5, r9
 800bcbc:	d908      	bls.n	800bcd0 <_scanf_i+0x17c>
 800bcbe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bcc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4658      	mov	r0, fp
 800bcca:	4798      	blx	r3
 800bccc:	1e6f      	subs	r7, r5, #1
 800bcce:	463d      	mov	r5, r7
 800bcd0:	454d      	cmp	r5, r9
 800bcd2:	d029      	beq.n	800bd28 <_scanf_i+0x1d4>
 800bcd4:	6822      	ldr	r2, [r4, #0]
 800bcd6:	f012 0210 	ands.w	r2, r2, #16
 800bcda:	d113      	bne.n	800bd04 <_scanf_i+0x1b0>
 800bcdc:	702a      	strb	r2, [r5, #0]
 800bcde:	6863      	ldr	r3, [r4, #4]
 800bce0:	9e00      	ldr	r6, [sp, #0]
 800bce2:	4649      	mov	r1, r9
 800bce4:	4658      	mov	r0, fp
 800bce6:	47b0      	blx	r6
 800bce8:	f8da 3000 	ldr.w	r3, [sl]
 800bcec:	6821      	ldr	r1, [r4, #0]
 800bcee:	1d1a      	adds	r2, r3, #4
 800bcf0:	f8ca 2000 	str.w	r2, [sl]
 800bcf4:	f011 0f20 	tst.w	r1, #32
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	d010      	beq.n	800bd1e <_scanf_i+0x1ca>
 800bcfc:	6018      	str	r0, [r3, #0]
 800bcfe:	68e3      	ldr	r3, [r4, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	60e3      	str	r3, [r4, #12]
 800bd04:	eba5 0509 	sub.w	r5, r5, r9
 800bd08:	44a8      	add	r8, r5
 800bd0a:	6925      	ldr	r5, [r4, #16]
 800bd0c:	4445      	add	r5, r8
 800bd0e:	6125      	str	r5, [r4, #16]
 800bd10:	2000      	movs	r0, #0
 800bd12:	b007      	add	sp, #28
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	f04f 0800 	mov.w	r8, #0
 800bd1c:	e7ca      	b.n	800bcb4 <_scanf_i+0x160>
 800bd1e:	07ca      	lsls	r2, r1, #31
 800bd20:	bf4c      	ite	mi
 800bd22:	8018      	strhmi	r0, [r3, #0]
 800bd24:	6018      	strpl	r0, [r3, #0]
 800bd26:	e7ea      	b.n	800bcfe <_scanf_i+0x1aa>
 800bd28:	2001      	movs	r0, #1
 800bd2a:	e7f2      	b.n	800bd12 <_scanf_i+0x1be>
 800bd2c:	0800c270 	.word	0x0800c270
 800bd30:	08008f79 	.word	0x08008f79
 800bd34:	0800b599 	.word	0x0800b599
 800bd38:	0800c666 	.word	0x0800c666

0800bd3c <_read_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4c07      	ldr	r4, [pc, #28]	; (800bd5c <_read_r+0x20>)
 800bd40:	4605      	mov	r5, r0
 800bd42:	4608      	mov	r0, r1
 800bd44:	4611      	mov	r1, r2
 800bd46:	2200      	movs	r2, #0
 800bd48:	6022      	str	r2, [r4, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f7f7 f998 	bl	8003080 <_read>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_read_r+0x1e>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_read_r+0x1e>
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20008024 	.word	0x20008024

0800bd60 <__sccl>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	780b      	ldrb	r3, [r1, #0]
 800bd64:	2b5e      	cmp	r3, #94	; 0x5e
 800bd66:	bf13      	iteet	ne
 800bd68:	1c4a      	addne	r2, r1, #1
 800bd6a:	1c8a      	addeq	r2, r1, #2
 800bd6c:	784b      	ldrbeq	r3, [r1, #1]
 800bd6e:	2100      	movne	r1, #0
 800bd70:	bf08      	it	eq
 800bd72:	2101      	moveq	r1, #1
 800bd74:	1e44      	subs	r4, r0, #1
 800bd76:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800bd7a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800bd7e:	42ac      	cmp	r4, r5
 800bd80:	d1fb      	bne.n	800bd7a <__sccl+0x1a>
 800bd82:	b913      	cbnz	r3, 800bd8a <__sccl+0x2a>
 800bd84:	3a01      	subs	r2, #1
 800bd86:	4610      	mov	r0, r2
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	f081 0401 	eor.w	r4, r1, #1
 800bd8e:	54c4      	strb	r4, [r0, r3]
 800bd90:	1c51      	adds	r1, r2, #1
 800bd92:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bd96:	2d2d      	cmp	r5, #45	; 0x2d
 800bd98:	f101 36ff 	add.w	r6, r1, #4294967295
 800bd9c:	460a      	mov	r2, r1
 800bd9e:	d006      	beq.n	800bdae <__sccl+0x4e>
 800bda0:	2d5d      	cmp	r5, #93	; 0x5d
 800bda2:	d0f0      	beq.n	800bd86 <__sccl+0x26>
 800bda4:	b90d      	cbnz	r5, 800bdaa <__sccl+0x4a>
 800bda6:	4632      	mov	r2, r6
 800bda8:	e7ed      	b.n	800bd86 <__sccl+0x26>
 800bdaa:	462b      	mov	r3, r5
 800bdac:	e7ef      	b.n	800bd8e <__sccl+0x2e>
 800bdae:	780e      	ldrb	r6, [r1, #0]
 800bdb0:	2e5d      	cmp	r6, #93	; 0x5d
 800bdb2:	d0fa      	beq.n	800bdaa <__sccl+0x4a>
 800bdb4:	42b3      	cmp	r3, r6
 800bdb6:	dcf8      	bgt.n	800bdaa <__sccl+0x4a>
 800bdb8:	3301      	adds	r3, #1
 800bdba:	429e      	cmp	r6, r3
 800bdbc:	54c4      	strb	r4, [r0, r3]
 800bdbe:	dcfb      	bgt.n	800bdb8 <__sccl+0x58>
 800bdc0:	3102      	adds	r1, #2
 800bdc2:	e7e6      	b.n	800bd92 <__sccl+0x32>

0800bdc4 <__submore>:
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	460c      	mov	r4, r1
 800bdca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bdcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d11d      	bne.n	800be10 <__submore+0x4c>
 800bdd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bdd8:	f7fe ffde 	bl	800ad98 <_malloc_r>
 800bddc:	b918      	cbnz	r0, 800bde6 <__submore+0x22>
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295
 800bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdea:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bdf0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdf2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bdf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bdfa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bdfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800be06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	2000      	movs	r0, #0
 800be0e:	e7e8      	b.n	800bde2 <__submore+0x1e>
 800be10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800be12:	0077      	lsls	r7, r6, #1
 800be14:	463a      	mov	r2, r7
 800be16:	f7ff fc68 	bl	800b6ea <_realloc_r>
 800be1a:	4605      	mov	r5, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d0de      	beq.n	800bdde <__submore+0x1a>
 800be20:	eb00 0806 	add.w	r8, r0, r6
 800be24:	4601      	mov	r1, r0
 800be26:	4632      	mov	r2, r6
 800be28:	4640      	mov	r0, r8
 800be2a:	f7fb ffc1 	bl	8007db0 <memcpy>
 800be2e:	f8c4 8000 	str.w	r8, [r4]
 800be32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800be36:	e7e9      	b.n	800be0c <__submore+0x48>

0800be38 <_malloc_usable_size_r>:
 800be38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be3c:	1f18      	subs	r0, r3, #4
 800be3e:	2b00      	cmp	r3, #0
 800be40:	bfbc      	itt	lt
 800be42:	580b      	ldrlt	r3, [r1, r0]
 800be44:	18c0      	addlt	r0, r0, r3
 800be46:	4770      	bx	lr

0800be48 <_init>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	bf00      	nop
 800be4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4e:	bc08      	pop	{r3}
 800be50:	469e      	mov	lr, r3
 800be52:	4770      	bx	lr

0800be54 <_fini>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr
