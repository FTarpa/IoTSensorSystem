
IoT-Sensor-System_F413ZH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800bf98  0800bf98  0001bf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e4  0800c7e4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7ec  0800c7ec  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c7f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e08  20000240  0800ca34  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008048  0800ca34  00028048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015311  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028e4  00000000  00000000  00035581  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242d8  00000000  00000000  00039f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb38  00000000  00000000  0005e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d663b  00000000  00000000  0006cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001433a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d64  00000000  00000000  00143420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf80 	.word	0x0800bf80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	0800bf80 	.word	0x0800bf80

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000422:	f1a4 0401 	sub.w	r4, r4, #1
 8000426:	d1e9      	bne.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2f>:
 8000c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c14:	bf24      	itt	cs
 8000c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1e:	d90d      	bls.n	8000c3c <__aeabi_d2f+0x30>
 8000c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c34:	bf08      	it	eq
 8000c36:	f020 0001 	biceq.w	r0, r0, #1
 8000c3a:	4770      	bx	lr
 8000c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c40:	d121      	bne.n	8000c86 <__aeabi_d2f+0x7a>
 8000c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c46:	bfbc      	itt	lt
 8000c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	4770      	bxlt	lr
 8000c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c56:	f1c2 0218 	rsb	r2, r2, #24
 8000c5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c62:	fa20 f002 	lsr.w	r0, r0, r2
 8000c66:	bf18      	it	ne
 8000c68:	f040 0001 	orrne.w	r0, r0, #1
 8000c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c78:	ea40 000c 	orr.w	r0, r0, ip
 8000c7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c84:	e7cc      	b.n	8000c20 <__aeabi_d2f+0x14>
 8000c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8a:	d107      	bne.n	8000c9c <__aeabi_d2f+0x90>
 8000c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c90:	bf1e      	ittt	ne
 8000c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9a:	4770      	bxne	lr
 8000c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc0:	f000 b972 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9e08      	ldr	r6, [sp, #32]
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4688      	mov	r8, r1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d14b      	bne.n	8000d82 <__udivmoddi4+0xa6>
 8000cea:	428a      	cmp	r2, r1
 8000cec:	4615      	mov	r5, r2
 8000cee:	d967      	bls.n	8000dc0 <__udivmoddi4+0xe4>
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0720 	rsb	r7, r2, #32
 8000cfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000d02:	4095      	lsls	r5, r2
 8000d04:	ea47 0803 	orr.w	r8, r7, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d14:	fa1f fc85 	uxth.w	ip, r5
 8000d18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d20:	fb07 f10c 	mul.w	r1, r7, ip
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x60>
 8000d28:	18eb      	adds	r3, r5, r3
 8000d2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2e:	f080 811b 	bcs.w	8000f68 <__udivmoddi4+0x28c>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 8118 	bls.w	8000f68 <__udivmoddi4+0x28c>
 8000d38:	3f02      	subs	r7, #2
 8000d3a:	442b      	add	r3, r5
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x8c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x290>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x290>
 8000d64:	3802      	subs	r0, #2
 8000d66:	442c      	add	r4, r5
 8000d68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	2700      	movs	r7, #0
 8000d72:	b11e      	cbz	r6, 8000d7c <__udivmoddi4+0xa0>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xbe>
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	f000 80eb 	beq.w	8000f62 <__udivmoddi4+0x286>
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d92:	4638      	mov	r0, r7
 8000d94:	4639      	mov	r1, r7
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f783 	clz	r7, r3
 8000d9e:	2f00      	cmp	r7, #0
 8000da0:	d147      	bne.n	8000e32 <__udivmoddi4+0x156>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd0>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2c4>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa0>
 8000dba:	e9c6 4800 	strd	r4, r8, [r6]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xe8>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 808f 	bne.w	8000eec <__udivmoddi4+0x210>
 8000dce:	1b49      	subs	r1, r1, r5
 8000dd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd4:	fa1f f885 	uxth.w	r8, r5
 8000dd8:	2701      	movs	r7, #1
 8000dda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dde:	0c23      	lsrs	r3, r4, #16
 8000de0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x124>
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x122>
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2bc>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1a59      	subs	r1, r3, r1
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x14c>
 8000e18:	192c      	adds	r4, r5, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x14a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80b6 	bhi.w	8000f92 <__udivmoddi4+0x2b6>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e79f      	b.n	8000d72 <__udivmoddi4+0x96>
 8000e32:	f1c7 0c20 	rsb	ip, r7, #32
 8000e36:	40bb      	lsls	r3, r7
 8000e38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e40:	fa01 f407 	lsl.w	r4, r1, r7
 8000e44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e50:	4325      	orrs	r5, r4
 8000e52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e56:	0c2c      	lsrs	r4, r5, #16
 8000e58:	fb08 3319 	mls	r3, r8, r9, r3
 8000e5c:	fa1f fa8e 	uxth.w	sl, lr
 8000e60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e64:	fb09 f40a 	mul.w	r4, r9, sl
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b0>
 8000e74:	eb1e 0303 	adds.w	r3, lr, r3
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	f080 8087 	bcs.w	8000f8e <__udivmoddi4+0x2b2>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f240 8084 	bls.w	8000f8e <__udivmoddi4+0x2b2>
 8000e86:	f1a9 0902 	sub.w	r9, r9, #2
 8000e8a:	4473      	add	r3, lr
 8000e8c:	1b1b      	subs	r3, r3, r4
 8000e8e:	b2ad      	uxth	r5, r5
 8000e90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e94:	fb08 3310 	mls	r3, r8, r0, r3
 8000e98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ea0:	45a2      	cmp	sl, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1da>
 8000ea4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eac:	d26b      	bcs.n	8000f86 <__udivmoddi4+0x2aa>
 8000eae:	45a2      	cmp	sl, r4
 8000eb0:	d969      	bls.n	8000f86 <__udivmoddi4+0x2aa>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4474      	add	r4, lr
 8000eb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	454c      	cmp	r4, r9
 8000ec4:	46c2      	mov	sl, r8
 8000ec6:	464b      	mov	r3, r9
 8000ec8:	d354      	bcc.n	8000f74 <__udivmoddi4+0x298>
 8000eca:	d051      	beq.n	8000f70 <__udivmoddi4+0x294>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d069      	beq.n	8000fa4 <__udivmoddi4+0x2c8>
 8000ed0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000edc:	40fd      	lsrs	r5, r7
 8000ede:	40fc      	lsrs	r4, r7
 8000ee0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee8:	2700      	movs	r7, #0
 8000eea:	e747      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef4:	4095      	lsls	r5, r2
 8000ef6:	fa01 f002 	lsl.w	r0, r1, r2
 8000efa:	fa21 f303 	lsr.w	r3, r1, r3
 8000efe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f02:	4338      	orrs	r0, r7
 8000f04:	0c01      	lsrs	r1, r0, #16
 8000f06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f0a:	fa1f f885 	uxth.w	r8, r5
 8000f0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f16:	fb07 f308 	mul.w	r3, r7, r8
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x256>
 8000f22:	1869      	adds	r1, r5, r1
 8000f24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f28:	d22f      	bcs.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d92d      	bls.n	8000f8a <__udivmoddi4+0x2ae>
 8000f2e:	3f02      	subs	r7, #2
 8000f30:	4429      	add	r1, r5
 8000f32:	1acb      	subs	r3, r1, r3
 8000f34:	b281      	uxth	r1, r0
 8000f36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb00 f308 	mul.w	r3, r0, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d907      	bls.n	8000f5a <__udivmoddi4+0x27e>
 8000f4a:	1869      	adds	r1, r5, r1
 8000f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f50:	d217      	bcs.n	8000f82 <__udivmoddi4+0x2a6>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d915      	bls.n	8000f82 <__udivmoddi4+0x2a6>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4429      	add	r1, r5
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f60:	e73b      	b.n	8000dda <__udivmoddi4+0xfe>
 8000f62:	4637      	mov	r7, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e709      	b.n	8000d7c <__udivmoddi4+0xa0>
 8000f68:	4607      	mov	r7, r0
 8000f6a:	e6e7      	b.n	8000d3c <__udivmoddi4+0x60>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x8c>
 8000f70:	4541      	cmp	r1, r8
 8000f72:	d2ab      	bcs.n	8000ecc <__udivmoddi4+0x1f0>
 8000f74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f78:	eb69 020e 	sbc.w	r2, r9, lr
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	4613      	mov	r3, r2
 8000f80:	e7a4      	b.n	8000ecc <__udivmoddi4+0x1f0>
 8000f82:	4660      	mov	r0, ip
 8000f84:	e7e9      	b.n	8000f5a <__udivmoddi4+0x27e>
 8000f86:	4618      	mov	r0, r3
 8000f88:	e795      	b.n	8000eb6 <__udivmoddi4+0x1da>
 8000f8a:	4667      	mov	r7, ip
 8000f8c:	e7d1      	b.n	8000f32 <__udivmoddi4+0x256>
 8000f8e:	4681      	mov	r9, r0
 8000f90:	e77c      	b.n	8000e8c <__udivmoddi4+0x1b0>
 8000f92:	3802      	subs	r0, #2
 8000f94:	442c      	add	r4, r5
 8000f96:	e747      	b.n	8000e28 <__udivmoddi4+0x14c>
 8000f98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f9c:	442b      	add	r3, r5
 8000f9e:	e72f      	b.n	8000e00 <__udivmoddi4+0x124>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xda>
 8000fa4:	4637      	mov	r7, r6
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0xa0>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f002 f909 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f8ef 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 fbad 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbe:	f000 fb8b 	bl	80016d8 <MX_DMA_Init>
  MX_RTC_Init();
 8000fc2:	f000 f9a3 	bl	800130c <MX_RTC_Init>
  MX_UART4_Init();
 8000fc6:	f000 fa59 	bl	800147c <MX_UART4_Init>
  MX_UART5_Init();
 8000fca:	f000 fa81 	bl	80014d0 <MX_UART5_Init>
  MX_UART7_Init();
 8000fce:	f000 faa9 	bl	8001524 <MX_UART7_Init>
  MX_UART8_Init();
 8000fd2:	f000 fad1 	bl	8001578 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 fb23 	bl	8001620 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fda:	f000 fb53 	bl	8001684 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fde:	f000 f967 	bl	80012b0 <MX_I2C1_Init>
  MX_UART9_Init();
 8000fe2:	f000 faf3 	bl	80015cc <MX_UART9_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart9);
 8000fe6:	4851      	ldr	r0, [pc, #324]	; (800112c <main+0x180>)
 8000fe8:	f002 f828 	bl	800303c <RetargetInit>
  memcpy(ESP32.SSID, _SSID, strlen(_SSID));
 8000fec:	220e      	movs	r2, #14
 8000fee:	4950      	ldr	r1, [pc, #320]	; (8001130 <main+0x184>)
 8000ff0:	4850      	ldr	r0, [pc, #320]	; (8001134 <main+0x188>)
 8000ff2:	f006 ff7b 	bl	8007eec <memcpy>
  memcpy(ESP32.Pass, _PASS, strlen(_PASS));
 8000ff6:	220d      	movs	r2, #13
 8000ff8:	494f      	ldr	r1, [pc, #316]	; (8001138 <main+0x18c>)
 8000ffa:	4850      	ldr	r0, [pc, #320]	; (800113c <main+0x190>)
 8000ffc:	f006 ff76 	bl	8007eec <memcpy>
  ESP32.IO.IO_Receive = Receive_Func;
 8001000:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <main+0x188>)
 8001002:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <main+0x194>)
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
  ESP32.IO.IO_Transmit = Transmit_Func;
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <main+0x188>)
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <main+0x198>)
 800100a:	649a      	str	r2, [r3, #72]	; 0x48

  printf("----------START PROGRAM----------\r\n");
 800100c:	484e      	ldr	r0, [pc, #312]	; (8001148 <main+0x19c>)
 800100e:	f007 fee5 	bl	8008ddc <puts>
  sprintf((char*)client_id, "%x%x%x", \
		  (unsigned int)HAL_GetUIDw0(), (unsigned int)HAL_GetUIDw1(), (unsigned int)HAL_GetUIDw2());
 8001012:	f002 f96d 	bl	80032f0 <HAL_GetUIDw0>
 8001016:	4604      	mov	r4, r0
 8001018:	f002 f976 	bl	8003308 <HAL_GetUIDw1>
 800101c:	4605      	mov	r5, r0
 800101e:	f002 f97f 	bl	8003320 <HAL_GetUIDw2>
 8001022:	4603      	mov	r3, r0
  sprintf((char*)client_id, "%x%x%x", \
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	462b      	mov	r3, r5
 8001028:	4622      	mov	r2, r4
 800102a:	4948      	ldr	r1, [pc, #288]	; (800114c <main+0x1a0>)
 800102c:	4848      	ldr	r0, [pc, #288]	; (8001150 <main+0x1a4>)
 800102e:	f007 ff8b 	bl	8008f48 <siprintf>
  printf("Client ID: %s\r\n", client_id);
 8001032:	4947      	ldr	r1, [pc, #284]	; (8001150 <main+0x1a4>)
 8001034:	4847      	ldr	r0, [pc, #284]	; (8001154 <main+0x1a8>)
 8001036:	f007 fe5d 	bl	8008cf4 <iprintf>

  HT_Sensor.interface = &hi2c1;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <main+0x1ac>)
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <main+0x1b0>)
 800103e:	601a      	str	r2, [r3, #0]
  SHTC3_Init(&HT_Sensor);
 8001040:	4845      	ldr	r0, [pc, #276]	; (8001158 <main+0x1ac>)
 8001042:	f001 ff0a 	bl	8002e5a <SHTC3_Init>
	SHTC3_Measurement(&HT_Sensor);
 8001046:	4844      	ldr	r0, [pc, #272]	; (8001158 <main+0x1ac>)
 8001048:	f001 ff26 	bl	8002e98 <SHTC3_Measurement>


  Sensor_1.uart_itf = &huart4;
 800104c:	4b44      	ldr	r3, [pc, #272]	; (8001160 <main+0x1b4>)
 800104e:	4a45      	ldr	r2, [pc, #276]	; (8001164 <main+0x1b8>)
 8001050:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_1);
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <main+0x1b4>)
 8001054:	f001 fd88 	bl	8002b68 <Sensor_Init>

  Sensor_2.uart_itf = &huart5;
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <main+0x1bc>)
 800105a:	4a44      	ldr	r2, [pc, #272]	; (800116c <main+0x1c0>)
 800105c:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_2);
 800105e:	4842      	ldr	r0, [pc, #264]	; (8001168 <main+0x1bc>)
 8001060:	f001 fd82 	bl	8002b68 <Sensor_Init>

  Sensor_3.uart_itf = &huart7;
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <main+0x1c4>)
 8001066:	4a43      	ldr	r2, [pc, #268]	; (8001174 <main+0x1c8>)
 8001068:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_3);
 800106a:	4841      	ldr	r0, [pc, #260]	; (8001170 <main+0x1c4>)
 800106c:	f001 fd7c 	bl	8002b68 <Sensor_Init>

  Sensor_4.uart_itf = &huart8;
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <main+0x1cc>)
 8001072:	4a42      	ldr	r2, [pc, #264]	; (800117c <main+0x1d0>)
 8001074:	611a      	str	r2, [r3, #16]
  Sensor_Init(&Sensor_4);
 8001076:	4840      	ldr	r0, [pc, #256]	; (8001178 <main+0x1cc>)
 8001078:	f001 fd76 	bl	8002b68 <Sensor_Init>

  ESP32_Init(&ESP32);
 800107c:	482d      	ldr	r0, [pc, #180]	; (8001134 <main+0x188>)
 800107e:	f001 fa41 	bl	8002504 <ESP32_Init>
  ESP32_MQTT_Connect(&ESP32, client_id);
 8001082:	4933      	ldr	r1, [pc, #204]	; (8001150 <main+0x1a4>)
 8001084:	482b      	ldr	r0, [pc, #172]	; (8001134 <main+0x188>)
 8001086:	f001 fac9 	bl	800261c <ESP32_MQTT_Connect>
  Network_time_t network_time = ESP32_GetTime();
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fc06 	bl	80028a0 <ESP32_GetTime>

  RTC_TimeTypeDef sTime = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
  sTime.Hours	= network_time.hour;
 80010a2:	7efb      	ldrb	r3, [r7, #27]
 80010a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes	= network_time.min;
 80010a6:	7f3b      	ldrb	r3, [r7, #28]
 80010a8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds	= network_time.sec;
 80010aa:	7f7b      	ldrb	r3, [r7, #29]
 80010ac:	71bb      	strb	r3, [r7, #6]

  RTC_DateTypeDef sDate = {0};
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sDate.Month	= network_time.month;
 80010b2:	7e7b      	ldrb	r3, [r7, #25]
 80010b4:	707b      	strb	r3, [r7, #1]
  sDate.Date	= network_time.day;
 80010b6:	7ebb      	ldrb	r3, [r7, #26]
 80010b8:	70bb      	strb	r3, [r7, #2]
  sDate.Year	= network_time.year - 2000;
 80010ba:	7e3b      	ldrb	r3, [r7, #24]
 80010bc:	3330      	adds	r3, #48	; 0x30
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	70fb      	strb	r3, [r7, #3]

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	482d      	ldr	r0, [pc, #180]	; (8001180 <main+0x1d4>)
 80010ca:	f004 ff66 	bl	8005f9a <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <main+0x1d4>)
 80010d6:	f005 f87b 	bl	80061d0 <HAL_RTC_SetDate>

  MX_TIM2_Init();
 80010da:	f000 f971 	bl	80013c0 <MX_TIM2_Init>
  /* USER CODE END 2 */
  HAL_Delay(10000); //Wait 10sec.
 80010de:	f242 7010 	movw	r0, #10000	; 0x2710
 80010e2:	f002 f8e3 	bl	80032ac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf((char*)mqttBuffer, "{");
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <main+0x1d8>)
 80010e8:	227b      	movs	r2, #123	; 0x7b
 80010ea:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(AWS_POST_TIME);
 80010ec:	4826      	ldr	r0, [pc, #152]	; (8001188 <main+0x1dc>)
 80010ee:	f002 f8dd 	bl	80032ac <HAL_Delay>
	  mqttBuffer[strlen((char*)mqttBuffer)-1] = 0;
 80010f2:	4824      	ldr	r0, [pc, #144]	; (8001184 <main+0x1d8>)
 80010f4:	f7ff f894 	bl	8000220 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <main+0x1d8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	54d1      	strb	r1, [r2, r3]
	  sprintf((char*)mqttBuffer, "%s}", (char*)mqttBuffer);
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <main+0x1d8>)
 8001104:	4921      	ldr	r1, [pc, #132]	; (800118c <main+0x1e0>)
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <main+0x1d8>)
 8001108:	f007 ff1e 	bl	8008f48 <siprintf>
	  ESP32_MQTT_Public(&ESP32, (uint8_t*)"/devices/IoTSensorUnit", mqttBuffer);
 800110c:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <main+0x1d8>)
 800110e:	4920      	ldr	r1, [pc, #128]	; (8001190 <main+0x1e4>)
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <main+0x188>)
 8001112:	f001 fac1 	bl	8002698 <ESP32_MQTT_Public>
	  memset(mqttBuffer, 0, sizeof(mqttBuffer));
 8001116:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800111a:	2100      	movs	r1, #0
 800111c:	4819      	ldr	r0, [pc, #100]	; (8001184 <main+0x1d8>)
 800111e:	f006 fef0 	bl	8007f02 <memset>
	  msgIndex = 0;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <main+0x1e8>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	  sprintf((char*)mqttBuffer, "{");
 8001128:	e7dd      	b.n	80010e6 <main+0x13a>
 800112a:	bf00      	nop
 800112c:	20007dc8 	.word	0x20007dc8
 8001130:	0800bf98 	.word	0x0800bf98
 8001134:	2000025c 	.word	0x2000025c
 8001138:	0800bfa8 	.word	0x0800bfa8
 800113c:	2000027c 	.word	0x2000027c
 8001140:	080017f1 	.word	0x080017f1
 8001144:	080019c5 	.word	0x080019c5
 8001148:	0800bfb8 	.word	0x0800bfb8
 800114c:	0800bfdc 	.word	0x0800bfdc
 8001150:	20007d10 	.word	0x20007d10
 8001154:	0800bfe4 	.word	0x0800bfe4
 8001158:	200004fc 	.word	0x200004fc
 800115c:	20007e88 	.word	0x20007e88
 8001160:	200004ac 	.word	0x200004ac
 8001164:	20007f7c 	.word	0x20007f7c
 8001168:	200004c0 	.word	0x200004c0
 800116c:	20007edc 	.word	0x20007edc
 8001170:	200004d4 	.word	0x200004d4
 8001174:	20007e08 	.word	0x20007e08
 8001178:	200004e8 	.word	0x200004e8
 800117c:	20007f3c 	.word	0x20007f3c
 8001180:	20007f1c 	.word	0x20007f1c
 8001184:	2000050c 	.word	0x2000050c
 8001188:	0001d4c0 	.word	0x0001d4c0
 800118c:	0800bff4 	.word	0x0800bff4
 8001190:	0800bff8 	.word	0x0800bff8
 8001194:	20007d0c 	.word	0x20007d0c

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0aa      	sub	sp, #168	; 0xa8
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011a2:	2234      	movs	r2, #52	; 0x34
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 feab 	bl	8007f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2258      	movs	r2, #88	; 0x58
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 fe9c 	bl	8007f02 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <SystemClock_Config+0x110>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <SystemClock_Config+0x110>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <SystemClock_Config+0x110>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <SystemClock_Config+0x114>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <SystemClock_Config+0x114>)
 80011f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <SystemClock_Config+0x114>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001202:	230a      	movs	r3, #10
 8001204:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001224:	2310      	movs	r3, #16
 8001226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 800122a:	23c8      	movs	r3, #200	; 0xc8
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fbd4 	bl	80059f4 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001252:	f000 fd99 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800126c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001270:	2103      	movs	r1, #3
 8001272:	4618      	mov	r0, r3
 8001274:	f003 ff66 	bl	8005144 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800127e:	f000 fd83 	bl	8001d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001282:	2308      	movs	r3, #8
 8001284:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f923 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800129c:	f000 fd74 	bl	8001d88 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	37a8      	adds	r7, #168	; 0xa8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f002 fe71 	bl	8003fd4 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 fd46 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20007e88 	.word	0x20007e88
 8001304:	40005400 	.word	0x40005400
 8001308:	000186a0 	.word	0x000186a0

0800130c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_RTC_Init+0xac>)
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <MX_RTC_Init+0xb0>)
 8001328:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_RTC_Init+0xac>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_RTC_Init+0xac>)
 8001332:	227f      	movs	r2, #127	; 0x7f
 8001334:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_RTC_Init+0xac>)
 8001338:	22ff      	movs	r2, #255	; 0xff
 800133a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_RTC_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_RTC_Init+0xac>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_RTC_Init+0xac>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800134e:	481a      	ldr	r0, [pc, #104]	; (80013b8 <MX_RTC_Init+0xac>)
 8001350:	f004 fd92 	bl	8005e78 <HAL_RTC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 fd15 	bl	8001d88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001362:	2300      	movs	r3, #0
 8001364:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001366:	2300      	movs	r3, #0
 8001368:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2201      	movs	r2, #1
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <MX_RTC_Init+0xac>)
 800137a:	f004 fe0e 	bl	8005f9a <HAL_RTC_SetTime>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001384:	f000 fd00 	bl	8001d88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001388:	2301      	movs	r3, #1
 800138a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800138c:	2301      	movs	r3, #1
 800138e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001390:	2301      	movs	r3, #1
 8001392:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001394:	2300      	movs	r3, #0
 8001396:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_RTC_Init+0xac>)
 80013a0:	f004 ff16 	bl	80061d0 <HAL_RTC_SetDate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013aa:	f000 fced 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20007f1c 	.word	0x20007f1c
 80013bc:	40002800 	.word	0x40002800

080013c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_TIM2_Init+0xb4>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_TIM2_Init+0xb4>)
 80013e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_TIM2_Init+0xb4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000000;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_TIM2_Init+0xb4>)
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <MX_TIM2_Init+0xb8>)
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM2_Init+0xb4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_TIM2_Init+0xb4>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001404:	481b      	ldr	r0, [pc, #108]	; (8001474 <MX_TIM2_Init+0xb4>)
 8001406:	f005 f869 	bl	80064dc <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 fcba 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4619      	mov	r1, r3
 8001420:	4814      	ldr	r0, [pc, #80]	; (8001474 <MX_TIM2_Init+0xb4>)
 8001422:	f005 f9b2 	bl	800678a <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 fcac 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM2_Init+0xb4>)
 800143e:	f005 fbbd 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 fc9e 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_TIM2_Init+0xb4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f06f 0201 	mvn.w	r2, #1
 8001454:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_TIM2_Init+0xb4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <MX_TIM2_Init+0xb4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM2_Init+0xb4>)
 8001468:	f005 f863 	bl	8006532 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20007fbc 	.word	0x20007fbc
 8001478:	005b8d80 	.word	0x005b8d80

0800147c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_UART4_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_UART4_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_UART4_Init+0x4c>)
 8001488:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800148c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_UART4_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_UART4_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_UART4_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_UART4_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_UART4_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_UART4_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_UART4_Init+0x4c>)
 80014b4:	f005 fc12 	bl	8006cdc <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014be:	f000 fc63 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20007f7c 	.word	0x20007f7c
 80014cc:	40004c00 	.word	0x40004c00

080014d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_UART5_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_UART5_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_UART5_Init+0x4c>)
 80014dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_UART5_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_UART5_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_UART5_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_UART5_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_UART5_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_UART5_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_UART5_Init+0x4c>)
 8001508:	f005 fbe8 	bl	8006cdc <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 fc39 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20007edc 	.word	0x20007edc
 8001520:	40005000 	.word	0x40005000

08001524 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_UART7_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_UART7_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 38400;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_UART7_Init+0x4c>)
 8001530:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001534:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_UART7_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_UART7_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_UART7_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_UART7_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_UART7_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_UART7_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_UART7_Init+0x4c>)
 800155c:	f005 fbbe 	bl	8006cdc <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 fc0f 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20007e08 	.word	0x20007e08
 8001574:	40007800 	.word	0x40007800

08001578 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_UART8_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_UART8_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_UART8_Init+0x4c>)
 8001584:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001588:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_UART8_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_UART8_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_UART8_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_UART8_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_UART8_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_UART8_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_UART8_Init+0x4c>)
 80015b0:	f005 fb94 	bl	8006cdc <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80015ba:	f000 fbe5 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20007f3c 	.word	0x20007f3c
 80015c8:	40007c00 	.word	0x40007c00

080015cc <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_UART9_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_UART9_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_UART9_Init+0x4c>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_UART9_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_UART9_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_UART9_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_UART9_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_UART9_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_UART9_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_UART9_Init+0x4c>)
 8001604:	f005 fb6a 	bl	8006cdc <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_UART9_Init+0x46>
  {
    Error_Handler();
 800160e:	f000 fbbb 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20007dc8 	.word	0x20007dc8
 800161c:	40011800 	.word	0x40011800

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <MX_USART2_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001658:	f005 fb40 	bl	8006cdc <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 fb91 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  HAL_UART_Receive_DMA(&huart2,  ESP32.IO.buffer, BUFFER_SIZE);
 8001666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166a:	4905      	ldr	r1, [pc, #20]	; (8001680 <MX_USART2_UART_Init+0x60>)
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800166e:	f005 fcc1 	bl	8006ff4 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20007ffc 	.word	0x20007ffc
 800167c:	40004400 	.word	0x40004400
 8001680:	200002a8 	.word	0x200002a8

08001684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART3_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART3_UART_Init+0x4c>)
 80016bc:	f005 fb0e 	bl	8006cdc <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 fb5f 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20007e48 	.word	0x20007e48
 80016d4:	40004800 	.word	0x40004800

080016d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_DMA_Init+0x3c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <MX_DMA_Init+0x3c>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_DMA_Init+0x3c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2010      	movs	r0, #16
 8001700:	f001 fef5 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001704:	2010      	movs	r0, #16
 8001706:	f001 ff0e 	bl	8003526 <HAL_NVIC_EnableIRQ>

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_GPIO_Init+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <MX_GPIO_Init+0xd0>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <MX_GPIO_Init+0xd0>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_GPIO_Init+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	21f0      	movs	r1, #240	; 0xf0
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <MX_GPIO_Init+0xd4>)
 80017c0:	f002 fbee 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017c4:	23f0      	movs	r3, #240	; 0xf0
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_GPIO_Init+0xd4>)
 80017dc:	f002 fa4e 	bl	8003c7c <HAL_GPIO_Init>

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800

080017f0 <Receive_Func>:

/* USER CODE BEGIN 4 */

int16_t Receive_Func( uint8_t *buffer, uint16_t buffer_size, uint32_t time_out)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	6018      	str	r0, [r3, #0]
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 030a 	add.w	r3, r7, #10
 8001806:	460a      	mov	r2, r1
 8001808:	801a      	strh	r2, [r3, #0]
	uint32_t timeout = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	memset(buffer, 0, buffer_size);
 8001810:	f107 030a 	add.w	r3, r7, #10
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2100      	movs	r1, #0
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f006 fb70 	bl	8007f02 <memset>
	uint16_t read_index = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	do
	{
		uint8_t check_buff[BUFFER_SIZE] = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4618      	mov	r0, r3
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	461a      	mov	r2, r3
 8001834:	2100      	movs	r1, #0
 8001836:	f006 fb64 	bl	8007f02 <memset>
		uint8_t cnt=0;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
		read_index = ESP32.IO.read_pos;
 8001840:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <Receive_Func+0x1bc>)
 8001842:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001846:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222

		do
		{
			check_buff[cnt++] = ESP32.IO.buffer[read_index];
 800184a:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800184e:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 8001852:	1c59      	adds	r1, r3, #1
 8001854:	f887 1221 	strb.w	r1, [r7, #545]	; 0x221
 8001858:	4619      	mov	r1, r3
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <Receive_Func+0x1bc>)
 800185c:	4413      	add	r3, r2
 800185e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	545a      	strb	r2, [r3, r1]
			if(++read_index>=BUFFER_SIZE)
 8001868:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800186c:	3301      	adds	r3, #1
 800186e:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 8001872:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187a:	d302      	bcc.n	8001882 <Receive_Func+0x92>
				read_index = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
		}while(ESP32.IO.buffer[read_index] != 0);
 8001882:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001886:	4a49      	ldr	r2, [pc, #292]	; (80019ac <Receive_Func+0x1bc>)
 8001888:	4413      	add	r3, r2
 800188a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1db      	bne.n	800184a <Receive_Func+0x5a>

		//if((strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nOK\r\n")!=0)||(strstr((char*)ESP32.IO.buffer + ESP32.IO.read_pos, "\r\nERROR\r\n")!=0))
		if((strstr((char*)check_buff, "\r\nOK")!=0)||(strstr((char*)check_buff, "ERROR")!=0)
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4946      	ldr	r1, [pc, #280]	; (80019b0 <Receive_Func+0x1c0>)
 8001898:	4618      	mov	r0, r3
 800189a:	f007 fb75 	bl	8008f88 <strstr>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11a      	bne.n	80018da <Receive_Func+0xea>
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <Receive_Func+0x1c4>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 fb6c 	bl	8008f88 <strstr>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d111      	bne.n	80018da <Receive_Func+0xea>
				||(strstr((char*)check_buff, "ready")!=0)||(strstr((char*)check_buff, "+MQTTPUB:OK")!=0))
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	493f      	ldr	r1, [pc, #252]	; (80019b8 <Receive_Func+0x1c8>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 fb63 	bl	8008f88 <strstr>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <Receive_Func+0xea>
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	493b      	ldr	r1, [pc, #236]	; (80019bc <Receive_Func+0x1cc>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f007 fb5a 	bl	8008f88 <strstr>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d051      	beq.n	800197e <Receive_Func+0x18e>
		{
			uint8_t index = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
			memcpy(buffer, check_buff, cnt);
 80018e0:	f897 2221 	ldrb.w	r2, [r7, #545]	; 0x221
 80018e4:	f107 0114 	add.w	r1, r7, #20
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f006 fafd 	bl	8007eec <memcpy>
			for(int i = 0; i < cnt; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80018f8:	e028      	b.n	800194c <Receive_Func+0x15c>
			{
				int temp = ((ESP32.IO.read_pos + i)<BUFFER_SIZE)?(ESP32.IO.read_pos + i):((ESP32.IO.read_pos + i)-BUFFER_SIZE);
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <Receive_Func+0x1bc>)
 80018fc:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001900:	461a      	mov	r2, r3
 8001902:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001906:	4413      	add	r3, r2
 8001908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190c:	da07      	bge.n	800191e <Receive_Func+0x12e>
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <Receive_Func+0x1bc>)
 8001910:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001914:	461a      	mov	r2, r3
 8001916:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800191a:	4413      	add	r3, r2
 800191c:	e008      	b.n	8001930 <Receive_Func+0x140>
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <Receive_Func+0x1bc>)
 8001920:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8001924:	461a      	mov	r2, r3
 8001926:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800192a:	4413      	add	r3, r2
 800192c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001930:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				ESP32.IO.buffer[temp] = 0;
 8001934:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <Receive_Func+0x1bc>)
 8001936:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800193a:	4413      	add	r3, r2
 800193c:	334c      	adds	r3, #76	; 0x4c
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < cnt; i++)
 8001942:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800194c:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 8001950:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001954:	429a      	cmp	r2, r3
 8001956:	dbd0      	blt.n	80018fa <Receive_Func+0x10a>
			}
			printf("[debug]: %s--position: %d\r\n", buffer, ESP32.IO.read_pos);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Receive_Func+0x1bc>)
 800195a:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 800195e:	461a      	mov	r2, r3
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	4816      	ldr	r0, [pc, #88]	; (80019c0 <Receive_Func+0x1d0>)
 8001968:	f007 f9c4 	bl	8008cf4 <iprintf>
			ESP32.IO.read_pos = read_index;
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <Receive_Func+0x1bc>)
 800196e:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 8001972:	f8a2 324c 	strh.w	r3, [r2, #588]	; 0x24c
			return index;
 8001976:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 800197a:	b21b      	sxth	r3, r3
 800197c:	e011      	b.n	80019a2 <Receive_Func+0x1b2>
		}

		if(++timeout >= time_out)
 800197e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001982:	3301      	adds	r3, #1
 8001984:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d302      	bcc.n	800199a <Receive_Func+0x1aa>
			return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
 8001998:	e003      	b.n	80019a2 <Receive_Func+0x1b2>
		HAL_Delay(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f001 fc86 	bl	80032ac <HAL_Delay>
	{
 80019a0:	e742      	b.n	8001828 <Receive_Func+0x38>
	}while(1);
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	f507 770a 	add.w	r7, r7, #552	; 0x228
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000025c 	.word	0x2000025c
 80019b0:	0800c010 	.word	0x0800c010
 80019b4:	0800c018 	.word	0x0800c018
 80019b8:	0800c020 	.word	0x0800c020
 80019bc:	0800c028 	.word	0x0800c028
 80019c0:	0800c034 	.word	0x0800c034

080019c4 <Transmit_Func>:

int16_t Transmit_Func( uint8_t *data, uint16_t data_size)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = HAL_UART_Transmit(&huart2, data, data_size, HAL_MAX_DELAY);
 80019d0:	887a      	ldrh	r2, [r7, #2]
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <Transmit_Func+0x34>)
 80019da:	f005 f9cc 	bl	8006d76 <HAL_UART_Transmit>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
	if(res != HAL_OK)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <Transmit_Func+0x2a>
		return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	e000      	b.n	80019f0 <Transmit_Func+0x2c>
	else
		return 0;
 80019ee:	2300      	movs	r3, #0

}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20007ffc 	.word	0x20007ffc

080019fc <Get_Time_Format>:

void Get_Time_Format(uint8_t* time_str, int size ,int timeZone)
{
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	b09b      	sub	sp, #108	; 0x6c
 8001a00:	af06      	add	r7, sp, #24
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef stime = {0};
 8001a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sdate = {0};
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 8001a1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <Get_Time_Format+0xcc>)
 8001a26:	f004 fb75 	bl	8006114 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 8001a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4825      	ldr	r0, [pc, #148]	; (8001ac8 <Get_Time_Format+0xcc>)
 8001a34:	f004 fc73 	bl	800631e <HAL_RTC_GetDate>

	struct tm proc_time = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2224      	movs	r2, #36	; 0x24
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 fa5e 	bl	8007f02 <memset>

	proc_time.tm_year = 2000 + sdate.Year - 1900;
 8001a46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a4a:	3364      	adds	r3, #100	; 0x64
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	proc_time.tm_mon = sdate.Month - 1;
 8001a4e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a52:	3b01      	subs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
	proc_time.tm_mday = sdate.Date;
 8001a56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001a5a:	623b      	str	r3, [r7, #32]
	proc_time.tm_hour = stime.Hours;
 8001a5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a60:	61fb      	str	r3, [r7, #28]
	proc_time.tm_min = stime.Minutes;
 8001a62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001a66:	61bb      	str	r3, [r7, #24]
	proc_time.tm_sec = stime.Seconds;
 8001a68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a6c:	617b      	str	r3, [r7, #20]

	mktime(&proc_time);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 fb28 	bl	80080c8 <mktime>
	proc_time.tm_hour += timeZone;
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	61fb      	str	r3, [r7, #28]
	mktime(&proc_time);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 fb1f 	bl	80080c8 <mktime>
	//2021-01-12 12:00:00+09
	memset(time_str, 0, size);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f006 fa36 	bl	8007f02 <memset>
	sprintf((char*)time_str, "%.4d-%.2d-%.2d %.2d:%.2d:%.2d+%.2d:00", (int)proc_time.tm_year + 1900, (int)proc_time.tm_mon + 1
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	1c5e      	adds	r6, r3, #1
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	69b9      	ldr	r1, [r7, #24]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	687c      	ldr	r4, [r7, #4]
 8001aaa:	9404      	str	r4, [sp, #16]
 8001aac:	9003      	str	r0, [sp, #12]
 8001aae:	9102      	str	r1, [sp, #8]
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4633      	mov	r3, r6
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	4904      	ldr	r1, [pc, #16]	; (8001acc <Get_Time_Format+0xd0>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f007 fa44 	bl	8008f48 <siprintf>
	, (int)proc_time.tm_mday, (int)proc_time.tm_hour, (int)proc_time.tm_min, (int)proc_time.tm_sec, timeZone);
}
 8001ac0:	bf00      	nop
 8001ac2:	3754      	adds	r7, #84	; 0x54
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	20007f1c 	.word	0x20007f1c
 8001acc:	0800c050 	.word	0x0800c050

08001ad0 <Format_Data>:

void Format_Data(Sensor_t Sensor_1,Sensor_t Sensor_2,Sensor_t Sensor_3,Sensor_t Sensor_4, SHTC3_Sensor_t HT_Sensor,char* data_format, char* time_str)
{
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	b5b0      	push	{r4, r5, r7, lr}
 8001ad4:	b0d8      	sub	sp, #352	; 0x160
 8001ad6:	af02      	add	r7, sp, #8
 8001ad8:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor_t Sensors[4] = {Sensor_1, Sensor_2, Sensor_3, Sensor_4};
 8001ae0:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001ae4:	f507 75b4 	add.w	r5, r7, #360	; 0x168
 8001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	6023      	str	r3, [r4, #0]
 8001af0:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8001af4:	f507 75be 	add.w	r5, r7, #380	; 0x17c
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001b04:	f507 75c8 	add.w	r5, r7, #400	; 0x190
 8001b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	6023      	str	r3, [r4, #0]
 8001b10:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001b14:	f507 75d2 	add.w	r5, r7, #420	; 0x1a4
 8001b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	6023      	str	r3, [r4, #0]
	char sensor_value[256] = {0};
 8001b20:	463b      	mov	r3, r7
 8001b22:	4618      	mov	r0, r3
 8001b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f006 f9e9 	bl	8007f02 <memset>
	if(HT_Sensor.connection == shtc3_connected)
 8001b30:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d13e      	bne.n	8001bb6 <Format_Data+0xe6>
	{
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f,\r\n", sensor_value, "Temp",HT_Sensor.data.tem);
 8001b38:	f8d7 31bd 	ldr.w	r3, [r7, #445]	; 0x1bd
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd35 	bl	80005ac <__aeabi_f2d>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	463a      	mov	r2, r7
 8001b48:	4638      	mov	r0, r7
 8001b4a:	e9cd 3400 	strd	r3, r4, [sp]
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <Format_Data+0x19c>)
 8001b50:	4947      	ldr	r1, [pc, #284]	; (8001c70 <Format_Data+0x1a0>)
 8001b52:	f007 f9f9 	bl	8008f48 <siprintf>
		sprintf(sensor_value, "%s\t\t\"%s\":%.1f", sensor_value, "Rh",HT_Sensor.data.hum);
 8001b56:	f8d7 31c1 	ldr.w	r3, [r7, #449]	; 0x1c1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd26 	bl	80005ac <__aeabi_f2d>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	463a      	mov	r2, r7
 8001b66:	4638      	mov	r0, r7
 8001b68:	e9cd 3400 	strd	r3, r4, [sp]
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <Format_Data+0x1a4>)
 8001b6e:	4942      	ldr	r1, [pc, #264]	; (8001c78 <Format_Data+0x1a8>)
 8001b70:	f007 f9ea 	bl	8008f48 <siprintf>
		for(int i = 0; i< 4; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b7a:	e018      	b.n	8001bae <Format_Data+0xde>
		{
			if(Sensors[i].isConnected == connected)
 8001b7c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b58      	subs	r3, #88	; 0x58
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <Format_Data+0xd4>
			{
				sprintf(sensor_value,"%s,\r\n", sensor_value);
 8001b96:	463a      	mov	r2, r7
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4938      	ldr	r1, [pc, #224]	; (8001c7c <Format_Data+0x1ac>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f007 f9d3 	bl	8008f48 <siprintf>
				break;
 8001ba2:	e008      	b.n	8001bb6 <Format_Data+0xe6>
		for(int i = 0; i< 4; i++)
 8001ba4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	dde2      	ble.n	8001b7c <Format_Data+0xac>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bbc:	e03d      	b.n	8001c3a <Format_Data+0x16a>
	{
		if(Sensors[i].isConnected == connected)
 8001bbe:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b58      	subs	r3, #88	; 0x58
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d12b      	bne.n	8001c30 <Format_Data+0x160>
		{
			sprintf(sensor_value, "%s\t\t\"%s\":%.1f", sensor_value, Sensors[i].name, Sensors[i].value);
 8001bd8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001bdc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	1c5d      	adds	r5, r3, #1
 8001bec:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b4c      	subs	r3, #76	; 0x4c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcd2 	bl	80005ac <__aeabi_f2d>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	463a      	mov	r2, r7
 8001c0e:	4638      	mov	r0, r7
 8001c10:	e9cd 3400 	strd	r3, r4, [sp]
 8001c14:	462b      	mov	r3, r5
 8001c16:	4918      	ldr	r1, [pc, #96]	; (8001c78 <Format_Data+0x1a8>)
 8001c18:	f007 f996 	bl	8008f48 <siprintf>
			if(i<(4-1))
 8001c1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	dc05      	bgt.n	8001c30 <Format_Data+0x160>
				sprintf(sensor_value,"%s,\r\n", sensor_value);
 8001c24:	463a      	mov	r2, r7
 8001c26:	463b      	mov	r3, r7
 8001c28:	4914      	ldr	r1, [pc, #80]	; (8001c7c <Format_Data+0x1ac>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f007 f98c 	bl	8008f48 <siprintf>
	for(int i = 0; i < 4; i++)
 8001c30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c34:	3301      	adds	r3, #1
 8001c36:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c3a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	ddbd      	ble.n	8001bbe <Format_Data+0xee>
//	{	//delete , in end of json
//		sensor_value[strlen(sensor_value)-1] = 0;
//		sensor_value[strlen(sensor_value)-2] = '\n';
//		sensor_value[strlen(sensor_value)-3] = '\r';
//	}
	sprintf(data_format, "{\r\n\t\"time\":\"%s\",\r\n\t\"product type\":\"%s\",\r\n\t\"number\":\"%s\",\r\n\t\"values\":\r\n\t{\r\n%s\r\n\t}\r\n}",
 8001c42:	463b      	mov	r3, r7
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <Format_Data+0x1b0>)
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <Format_Data+0x1b4>)
 8001c4c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001c50:	490d      	ldr	r1, [pc, #52]	; (8001c88 <Format_Data+0x1b8>)
 8001c52:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001c56:	f007 f977 	bl	8008f48 <siprintf>
			time_str, PRODUCT_TYPE, NUMBER, sensor_value);
}
 8001c5a:	bf00      	nop
 8001c5c:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c66:	b004      	add	sp, #16
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	0800c078 	.word	0x0800c078
 8001c70:	0800c080 	.word	0x0800c080
 8001c74:	0800c094 	.word	0x0800c094
 8001c78:	0800c098 	.word	0x0800c098
 8001c7c:	0800c0a8 	.word	0x0800c0a8
 8001c80:	0800c114 	.word	0x0800c114
 8001c84:	0800c0b0 	.word	0x0800c0b0
 8001c88:	0800c0c0 	.word	0x0800c0c0

08001c8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
 8001c92:	af16      	add	r7, sp, #88	; 0x58
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	6018      	str	r0, [r3, #0]
	Sensor_Get_Value(&Sensor_1);
 8001c98:	4832      	ldr	r0, [pc, #200]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c9a:	f000 ffd7 	bl	8002c4c <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_2);
 8001c9e:	4832      	ldr	r0, [pc, #200]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ca0:	f000 ffd4 	bl	8002c4c <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_3);
 8001ca4:	4831      	ldr	r0, [pc, #196]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ca6:	f000 ffd1 	bl	8002c4c <Sensor_Get_Value>
	Sensor_Get_Value(&Sensor_4);
 8001caa:	4831      	ldr	r0, [pc, #196]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001cac:	f000 ffce 	bl	8002c4c <Sensor_Get_Value>
	uint8_t time_str[128] = {0};
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f006 f922 	bl	8007f02 <memset>
	Get_Time_Format(time_str, sizeof(time_str), 9);
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe98 	bl	80019fc <Get_Time_Format>

	SHTC3_Measurement(&HT_Sensor);
 8001ccc:	4829      	ldr	r0, [pc, #164]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001cce:	f001 f8e3 	bl	8002e98 <SHTC3_Measurement>
	char data2send[512] = {0};
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f006 f90f 	bl	8007f02 <memset>
	Format_Data(Sensor_1, Sensor_2, Sensor_3, Sensor_4, HT_Sensor, data2send, (char*)time_str);
 8001ce4:	4e1f      	ldr	r6, [pc, #124]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	9315      	str	r3, [sp, #84]	; 0x54
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	9314      	str	r3, [sp, #80]	; 0x50
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001cf4:	ac10      	add	r4, sp, #64	; 0x40
 8001cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf8:	c407      	stmia	r4!, {r0, r1, r2}
 8001cfa:	7023      	strb	r3, [r4, #0]
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001cfe:	ac0b      	add	r4, sp, #44	; 0x2c
 8001d00:	461d      	mov	r5, r3
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	682b      	ldr	r3, [r5, #0]
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001d0c:	ac06      	add	r4, sp, #24
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	6023      	str	r3, [r4, #0]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001d1a:	ac01      	add	r4, sp, #4
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	6933      	ldr	r3, [r6, #16]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d2e:	f7ff fecf 	bl	8001ad0 <Format_Data>
	sprintf((char*)mqttBuffer, "%s\r\n\"index_%d\":%s,",  mqttBuffer, msgIndex++, data2send);
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	b2d1      	uxtb	r1, r2
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001d3c:	7011      	strb	r1, [r2, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001d4a:	490d      	ldr	r1, [pc, #52]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001d4e:	f007 f8fb 	bl	8008f48 <siprintf>
	printf("Get Sensor Data.\r\n");
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001d54:	f007 f842 	bl	8008ddc <puts>

}
 8001d58:	bf00      	nop
 8001d5a:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200004ac 	.word	0x200004ac
 8001d68:	200004c0 	.word	0x200004c0
 8001d6c:	200004d4 	.word	0x200004d4
 8001d70:	200004e8 	.word	0x200004e8
 8001d74:	200004fc 	.word	0x200004fc
 8001d78:	20007d0c 	.word	0x20007d0c
 8001d7c:	2000050c 	.word	0x2000050c
 8001d80:	0800c124 	.word	0x0800c124
 8001d84:	0800c138 	.word	0x0800c138

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <Error_Handler+0x6>

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_I2C_MspInit+0x84>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <HAL_I2C_MspInit+0x8c>)
 8001e3a:	f001 ff1f 	bl	8003c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400

08001e70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_RTC_MspInit+0x24>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d102      	bne.n	8001e88 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RTC_MspInit+0x28>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40002800 	.word	0x40002800
 8001e98:	42470e3c 	.word	0x42470e3c

08001e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d115      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_TIM_Base_MspInit+0x48>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_TIM_Base_MspInit+0x48>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_Base_MspInit+0x48>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	201c      	movs	r0, #28
 8001ed0:	f001 fb0d 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed4:	201c      	movs	r0, #28
 8001ed6:	f001 fb26 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b096      	sub	sp, #88	; 0x58
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a8d      	ldr	r2, [pc, #564]	; (800213c <HAL_UART_MspInit+0x254>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d14c      	bne.n	8001fa4 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a8b      	ldr	r2, [pc, #556]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
 8001f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a84      	ldr	r2, [pc, #528]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f46:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /**UART4 GPIO Configuration
    PD10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f70:	2308      	movs	r3, #8
 8001f72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4872      	ldr	r0, [pc, #456]	; (8002144 <HAL_UART_MspInit+0x25c>)
 8001f7c:	f001 fe7e 	bl	8003c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f84:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f92:	2308      	movs	r3, #8
 8001f94:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	486a      	ldr	r0, [pc, #424]	; (8002148 <HAL_UART_MspInit+0x260>)
 8001f9e:	f001 fe6d 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fa2:	e17a      	b.n	800229a <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART5)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_UART_MspInit+0x264>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12d      	bne.n	800200a <HAL_UART_MspInit+0x122>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a62      	ldr	r2, [pc, #392]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fce:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a5b      	ldr	r2, [pc, #364]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_UART_MspInit+0x258>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fe6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001ff8:	230b      	movs	r3, #11
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002000:	4619      	mov	r1, r3
 8002002:	4853      	ldr	r0, [pc, #332]	; (8002150 <HAL_UART_MspInit+0x268>)
 8002004:	f001 fe3a 	bl	8003c7c <HAL_GPIO_Init>
}
 8002008:	e147      	b.n	800229a <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART7)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_UART_MspInit+0x26c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d12d      	bne.n	8002070 <HAL_UART_MspInit+0x188>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_UART_MspInit+0x258>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_UART_MspInit+0x258>)
 800201e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002022:	6413      	str	r3, [r2, #64]	; 0x40
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a41      	ldr	r2, [pc, #260]	; (8002140 <HAL_UART_MspInit+0x258>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800204c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002056:	2301      	movs	r3, #1
 8002058:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800205e:	2308      	movs	r3, #8
 8002060:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002066:	4619      	mov	r1, r3
 8002068:	483b      	ldr	r0, [pc, #236]	; (8002158 <HAL_UART_MspInit+0x270>)
 800206a:	f001 fe07 	bl	8003c7c <HAL_GPIO_Init>
}
 800206e:	e114      	b.n	800229a <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART8)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a39      	ldr	r2, [pc, #228]	; (800215c <HAL_UART_MspInit+0x274>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12c      	bne.n	80020d4 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART8_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_UART_MspInit+0x258>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_UART_MspInit+0x258>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_UART_MspInit+0x258>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_UART_MspInit+0x258>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b2:	2303      	movs	r3, #3
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80020c2:	2308      	movs	r3, #8
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020ca:	4619      	mov	r1, r3
 80020cc:	4822      	ldr	r0, [pc, #136]	; (8002158 <HAL_UART_MspInit+0x270>)
 80020ce:	f001 fdd5 	bl	8003c7c <HAL_GPIO_Init>
}
 80020d2:	e0e2      	b.n	800229a <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==UART9)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_UART_MspInit+0x278>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d142      	bne.n	8002164 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_UART9_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_UART_MspInit+0x258>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_UART_MspInit+0x258>)
 80020e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_UART_MspInit+0x258>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_UART_MspInit+0x258>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_UART_MspInit+0x258>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002116:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002120:	2301      	movs	r3, #1
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8002128:	230b      	movs	r3, #11
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002130:	4619      	mov	r1, r3
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <HAL_UART_MspInit+0x25c>)
 8002134:	f001 fda2 	bl	8003c7c <HAL_GPIO_Init>
}
 8002138:	e0af      	b.n	800229a <HAL_UART_MspInit+0x3b2>
 800213a:	bf00      	nop
 800213c:	40004c00 	.word	0x40004c00
 8002140:	40023800 	.word	0x40023800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40020800 	.word	0x40020800
 800214c:	40005000 	.word	0x40005000
 8002150:	40020400 	.word	0x40020400
 8002154:	40007800 	.word	0x40007800
 8002158:	40021000 	.word	0x40021000
 800215c:	40007c00 	.word	0x40007c00
 8002160:	40011800 	.word	0x40011800
  else if(huart->Instance==USART2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_UART_MspInit+0x3bc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d163      	bne.n	8002236 <HAL_UART_MspInit+0x34e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a6:	230c      	movs	r3, #12
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b6:	2307      	movs	r3, #7
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021be:	4619      	mov	r1, r3
 80021c0:	483a      	ldr	r0, [pc, #232]	; (80022ac <HAL_UART_MspInit+0x3c4>)
 80021c2:	f001 fd5b 	bl	8003c7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021c8:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <HAL_UART_MspInit+0x3cc>)
 80021ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002208:	4829      	ldr	r0, [pc, #164]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 800220a:	f001 f9a7 	bl	800355c <HAL_DMA_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_UART_MspInit+0x330>
      Error_Handler();
 8002214:	f7ff fdb8 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_UART_MspInit+0x3c8>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2026      	movs	r0, #38	; 0x26
 800222a:	f001 f960 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800222e:	2026      	movs	r0, #38	; 0x26
 8002230:	f001 f979 	bl	8003526 <HAL_NVIC_EnableIRQ>
}
 8002234:	e031      	b.n	800229a <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==USART3)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_UART_MspInit+0x3d0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d12c      	bne.n	800229a <HAL_UART_MspInit+0x3b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 800224a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_UART_MspInit+0x3c0>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228a:	2307      	movs	r3, #7
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002292:	4619      	mov	r1, r3
 8002294:	4809      	ldr	r0, [pc, #36]	; (80022bc <HAL_UART_MspInit+0x3d4>)
 8002296:	f001 fcf1 	bl	8003c7c <HAL_GPIO_Init>
}
 800229a:	bf00      	nop
 800229c:	3758      	adds	r7, #88	; 0x58
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	20007d68 	.word	0x20007d68
 80022b4:	40026088 	.word	0x40026088
 80022b8:	40004800 	.word	0x40004800
 80022bc:	40020c00 	.word	0x40020c00

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 ffae 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <DMA1_Stream5_IRQHandler+0x10>)
 800231a:	f001 fa47 	bl	80037ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20007d68 	.word	0x20007d68

08002328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM2_IRQHandler+0x10>)
 800232e:	f004 f924 	bl	800657a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20007fbc 	.word	0x20007fbc

0800233c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(++ESP32.IO.write_pos>BUFFER_SIZE)
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <USART2_IRQHandler+0x34>)
 8002342:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8002346:	3301      	adds	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <USART2_IRQHandler+0x34>)
 800234c:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <USART2_IRQHandler+0x34>)
 8002352:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8002356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235a:	d903      	bls.n	8002364 <USART2_IRQHandler+0x28>
		ESP32.IO.write_pos = 0;
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <USART2_IRQHandler+0x34>)
 800235e:	2200      	movs	r2, #0
 8002360:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <USART2_IRQHandler+0x38>)
 8002366:	f004 fec5 	bl	80070f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000025c 	.word	0x2000025c
 8002374:	20007ffc 	.word	0x20007ffc

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f005 fd76 	bl	8007e98 <__errno>
 80023ac:	4602      	mov	r2, r0
 80023ae:	230c      	movs	r3, #12
 80023b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20050000 	.word	0x20050000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	20007d30 	.word	0x20007d30
 80023e0:	20008048 	.word	0x20008048

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <SystemInit+0x28>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <SystemInit+0x28>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <SystemInit+0x28>)
 80023fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002416:	e003      	b.n	8002420 <LoopCopyDataInit>

08002418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800241a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800241c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800241e:	3104      	adds	r1, #4

08002420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002428:	d3f6      	bcc.n	8002418 <CopyDataInit>
  ldr  r2, =_sbss
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800242c:	e002      	b.n	8002434 <LoopFillZerobss>

0800242e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800242e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002430:	f842 3b04 	str.w	r3, [r2], #4

08002434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002438:	d3f9      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800243a:	f7ff ffd3 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f005 fd31 	bl	8007ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7fe fdb3 	bl	8000fac <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002448:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800244c:	0800c7f4 	.word	0x0800c7f4
  ldr  r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002454:	20000240 	.word	0x20000240
  ldr  r2, =_sbss
 8002458:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 800245c:	20008048 	.word	0x20008048

08002460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC_IRQHandler>
	...

08002464 <ESP32_SendCommand>:

Network_t *Network = {0};


Network_Status_t ESP32_SendCommand(uint8_t* cmd)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800246a:	af00      	add	r7, sp, #0
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	6018      	str	r0, [r3, #0]

	int16_t res = Network->IO.IO_Transmit(cmd, strlen((char*)cmd));
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <ESP32_SendCommand+0x94>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f7fd fed1 	bl	8000220 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	4611      	mov	r1, r2
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	47a0      	blx	r4
 800248a:	4603      	mov	r3, r0
 800248c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4618      	mov	r0, r3
 8002496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249a:	461a      	mov	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f005 fd30 	bl	8007f02 <memset>

	if(res >=0 )
 80024a2:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db1f      	blt.n	80024ea <ESP32_SendCommand+0x86>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <ESP32_SendCommand+0x94>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f107 000c 	add.w	r0, r7, #12
 80024b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024bc:	4798      	blx	r3
 80024be:	4603      	mov	r3, r0
 80024c0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
		if(res >=0 )
 80024c4:	f9b7 320e 	ldrsh.w	r3, [r7, #526]	; 0x20e
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db01      	blt.n	80024d0 <ESP32_SendCommand+0x6c>
		{
			//ESP_DEBUG(recv_buff);
			return NETWORK_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e00d      	b.n	80024ec <ESP32_SendCommand+0x88>
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 80024d0:	480a      	ldr	r0, [pc, #40]	; (80024fc <ESP32_SendCommand+0x98>)
 80024d2:	f006 fc0f 	bl	8008cf4 <iprintf>
			ESP_DEBUG((char*)recv_buff);
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <ESP32_SendCommand+0x9c>)
 80024d8:	f006 fc0c 	bl	8008cf4 <iprintf>
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	4618      	mov	r0, r3
 80024e2:	f006 fc07 	bl	8008cf4 <iprintf>
			return NETWORK_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <ESP32_SendCommand+0x88>
		}

	}
	return NETWORK_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20007d34 	.word	0x20007d34
 80024fc:	0800c14c 	.word	0x0800c14c
 8002500:	0800c158 	.word	0x0800c158

08002504 <ESP32_Init>:


Network_Status_t ESP32_Init(Network_t *network)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0a4      	sub	sp, #144	; 0x90
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	Network = network;
 800250c:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <ESP32_Init+0xdc>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, ESP32_POWER, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	4833      	ldr	r0, [pc, #204]	; (80025e4 <ESP32_Init+0xe0>)
 8002518:	f001 fd42 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ESP32_EN, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	4830      	ldr	r0, [pc, #192]	; (80025e4 <ESP32_Init+0xe0>)
 8002522:	f001 fd3d 	bl	8003fa0 <HAL_GPIO_WritePin>

	ESP32_SendCommand((uint8_t*)"AT+RST\r\n"); 						//Reset ESP32
 8002526:	4830      	ldr	r0, [pc, #192]	; (80025e8 <ESP32_Init+0xe4>)
 8002528:	f7ff ff9c 	bl	8002464 <ESP32_SendCommand>
	ESP32_SendCommand((uint8_t*)"ATE0\r\n"); 						//turn off echo
 800252c:	482f      	ldr	r0, [pc, #188]	; (80025ec <ESP32_Init+0xe8>)
 800252e:	f7ff ff99 	bl	8002464 <ESP32_SendCommand>
	Network_Status_t res = ESP32_SendCommand((uint8_t*)"AT\r\n");	//test with AT command
 8002532:	482f      	ldr	r0, [pc, #188]	; (80025f0 <ESP32_Init+0xec>)
 8002534:	f7ff ff96 	bl	8002464 <ESP32_SendCommand>
 8002538:	4603      	mov	r3, r0
 800253a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(res == NETWORK_OK )
 800253e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002542:	2b00      	cmp	r3, #0
 8002544:	d147      	bne.n	80025d6 <ESP32_Init+0xd2>
	{
		ESP_DEBUG("Set Station mode\r\n");
 8002546:	482b      	ldr	r0, [pc, #172]	; (80025f4 <ESP32_Init+0xf0>)
 8002548:	f006 fbd4 	bl	8008cf4 <iprintf>
 800254c:	482a      	ldr	r0, [pc, #168]	; (80025f8 <ESP32_Init+0xf4>)
 800254e:	f006 fc45 	bl	8008ddc <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CWMODE=1\r\n")>=0)
 8002552:	482a      	ldr	r0, [pc, #168]	; (80025fc <ESP32_Init+0xf8>)
 8002554:	f7ff ff86 	bl	8002464 <ESP32_SendCommand>
		{
			ESP_DEBUG("Connect wifi with ssid: %s, pass: %s\r\n",  Network->SSID, Network->Pass);
 8002558:	4826      	ldr	r0, [pc, #152]	; (80025f4 <ESP32_Init+0xf0>)
 800255a:	f006 fbcb 	bl	8008cf4 <iprintf>
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <ESP32_Init+0xdc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <ESP32_Init+0xdc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3320      	adds	r3, #32
 800256a:	461a      	mov	r2, r3
 800256c:	4824      	ldr	r0, [pc, #144]	; (8002600 <ESP32_Init+0xfc>)
 800256e:	f006 fbc1 	bl	8008cf4 <iprintf>
			uint8_t cmd[128] = {0};
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fcc1 	bl	8007f02 <memset>
			sprintf((char*)cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", Network->SSID, Network->Pass);
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <ESP32_Init+0xdc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <ESP32_Init+0xdc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3320      	adds	r3, #32
 800258c:	f107 000c 	add.w	r0, r7, #12
 8002590:	491c      	ldr	r1, [pc, #112]	; (8002604 <ESP32_Init+0x100>)
 8002592:	f006 fcd9 	bl	8008f48 <siprintf>
			if(ESP32_SendCommand(cmd)<0)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff62 	bl	8002464 <ESP32_SendCommand>
		else
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config SSL\r\n");
 80025a0:	4814      	ldr	r0, [pc, #80]	; (80025f4 <ESP32_Init+0xf0>)
 80025a2:	f006 fba7 	bl	8008cf4 <iprintf>
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <ESP32_Init+0x104>)
 80025a8:	f006 fc18 	bl	8008ddc <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CIPSSLCCONF=3,0,0\r\n")<0)
 80025ac:	4817      	ldr	r0, [pc, #92]	; (800260c <ESP32_Init+0x108>)
 80025ae:	f7ff ff59 	bl	8002464 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config mode\r\n");
 80025b2:	4810      	ldr	r0, [pc, #64]	; (80025f4 <ESP32_Init+0xf0>)
 80025b4:	f006 fb9e 	bl	8008cf4 <iprintf>
 80025b8:	4815      	ldr	r0, [pc, #84]	; (8002610 <ESP32_Init+0x10c>)
 80025ba:	f006 fc0f 	bl	8008ddc <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CWMODE=1\r\n")<0)
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <ESP32_Init+0xf8>)
 80025c0:	f7ff ff50 	bl	8002464 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

		ESP_DEBUG("Config time server\r\n");
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <ESP32_Init+0xf0>)
 80025c6:	f006 fb95 	bl	8008cf4 <iprintf>
 80025ca:	4812      	ldr	r0, [pc, #72]	; (8002614 <ESP32_Init+0x110>)
 80025cc:	f006 fc06 	bl	8008ddc <puts>
		if(ESP32_SendCommand((uint8_t*)"AT+CIPSNTPCFG=1,0,\"sg.pool.ntp.org\"\r\n")<0)
 80025d0:	4811      	ldr	r0, [pc, #68]	; (8002618 <ESP32_Init+0x114>)
 80025d2:	f7ff ff47 	bl	8002464 <ESP32_SendCommand>
		{
			return NETWORK_ERROR;
		}

	}
	return NETWORK_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3790      	adds	r7, #144	; 0x90
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20007d34 	.word	0x20007d34
 80025e4:	40020800 	.word	0x40020800
 80025e8:	0800c160 	.word	0x0800c160
 80025ec:	0800c16c 	.word	0x0800c16c
 80025f0:	0800c174 	.word	0x0800c174
 80025f4:	0800c158 	.word	0x0800c158
 80025f8:	0800c17c 	.word	0x0800c17c
 80025fc:	0800c190 	.word	0x0800c190
 8002600:	0800c1a0 	.word	0x0800c1a0
 8002604:	0800c1c8 	.word	0x0800c1c8
 8002608:	0800c1e0 	.word	0x0800c1e0
 800260c:	0800c1ec 	.word	0x0800c1ec
 8002610:	0800c204 	.word	0x0800c204
 8002614:	0800c214 	.word	0x0800c214
 8002618:	0800c228 	.word	0x0800c228

0800261c <ESP32_MQTT_Connect>:

Network_Status_t ESP32_MQTT_Connect(Network_t *network, uint8_t* client_id)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a2      	sub	sp, #136	; 0x88
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	uint8_t esp_cmd[128] = {0};
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f005 fc67 	bl	8007f02 <memset>
	ESP_DEBUG("Set TLS: ");
 8002634:	4812      	ldr	r0, [pc, #72]	; (8002680 <ESP32_MQTT_Connect+0x64>)
 8002636:	f006 fb5d 	bl	8008cf4 <iprintf>
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <ESP32_MQTT_Connect+0x68>)
 800263c:	f006 fb5a 	bl	8008cf4 <iprintf>
	sprintf((char*)esp_cmd, "AT+MQTTUSERCFG=0,4,\"%s\",\"espressif\",\"1234567890\",0,0,\"\"\r\n", client_id);
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	4910      	ldr	r1, [pc, #64]	; (8002688 <ESP32_MQTT_Connect+0x6c>)
 8002648:	4618      	mov	r0, r3
 800264a:	f006 fc7d 	bl	8008f48 <siprintf>
	if(ESP32_SendCommand(esp_cmd)<0)
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff06 	bl	8002464 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <ESP32_MQTT_Connect+0x70>)
 800265a:	f006 fbbf 	bl	8008ddc <puts>
	ESP_DEBUG("Connect to IoT AWS: ");
 800265e:	4808      	ldr	r0, [pc, #32]	; (8002680 <ESP32_MQTT_Connect+0x64>)
 8002660:	f006 fb48 	bl	8008cf4 <iprintf>
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <ESP32_MQTT_Connect+0x74>)
 8002666:	f006 fb45 	bl	8008cf4 <iprintf>
//	if(ESP32_SendCommand("AT+MQTTCONN=0,\"as76wtq33csyg-ats.iot.ap-southeast-1.amazonaws.com\",8883,1\r\n")<0)
	if(ESP32_SendCommand((uint8_t*)"AT+MQTTCONN=0,\"a2m7a41bhehfuw-ats.iot.us-east-2.amazonaws.com\",8883,1\r\n")<0)
 800266a:	480a      	ldr	r0, [pc, #40]	; (8002694 <ESP32_MQTT_Connect+0x78>)
 800266c:	f7ff fefa 	bl	8002464 <ESP32_SendCommand>
	{
		ESP_DEBUG_RESULT("ERROR.!");
		return NETWORK_ERROR;
	}
	ESP_DEBUG_RESULT("OK\r\n");
 8002670:	4806      	ldr	r0, [pc, #24]	; (800268c <ESP32_MQTT_Connect+0x70>)
 8002672:	f006 fbb3 	bl	8008ddc <puts>
	return NETWORK_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3788      	adds	r7, #136	; 0x88
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	0800c158 	.word	0x0800c158
 8002684:	0800c250 	.word	0x0800c250
 8002688:	0800c25c 	.word	0x0800c25c
 800268c:	0800c298 	.word	0x0800c298
 8002690:	0800c29c 	.word	0x0800c29c
 8002694:	0800c2b4 	.word	0x0800c2b4

08002698 <ESP32_MQTT_Public>:

Network_Status_t ESP32_MQTT_Public(Network_t *network, uint8_t* topic, uint8_t* message)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800269e:	af00      	add	r7, sp, #0
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	6018      	str	r0, [r3, #0]
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	601a      	str	r2, [r3, #0]
	uint8_t esp_cmd[1024] = {0};
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4618      	mov	r0, r3
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	461a      	mov	r2, r3
 80026bc:	2100      	movs	r1, #0
 80026be:	f005 fc20 	bl	8007f02 <memset>

	//sprintf(esp_cmd, "AT+MQTTPUB=0,\"%s\",\"%s\",1,0\r\n", topic, message);
	sprintf((char*)esp_cmd, "AT+MQTTPUBRAW=0,\"%s\",%d,1,0\r\n", topic, strlen((char*)message));
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	f7fd fdab 	bl	8000220 <strlen>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f107 0208 	add.w	r2, r7, #8
 80026d0:	f107 0010 	add.w	r0, r7, #16
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4913      	ldr	r1, [pc, #76]	; (8002724 <ESP32_MQTT_Public+0x8c>)
 80026d8:	f006 fc36 	bl	8008f48 <siprintf>
	ESP_DEBUG("[PUBLIC]: %s\r\n", esp_cmd);
 80026dc:	4812      	ldr	r0, [pc, #72]	; (8002728 <ESP32_MQTT_Public+0x90>)
 80026de:	f006 fb09 	bl	8008cf4 <iprintf>
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4619      	mov	r1, r3
 80026e8:	4810      	ldr	r0, [pc, #64]	; (800272c <ESP32_MQTT_Public+0x94>)
 80026ea:	f006 fb03 	bl	8008cf4 <iprintf>

	if(ESP32_SendCommand(esp_cmd)<0)
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff feb6 	bl	8002464 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	ESP_DEBUG("[PUBLIC]: topic: %s, message: %s\r\n", topic, message);
 80026f8:	480b      	ldr	r0, [pc, #44]	; (8002728 <ESP32_MQTT_Public+0x90>)
 80026fa:	f006 fafb 	bl	8008cf4 <iprintf>
 80026fe:	1d3a      	adds	r2, r7, #4
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	4809      	ldr	r0, [pc, #36]	; (8002730 <ESP32_MQTT_Public+0x98>)
 800270a:	f006 faf3 	bl	8008cf4 <iprintf>

	if(ESP32_SendCommand(message)<0)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f7ff fea7 	bl	8002464 <ESP32_SendCommand>
		ESP_DEBUG_RESULT("ERROR.!\r\n");
		return NETWORK_ERROR;
	}
//	ESP_DEBUG_RESULT("OK\r\n");

	return NETWORK_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0800c2fc 	.word	0x0800c2fc
 8002728:	0800c158 	.word	0x0800c158
 800272c:	0800c31c 	.word	0x0800c31c
 8002730:	0800c32c 	.word	0x0800c32c

08002734 <standard_string_time>:
static void standard_string_time(uint8_t* time_str)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	int index = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

	do
	{
		if(time_str[index] == 0)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d014      	beq.n	8002776 <standard_string_time+0x42>
		{
			break;
		}
		else if ((time_str[index] < '0')||(time_str[index] > '9'))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b2f      	cmp	r3, #47	; 0x2f
 8002756:	d905      	bls.n	8002764 <standard_string_time+0x30>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b39      	cmp	r3, #57	; 0x39
 8002762:	d904      	bls.n	800276e <standard_string_time+0x3a>
		{
			time_str[index] = '0';
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	2230      	movs	r2, #48	; 0x30
 800276c:	701a      	strb	r2, [r3, #0]
		}
		index++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
		if(time_str[index] == 0)
 8002774:	e7e4      	b.n	8002740 <standard_string_time+0xc>
			break;
 8002776:	bf00      	nop
	}while(1);

}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <month_encode>:
static uint8_t month_encode(uint8_t* month_str)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	if(strstr((char*)(char*)month_str, "Jan"))
 800278c:	4938      	ldr	r1, [pc, #224]	; (8002870 <month_encode+0xec>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 fbfa 	bl	8008f88 <strstr>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <month_encode+0x1a>
		return 1;
 800279a:	2301      	movs	r3, #1
 800279c:	e063      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Feb"))
 800279e:	4935      	ldr	r1, [pc, #212]	; (8002874 <month_encode+0xf0>)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f006 fbf1 	bl	8008f88 <strstr>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <month_encode+0x2c>
		return 2;
 80027ac:	2302      	movs	r3, #2
 80027ae:	e05a      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Mar"))
 80027b0:	4931      	ldr	r1, [pc, #196]	; (8002878 <month_encode+0xf4>)
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f006 fbe8 	bl	8008f88 <strstr>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <month_encode+0x3e>
		return 3;
 80027be:	2303      	movs	r3, #3
 80027c0:	e051      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Apr"))
 80027c2:	492e      	ldr	r1, [pc, #184]	; (800287c <month_encode+0xf8>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f006 fbdf 	bl	8008f88 <strstr>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <month_encode+0x50>
		return 4;
 80027d0:	2304      	movs	r3, #4
 80027d2:	e048      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "May"))
 80027d4:	492a      	ldr	r1, [pc, #168]	; (8002880 <month_encode+0xfc>)
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f006 fbd6 	bl	8008f88 <strstr>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <month_encode+0x62>
		return 5;
 80027e2:	2305      	movs	r3, #5
 80027e4:	e03f      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jun"))
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <month_encode+0x100>)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f006 fbcd 	bl	8008f88 <strstr>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <month_encode+0x74>
		return 6;
 80027f4:	2306      	movs	r3, #6
 80027f6:	e036      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Jul"))
 80027f8:	4923      	ldr	r1, [pc, #140]	; (8002888 <month_encode+0x104>)
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f006 fbc4 	bl	8008f88 <strstr>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <month_encode+0x86>
		return 7;
 8002806:	2307      	movs	r3, #7
 8002808:	e02d      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Aug"))
 800280a:	4920      	ldr	r1, [pc, #128]	; (800288c <month_encode+0x108>)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f006 fbbb 	bl	8008f88 <strstr>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <month_encode+0x98>
		return 8;
 8002818:	2308      	movs	r3, #8
 800281a:	e024      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Sep"))
 800281c:	491c      	ldr	r1, [pc, #112]	; (8002890 <month_encode+0x10c>)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f006 fbb2 	bl	8008f88 <strstr>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <month_encode+0xaa>
		return 9;
 800282a:	2309      	movs	r3, #9
 800282c:	e01b      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Oct"))
 800282e:	4919      	ldr	r1, [pc, #100]	; (8002894 <month_encode+0x110>)
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f006 fba9 	bl	8008f88 <strstr>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <month_encode+0xbc>
		return 10;
 800283c:	230a      	movs	r3, #10
 800283e:	e012      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Nov"))
 8002840:	4915      	ldr	r1, [pc, #84]	; (8002898 <month_encode+0x114>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f006 fba0 	bl	8008f88 <strstr>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <month_encode+0xce>
		return 11;
 800284e:	230b      	movs	r3, #11
 8002850:	e009      	b.n	8002866 <month_encode+0xe2>
	else if(strstr((char*)month_str, "Dec"))
 8002852:	4912      	ldr	r1, [pc, #72]	; (800289c <month_encode+0x118>)
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f006 fb97 	bl	8008f88 <strstr>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <month_encode+0xe0>
		return 12;
 8002860:	230c      	movs	r3, #12
 8002862:	e000      	b.n	8002866 <month_encode+0xe2>
	else
		return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	0800c350 	.word	0x0800c350
 8002874:	0800c354 	.word	0x0800c354
 8002878:	0800c358 	.word	0x0800c358
 800287c:	0800c35c 	.word	0x0800c35c
 8002880:	0800c360 	.word	0x0800c360
 8002884:	0800c364 	.word	0x0800c364
 8002888:	0800c368 	.word	0x0800c368
 800288c:	0800c36c 	.word	0x0800c36c
 8002890:	0800c370 	.word	0x0800c370
 8002894:	0800c374 	.word	0x0800c374
 8002898:	0800c378 	.word	0x0800c378
 800289c:	0800c37c 	.word	0x0800c37c

080028a0 <ESP32_GetTime>:

Network_time_t ESP32_GetTime()
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 80028a6:	af04      	add	r7, sp, #16
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	6018      	str	r0, [r3, #0]
	uint8_t esp_cmd[256] = {0};
 80028ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80028b0:	4618      	mov	r0, r3
 80028b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b6:	461a      	mov	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	f005 fb22 	bl	8007f02 <memset>
	Network_time_t result = {0};
 80028be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	809a      	strh	r2, [r3, #4]
	sprintf((char*)esp_cmd, "AT+CIPSNTPTIME?\r\n");
 80028c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80028cc:	4aa0      	ldr	r2, [pc, #640]	; (8002b50 <ESP32_GetTime+0x2b0>)
 80028ce:	461c      	mov	r4, r3
 80028d0:	4615      	mov	r5, r2
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	682b      	ldr	r3, [r5, #0]
 80028d8:	8023      	strh	r3, [r4, #0]
	int16_t res = Network->IO.IO_Transmit(esp_cmd, strlen((char*)esp_cmd));
 80028da:	4b9e      	ldr	r3, [pc, #632]	; (8002b54 <ESP32_GetTime+0x2b4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80028e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fc9b 	bl	8000220 <strlen>
 80028ea:	4603      	mov	r3, r0
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	47a0      	blx	r4
 80028f8:	4603      	mov	r3, r0
 80028fa:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
	uint8_t recv_buff[BUFFER_SIZE] = {0};
 80028fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002902:	4618      	mov	r0, r3
 8002904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f005 faf9 	bl	8007f02 <memset>

	if(res >=0 )
 8002910:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 8002914:	2b00      	cmp	r3, #0
 8002916:	db1c      	blt.n	8002952 <ESP32_GetTime+0xb2>
	{
		res = Network->IO.IO_Receive(recv_buff, BUFFER_SIZE, TIME_OUT);
 8002918:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <ESP32_GetTime+0x2b4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800292a:	4798      	blx	r3
 800292c:	4603      	mov	r3, r0
 800292e:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
		if(res >=0 )
 8002932:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0b      	bge.n	8002952 <ESP32_GetTime+0xb2>
		{
			//ESP_DEBUG(recv_buff);
		}
		else
		{
			ESP_DEBUG_RESULT("ERROR.!!!");
 800293a:	4887      	ldr	r0, [pc, #540]	; (8002b58 <ESP32_GetTime+0x2b8>)
 800293c:	f006 f9da 	bl	8008cf4 <iprintf>
			return result;
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	6018      	str	r0, [r3, #0]
 800294c:	8892      	ldrh	r2, [r2, #4]
 800294e:	809a      	strh	r2, [r3, #4]
 8002950:	e0f8      	b.n	8002b44 <ESP32_GetTime+0x2a4>
		}
	}
	char* time_str = strstr((char*)recv_buff, "+CIPSNTPTIME:");
 8002952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002956:	4981      	ldr	r1, [pc, #516]	; (8002b5c <ESP32_GetTime+0x2bc>)
 8002958:	4618      	mov	r0, r3
 800295a:	f006 fb15 	bl	8008f88 <strstr>
 800295e:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
	uint8_t day_str[3] 	= {0};
 8002962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002966:	2100      	movs	r1, #0
 8002968:	460a      	mov	r2, r1
 800296a:	801a      	strh	r2, [r3, #0]
 800296c:	460a      	mov	r2, r1
 800296e:	709a      	strb	r2, [r3, #2]
	uint8_t month_str[4]= {0};
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
	uint8_t year_str[5] = {0};
 8002978:	f107 0318 	add.w	r3, r7, #24
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	711a      	strb	r2, [r3, #4]

	uint8_t hour_str[3] = {0};
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	2100      	movs	r1, #0
 8002988:	460a      	mov	r2, r1
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	460a      	mov	r2, r1
 800298e:	709a      	strb	r2, [r3, #2]
	uint8_t min_str[3] 	= {0};
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	2100      	movs	r1, #0
 8002996:	460a      	mov	r2, r1
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	460a      	mov	r2, r1
 800299c:	709a      	strb	r2, [r3, #2]
	uint8_t sec_str[3]	= {0};
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	2100      	movs	r1, #0
 80029a4:	460a      	mov	r2, r1
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	460a      	mov	r2, r1
 80029aa:	709a      	strb	r2, [r3, #2]

	memcpy(hour_str, time_str+24, 2);
 80029ac:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029b0:	3318      	adds	r3, #24
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	801a      	strh	r2, [r3, #0]
	memcpy(min_str, time_str+27, 2);
 80029bc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029c0:	331b      	adds	r3, #27
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	801a      	strh	r2, [r3, #0]
	memcpy(sec_str, time_str+30, 2);
 80029cc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029d0:	331e      	adds	r3, #30
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	801a      	strh	r2, [r3, #0]

	memcpy(day_str, time_str+21, 2);
 80029dc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029e0:	3315      	adds	r3, #21
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	801a      	strh	r2, [r3, #0]
	memcpy(month_str, time_str+17, 3);
 80029ec:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029f0:	f103 0111 	add.w	r1, r3, #17
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	2203      	movs	r2, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 fa76 	bl	8007eec <memcpy>
	memcpy(year_str, time_str+33, 4);
 8002a00:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002a04:	3321      	adds	r3, #33	; 0x21
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f107 0318 	add.w	r3, r7, #24
 8002a0e:	601a      	str	r2, [r3, #0]

	standard_string_time(hour_str);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe8d 	bl	8002734 <standard_string_time>
	standard_string_time(min_str);
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fe88 	bl	8002734 <standard_string_time>
	standard_string_time(sec_str);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe83 	bl	8002734 <standard_string_time>

	standard_string_time(day_str);
 8002a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fe7e 	bl	8002734 <standard_string_time>
	standard_string_time(year_str);
 8002a38:	f107 0318 	add.w	r3, r7, #24
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe79 	bl	8002734 <standard_string_time>

	uint8_t day_num = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	uint8_t month_num = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint16_t year_num = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	uint8_t hour_num = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	uint8_t min_num = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	uint8_t sec_num = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331

	day_num = (uint8_t)atoi((char*)day_str);
 8002a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f005 fa10 	bl	8007e90 <atoi>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	month_num = month_encode(month_str);
 8002a76:	f107 0320 	add.w	r3, r7, #32
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fe82 	bl	8002784 <month_encode>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	year_num = (uint16_t)atoi((char*)year_str);
 8002a86:	f107 0318 	add.w	r3, r7, #24
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f005 fa00 	bl	8007e90 <atoi>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f8a7 3334 	strh.w	r3, [r7, #820]	; 0x334

	hour_num = (uint8_t)atoi((char*)hour_str);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 f9f8 	bl	8007e90 <atoi>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	min_num = (uint8_t)atoi((char*)min_str);
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f9f0 	bl	8007e90 <atoi>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
	sec_num = (uint8_t)atoi((char*)sec_str);
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4618      	mov	r0, r3
 8002abc:	f005 f9e8 	bl	8007e90 <atoi>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
	ESP_DEBUG("TIME: %d/%d/%d, %d:%d:%d\r\n", day_num, month_num, year_num, hour_num, min_num, sec_num);
 8002ac6:	4826      	ldr	r0, [pc, #152]	; (8002b60 <ESP32_GetTime+0x2c0>)
 8002ac8:	f006 f914 	bl	8008cf4 <iprintf>
 8002acc:	f897 0337 	ldrb.w	r0, [r7, #823]	; 0x337
 8002ad0:	f897 4336 	ldrb.w	r4, [r7, #822]	; 0x336
 8002ad4:	f8b7 5334 	ldrh.w	r5, [r7, #820]	; 0x334
 8002ad8:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002adc:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002ae0:	f897 1331 	ldrb.w	r1, [r7, #817]	; 0x331
 8002ae4:	9102      	str	r1, [sp, #8]
 8002ae6:	9201      	str	r2, [sp, #4]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	462b      	mov	r3, r5
 8002aec:	4622      	mov	r2, r4
 8002aee:	4601      	mov	r1, r0
 8002af0:	481c      	ldr	r0, [pc, #112]	; (8002b64 <ESP32_GetTime+0x2c4>)
 8002af2:	f006 f8ff 	bl	8008cf4 <iprintf>

	result.year		=	year_num;
 8002af6:	f8b7 3334 	ldrh.w	r3, [r7, #820]	; 0x334
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b00:	701a      	strb	r2, [r3, #0]
	result.month	=	month_num;
 8002b02:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b06:	f897 2336 	ldrb.w	r2, [r7, #822]	; 0x336
 8002b0a:	705a      	strb	r2, [r3, #1]
	result.day		= 	day_num;
 8002b0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b10:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 8002b14:	709a      	strb	r2, [r3, #2]

	result.hour		=	hour_num;
 8002b16:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b1a:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8002b1e:	70da      	strb	r2, [r3, #3]
	result.min		=	min_num;
 8002b20:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b24:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 8002b28:	711a      	strb	r2, [r3, #4]
	result.sec		=	sec_num;
 8002b2a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b2e:	f897 2331 	ldrb.w	r2, [r7, #817]	; 0x331
 8002b32:	715a      	strb	r2, [r3, #5]
	return result;
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002b3c:	6810      	ldr	r0, [r2, #0]
 8002b3e:	6018      	str	r0, [r3, #0]
 8002b40:	8892      	ldrh	r2, [r2, #4]
 8002b42:	809a      	strh	r2, [r3, #4]
}
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f507 7750 	add.w	r7, r7, #832	; 0x340
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	0800c380 	.word	0x0800c380
 8002b54:	20007d34 	.word	0x20007d34
 8002b58:	0800c14c 	.word	0x0800c14c
 8002b5c:	0800c394 	.word	0x0800c394
 8002b60:	0800c158 	.word	0x0800c158
 8002b64:	0800c3a4 	.word	0x0800c3a4

08002b68 <Sensor_Init>:
#include "RL78_Sensor.h"

Sensor_status_t Sensor_Init(Sensor_t* sensor)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	uint8_t temp_buff[12] = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
	if(Sensor_Send_Command(sensor, PING_CMD)!=Sensor_OK)
 8002b7c:	2155      	movs	r1, #85	; 0x55
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8f8 	bl	8002d74 <Sensor_Send_Command>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <Sensor_Init+0x26>
		return Sensor_ERROR;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e057      	b.n	8002c3e <Sensor_Init+0xd6>
	uint8_t try_get_name = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	77fb      	strb	r3, [r7, #31]
	do
	{
		uint8_t try_connect = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	77bb      	strb	r3, [r7, #30]
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 8002b96:	e00a      	b.n	8002bae <Sensor_Init+0x46>
		{
			if(++try_connect>=TRY_TIME_CONNECT)
 8002b98:	7fbb      	ldrb	r3, [r7, #30]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	77bb      	strb	r3, [r7, #30]
 8002b9e:	7fbb      	ldrb	r3, [r7, #30]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d904      	bls.n	8002bae <Sensor_Init+0x46>
			{
				sensor->isConnected = unconnected;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
				return Sensor_ERROR;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e047      	b.n	8002c3e <Sensor_Init+0xd6>
		while(Sensor_Recv_Respond(sensor,temp_buff, sizeof(temp_buff), 100)!=Sensor_OK)
 8002bae:	f107 010c 	add.w	r1, r7, #12
 8002bb2:	2364      	movs	r3, #100	; 0x64
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8f4 	bl	8002da4 <Sensor_Recv_Respond>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d1ea      	bne.n	8002b98 <Sensor_Init+0x30>
			}
		}
		if((temp_buff[1] <= strlen((char*)&temp_buff[2]))&&(temp_buff[1] <= 10)&&(temp_buff[1] > 0))
 8002bc2:	7b7b      	ldrb	r3, [r7, #13]
 8002bc4:	461c      	mov	r4, r3
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	3302      	adds	r3, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb27 	bl	8000220 <strlen>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	d828      	bhi.n	8002c2a <Sensor_Init+0xc2>
 8002bd8:	7b7b      	ldrb	r3, [r7, #13]
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d825      	bhi.n	8002c2a <Sensor_Init+0xc2>
 8002bde:	7b7b      	ldrb	r3, [r7, #13]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d022      	beq.n	8002c2a <Sensor_Init+0xc2>
		{
			for(int i = 0; i < temp_buff[1]; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e00f      	b.n	8002c0a <Sensor_Init+0xa2>
			{
				sensor->name[i] = temp_buff[2+i];
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3302      	adds	r3, #2
 8002bee:	f107 0220 	add.w	r2, r7, #32
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3301      	adds	r3, #1
 8002c00:	460a      	mov	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < temp_buff[1]; i++)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	7b7b      	ldrb	r3, [r7, #13]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	dbea      	blt.n	8002bea <Sensor_Init+0x82>
			}
			printf("[Sensor]:name: %s\r\n", sensor->name);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480b      	ldr	r0, [pc, #44]	; (8002c48 <Sensor_Init+0xe0>)
 8002c1c:	f006 f86a 	bl	8008cf4 <iprintf>
			sensor->isConnected = connected;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
			return Sensor_OK;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e009      	b.n	8002c3e <Sensor_Init+0xd6>
		}
	}while(++try_get_name < TRY_TIME_GET_NAME);
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d9ad      	bls.n	8002b92 <Sensor_Init+0x2a>
	
	sensor->isConnected = unconnected;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	return Sensor_ERROR;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	0800c3c0 	.word	0x0800c3c0

08002c4c <Sensor_Get_Value>:

Sensor_status_t Sensor_Get_Value(Sensor_t* sensor)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	if(sensor->isConnected == connected)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d13d      	bne.n	8002cd8 <Sensor_Get_Value+0x8c>
	{
		if(Sensor_Send_Command(sensor, WAKEUP_CMD)!= Sensor_OK)
 8002c5c:	21c0      	movs	r1, #192	; 0xc0
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f888 	bl	8002d74 <Sensor_Send_Command>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <Sensor_Get_Value+0x22>
				return Sensor_ERROR;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e035      	b.n	8002cda <Sensor_Get_Value+0x8e>
			uint8_t temp = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
			if(Sensor_Recv_Respond(sensor,&temp, sizeof(temp), 60000)!= Sensor_OK)
 8002c72:	f107 010f 	add.w	r1, r7, #15
 8002c76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f891 	bl	8002da4 <Sensor_Recv_Respond>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <Sensor_Get_Value+0x40>
				return Sensor_ERROR;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e026      	b.n	8002cda <Sensor_Get_Value+0x8e>

			if(Sensor_Send_Command(sensor, GETVALUE_CMD)!= Sensor_OK)
 8002c8c:	21aa      	movs	r1, #170	; 0xaa
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f870 	bl	8002d74 <Sensor_Send_Command>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <Sensor_Get_Value+0x52>
				return Sensor_ERROR;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e01d      	b.n	8002cda <Sensor_Get_Value+0x8e>
			data_raw_t data_raw = {0};
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	460a      	mov	r2, r1
 8002caa:	709a      	strb	r2, [r3, #2]
			if(Sensor_Recv_Respond(sensor, (uint8_t*)&data_raw, sizeof(data_raw), 100) != Sensor_OK)
 8002cac:	f107 010c 	add.w	r1, r7, #12
 8002cb0:	2364      	movs	r3, #100	; 0x64
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f875 	bl	8002da4 <Sensor_Recv_Respond>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <Sensor_Get_Value+0x78>
				return Sensor_ERROR;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e00a      	b.n	8002cda <Sensor_Get_Value+0x8e>
			sensor->value = Pare_Data(data_raw);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f80d 	bl	8002ce4 <Pare_Data>
 8002cca:	eef0 7a40 	vmov.f32	s15, s0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	edc3 7a03 	vstr	s15, [r3, #12]
			return Sensor_OK;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <Sensor_Get_Value+0x8e>
	}
	else
	{
		return Sensor_ERROR;
 8002cd8:	2300      	movs	r3, #0
	}
	
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <Pare_Data>:

float Pare_Data(data_raw_t data_raw)
{
 8002ce4:	b5b0      	push	{r4, r5, r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	float result = 0.0;
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
	uint16_t value_interger = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	817b      	strh	r3, [r7, #10]
	uint8_t value_decimal = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	727b      	strb	r3, [r7, #9]
	
	value_interger	= (data_raw.data>>4)&(0x0fff);
 8002cfa:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	817b      	strh	r3, [r7, #10]
	value_decimal	= (data_raw.data)&(0x0f);
 8002d04:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	727b      	strb	r3, [r7, #9]
	
	result = (float)value_interger + (float)value_decimal/(10.0);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1c:	ee17 0a90 	vmov	r0, s15
 8002d20:	f7fd fc44 	bl	80005ac <__aeabi_f2d>
 8002d24:	4604      	mov	r4, r0
 8002d26:	460d      	mov	r5, r1
 8002d28:	7a7b      	ldrb	r3, [r7, #9]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc39 	bl	80005ac <__aeabi_f2d>
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <Pare_Data+0x8c>)
 8002d40:	f7fd fdb6 	bl	80008b0 <__aeabi_ddiv>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7fd fad0 	bl	80002f0 <__adddf3>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4618      	mov	r0, r3
 8002d56:	4621      	mov	r1, r4
 8002d58:	f7fd ff58 	bl	8000c0c <__aeabi_d2f>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]
	
	return result;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	ee07 3a90 	vmov	s15, r3
}
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	40240000 	.word	0x40240000

08002d74 <Sensor_Send_Command>:

Sensor_status_t Sensor_Send_Command(Sensor_t* sensor, uint8_t command)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
	if(HAL_UART_Transmit(sensor->uart_itf, &command, 1, HAL_MAX_DELAY) == HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6918      	ldr	r0, [r3, #16]
 8002d84:	1cf9      	adds	r1, r7, #3
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f003 fff3 	bl	8006d76 <HAL_UART_Transmit>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <Sensor_Send_Command+0x26>
		return Sensor_OK;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <Sensor_Send_Command+0x28>
	else
		return Sensor_ERROR;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <Sensor_Recv_Respond>:

Sensor_status_t Sensor_Recv_Respond(Sensor_t* sensor, uint8_t* buff, uint8_t buffSize, uint16_t timeOut)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	460b      	mov	r3, r1
 8002db4:	71fb      	strb	r3, [r7, #7]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef res = HAL_UART_Receive(sensor->uart_itf, buff, buffSize, timeOut);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6918      	ldr	r0, [r3, #16]
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	88bb      	ldrh	r3, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	f004 f86f 	bl	8006ea8 <HAL_UART_Receive>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_ERROR)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d001      	beq.n	8002dd8 <Sensor_Recv_Respond+0x34>
		return Sensor_OK;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <Sensor_Recv_Respond+0x36>
	else
		return Sensor_ERROR;
 8002dd8:	2300      	movs	r3, #0

}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <crc8>:
#ifndef SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#define SHC_LIBRARY_SRC_SHTC3_DRIVER_C_
#include "SHTC3_Driver.h"

uint8_t crc8(uint8_t *data, uint8_t len)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xff;
 8002dee:	23ff      	movs	r3, #255	; 0xff
 8002df0:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0, j = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73bb      	strb	r3, [r7, #14]
 8002df6:	2300      	movs	r3, #0
 8002df8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < len; i++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73bb      	strb	r3, [r7, #14]
 8002dfe:	e021      	b.n	8002e44 <crc8+0x62>
        crc ^= data[i];
 8002e00:	7bbb      	ldrb	r3, [r7, #14]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002e0e:	2300      	movs	r3, #0
 8002e10:	737b      	strb	r3, [r7, #13]
 8002e12:	e011      	b.n	8002e38 <crc8+0x56>
            if ((crc & 0x80) != 0)
 8002e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da07      	bge.n	8002e2c <crc8+0x4a>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e002      	b.n	8002e32 <crc8+0x50>
            else
                crc <<= 1;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8002e32:	7b7b      	ldrb	r3, [r7, #13]
 8002e34:	3301      	adds	r3, #1
 8002e36:	737b      	strb	r3, [r7, #13]
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	d9ea      	bls.n	8002e14 <crc8+0x32>
    for (i = 0; i < len; i++) {
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73bb      	strb	r3, [r7, #14]
 8002e44:	7bba      	ldrb	r2, [r7, #14]
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3d9      	bcc.n	8002e00 <crc8+0x1e>
        }
    }
    return crc;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <SHTC3_Init>:

SHTC3_Status_t SHTC3_Init(SHTC3_Sensor_t *sensor)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 4, 1000) == HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	21e0      	movs	r1, #224	; 0xe0
 8002e6e:	f001 fd0d 	bl	800488c <HAL_I2C_IsDeviceReady>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <SHTC3_Init+0x28>
	{
		sensor->connection=shtc3_connected;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	711a      	strb	r2, [r3, #4]
		return SHTC3_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e003      	b.n	8002e8a <SHTC3_Init+0x30>
	}
	else
	{
		sensor->connection=shtc3_disconnected;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	711a      	strb	r2, [r3, #4]
		return SHTC3_ERROR;
 8002e88:	2301      	movs	r3, #1
	}
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	0000      	movs	r0, r0
 8002e94:	0000      	movs	r0, r0
	...

08002e98 <SHTC3_Measurement>:
#ifdef SHTC3
SHTC3_Status_t SHTC3_Measurement(SHTC3_Sensor_t *sensor)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b08b      	sub	sp, #44	; 0x2c
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	6078      	str	r0, [r7, #4]
	uint8_t weekup_cmd[2] = {0x35, 0x17};
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <SHTC3_Measurement+0x190>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	833b      	strh	r3, [r7, #24]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, weekup_cmd, sizeof(weekup_cmd), 5000)!=HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	f107 0218 	add.w	r2, r7, #24
 8002eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	21e0      	movs	r1, #224	; 0xe0
 8002eb8:	f001 f9c4 	bl	8004244 <HAL_I2C_Master_Transmit>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SHTC3_Measurement+0x2e>
		return SHTC3_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0a7      	b.n	8003016 <SHTC3_Measurement+0x17e>

	uint8_t measure_cmd[2] = {0x5C, 0x24};
 8002ec6:	4b59      	ldr	r3, [pc, #356]	; (800302c <SHTC3_Measurement+0x194>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	82bb      	strh	r3, [r7, #20]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, measure_cmd, sizeof(measure_cmd), 5000)!=HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f107 0214 	add.w	r2, r7, #20
 8002ed4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2302      	movs	r3, #2
 8002edc:	21e0      	movs	r1, #224	; 0xe0
 8002ede:	f001 f9b1 	bl	8004244 <HAL_I2C_Master_Transmit>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SHTC3_Measurement+0x54>
			return SHTC3_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e094      	b.n	8003016 <SHTC3_Measurement+0x17e>
	while(HAL_I2C_IsDeviceReady(sensor->interface, SHTC3_ADDR, 1, 5000) != HAL_OK);
 8002eec:	bf00      	nop
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	21e0      	movs	r1, #224	; 0xe0
 8002efa:	f001 fcc7 	bl	800488c <HAL_I2C_IsDeviceReady>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f4      	bne.n	8002eee <SHTC3_Measurement+0x56>
	uint8_t data_raw[6] = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	809a      	strh	r2, [r3, #4]
	if(HAL_I2C_Master_Receive(sensor->interface, SHTC3_ADDR, data_raw, sizeof(data_raw), 5000)!=HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f107 020c 	add.w	r2, r7, #12
 8002f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2306      	movs	r3, #6
 8002f1e:	21e0      	movs	r1, #224	; 0xe0
 8002f20:	f001 fa8e 	bl	8004440 <HAL_I2C_Master_Receive>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <SHTC3_Measurement+0x96>
			return SHTC3_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <SHTC3_Measurement+0x17e>
	if(crc8(&data_raw[0], 2)!=data_raw[2])
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	2102      	movs	r1, #2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff54 	bl	8002de2 <crc8>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	7bbb      	ldrb	r3, [r7, #14]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <SHTC3_Measurement+0xb0>
		return SHTC3_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e066      	b.n	8003016 <SHTC3_Measurement+0x17e>
	if(crc8(&data_raw[3], 2)!=data_raw[5])
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	3303      	adds	r3, #3
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff46 	bl	8002de2 <crc8>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	7c7b      	ldrb	r3, [r7, #17]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <SHTC3_Measurement+0xcc>
		return SHTC3_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e058      	b.n	8003016 <SHTC3_Measurement+0x17e>
	uint8_t sleep_cmd[2] = {0xB0, 0x98};
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <SHTC3_Measurement+0x198>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Master_Transmit(sensor->interface, SHTC3_ADDR, sleep_cmd, sizeof(sleep_cmd), 5000)!=HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	f107 0208 	add.w	r2, r7, #8
 8002f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	21e0      	movs	r1, #224	; 0xe0
 8002f7c:	f001 f962 	bl	8004244 <HAL_I2C_Master_Transmit>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <SHTC3_Measurement+0xf2>
		return SHTC3_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e045      	b.n	8003016 <SHTC3_Measurement+0x17e>
	uint16_t Rh = (data_raw[0]<<8) | (data_raw[1]);
 8002f8a:	7b3b      	ldrb	r3, [r7, #12]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	7b7b      	ldrb	r3, [r7, #13]
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b21b      	sxth	r3, r3
 8002f98:	83fb      	strh	r3, [r7, #30]
	uint16_t Rt = (data_raw[3]<<8) | (data_raw[4]);
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	7c3b      	ldrb	r3, [r7, #16]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	83bb      	strh	r3, [r7, #28]
	sensor->data.hum = ((float)(Rh*100))/(65535.0);
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003034 <SHTC3_Measurement+0x19c>
 8002fbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3309      	adds	r3, #9
 8002fc6:	ee16 2a90 	vmov	r2, s13
 8002fca:	601a      	str	r2, [r3, #0]
	sensor->data.tem = ((float)(Rt*175))/(65535.0) - 45.0;
 8002fcc:	8bbb      	ldrh	r3, [r7, #28]
 8002fce:	22af      	movs	r2, #175	; 0xaf
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ee17 0a90 	vmov	r0, s15
 8002fe0:	f7fd fae4 	bl	80005ac <__aeabi_f2d>
 8002fe4:	a30e      	add	r3, pc, #56	; (adr r3, 8003020 <SHTC3_Measurement+0x188>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fc61 	bl	80008b0 <__aeabi_ddiv>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <SHTC3_Measurement+0x1a0>)
 8002ffc:	f7fd f976 	bl	80002ec <__aeabi_dsub>
 8003000:	4603      	mov	r3, r0
 8003002:	460c      	mov	r4, r1
 8003004:	4618      	mov	r0, r3
 8003006:	4621      	mov	r1, r4
 8003008:	f7fd fe00 	bl	8000c0c <__aeabi_d2f>
 800300c:	4602      	mov	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3305      	adds	r3, #5
 8003012:	601a      	str	r2, [r3, #0]
	return SHTC3_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	00000000 	.word	0x00000000
 8003024:	40efffe0 	.word	0x40efffe0
 8003028:	0800c3d4 	.word	0x0800c3d4
 800302c:	0800c3d8 	.word	0x0800c3d8
 8003030:	0800c3dc 	.word	0x0800c3dc
 8003034:	477fff00 	.word	0x477fff00
 8003038:	40468000 	.word	0x40468000

0800303c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <RetargetInit+0x28>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <RetargetInit+0x2c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6898      	ldr	r0, [r3, #8]
 8003050:	2300      	movs	r3, #0
 8003052:	2202      	movs	r2, #2
 8003054:	2100      	movs	r1, #0
 8003056:	f005 fec9 	bl	8008dec <setvbuf>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000803c 	.word	0x2000803c
 8003068:	2000000c 	.word	0x2000000c

0800306c <_isatty>:

int _isatty(int fd) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db04      	blt.n	8003084 <_isatty+0x18>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	dc01      	bgt.n	8003084 <_isatty+0x18>
    return 1;
 8003080:	2301      	movs	r3, #1
 8003082:	e005      	b.n	8003090 <_isatty+0x24>

  errno = EBADF;
 8003084:	f004 ff08 	bl	8007e98 <__errno>
 8003088:	4602      	mov	r2, r0
 800308a:	2309      	movs	r3, #9
 800308c:	6013      	str	r3, [r2, #0]
  return 0;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_write>:

int _write(int fd, char* ptr, int len) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <_write+0x18>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d111      	bne.n	80030d4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <_write+0x54>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	f003 fe5a 	bl	8006d76 <HAL_UART_Transmit>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <_write+0x38>
      return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	e008      	b.n	80030e2 <_write+0x4a>
    else
      return EIO;
 80030d0:	2305      	movs	r3, #5
 80030d2:	e006      	b.n	80030e2 <_write+0x4a>
  }
  errno = EBADF;
 80030d4:	f004 fee0 	bl	8007e98 <__errno>
 80030d8:	4602      	mov	r2, r0
 80030da:	2309      	movs	r3, #9
 80030dc:	6013      	str	r3, [r2, #0]
  return -1;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000803c 	.word	0x2000803c

080030f0 <_close>:

int _close(int fd) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db04      	blt.n	8003108 <_close+0x18>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b02      	cmp	r3, #2
 8003102:	dc01      	bgt.n	8003108 <_close+0x18>
    return 0;
 8003104:	2300      	movs	r3, #0
 8003106:	e006      	b.n	8003116 <_close+0x26>

  errno = EBADF;
 8003108:	f004 fec6 	bl	8007e98 <__errno>
 800310c:	4602      	mov	r2, r0
 800310e:	2309      	movs	r3, #9
 8003110:	6013      	str	r3, [r2, #0]
  return -1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800312a:	f004 feb5 	bl	8007e98 <__errno>
 800312e:	4602      	mov	r2, r0
 8003130:	2309      	movs	r3, #9
 8003132:	6013      	str	r3, [r2, #0]
  return -1;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_read>:

int _read(int fd, char* ptr, int len) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d110      	bne.n	8003174 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <_read+0x4c>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	2201      	movs	r2, #1
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	f003 fea3 	bl	8006ea8 <HAL_UART_Receive>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <_read+0x30>
      return 1;
 800316c:	2301      	movs	r3, #1
 800316e:	e008      	b.n	8003182 <_read+0x42>
    else
      return EIO;
 8003170:	2305      	movs	r3, #5
 8003172:	e006      	b.n	8003182 <_read+0x42>
  }
  errno = EBADF;
 8003174:	f004 fe90 	bl	8007e98 <__errno>
 8003178:	4602      	mov	r2, r0
 800317a:	2309      	movs	r3, #9
 800317c:	6013      	str	r3, [r2, #0]
  return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000803c 	.word	0x2000803c

08003190 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db08      	blt.n	80031b2 <_fstat+0x22>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	dc05      	bgt.n	80031b2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ac:	605a      	str	r2, [r3, #4]
    return 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e005      	b.n	80031be <_fstat+0x2e>
  }

  errno = EBADF;
 80031b2:	f004 fe71 	bl	8007e98 <__errno>
 80031b6:	4602      	mov	r2, r0
 80031b8:	2309      	movs	r3, #9
 80031ba:	6013      	str	r3, [r2, #0]
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 f971 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f000 f808 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7fe fdc8 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f989 	bl	8003542 <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 f951 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000000 	.word	0x20000000
 8003264:	20000008 	.word	0x20000008
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000008 	.word	0x20000008
 8003290:	20008040 	.word	0x20008040

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20008040 	.word	0x20008040

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff ffee 	bl	8003294 <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_Delay+0x40>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032d2:	bf00      	nop
 80032d4:	f7ff ffde 	bl	8003294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000008 	.word	0x20000008

080032f0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_GetUIDw0+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	1fff7a10 	.word	0x1fff7a10

08003308 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_GetUIDw1+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	1fff7a14 	.word	0x1fff7a14

08003320 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_GetUIDw2+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	1fff7a18 	.word	0x1fff7a18

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f7ff ff8e 	bl	80033d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff29 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff3e 	bl	8003380 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff8e 	bl	800342c <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5d 	bl	80033d8 <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff31 	bl	800339c <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa2 	bl	8003494 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff fe94 	bl	8003294 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e099      	b.n	80036ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	e00f      	b.n	80035ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359a:	f7ff fe7b 	bl	8003294 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d908      	bls.n	80035ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e078      	b.n	80036ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e8      	bne.n	800359a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_DMA_Init+0x158>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b04      	cmp	r3, #4
 8003612:	d107      	bne.n	8003624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0307 	bic.w	r3, r3, #7
 800363a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b04      	cmp	r3, #4
 800364c:	d117      	bne.n	800367e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa91 	bl	8003b88 <DMA_CheckFifoParam>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800367a:	2301      	movs	r3, #1
 800367c:	e016      	b.n	80036ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa48 	bl	8003b1c <DMA_CalcBaseAndBitshift>
 800368c:	4603      	mov	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	223f      	movs	r2, #63	; 0x3f
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	e010803f 	.word	0xe010803f

080036b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_DMA_Start_IT+0x26>
 80036da:	2302      	movs	r3, #2
 80036dc:	e040      	b.n	8003760 <HAL_DMA_Start_IT+0xa8>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d12f      	bne.n	8003752 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f9da 	bl	8003ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	223f      	movs	r2, #63	; 0x3f
 8003712:	409a      	lsls	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0216 	orr.w	r2, r2, #22
 8003726:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e005      	b.n	800375e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d004      	beq.n	8003786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00c      	b.n	80037a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2205      	movs	r2, #5
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b8:	4b92      	ldr	r3, [pc, #584]	; (8003a04 <HAL_DMA_IRQHandler+0x258>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a92      	ldr	r2, [pc, #584]	; (8003a08 <HAL_DMA_IRQHandler+0x25c>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2208      	movs	r2, #8
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	2208      	movs	r2, #8
 8003806:	409a      	lsls	r2, r3
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2201      	movs	r2, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	2201      	movs	r2, #1
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2204      	movs	r2, #4
 8003854:	409a      	lsls	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2204      	movs	r2, #4
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2210      	movs	r2, #16
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d043      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03c      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2210      	movs	r2, #16
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d018      	beq.n	80038ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d024      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
 80038da:	e01f      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
 80038ec:	e016      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0208 	bic.w	r2, r2, #8
 800390a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2220      	movs	r2, #32
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 808e 	beq.w	8003a4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8086 	beq.w	8003a4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2220      	movs	r2, #32
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b05      	cmp	r3, #5
 8003954:	d136      	bne.n	80039c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0216 	bic.w	r2, r2, #22
 8003964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_DMA_IRQHandler+0x1da>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0208 	bic.w	r2, r2, #8
 8003994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	223f      	movs	r2, #63	; 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d07d      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
        }
        return;
 80039c2:	e078      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d030      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
 80039f0:	e02b      	b.n	8003a4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d027      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
 8003a02:	e022      	b.n	8003a4a <HAL_DMA_IRQHandler+0x29e>
 8003a04:	20000000 	.word	0x20000000
 8003a08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0210 	bic.w	r2, r2, #16
 8003a28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d032      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d022      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2205      	movs	r2, #5
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d307      	bcc.n	8003a92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f2      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x2ca>
 8003a90:	e000      	b.n	8003a94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e000      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ab6:	bf00      	nop
    }
  }
}
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop

08003ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d108      	bne.n	8003b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003afe:	e007      	b.n	8003b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3b10      	subs	r3, #16
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <DMA_CalcBaseAndBitshift+0x64>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <DMA_CalcBaseAndBitshift+0x68>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d909      	bls.n	8003b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003b5c:	e007      	b.n	8003b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	aaaaaaab 	.word	0xaaaaaaab
 8003b84:	0800c404 	.word	0x0800c404

08003b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11f      	bne.n	8003be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d855      	bhi.n	8003c54 <DMA_CheckFifoParam+0xcc>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <DMA_CheckFifoParam+0x28>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bd3 	.word	0x08003bd3
 8003bb8:	08003bc1 	.word	0x08003bc1
 8003bbc:	08003c55 	.word	0x08003c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d045      	beq.n	8003c58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd0:	e042      	b.n	8003c58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bda:	d13f      	bne.n	8003c5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be0:	e03c      	b.n	8003c5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	d121      	bne.n	8003c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d836      	bhi.n	8003c60 <DMA_CheckFifoParam+0xd8>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <DMA_CheckFifoParam+0x70>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c0f 	.word	0x08003c0f
 8003c00:	08003c09 	.word	0x08003c09
 8003c04:	08003c21 	.word	0x08003c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e02f      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d024      	beq.n	8003c64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1e:	e021      	b.n	8003c64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c28:	d11e      	bne.n	8003c68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c2e:	e01b      	b.n	8003c68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d902      	bls.n	8003c3c <DMA_CheckFifoParam+0xb4>
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d003      	beq.n	8003c42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c3a:	e018      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e015      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
      break;
 8003c52:	e00b      	b.n	8003c6c <DMA_CheckFifoParam+0xe4>
      break;
 8003c54:	bf00      	nop
 8003c56:	e00a      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;
 8003c58:	bf00      	nop
 8003c5a:	e008      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;
 8003c5c:	bf00      	nop
 8003c5e:	e006      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;
 8003c60:	bf00      	nop
 8003c62:	e004      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;
 8003c64:	bf00      	nop
 8003c66:	e002      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;   
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
      break;
 8003c6c:	bf00      	nop
    }
  } 
  
  return status; 
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e165      	b.n	8003f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	f040 8154 	bne.w	8003f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_GPIO_Init+0x5a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cca:	2b11      	cmp	r3, #17
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b12      	cmp	r3, #18
 8003cd4:	d130      	bne.n	8003d38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 0201 	and.w	r2, r3, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0xfc>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b12      	cmp	r3, #18
 8003d76:	d123      	bne.n	8003dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	08da      	lsrs	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3208      	adds	r2, #8
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	2203      	movs	r2, #3
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80ae 	beq.w	8003f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e10:	6453      	str	r3, [r2, #68]	; 0x44
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e1e:	4a57      	ldr	r2, [pc, #348]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3302      	adds	r3, #2
 8003e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	220f      	movs	r2, #15
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <HAL_GPIO_Init+0x304>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d025      	beq.n	8003e96 <HAL_GPIO_Init+0x21a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4d      	ldr	r2, [pc, #308]	; (8003f84 <HAL_GPIO_Init+0x308>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <HAL_GPIO_Init+0x216>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	; (8003f88 <HAL_GPIO_Init+0x30c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <HAL_GPIO_Init+0x310>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4a      	ldr	r2, [pc, #296]	; (8003f90 <HAL_GPIO_Init+0x314>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x20a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a49      	ldr	r2, [pc, #292]	; (8003f94 <HAL_GPIO_Init+0x318>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x206>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a48      	ldr	r2, [pc, #288]	; (8003f98 <HAL_GPIO_Init+0x31c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x202>
 8003e7a:	2306      	movs	r3, #6
 8003e7c:	e00c      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e7e:	2307      	movs	r3, #7
 8003e80:	e00a      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e82:	2305      	movs	r3, #5
 8003e84:	e008      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_Init+0x21c>
 8003e96:	2300      	movs	r3, #0
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f002 0203 	and.w	r2, r2, #3
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea8:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	3302      	adds	r3, #2
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eda:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_GPIO_Init+0x320>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	f67f ae96 	bls.w	8003c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3724      	adds	r7, #36	; 0x24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fbc:	e003      	b.n	8003fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	041a      	lsls	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	619a      	str	r2, [r3, #24]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e11f      	b.n	8004226 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd fef0 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004038:	f001 fa28 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a7b      	ldr	r2, [pc, #492]	; (8004230 <HAL_I2C_Init+0x25c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d807      	bhi.n	8004058 <HAL_I2C_Init+0x84>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_I2C_Init+0x260>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e006      	b.n	8004066 <HAL_I2C_Init+0x92>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_I2C_Init+0x264>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0db      	b.n	8004226 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a72      	ldr	r2, [pc, #456]	; (800423c <HAL_I2C_Init+0x268>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9b      	lsrs	r3, r3, #18
 8004078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a64      	ldr	r2, [pc, #400]	; (8004230 <HAL_I2C_Init+0x25c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d802      	bhi.n	80040a8 <HAL_I2C_Init+0xd4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	e009      	b.n	80040bc <HAL_I2C_Init+0xe8>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_I2C_Init+0x26c>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	3301      	adds	r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4956      	ldr	r1, [pc, #344]	; (8004230 <HAL_I2C_Init+0x25c>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d80d      	bhi.n	80040f8 <HAL_I2C_Init+0x124>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e59      	subs	r1, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	bf38      	it	cc
 80040f4:	2304      	movcc	r3, #4
 80040f6:	e04f      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_I2C_Init+0x150>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e012      	b.n	800414a <HAL_I2C_Init+0x176>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	0099      	lsls	r1, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Init+0x17e>
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10e      	bne.n	8004178 <HAL_I2C_Init+0x1a4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1e58      	subs	r0, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	440b      	add	r3, r1
 8004168:	fbb0 f3f3 	udiv	r3, r0, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	e00f      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6809      	ldr	r1, [r1, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6911      	ldr	r1, [r2, #16]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	000186a0 	.word	0x000186a0
 8004234:	001e847f 	.word	0x001e847f
 8004238:	003d08ff 	.word	0x003d08ff
 800423c:	431bde83 	.word	0x431bde83
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	460b      	mov	r3, r1
 8004252:	817b      	strh	r3, [r7, #10]
 8004254:	4613      	mov	r3, r2
 8004256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7ff f81c 	bl	8003294 <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 80e0 	bne.w	800442c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2319      	movs	r3, #25
 8004272:	2201      	movs	r2, #1
 8004274:	4970      	ldr	r1, [pc, #448]	; (8004438 <HAL_I2C_Master_Transmit+0x1f4>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fd86 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	e0d3      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_I2C_Master_Transmit+0x50>
 8004290:	2302      	movs	r3, #2
 8004292:	e0cc      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d007      	beq.n	80042ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2221      	movs	r2, #33	; 0x21
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2210      	movs	r2, #16
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_I2C_Master_Transmit+0x1f8>)
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fbf0 	bl	8004ae8 <I2C_MasterRequestWrite>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e08d      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004328:	e066      	b.n	80043f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fe00 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d11b      	bne.n	80043cc <HAL_I2C_Master_Transmit+0x188>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	6a39      	ldr	r1, [r7, #32]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fdf0 	bl	8004fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d107      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e01a      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d194      	bne.n	800432a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000

08004440 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	461a      	mov	r2, r3
 800444c:	460b      	mov	r3, r1
 800444e:	817b      	strh	r3, [r7, #10]
 8004450:	4613      	mov	r3, r2
 8004452:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7fe ff1e 	bl	8003294 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	f040 820b 	bne.w	800487e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2319      	movs	r3, #25
 800446e:	2201      	movs	r2, #1
 8004470:	497c      	ldr	r1, [pc, #496]	; (8004664 <HAL_I2C_Master_Receive+0x224>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fc88 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	e1fe      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_I2C_Master_Receive+0x50>
 800448c:	2302      	movs	r3, #2
 800448e:	e1f7      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d007      	beq.n	80044b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2222      	movs	r2, #34	; 0x22
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2210      	movs	r2, #16
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	893a      	ldrh	r2, [r7, #8]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_I2C_Master_Receive+0x228>)
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044f8:	8979      	ldrh	r1, [r7, #10]
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fb74 	bl	8004bec <I2C_MasterRequestRead>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e1b8      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e18c      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e16c      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	2b02      	cmp	r3, #2
 8004584:	d11b      	bne.n	80045be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	e14c      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e4:	e138      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f200 80f1 	bhi.w	80047d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d123      	bne.n	8004640 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fd1b 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e139      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800463e:	e10b      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14e      	bne.n	80046e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	2200      	movs	r2, #0
 8004650:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_I2C_Master_Receive+0x22c>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fb98 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e10e      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000
 800466c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e4:	e0b8      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2200      	movs	r2, #0
 80046ee:	4966      	ldr	r1, [pc, #408]	; (8004888 <HAL_I2C_Master_Receive+0x448>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fb49 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0bf      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	494f      	ldr	r1, [pc, #316]	; (8004888 <HAL_I2C_Master_Receive+0x448>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fb1b 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e091      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d0:	e042      	b.n	8004858 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc2e 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e04c      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d118      	bne.n	8004858 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f aec2 	bne.w	80045e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e000      	b.n	8004880 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	00010004 	.word	0x00010004

0800488c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7fe fcfa 	bl	8003294 <HAL_GetTick>
 80048a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	f040 8111 	bne.w	8004ad6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2319      	movs	r3, #25
 80048ba:	2201      	movs	r2, #1
 80048bc:	4988      	ldr	r1, [pc, #544]	; (8004ae0 <HAL_I2C_IsDeviceReady+0x254>)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa62 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
 80048cc:	e104      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2C_IsDeviceReady+0x50>
 80048d8:	2302      	movs	r3, #2
 80048da:	e0fd      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d007      	beq.n	8004902 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2224      	movs	r2, #36	; 0x24
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a70      	ldr	r2, [pc, #448]	; (8004ae4 <HAL_I2C_IsDeviceReady+0x258>)
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004934:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa20 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d103      	bne.n	8004966 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0b6      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004978:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe fc8b 	bl	8003294 <HAL_GetTick>
 800497e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049ae:	e025      	b.n	80049fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fe fc70 	bl	8003294 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <HAL_I2C_IsDeviceReady+0x13a>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22a0      	movs	r2, #160	; 0xa0
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2ba0      	cmp	r3, #160	; 0xa0
 8004a06:	d005      	beq.n	8004a14 <HAL_I2C_IsDeviceReady+0x188>
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_I2C_IsDeviceReady+0x188>
 8004a0e:	7dbb      	ldrb	r3, [r7, #22]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0cd      	beq.n	80049b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d129      	bne.n	8004a7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2319      	movs	r3, #25
 8004a56:	2201      	movs	r2, #1
 8004a58:	4921      	ldr	r1, [pc, #132]	; (8004ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f994 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e036      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e02c      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2319      	movs	r3, #25
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	490f      	ldr	r1, [pc, #60]	; (8004ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f970 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e012      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	f4ff af32 	bcc.w	8004926 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	00100002 	.word	0x00100002
 8004ae4:	ffff0000 	.word	0xffff0000

08004ae8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d006      	beq.n	8004b12 <I2C_MasterRequestWrite+0x2a>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d003      	beq.n	8004b12 <I2C_MasterRequestWrite+0x2a>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b10:	d108      	bne.n	8004b24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e00b      	b.n	8004b3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	2b12      	cmp	r3, #18
 8004b2a:	d107      	bne.n	8004b3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f91d 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b62:	d103      	bne.n	8004b6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e035      	b.n	8004bdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b78:	d108      	bne.n	8004b8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b88:	611a      	str	r2, [r3, #16]
 8004b8a:	e01b      	b.n	8004bc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b8c:	897b      	ldrh	r3, [r7, #10]
 8004b8e:	11db      	asrs	r3, r3, #7
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f063 030f 	orn	r3, r3, #15
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <I2C_MasterRequestWrite+0xfc>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f943 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e010      	b.n	8004bdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bba:	897b      	ldrh	r3, [r7, #10]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4907      	ldr	r1, [pc, #28]	; (8004be8 <I2C_MasterRequestWrite+0x100>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f933 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00010008 	.word	0x00010008
 8004be8:	00010002 	.word	0x00010002

08004bec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d006      	beq.n	8004c26 <I2C_MasterRequestRead+0x3a>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d003      	beq.n	8004c26 <I2C_MasterRequestRead+0x3a>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c24:	d108      	bne.n	8004c38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e00b      	b.n	8004c50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b11      	cmp	r3, #17
 8004c3e:	d107      	bne.n	8004c50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f893 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c76:	d103      	bne.n	8004c80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e079      	b.n	8004d78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8c:	d108      	bne.n	8004ca0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]
 8004c9e:	e05f      	b.n	8004d60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ca0:	897b      	ldrh	r3, [r7, #10]
 8004ca2:	11db      	asrs	r3, r3, #7
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0306 	and.w	r3, r3, #6
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f063 030f 	orn	r3, r3, #15
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4930      	ldr	r1, [pc, #192]	; (8004d80 <I2C_MasterRequestRead+0x194>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f8b9 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e054      	b.n	8004d78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4929      	ldr	r1, [pc, #164]	; (8004d84 <I2C_MasterRequestRead+0x198>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f8a9 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e044      	b.n	8004d78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f831 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3a:	d103      	bne.n	8004d44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e017      	b.n	8004d78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	11db      	asrs	r3, r3, #7
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0306 	and.w	r3, r3, #6
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f063 030e 	orn	r3, r3, #14
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4907      	ldr	r1, [pc, #28]	; (8004d84 <I2C_MasterRequestRead+0x198>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f865 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	00010008 	.word	0x00010008
 8004d84:	00010002 	.word	0x00010002

08004d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d98:	e025      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d021      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fe fa77 	bl	8003294 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e023      	b.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10d      	bne.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	e00c      	b.n	8004e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d0b6      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e44:	e051      	b.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d123      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e046      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d021      	beq.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fe f9f5 	bl	8003294 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e020      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10c      	bne.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e00b      	b.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d18d      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f40:	e02d      	b.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f8ce 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02d      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d021      	beq.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fe f99b 	bl	8003294 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e007      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d1ca      	bne.n	8004f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc2:	e02d      	b.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f88d 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e02d      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d021      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7fe f95a 	bl	8003294 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e007      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d1ca      	bne.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005044:	e042      	b.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d119      	bne.n	8005088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0210 	mvn.w	r2, #16
 800505c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e029      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005088:	f7fe f904 	bl	8003294 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e007      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d1b5      	bne.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d11b      	bne.n	8005134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0cc      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b68      	ldr	r3, [pc, #416]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d90c      	bls.n	8005180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0b8      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005198:	4b59      	ldr	r3, [pc, #356]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b0:	4b53      	ldr	r3, [pc, #332]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a52      	ldr	r2, [pc, #328]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b50      	ldr	r3, [pc, #320]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	494d      	ldr	r1, [pc, #308]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d044      	beq.n	8005264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d107      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d119      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e067      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4934      	ldr	r1, [pc, #208]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005234:	f7fe f82e 	bl	8003294 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fe f82a 	bl	8003294 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e04f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d20c      	bcs.n	800528c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e032      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4916      	ldr	r1, [pc, #88]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	490e      	ldr	r1, [pc, #56]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ca:	f000 f821 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052ce:	4601      	mov	r1, r0
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	fa21 f303 	lsr.w	r3, r1, r3
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd ff8e 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023c00 	.word	0x40023c00
 8005300:	40023800 	.word	0x40023800
 8005304:	0800c3ec 	.word	0x0800c3ec
 8005308:	20000000 	.word	0x20000000
 800530c:	20000004 	.word	0x20000004

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	2300      	movs	r3, #0
 8005320:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005326:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b04      	cmp	r3, #4
 8005330:	d007      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0x32>
 8005332:	2b08      	cmp	r3, #8
 8005334:	d008      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x38>
 8005336:	2b00      	cmp	r3, #0
 8005338:	f040 808d 	bne.w	8005456 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800533c:	4b4b      	ldr	r3, [pc, #300]	; (800546c <HAL_RCC_GetSysClockFreq+0x15c>)
 800533e:	60bb      	str	r3, [r7, #8]
       break;
 8005340:	e08c      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005342:	4b4b      	ldr	r3, [pc, #300]	; (8005470 <HAL_RCC_GetSysClockFreq+0x160>)
 8005344:	60bb      	str	r3, [r7, #8]
      break;
 8005346:	e089      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005348:	4b47      	ldr	r3, [pc, #284]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005350:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005352:	4b45      	ldr	r3, [pc, #276]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d023      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b42      	ldr	r3, [pc, #264]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	ea03 0501 	and.w	r5, r3, r1
 8005374:	ea04 0602 	and.w	r6, r4, r2
 8005378:	4a3d      	ldr	r2, [pc, #244]	; (8005470 <HAL_RCC_GetSysClockFreq+0x160>)
 800537a:	fb02 f106 	mul.w	r1, r2, r6
 800537e:	2200      	movs	r2, #0
 8005380:	fb02 f205 	mul.w	r2, r2, r5
 8005384:	440a      	add	r2, r1
 8005386:	493a      	ldr	r1, [pc, #232]	; (8005470 <HAL_RCC_GetSysClockFreq+0x160>)
 8005388:	fba5 0101 	umull	r0, r1, r5, r1
 800538c:	1853      	adds	r3, r2, r1
 800538e:	4619      	mov	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	f7fb fc87 	bl	8000cac <__aeabi_uldivmod>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e049      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	4b30      	ldr	r3, [pc, #192]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	ea03 0501 	and.w	r5, r3, r1
 80053bc:	ea04 0602 	and.w	r6, r4, r2
 80053c0:	4629      	mov	r1, r5
 80053c2:	4632      	mov	r2, r6
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	0154      	lsls	r4, r2, #5
 80053ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053d2:	014b      	lsls	r3, r1, #5
 80053d4:	4619      	mov	r1, r3
 80053d6:	4622      	mov	r2, r4
 80053d8:	1b49      	subs	r1, r1, r5
 80053da:	eb62 0206 	sbc.w	r2, r2, r6
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	f04f 0400 	mov.w	r4, #0
 80053e6:	0194      	lsls	r4, r2, #6
 80053e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053ec:	018b      	lsls	r3, r1, #6
 80053ee:	1a5b      	subs	r3, r3, r1
 80053f0:	eb64 0402 	sbc.w	r4, r4, r2
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	00e2      	lsls	r2, r4, #3
 80053fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005402:	00d9      	lsls	r1, r3, #3
 8005404:	460b      	mov	r3, r1
 8005406:	4614      	mov	r4, r2
 8005408:	195b      	adds	r3, r3, r5
 800540a:	eb44 0406 	adc.w	r4, r4, r6
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	02a2      	lsls	r2, r4, #10
 8005418:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800541c:	0299      	lsls	r1, r3, #10
 800541e:	460b      	mov	r3, r1
 8005420:	4614      	mov	r4, r2
 8005422:	4618      	mov	r0, r3
 8005424:	4621      	mov	r1, r4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	461a      	mov	r2, r3
 800542e:	4623      	mov	r3, r4
 8005430:	f7fb fc3c 	bl	8000cac <__aeabi_uldivmod>
 8005434:	4603      	mov	r3, r0
 8005436:	460c      	mov	r4, r1
 8005438:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetSysClockFreq+0x158>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	3301      	adds	r3, #1
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	60bb      	str	r3, [r7, #8]
      break;
 8005454:	e002      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005458:	60bb      	str	r3, [r7, #8]
      break;
 800545a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	00f42400 	.word	0x00f42400
 8005470:	017d7840 	.word	0x017d7840

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000000 	.word	0x20000000

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4601      	mov	r1, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4a03      	ldr	r2, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0800c3fc 	.word	0x0800c3fc

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054b8:	f7ff ffdc 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054bc:	4601      	mov	r1, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0b5b      	lsrs	r3, r3, #13
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800c3fc 	.word	0x0800c3fc

080054dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005500:	4b7a      	ldr	r3, [pc, #488]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005506:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	4977      	ldr	r1, [pc, #476]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800552e:	4b6f      	ldr	r3, [pc, #444]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005534:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	496b      	ldr	r1, [pc, #428]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d022      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 800555c:	4b63      	ldr	r3, [pc, #396]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800555e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	4960      	ldr	r1, [pc, #384]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005586:	d10c      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005588:	4b58      	ldr	r3, [pc, #352]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800558a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	3b01      	subs	r3, #1
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	4954      	ldr	r1, [pc, #336]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d022      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80055ae:	4b4f      	ldr	r3, [pc, #316]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055bc:	494b      	ldr	r1, [pc, #300]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80055cc:	2301      	movs	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80055da:	4b44      	ldr	r3, [pc, #272]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	493f      	ldr	r1, [pc, #252]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 808a 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b39      	ldr	r3, [pc, #228]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	4a38      	ldr	r2, [pc, #224]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6413      	str	r3, [r2, #64]	; 0x40
 8005612:	4b36      	ldr	r3, [pc, #216]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800561e:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800562a:	f7fd fe33 	bl	8003294 <HAL_GetTick>
 800562e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fd fe2f 	bl	8003294 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1d1      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005644:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005650:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005658:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02f      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	429a      	cmp	r2, r3
 800566c:	d028      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800566e:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005676:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800568a:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d114      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005696:	f7fd fdfd 	bl	8003294 <HAL_GetTick>
 800569a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569c:	e00a      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fd fdf9 	bl	8003294 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e199      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0ee      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056cc:	d114      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e2:	4902      	ldr	r1, [pc, #8]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]
 80056e8:	e00c      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40007000 	.word	0x40007000
 80056f4:	42470e40 	.word	0x42470e40
 80056f8:	4b89      	ldr	r3, [pc, #548]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a88      	ldr	r2, [pc, #544]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005702:	6093      	str	r3, [r2, #8]
 8005704:	4b86      	ldr	r3, [pc, #536]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	4983      	ldr	r1, [pc, #524]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005712:	4313      	orrs	r3, r2
 8005714:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005728:	4b7e      	ldr	r3, [pc, #504]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800572a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005738:	4b79      	ldr	r3, [pc, #484]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	4976      	ldr	r1, [pc, #472]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d011      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800575a:	4b71      	ldr	r3, [pc, #452]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800575c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005760:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	496d      	ldr	r1, [pc, #436]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005778:	d101      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800577a:	2301      	movs	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800578a:	4b65      	ldr	r3, [pc, #404]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	4961      	ldr	r1, [pc, #388]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d004      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	f040 80c6 	bne.w	800593c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057b0:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057b6:	f7fd fd6d 	bl	8003294 <HAL_GetTick>
 80057ba:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057be:	f7fd fd69 	bl	8003294 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e10b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d0:	4b53      	ldr	r3, [pc, #332]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f0      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80057dc:	4a53      	ldr	r2, [pc, #332]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d023      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d019      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d00e      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d019      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d115      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583e:	d110      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	4931      	ldr	r1, [pc, #196]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d026      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d122      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800588a:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	431a      	orrs	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	071b      	lsls	r3, r3, #28
 80058b0:	491b      	ldr	r1, [pc, #108]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058be:	f023 021f 	bic.w	r2, r3, #31
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	4915      	ldr	r1, [pc, #84]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005904:	f7fd fcc6 	bl	8003294 <HAL_GetTick>
 8005908:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800590c:	f7fd fcc2 	bl	8003294 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d90a      	bls.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e064      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	424711e0 	.word	0x424711e0
 8005928:	42470068 	.word	0x42470068
 800592c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005930:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0e7      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005948:	4b29      	ldr	r3, [pc, #164]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800594a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	4926      	ldr	r1, [pc, #152]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800596a:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005970:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	491d      	ldr	r1, [pc, #116]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800598c:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800598e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005992:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	4915      	ldr	r1, [pc, #84]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	490c      	ldr	r1, [pc, #48]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	4904      	ldr	r1, [pc, #16]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40023800 	.word	0x40023800

080059f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d075      	beq.n	8005af8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a0c:	4ba2      	ldr	r3, [pc, #648]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d00c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a18:	4b9f      	ldr	r3, [pc, #636]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d112      	bne.n	8005a4a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a24:	4b9c      	ldr	r3, [pc, #624]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a30:	d10b      	bne.n	8005a4a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a32:	4b99      	ldr	r3, [pc, #612]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d05b      	beq.n	8005af6 <HAL_RCC_OscConfig+0x102>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d157      	bne.n	8005af6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e20b      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x6e>
 8005a54:	4b90      	ldr	r3, [pc, #576]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a8f      	ldr	r2, [pc, #572]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e01d      	b.n	8005a9e <HAL_RCC_OscConfig+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCC_OscConfig+0x92>
 8005a6c:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a89      	ldr	r2, [pc, #548]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b87      	ldr	r3, [pc, #540]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a86      	ldr	r2, [pc, #536]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e00b      	b.n	8005a9e <HAL_RCC_OscConfig+0xaa>
 8005a86:	4b84      	ldr	r3, [pc, #528]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a83      	ldr	r2, [pc, #524]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a80      	ldr	r2, [pc, #512]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d013      	beq.n	8005ace <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fd fbf5 	bl	8003294 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aae:	f7fd fbf1 	bl	8003294 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b64      	cmp	r3, #100	; 0x64
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1d0      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac0:	4b75      	ldr	r3, [pc, #468]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0xba>
 8005acc:	e014      	b.n	8005af8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fd fbe1 	bl	8003294 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad6:	f7fd fbdd 	bl	8003294 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b64      	cmp	r3, #100	; 0x64
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e1bc      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae8:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xe2>
 8005af4:	e000      	b.n	8005af8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d063      	beq.n	8005bcc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b04:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b10:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d11c      	bne.n	8005b56 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b1c:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b28:	4b5b      	ldr	r3, [pc, #364]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_OscConfig+0x14c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e190      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b40:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4952      	ldr	r1, [pc, #328]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b54:	e03a      	b.n	8005bcc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b5e:	4b4f      	ldr	r3, [pc, #316]	; (8005c9c <HAL_RCC_OscConfig+0x2a8>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd fb96 	bl	8003294 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fd fb92 	bl	8003294 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e171      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7e:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	493f      	ldr	r1, [pc, #252]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]
 8005b9e:	e015      	b.n	8005bcc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba0:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_RCC_OscConfig+0x2a8>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fd fb75 	bl	8003294 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bae:	f7fd fb71 	bl	8003294 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e150      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d030      	beq.n	8005c3a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d016      	beq.n	8005c0e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be0:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fd fb55 	bl	8003294 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bee:	f7fd fb51 	bl	8003294 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e130      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x1fa>
 8005c0c:	e015      	b.n	8005c3a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fd fb3e 	bl	8003294 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1c:	f7fd fb3a 	bl	8003294 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e119      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 809f 	beq.w	8005d86 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c66:	6413      	str	r3, [r2, #64]	; 0x40
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_OscConfig+0x2a4>)
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_RCC_OscConfig+0x2b0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d120      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_RCC_OscConfig+0x2b0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <HAL_RCC_OscConfig+0x2b0>)
 8005c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c90:	f7fd fb00 	bl	8003294 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c96:	e010      	b.n	8005cba <HAL_RCC_OscConfig+0x2c6>
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	42470000 	.word	0x42470000
 8005ca0:	42470e80 	.word	0x42470e80
 8005ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca8:	f7fd faf4 	bl	8003294 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0d3      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cba:	4b6c      	ldr	r3, [pc, #432]	; (8005e6c <HAL_RCC_OscConfig+0x478>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d106      	bne.n	8005cdc <HAL_RCC_OscConfig+0x2e8>
 8005cce:	4b68      	ldr	r3, [pc, #416]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a67      	ldr	r2, [pc, #412]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cda:	e01c      	b.n	8005d16 <HAL_RCC_OscConfig+0x322>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCC_OscConfig+0x30a>
 8005ce4:	4b62      	ldr	r3, [pc, #392]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	4a61      	ldr	r2, [pc, #388]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf0:	4b5f      	ldr	r3, [pc, #380]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a5e      	ldr	r2, [pc, #376]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCC_OscConfig+0x322>
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4a5b      	ldr	r2, [pc, #364]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0a:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd fab9 	bl	8003294 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fd fab5 	bl	8003294 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e092      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	4b4c      	ldr	r3, [pc, #304]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ee      	beq.n	8005d26 <HAL_RCC_OscConfig+0x332>
 8005d48:	e014      	b.n	8005d74 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fd faa3 	bl	8003294 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fd fa9f 	bl	8003294 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e07c      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d68:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ee      	bne.n	8005d52 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d105      	bne.n	8005d86 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d068      	beq.n	8005e60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d8e:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d060      	beq.n	8005e5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d145      	bne.n	8005e2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da2:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd fa74 	bl	8003294 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fd fa70 	bl	8003294 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e04f      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69da      	ldr	r2, [r3, #28]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	019b      	lsls	r3, r3, #6
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	3b01      	subs	r3, #1
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	061b      	lsls	r3, r3, #24
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	071b      	lsls	r3, r3, #28
 8005dfa:	491d      	ldr	r1, [pc, #116]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fd fa45 	bl	8003294 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fd fa41 	bl	8003294 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e020      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x41a>
 8005e2c:	e018      	b.n	8005e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd fa2e 	bl	8003294 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fd fa2a 	bl	8003294 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e009      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x448>
 8005e5a:	e001      	b.n	8005e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470060 	.word	0x42470060

08005e78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e083      	b.n	8005f92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7f5b      	ldrb	r3, [r3, #29]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb ffe8 	bl	8001e70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	22ca      	movs	r2, #202	; 0xca
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2253      	movs	r2, #83	; 0x53
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 faa8 	bl	800640c <RTC_EnterInitMode>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e05e      	b.n	8005f92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6899      	ldr	r1, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68d2      	ldr	r2, [r2, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6919      	ldr	r1, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	041a      	lsls	r2, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10e      	bne.n	8005f60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa3a 	bl	80063bc <HAL_RTC_WaitForSynchro>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	22ff      	movs	r2, #255	; 0xff
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e018      	b.n	8005f92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f9a:	b590      	push	{r4, r7, lr}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7f1b      	ldrb	r3, [r3, #28]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RTC_SetTime+0x1c>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e0aa      	b.n	800610c <HAL_RTC_SetTime+0x172>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d126      	bne.n	8006016 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa3f 	bl	8006464 <RTC_ByteToBcd2>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fa38 	bl	8006464 <RTC_ByteToBcd2>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ff8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fa30 	bl	8006464 <RTC_ByteToBcd2>
 8006004:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006006:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	78db      	ldrb	r3, [r3, #3]
 800600e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e018      	b.n	8006048 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2200      	movs	r2, #0
 8006028:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006036:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800603c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	22ca      	movs	r2, #202	; 0xca
 800604e:	625a      	str	r2, [r3, #36]	; 0x24
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2253      	movs	r2, #83	; 0x53
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f9d7 	bl	800640c <RTC_EnterInitMode>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	22ff      	movs	r2, #255	; 0xff
 800606a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2204      	movs	r2, #4
 8006070:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e047      	b.n	800610c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800608a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800609a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6899      	ldr	r1, [r3, #8]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d111      	bne.n	80060f6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f972 	bl	80063bc <HAL_RTC_WaitForSynchro>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	22ff      	movs	r2, #255	; 0xff
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2204      	movs	r2, #4
 80060ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e00a      	b.n	800610c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	22ff      	movs	r2, #255	; 0xff
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800610a:	2300      	movs	r3, #0
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006146:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800614a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11a      	bne.n	80061c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f983 	bl	80064a0 <RTC_Bcd2ToByte>
 800619a:	4603      	mov	r3, r0
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f97a 	bl	80064a0 <RTC_Bcd2ToByte>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	789b      	ldrb	r3, [r3, #2]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f971 	bl	80064a0 <RTC_Bcd2ToByte>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	7f1b      	ldrb	r3, [r3, #28]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_RTC_SetDate+0x1c>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e094      	b.n	8006316 <HAL_RTC_SetDate+0x146>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2202      	movs	r2, #2
 80061f6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10e      	bne.n	800621c <HAL_RTC_SetDate+0x4c>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	f023 0310 	bic.w	r3, r3, #16
 8006212:	b2db      	uxtb	r3, r3
 8006214:	330a      	adds	r3, #10
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d11c      	bne.n	800625c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f91c 	bl	8006464 <RTC_ByteToBcd2>
 800622c:	4603      	mov	r3, r0
 800622e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f915 	bl	8006464 <RTC_ByteToBcd2>
 800623a:	4603      	mov	r3, r0
 800623c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800623e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	789b      	ldrb	r3, [r3, #2]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f90d 	bl	8006464 <RTC_ByteToBcd2>
 800624a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800624c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e00e      	b.n	800627a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006268:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800626e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ca      	movs	r2, #202	; 0xca
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2253      	movs	r2, #83	; 0x53
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f8be 	bl	800640c <RTC_EnterInitMode>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	22ff      	movs	r2, #255	; 0xff
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2204      	movs	r2, #4
 80062a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e033      	b.n	8006316 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d111      	bne.n	8006300 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f86d 	bl	80063bc <HAL_RTC_WaitForSynchro>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	22ff      	movs	r2, #255	; 0xff
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2204      	movs	r2, #4
 80062f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e00a      	b.n	8006316 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006314:	2300      	movs	r3, #0
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}

0800631e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006338:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800633c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	0b5b      	lsrs	r3, r3, #13
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	78db      	ldrb	r3, [r3, #3]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f88d 	bl	80064a0 <RTC_Bcd2ToByte>
 8006386:	4603      	mov	r3, r0
 8006388:	461a      	mov	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f884 	bl	80064a0 <RTC_Bcd2ToByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	789b      	ldrb	r3, [r3, #2]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f87b 	bl	80064a0 <RTC_Bcd2ToByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063d8:	f7fc ff5c 	bl	8003294 <HAL_GetTick>
 80063dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063de:	e009      	b.n	80063f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063e0:	f7fc ff58 	bl	8003294 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ee:	d901      	bls.n	80063f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e007      	b.n	8006404 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0ee      	beq.n	80063e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d119      	bne.n	800645a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006430:	f7fc ff30 	bl	8003294 <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006436:	e009      	b.n	800644c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006438:	f7fc ff2c 	bl	8003294 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006446:	d901      	bls.n	800644c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e007      	b.n	800645c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0ee      	beq.n	8006438 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006472:	e005      	b.n	8006480 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	3b0a      	subs	r3, #10
 800647e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b09      	cmp	r3, #9
 8006484:	d8f6      	bhi.n	8006474 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	b2da      	uxtb	r2, r3
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	4313      	orrs	r3, r2
 8006492:	b2db      	uxtb	r3, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	b2db      	uxtb	r3, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e01d      	b.n	800652a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb fcca 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 fa14 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b06      	cmp	r3, #6
 800655a:	d007      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b02      	cmp	r3, #2
 800658e:	d122      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d11b      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f06f 0202 	mvn.w	r2, #2
 80065a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f9a5 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 80065c2:	e005      	b.n	80065d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f997 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9a8 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d122      	bne.n	800662a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d11b      	bne.n	800662a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f06f 0204 	mvn.w	r2, #4
 80065fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f97b 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 8006616:	e005      	b.n	8006624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f96d 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f97e 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b08      	cmp	r3, #8
 8006636:	d122      	bne.n	800667e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b08      	cmp	r3, #8
 8006644:	d11b      	bne.n	800667e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f06f 0208 	mvn.w	r2, #8
 800664e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f951 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 800666a:	e005      	b.n	8006678 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f943 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f954 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b10      	cmp	r3, #16
 800668a:	d122      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d11b      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f06f 0210 	mvn.w	r2, #16
 80066a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2208      	movs	r2, #8
 80066a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f927 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 80066be:	e005      	b.n	80066cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f919 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f92a 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0201 	mvn.w	r2, #1
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fb fac7 	bl	8001c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 facf 	bl	8006cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8ef 	bl	8006934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b20      	cmp	r3, #32
 8006762:	d10e      	bne.n	8006782 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b20      	cmp	r3, #32
 8006770:	d107      	bne.n	8006782 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f06f 0220 	mvn.w	r2, #32
 800677a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa99 	bl	8006cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_ConfigClockSource+0x18>
 800679e:	2302      	movs	r3, #2
 80067a0:	e0a6      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x166>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d067      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x120>
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d80b      	bhi.n	80067f6 <HAL_TIM_ConfigClockSource+0x6c>
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d073      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x140>
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d802      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x62>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d06f      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067ea:	e078      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d06c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x140>
 80067f0:	2b30      	cmp	r3, #48	; 0x30
 80067f2:	d06a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067f4:	e073      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067f6:	2b70      	cmp	r3, #112	; 0x70
 80067f8:	d00d      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x8c>
 80067fa:	2b70      	cmp	r3, #112	; 0x70
 80067fc:	d804      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x7e>
 80067fe:	2b50      	cmp	r3, #80	; 0x50
 8006800:	d033      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xe0>
 8006802:	2b60      	cmp	r3, #96	; 0x60
 8006804:	d041      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006806:	e06a      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d066      	beq.n	80068dc <HAL_TIM_ConfigClockSource+0x152>
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006812:	d017      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006814:	e063      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 f9a9 	bl	8006b7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006838:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04c      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f000 f992 	bl	8006b7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e039      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	f000 f906 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	; 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f95f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006888:	e029      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	461a      	mov	r2, r3
 8006898:	f000 f925 	bl	8006ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	; 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f94f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e019      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 f8e6 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f93f 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80068c8:	e009      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 f936 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80068da:	e000      	b.n	80068de <HAL_TIM_ConfigClockSource+0x154>
      break;
 80068dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d00f      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00b      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3c      	ldr	r2, [pc, #240]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d108      	bne.n	800699a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d02b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d027      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d023      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d017      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a28      	ldr	r2, [pc, #160]	; (8006a70 <TIM_Base_SetConfig+0x128>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <TIM_Base_SetConfig+0x12c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <TIM_Base_SetConfig+0x130>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <TIM_Base_SetConfig+0x134>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a24      	ldr	r2, [pc, #144]	; (8006a80 <TIM_Base_SetConfig+0x138>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <TIM_Base_SetConfig+0x13c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d108      	bne.n	8006a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0xf8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d103      	bne.n	8006a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	615a      	str	r2, [r3, #20]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40001800 	.word	0x40001800
 8006a80:	40001c00 	.word	0x40001c00
 8006a84:	40002000 	.word	0x40002000

08006a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 030a 	bic.w	r3, r3, #10
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0210 	bic.w	r2, r3, #16
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e05a      	b.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a21      	ldr	r2, [pc, #132]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d022      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c20:	d01d      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d018      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00e      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d009      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d10c      	bne.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40001800 	.word	0x40001800

08006cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e03f      	b.n	8006d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb f8f0 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2224      	movs	r2, #36	; 0x24
 8006d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fd1d 	bl	8007760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b088      	sub	sp, #32
 8006d7a:	af02      	add	r7, sp, #8
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	f040 8083 	bne.w	8006e9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_UART_Transmit+0x2e>
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e07b      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Transmit+0x40>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e074      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2221      	movs	r2, #33	; 0x21
 8006dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dcc:	f7fc fa62 	bl	8003294 <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006de6:	e042      	b.n	8006e6e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d122      	bne.n	8006e46 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2200      	movs	r2, #0
 8006e08:	2180      	movs	r1, #128	; 0x80
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fb26 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e042      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	60bb      	str	r3, [r7, #8]
 8006e3c:	e017      	b.n	8006e6e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60bb      	str	r3, [r7, #8]
 8006e44:	e013      	b.n	8006e6e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fb03 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e01f      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	60ba      	str	r2, [r7, #8]
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1b7      	bne.n	8006de8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 faea 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e006      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	f040 8090 	bne.w	8006fea <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_UART_Receive+0x2e>
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e088      	b.n	8006fec <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Receive+0x40>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e081      	b.n	8006fec <HAL_UART_Receive+0x144>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2222      	movs	r2, #34	; 0x22
 8006efa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006efe:	f7fc f9c9 	bl	8003294 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	88fa      	ldrh	r2, [r7, #6]
 8006f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f18:	e05c      	b.n	8006fd4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f30:	d12b      	bne.n	8006f8a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2120      	movs	r1, #32
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa8d 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e04f      	b.n	8006fec <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10c      	bne.n	8006f72 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	e030      	b.n	8006fd4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	e024      	b.n	8006fd4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2120      	movs	r1, #32
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fa61 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e023      	b.n	8006fec <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d108      	bne.n	8006fbe <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6859      	ldr	r1, [r3, #4]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	60ba      	str	r2, [r7, #8]
 8006fb8:	b2ca      	uxtb	r2, r1
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e00a      	b.n	8006fd4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	1c59      	adds	r1, r3, #1
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d19d      	bne.n	8006f1a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e000      	b.n	8006fec <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
  }
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b20      	cmp	r3, #32
 800700c:	d166      	bne.n	80070dc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_UART_Receive_DMA+0x26>
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e05f      	b.n	80070de <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UART_Receive_DMA+0x38>
 8007028:	2302      	movs	r3, #2
 800702a:	e058      	b.n	80070de <HAL_UART_Receive_DMA+0xea>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	88fa      	ldrh	r2, [r7, #6]
 800703e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2222      	movs	r2, #34	; 0x22
 800704a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <HAL_UART_Receive_DMA+0xf4>)
 8007054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	4a24      	ldr	r2, [pc, #144]	; (80070ec <HAL_UART_Receive_DMA+0xf8>)
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <HAL_UART_Receive_DMA+0xfc>)
 8007064:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	2200      	movs	r2, #0
 800706c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800706e:	f107 0308 	add.w	r3, r7, #8
 8007072:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3304      	adds	r3, #4
 800707e:	4619      	mov	r1, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	f7fc fb17 	bl	80036b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	08007345 	.word	0x08007345
 80070ec:	080073ad 	.word	0x080073ad
 80070f0:	080073c9 	.word	0x080073c9

080070f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_UART_IRQHandler+0x52>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa8c 	bl	800765c <UART_Receive_IT>
      return;
 8007144:	e0d1      	b.n	80072ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80b0 	beq.w	80072ae <HAL_UART_IRQHandler+0x1ba>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <HAL_UART_IRQHandler+0x70>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80a5 	beq.w	80072ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_UART_IRQHandler+0x90>
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <HAL_UART_IRQHandler+0xb0>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	f043 0202 	orr.w	r2, r3, #2
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_UART_IRQHandler+0xd0>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	f043 0204 	orr.w	r2, r3, #4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <HAL_UART_IRQHandler+0xfa>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_UART_IRQHandler+0xee>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	f043 0208 	orr.w	r2, r3, #8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d078      	beq.n	80072e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <HAL_UART_IRQHandler+0x11c>
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa26 	bl	800765c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	bf0c      	ite	eq
 800721e:	2301      	moveq	r3, #1
 8007220:	2300      	movne	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_UART_IRQHandler+0x144>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d031      	beq.n	800729c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f96f 	bl	800751c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d123      	bne.n	8007294 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800725a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <HAL_UART_IRQHandler+0x1fc>)
 800726a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007270:	4618      	mov	r0, r3
 8007272:	f7fc fa79 	bl	8003768 <HAL_DMA_Abort_IT>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d016      	beq.n	80072aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007286:	4610      	mov	r0, r2
 8007288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728a:	e00e      	b.n	80072aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f84f 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007292:	e00a      	b.n	80072aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f84b 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729a:	e006      	b.n	80072aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f847 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80072a8:	e01e      	b.n	80072e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072aa:	bf00      	nop
    return;
 80072ac:	e01c      	b.n	80072e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_UART_IRQHandler+0x1d6>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f95c 	bl	8007580 <UART_Transmit_IT>
    return;
 80072c8:	e00f      	b.n	80072ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_UART_IRQHandler+0x1f6>
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9a4 	bl	800762c <UART_EndTransmit_IT>
    return;
 80072e4:	bf00      	nop
 80072e6:	e000      	b.n	80072ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80072e8:	bf00      	nop
  }
}
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08007559 	.word	0x08007559

080072f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11e      	bne.n	800739e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007374:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007394:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff ffb2 	bl	8007308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a4:	bf00      	nop
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ffae 	bl	800731c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	bf0c      	ite	eq
 80073e8:	2301      	moveq	r3, #1
 80073ea:	2300      	movne	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b21      	cmp	r3, #33	; 0x21
 80073fa:	d108      	bne.n	800740e <UART_DMAError+0x46>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007408:	68b8      	ldr	r0, [r7, #8]
 800740a:	f000 f871 	bl	80074f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b22      	cmp	r3, #34	; 0x22
 800742e:	d108      	bne.n	8007442 <UART_DMAError+0x7a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f000 f86d 	bl	800751c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	f043 0210 	orr.w	r2, r3, #16
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800744e:	68b8      	ldr	r0, [r7, #8]
 8007450:	f7ff ff6e 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746c:	e02c      	b.n	80074c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d028      	beq.n	80074c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <UART_WaitOnFlagUntilTimeout+0x30>
 800747c:	f7fb ff0a 	bl	8003294 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	429a      	cmp	r2, r3
 800748a:	d21d      	bcs.n	80074c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800749a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e00f      	b.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4013      	ands	r3, r2
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d0c3      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007506:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff fedc 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b21      	cmp	r3, #33	; 0x21
 8007592:	d144      	bne.n	800761e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d11a      	bne.n	80075d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d105      	bne.n	80075c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	1c9a      	adds	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]
 80075c6:	e00e      	b.n	80075e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	621a      	str	r2, [r3, #32]
 80075d2:	e008      	b.n	80075e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6211      	str	r1, [r2, #32]
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	4619      	mov	r1, r3
 80075f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
  }
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff fe51 	bl	80072f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b22      	cmp	r3, #34	; 0x22
 800766e:	d171      	bne.n	8007754 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007678:	d123      	bne.n	80076c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	629a      	str	r2, [r3, #40]	; 0x28
 80076a4:	e029      	b.n	80076fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
 80076c0:	e01b      	b.n	80076fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6858      	ldr	r0, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	1c59      	adds	r1, r3, #1
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6291      	str	r1, [r2, #40]	; 0x28
 80076da:	b2c2      	uxtb	r2, r0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e00c      	b.n	80076fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	1c58      	adds	r0, r3, #1
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	6288      	str	r0, [r1, #40]	; 0x28
 80076f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29b      	uxth	r3, r3
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4619      	mov	r1, r3
 8007708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800770a:	2b00      	cmp	r3, #0
 800770c:	d120      	bne.n	8007750 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0220 	bic.w	r2, r2, #32
 800771c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800772c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695a      	ldr	r2, [r3, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fdde 	bl	8007308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e002      	b.n	8007756 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80077a2:	f023 030c 	bic.w	r3, r3, #12
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	430b      	orrs	r3, r1
 80077ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ce:	f040 8199 	bne.w	8007b04 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4ac6      	ldr	r2, [pc, #792]	; (8007af0 <UART_SetConfig+0x390>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <UART_SetConfig+0x9c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4ac4      	ldr	r2, [pc, #784]	; (8007af4 <UART_SetConfig+0x394>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00a      	beq.n	80077fc <UART_SetConfig+0x9c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4ac3      	ldr	r2, [pc, #780]	; (8007af8 <UART_SetConfig+0x398>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d005      	beq.n	80077fc <UART_SetConfig+0x9c>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4ac1      	ldr	r2, [pc, #772]	; (8007afc <UART_SetConfig+0x39c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f040 80bd 	bne.w	8007976 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd fe5a 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8007800:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	461d      	mov	r5, r3
 8007806:	f04f 0600 	mov.w	r6, #0
 800780a:	46a8      	mov	r8, r5
 800780c:	46b1      	mov	r9, r6
 800780e:	eb18 0308 	adds.w	r3, r8, r8
 8007812:	eb49 0409 	adc.w	r4, r9, r9
 8007816:	4698      	mov	r8, r3
 8007818:	46a1      	mov	r9, r4
 800781a:	eb18 0805 	adds.w	r8, r8, r5
 800781e:	eb49 0906 	adc.w	r9, r9, r6
 8007822:	f04f 0100 	mov.w	r1, #0
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800782e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007832:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007836:	4688      	mov	r8, r1
 8007838:	4691      	mov	r9, r2
 800783a:	eb18 0005 	adds.w	r0, r8, r5
 800783e:	eb49 0106 	adc.w	r1, r9, r6
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	461d      	mov	r5, r3
 8007848:	f04f 0600 	mov.w	r6, #0
 800784c:	196b      	adds	r3, r5, r5
 800784e:	eb46 0406 	adc.w	r4, r6, r6
 8007852:	461a      	mov	r2, r3
 8007854:	4623      	mov	r3, r4
 8007856:	f7f9 fa29 	bl	8000cac <__aeabi_uldivmod>
 800785a:	4603      	mov	r3, r0
 800785c:	460c      	mov	r4, r1
 800785e:	461a      	mov	r2, r3
 8007860:	4ba7      	ldr	r3, [pc, #668]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007862:	fba3 2302 	umull	r2, r3, r3, r2
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	461d      	mov	r5, r3
 8007870:	f04f 0600 	mov.w	r6, #0
 8007874:	46a9      	mov	r9, r5
 8007876:	46b2      	mov	sl, r6
 8007878:	eb19 0309 	adds.w	r3, r9, r9
 800787c:	eb4a 040a 	adc.w	r4, sl, sl
 8007880:	4699      	mov	r9, r3
 8007882:	46a2      	mov	sl, r4
 8007884:	eb19 0905 	adds.w	r9, r9, r5
 8007888:	eb4a 0a06 	adc.w	sl, sl, r6
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	f04f 0200 	mov.w	r2, #0
 8007894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007898:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800789c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078a0:	4689      	mov	r9, r1
 80078a2:	4692      	mov	sl, r2
 80078a4:	eb19 0005 	adds.w	r0, r9, r5
 80078a8:	eb4a 0106 	adc.w	r1, sl, r6
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	461d      	mov	r5, r3
 80078b2:	f04f 0600 	mov.w	r6, #0
 80078b6:	196b      	adds	r3, r5, r5
 80078b8:	eb46 0406 	adc.w	r4, r6, r6
 80078bc:	461a      	mov	r2, r3
 80078be:	4623      	mov	r3, r4
 80078c0:	f7f9 f9f4 	bl	8000cac <__aeabi_uldivmod>
 80078c4:	4603      	mov	r3, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	461a      	mov	r2, r3
 80078ca:	4b8d      	ldr	r3, [pc, #564]	; (8007b00 <UART_SetConfig+0x3a0>)
 80078cc:	fba3 1302 	umull	r1, r3, r3, r2
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	2164      	movs	r1, #100	; 0x64
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	3332      	adds	r3, #50	; 0x32
 80078de:	4a88      	ldr	r2, [pc, #544]	; (8007b00 <UART_SetConfig+0x3a0>)
 80078e0:	fba2 2303 	umull	r2, r3, r2, r3
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078ec:	4498      	add	r8, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	461d      	mov	r5, r3
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	46a9      	mov	r9, r5
 80078f8:	46b2      	mov	sl, r6
 80078fa:	eb19 0309 	adds.w	r3, r9, r9
 80078fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007902:	4699      	mov	r9, r3
 8007904:	46a2      	mov	sl, r4
 8007906:	eb19 0905 	adds.w	r9, r9, r5
 800790a:	eb4a 0a06 	adc.w	sl, sl, r6
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800791a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800791e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007922:	4689      	mov	r9, r1
 8007924:	4692      	mov	sl, r2
 8007926:	eb19 0005 	adds.w	r0, r9, r5
 800792a:	eb4a 0106 	adc.w	r1, sl, r6
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	461d      	mov	r5, r3
 8007934:	f04f 0600 	mov.w	r6, #0
 8007938:	196b      	adds	r3, r5, r5
 800793a:	eb46 0406 	adc.w	r4, r6, r6
 800793e:	461a      	mov	r2, r3
 8007940:	4623      	mov	r3, r4
 8007942:	f7f9 f9b3 	bl	8000cac <__aeabi_uldivmod>
 8007946:	4603      	mov	r3, r0
 8007948:	460c      	mov	r4, r1
 800794a:	461a      	mov	r2, r3
 800794c:	4b6c      	ldr	r3, [pc, #432]	; (8007b00 <UART_SetConfig+0x3a0>)
 800794e:	fba3 1302 	umull	r1, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	3332      	adds	r3, #50	; 0x32
 8007960:	4a67      	ldr	r2, [pc, #412]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	f003 0207 	and.w	r2, r3, #7
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4442      	add	r2, r8
 8007972:	609a      	str	r2, [r3, #8]
 8007974:	e27d      	b.n	8007e72 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007976:	f7fd fd89 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 800797a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	461d      	mov	r5, r3
 8007980:	f04f 0600 	mov.w	r6, #0
 8007984:	46a8      	mov	r8, r5
 8007986:	46b1      	mov	r9, r6
 8007988:	eb18 0308 	adds.w	r3, r8, r8
 800798c:	eb49 0409 	adc.w	r4, r9, r9
 8007990:	4698      	mov	r8, r3
 8007992:	46a1      	mov	r9, r4
 8007994:	eb18 0805 	adds.w	r8, r8, r5
 8007998:	eb49 0906 	adc.w	r9, r9, r6
 800799c:	f04f 0100 	mov.w	r1, #0
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079b0:	4688      	mov	r8, r1
 80079b2:	4691      	mov	r9, r2
 80079b4:	eb18 0005 	adds.w	r0, r8, r5
 80079b8:	eb49 0106 	adc.w	r1, r9, r6
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	461d      	mov	r5, r3
 80079c2:	f04f 0600 	mov.w	r6, #0
 80079c6:	196b      	adds	r3, r5, r5
 80079c8:	eb46 0406 	adc.w	r4, r6, r6
 80079cc:	461a      	mov	r2, r3
 80079ce:	4623      	mov	r3, r4
 80079d0:	f7f9 f96c 	bl	8000cac <__aeabi_uldivmod>
 80079d4:	4603      	mov	r3, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	461a      	mov	r2, r3
 80079da:	4b49      	ldr	r3, [pc, #292]	; (8007b00 <UART_SetConfig+0x3a0>)
 80079dc:	fba3 2302 	umull	r2, r3, r3, r2
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	461d      	mov	r5, r3
 80079ea:	f04f 0600 	mov.w	r6, #0
 80079ee:	46a9      	mov	r9, r5
 80079f0:	46b2      	mov	sl, r6
 80079f2:	eb19 0309 	adds.w	r3, r9, r9
 80079f6:	eb4a 040a 	adc.w	r4, sl, sl
 80079fa:	4699      	mov	r9, r3
 80079fc:	46a2      	mov	sl, r4
 80079fe:	eb19 0905 	adds.w	r9, r9, r5
 8007a02:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	4692      	mov	sl, r2
 8007a1e:	eb19 0005 	adds.w	r0, r9, r5
 8007a22:	eb4a 0106 	adc.w	r1, sl, r6
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	f04f 0600 	mov.w	r6, #0
 8007a30:	196b      	adds	r3, r5, r5
 8007a32:	eb46 0406 	adc.w	r4, r6, r6
 8007a36:	461a      	mov	r2, r3
 8007a38:	4623      	mov	r3, r4
 8007a3a:	f7f9 f937 	bl	8000cac <__aeabi_uldivmod>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b2e      	ldr	r3, [pc, #184]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007a46:	fba3 1302 	umull	r1, r3, r3, r2
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	2164      	movs	r1, #100	; 0x64
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	3332      	adds	r3, #50	; 0x32
 8007a58:	4a29      	ldr	r2, [pc, #164]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a66:	4498      	add	r8, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	f04f 0600 	mov.w	r6, #0
 8007a70:	46a9      	mov	r9, r5
 8007a72:	46b2      	mov	sl, r6
 8007a74:	eb19 0309 	adds.w	r3, r9, r9
 8007a78:	eb4a 040a 	adc.w	r4, sl, sl
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	46a2      	mov	sl, r4
 8007a80:	eb19 0905 	adds.w	r9, r9, r5
 8007a84:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a88:	f04f 0100 	mov.w	r1, #0
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	4692      	mov	sl, r2
 8007aa0:	eb19 0005 	adds.w	r0, r9, r5
 8007aa4:	eb4a 0106 	adc.w	r1, sl, r6
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	461d      	mov	r5, r3
 8007aae:	f04f 0600 	mov.w	r6, #0
 8007ab2:	196b      	adds	r3, r5, r5
 8007ab4:	eb46 0406 	adc.w	r4, r6, r6
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4623      	mov	r3, r4
 8007abc:	f7f9 f8f6 	bl	8000cac <__aeabi_uldivmod>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2164      	movs	r1, #100	; 0x64
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	3332      	adds	r3, #50	; 0x32
 8007ada:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <UART_SetConfig+0x3a0>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 0207 	and.w	r2, r3, #7
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4442      	add	r2, r8
 8007aec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007aee:	e1c0      	b.n	8007e72 <UART_SetConfig+0x712>
 8007af0:	40011000 	.word	0x40011000
 8007af4:	40011400 	.word	0x40011400
 8007af8:	40011800 	.word	0x40011800
 8007afc:	40011c00 	.word	0x40011c00
 8007b00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4adc      	ldr	r2, [pc, #880]	; (8007e7c <UART_SetConfig+0x71c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00f      	beq.n	8007b2e <UART_SetConfig+0x3ce>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4adb      	ldr	r2, [pc, #876]	; (8007e80 <UART_SetConfig+0x720>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00a      	beq.n	8007b2e <UART_SetConfig+0x3ce>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4ad9      	ldr	r2, [pc, #868]	; (8007e84 <UART_SetConfig+0x724>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d005      	beq.n	8007b2e <UART_SetConfig+0x3ce>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4ad8      	ldr	r2, [pc, #864]	; (8007e88 <UART_SetConfig+0x728>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	f040 80d1 	bne.w	8007cd0 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b2e:	f7fd fcc1 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8007b32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	469a      	mov	sl, r3
 8007b38:	f04f 0b00 	mov.w	fp, #0
 8007b3c:	46d0      	mov	r8, sl
 8007b3e:	46d9      	mov	r9, fp
 8007b40:	eb18 0308 	adds.w	r3, r8, r8
 8007b44:	eb49 0409 	adc.w	r4, r9, r9
 8007b48:	4698      	mov	r8, r3
 8007b4a:	46a1      	mov	r9, r4
 8007b4c:	eb18 080a 	adds.w	r8, r8, sl
 8007b50:	eb49 090b 	adc.w	r9, r9, fp
 8007b54:	f04f 0100 	mov.w	r1, #0
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b68:	4688      	mov	r8, r1
 8007b6a:	4691      	mov	r9, r2
 8007b6c:	eb1a 0508 	adds.w	r5, sl, r8
 8007b70:	eb4b 0609 	adc.w	r6, fp, r9
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	0094      	lsls	r4, r2, #2
 8007b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	4631      	mov	r1, r6
 8007b96:	f7f9 f889 	bl	8000cac <__aeabi_uldivmod>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4bba      	ldr	r3, [pc, #744]	; (8007e8c <UART_SetConfig+0x72c>)
 8007ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	469b      	mov	fp, r3
 8007bb0:	f04f 0c00 	mov.w	ip, #0
 8007bb4:	46d9      	mov	r9, fp
 8007bb6:	46e2      	mov	sl, ip
 8007bb8:	eb19 0309 	adds.w	r3, r9, r9
 8007bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	46a2      	mov	sl, r4
 8007bc4:	eb19 090b 	adds.w	r9, r9, fp
 8007bc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007be0:	4689      	mov	r9, r1
 8007be2:	4692      	mov	sl, r2
 8007be4:	eb1b 0509 	adds.w	r5, fp, r9
 8007be8:	eb4c 060a 	adc.w	r6, ip, sl
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	0094      	lsls	r4, r2, #2
 8007c00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c04:	008b      	lsls	r3, r1, #2
 8007c06:	461a      	mov	r2, r3
 8007c08:	4623      	mov	r3, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	f7f9 f84d 	bl	8000cac <__aeabi_uldivmod>
 8007c12:	4603      	mov	r3, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	461a      	mov	r2, r3
 8007c18:	4b9c      	ldr	r3, [pc, #624]	; (8007e8c <UART_SetConfig+0x72c>)
 8007c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2164      	movs	r1, #100	; 0x64
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	3332      	adds	r3, #50	; 0x32
 8007c2c:	4a97      	ldr	r2, [pc, #604]	; (8007e8c <UART_SetConfig+0x72c>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c38:	4498      	add	r8, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	469b      	mov	fp, r3
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	46d9      	mov	r9, fp
 8007c44:	46e2      	mov	sl, ip
 8007c46:	eb19 0309 	adds.w	r3, r9, r9
 8007c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c4e:	4699      	mov	r9, r3
 8007c50:	46a2      	mov	sl, r4
 8007c52:	eb19 090b 	adds.w	r9, r9, fp
 8007c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c6e:	4689      	mov	r9, r1
 8007c70:	4692      	mov	sl, r2
 8007c72:	eb1b 0509 	adds.w	r5, fp, r9
 8007c76:	eb4c 060a 	adc.w	r6, ip, sl
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	0094      	lsls	r4, r2, #2
 8007c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4623      	mov	r3, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	f7f9 f806 	bl	8000cac <__aeabi_uldivmod>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4b79      	ldr	r3, [pc, #484]	; (8007e8c <UART_SetConfig+0x72c>)
 8007ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2164      	movs	r1, #100	; 0x64
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a74      	ldr	r2, [pc, #464]	; (8007e8c <UART_SetConfig+0x72c>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 020f 	and.w	r2, r3, #15
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4442      	add	r2, r8
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	e0d0      	b.n	8007e72 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fd fbdc 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8007cd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	469a      	mov	sl, r3
 8007cda:	f04f 0b00 	mov.w	fp, #0
 8007cde:	46d0      	mov	r8, sl
 8007ce0:	46d9      	mov	r9, fp
 8007ce2:	eb18 0308 	adds.w	r3, r8, r8
 8007ce6:	eb49 0409 	adc.w	r4, r9, r9
 8007cea:	4698      	mov	r8, r3
 8007cec:	46a1      	mov	r9, r4
 8007cee:	eb18 080a 	adds.w	r8, r8, sl
 8007cf2:	eb49 090b 	adc.w	r9, r9, fp
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d0a:	4688      	mov	r8, r1
 8007d0c:	4691      	mov	r9, r2
 8007d0e:	eb1a 0508 	adds.w	r5, sl, r8
 8007d12:	eb4b 0609 	adc.w	r6, fp, r9
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	0094      	lsls	r4, r2, #2
 8007d2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d2e:	008b      	lsls	r3, r1, #2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	4631      	mov	r1, r6
 8007d38:	f7f8 ffb8 	bl	8000cac <__aeabi_uldivmod>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b52      	ldr	r3, [pc, #328]	; (8007e8c <UART_SetConfig+0x72c>)
 8007d44:	fba3 2302 	umull	r2, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	469b      	mov	fp, r3
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	46d9      	mov	r9, fp
 8007d58:	46e2      	mov	sl, ip
 8007d5a:	eb19 0309 	adds.w	r3, r9, r9
 8007d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d62:	4699      	mov	r9, r3
 8007d64:	46a2      	mov	sl, r4
 8007d66:	eb19 090b 	adds.w	r9, r9, fp
 8007d6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d82:	4689      	mov	r9, r1
 8007d84:	4692      	mov	sl, r2
 8007d86:	eb1b 0509 	adds.w	r5, fp, r9
 8007d8a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	f04f 0400 	mov.w	r4, #0
 8007da0:	0094      	lsls	r4, r2, #2
 8007da2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007da6:	008b      	lsls	r3, r1, #2
 8007da8:	461a      	mov	r2, r3
 8007daa:	4623      	mov	r3, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	4631      	mov	r1, r6
 8007db0:	f7f8 ff7c 	bl	8000cac <__aeabi_uldivmod>
 8007db4:	4603      	mov	r3, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b34      	ldr	r3, [pc, #208]	; (8007e8c <UART_SetConfig+0x72c>)
 8007dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	2164      	movs	r1, #100	; 0x64
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	3332      	adds	r3, #50	; 0x32
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <UART_SetConfig+0x72c>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dda:	4498      	add	r8, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	469b      	mov	fp, r3
 8007de0:	f04f 0c00 	mov.w	ip, #0
 8007de4:	46d9      	mov	r9, fp
 8007de6:	46e2      	mov	sl, ip
 8007de8:	eb19 0309 	adds.w	r3, r9, r9
 8007dec:	eb4a 040a 	adc.w	r4, sl, sl
 8007df0:	4699      	mov	r9, r3
 8007df2:	46a2      	mov	sl, r4
 8007df4:	eb19 090b 	adds.w	r9, r9, fp
 8007df8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dfc:	f04f 0100 	mov.w	r1, #0
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e10:	4689      	mov	r9, r1
 8007e12:	4692      	mov	sl, r2
 8007e14:	eb1b 0509 	adds.w	r5, fp, r9
 8007e18:	eb4c 060a 	adc.w	r6, ip, sl
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4619      	mov	r1, r3
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	0094      	lsls	r4, r2, #2
 8007e30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e34:	008b      	lsls	r3, r1, #2
 8007e36:	461a      	mov	r2, r3
 8007e38:	4623      	mov	r3, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	f7f8 ff35 	bl	8000cac <__aeabi_uldivmod>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	461a      	mov	r2, r3
 8007e48:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <UART_SetConfig+0x72c>)
 8007e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	2164      	movs	r1, #100	; 0x64
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	3332      	adds	r3, #50	; 0x32
 8007e5c:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <UART_SetConfig+0x72c>)
 8007e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f003 020f 	and.w	r2, r3, #15
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4442      	add	r2, r8
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	e7ff      	b.n	8007e72 <UART_SetConfig+0x712>
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	40011000 	.word	0x40011000
 8007e80:	40011400 	.word	0x40011400
 8007e84:	40011800 	.word	0x40011800
 8007e88:	40011c00 	.word	0x40011c00
 8007e8c:	51eb851f 	.word	0x51eb851f

08007e90 <atoi>:
 8007e90:	220a      	movs	r2, #10
 8007e92:	2100      	movs	r1, #0
 8007e94:	f001 b920 	b.w	80090d8 <strtol>

08007e98 <__errno>:
 8007e98:	4b01      	ldr	r3, [pc, #4]	; (8007ea0 <__errno+0x8>)
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	2000000c 	.word	0x2000000c

08007ea4 <__libc_init_array>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0d      	ldr	r6, [pc, #52]	; (8007edc <__libc_init_array+0x38>)
 8007ea8:	4c0d      	ldr	r4, [pc, #52]	; (8007ee0 <__libc_init_array+0x3c>)
 8007eaa:	1ba4      	subs	r4, r4, r6
 8007eac:	10a4      	asrs	r4, r4, #2
 8007eae:	2500      	movs	r5, #0
 8007eb0:	42a5      	cmp	r5, r4
 8007eb2:	d109      	bne.n	8007ec8 <__libc_init_array+0x24>
 8007eb4:	4e0b      	ldr	r6, [pc, #44]	; (8007ee4 <__libc_init_array+0x40>)
 8007eb6:	4c0c      	ldr	r4, [pc, #48]	; (8007ee8 <__libc_init_array+0x44>)
 8007eb8:	f004 f862 	bl	800bf80 <_init>
 8007ebc:	1ba4      	subs	r4, r4, r6
 8007ebe:	10a4      	asrs	r4, r4, #2
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	42a5      	cmp	r5, r4
 8007ec4:	d105      	bne.n	8007ed2 <__libc_init_array+0x2e>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ecc:	4798      	blx	r3
 8007ece:	3501      	adds	r5, #1
 8007ed0:	e7ee      	b.n	8007eb0 <__libc_init_array+0xc>
 8007ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ed6:	4798      	blx	r3
 8007ed8:	3501      	adds	r5, #1
 8007eda:	e7f2      	b.n	8007ec2 <__libc_init_array+0x1e>
 8007edc:	0800c7ec 	.word	0x0800c7ec
 8007ee0:	0800c7ec 	.word	0x0800c7ec
 8007ee4:	0800c7ec 	.word	0x0800c7ec
 8007ee8:	0800c7f0 	.word	0x0800c7f0

08007eec <memcpy>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	1e43      	subs	r3, r0, #1
 8007ef0:	440a      	add	r2, r1
 8007ef2:	4291      	cmp	r1, r2
 8007ef4:	d100      	bne.n	8007ef8 <memcpy+0xc>
 8007ef6:	bd10      	pop	{r4, pc}
 8007ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f00:	e7f7      	b.n	8007ef2 <memcpy+0x6>

08007f02 <memset>:
 8007f02:	4402      	add	r2, r0
 8007f04:	4603      	mov	r3, r0
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d100      	bne.n	8007f0c <memset+0xa>
 8007f0a:	4770      	bx	lr
 8007f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f10:	e7f9      	b.n	8007f06 <memset+0x4>
	...

08007f14 <validate_structure>:
 8007f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f16:	6801      	ldr	r1, [r0, #0]
 8007f18:	293b      	cmp	r1, #59	; 0x3b
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	d911      	bls.n	8007f42 <validate_structure+0x2e>
 8007f1e:	223c      	movs	r2, #60	; 0x3c
 8007f20:	4668      	mov	r0, sp
 8007f22:	f001 fbdd 	bl	80096e0 <div>
 8007f26:	9a01      	ldr	r2, [sp, #4]
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	9900      	ldr	r1, [sp, #0]
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	440b      	add	r3, r1
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bfbb      	ittet	lt
 8007f34:	323c      	addlt	r2, #60	; 0x3c
 8007f36:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007f3a:	6022      	strge	r2, [r4, #0]
 8007f3c:	6022      	strlt	r2, [r4, #0]
 8007f3e:	bfb8      	it	lt
 8007f40:	6063      	strlt	r3, [r4, #4]
 8007f42:	6861      	ldr	r1, [r4, #4]
 8007f44:	293b      	cmp	r1, #59	; 0x3b
 8007f46:	d911      	bls.n	8007f6c <validate_structure+0x58>
 8007f48:	223c      	movs	r2, #60	; 0x3c
 8007f4a:	4668      	mov	r0, sp
 8007f4c:	f001 fbc8 	bl	80096e0 <div>
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	9900      	ldr	r1, [sp, #0]
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	440b      	add	r3, r1
 8007f5a:	60a3      	str	r3, [r4, #8]
 8007f5c:	bfbb      	ittet	lt
 8007f5e:	323c      	addlt	r2, #60	; 0x3c
 8007f60:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007f64:	6062      	strge	r2, [r4, #4]
 8007f66:	6062      	strlt	r2, [r4, #4]
 8007f68:	bfb8      	it	lt
 8007f6a:	60a3      	strlt	r3, [r4, #8]
 8007f6c:	68a1      	ldr	r1, [r4, #8]
 8007f6e:	2917      	cmp	r1, #23
 8007f70:	d911      	bls.n	8007f96 <validate_structure+0x82>
 8007f72:	2218      	movs	r2, #24
 8007f74:	4668      	mov	r0, sp
 8007f76:	f001 fbb3 	bl	80096e0 <div>
 8007f7a:	9a01      	ldr	r2, [sp, #4]
 8007f7c:	68e3      	ldr	r3, [r4, #12]
 8007f7e:	9900      	ldr	r1, [sp, #0]
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	440b      	add	r3, r1
 8007f84:	60e3      	str	r3, [r4, #12]
 8007f86:	bfbb      	ittet	lt
 8007f88:	3218      	addlt	r2, #24
 8007f8a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007f8e:	60a2      	strge	r2, [r4, #8]
 8007f90:	60a2      	strlt	r2, [r4, #8]
 8007f92:	bfb8      	it	lt
 8007f94:	60e3      	strlt	r3, [r4, #12]
 8007f96:	6921      	ldr	r1, [r4, #16]
 8007f98:	290b      	cmp	r1, #11
 8007f9a:	d911      	bls.n	8007fc0 <validate_structure+0xac>
 8007f9c:	220c      	movs	r2, #12
 8007f9e:	4668      	mov	r0, sp
 8007fa0:	f001 fb9e 	bl	80096e0 <div>
 8007fa4:	9a01      	ldr	r2, [sp, #4]
 8007fa6:	6963      	ldr	r3, [r4, #20]
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	440b      	add	r3, r1
 8007fae:	6163      	str	r3, [r4, #20]
 8007fb0:	bfbb      	ittet	lt
 8007fb2:	320c      	addlt	r2, #12
 8007fb4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007fb8:	6122      	strge	r2, [r4, #16]
 8007fba:	6122      	strlt	r2, [r4, #16]
 8007fbc:	bfb8      	it	lt
 8007fbe:	6163      	strlt	r3, [r4, #20]
 8007fc0:	6963      	ldr	r3, [r4, #20]
 8007fc2:	0799      	lsls	r1, r3, #30
 8007fc4:	d120      	bne.n	8008008 <validate_structure+0xf4>
 8007fc6:	2164      	movs	r1, #100	; 0x64
 8007fc8:	fb93 f2f1 	sdiv	r2, r3, r1
 8007fcc:	fb01 3212 	mls	r2, r1, r2, r3
 8007fd0:	b9e2      	cbnz	r2, 800800c <validate_structure+0xf8>
 8007fd2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007fd6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007fda:	fb93 f2f1 	sdiv	r2, r3, r1
 8007fde:	fb01 3312 	mls	r3, r1, r2, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	231c      	movne	r3, #28
 8007fe8:	231d      	moveq	r3, #29
 8007fea:	68e2      	ldr	r2, [r4, #12]
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	dc0f      	bgt.n	8008010 <validate_structure+0xfc>
 8007ff0:	4f34      	ldr	r7, [pc, #208]	; (80080c4 <validate_structure+0x1b0>)
 8007ff2:	260b      	movs	r6, #11
 8007ff4:	2064      	movs	r0, #100	; 0x64
 8007ff6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007ffa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007ffe:	f1bc 0f00 	cmp.w	ip, #0
 8008002:	dd14      	ble.n	800802e <validate_structure+0x11a>
 8008004:	b003      	add	sp, #12
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	231c      	movs	r3, #28
 800800a:	e7ee      	b.n	8007fea <validate_structure+0xd6>
 800800c:	231d      	movs	r3, #29
 800800e:	e7ec      	b.n	8007fea <validate_structure+0xd6>
 8008010:	4f2c      	ldr	r7, [pc, #176]	; (80080c4 <validate_structure+0x1b0>)
 8008012:	f04f 0c00 	mov.w	ip, #0
 8008016:	2564      	movs	r5, #100	; 0x64
 8008018:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800801c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008020:	2a01      	cmp	r2, #1
 8008022:	d02f      	beq.n	8008084 <validate_structure+0x170>
 8008024:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8008028:	4281      	cmp	r1, r0
 800802a:	dc2e      	bgt.n	800808a <validate_structure+0x176>
 800802c:	e7ea      	b.n	8008004 <validate_structure+0xf0>
 800802e:	6921      	ldr	r1, [r4, #16]
 8008030:	3901      	subs	r1, #1
 8008032:	6121      	str	r1, [r4, #16]
 8008034:	3101      	adds	r1, #1
 8008036:	d114      	bne.n	8008062 <validate_structure+0x14e>
 8008038:	6963      	ldr	r3, [r4, #20]
 800803a:	1e59      	subs	r1, r3, #1
 800803c:	078a      	lsls	r2, r1, #30
 800803e:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8008042:	d117      	bne.n	8008074 <validate_structure+0x160>
 8008044:	fb91 f2f0 	sdiv	r2, r1, r0
 8008048:	fb00 1112 	mls	r1, r0, r2, r1
 800804c:	b9a1      	cbnz	r1, 8008078 <validate_structure+0x164>
 800804e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008052:	fb93 f2f5 	sdiv	r2, r3, r5
 8008056:	fb05 3312 	mls	r3, r5, r2, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	bf14      	ite	ne
 800805e:	231c      	movne	r3, #28
 8008060:	231d      	moveq	r3, #29
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	2a01      	cmp	r2, #1
 8008066:	bf14      	ite	ne
 8008068:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800806c:	461a      	moveq	r2, r3
 800806e:	4462      	add	r2, ip
 8008070:	60e2      	str	r2, [r4, #12]
 8008072:	e7c2      	b.n	8007ffa <validate_structure+0xe6>
 8008074:	231c      	movs	r3, #28
 8008076:	e7f4      	b.n	8008062 <validate_structure+0x14e>
 8008078:	231d      	movs	r3, #29
 800807a:	e7f2      	b.n	8008062 <validate_structure+0x14e>
 800807c:	231c      	movs	r3, #28
 800807e:	e7cd      	b.n	800801c <validate_structure+0x108>
 8008080:	231d      	movs	r3, #29
 8008082:	e7cb      	b.n	800801c <validate_structure+0x108>
 8008084:	428b      	cmp	r3, r1
 8008086:	dabd      	bge.n	8008004 <validate_structure+0xf0>
 8008088:	4618      	mov	r0, r3
 800808a:	3201      	adds	r2, #1
 800808c:	1a09      	subs	r1, r1, r0
 800808e:	2a0c      	cmp	r2, #12
 8008090:	60e1      	str	r1, [r4, #12]
 8008092:	6122      	str	r2, [r4, #16]
 8008094:	d1c2      	bne.n	800801c <validate_structure+0x108>
 8008096:	6963      	ldr	r3, [r4, #20]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	0791      	lsls	r1, r2, #30
 800809c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80080a0:	d1ec      	bne.n	800807c <validate_structure+0x168>
 80080a2:	fb92 f1f5 	sdiv	r1, r2, r5
 80080a6:	fb05 2211 	mls	r2, r5, r1, r2
 80080aa:	2a00      	cmp	r2, #0
 80080ac:	d1e8      	bne.n	8008080 <validate_structure+0x16c>
 80080ae:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80080b2:	fb93 f2f6 	sdiv	r2, r3, r6
 80080b6:	fb06 3312 	mls	r3, r6, r2, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	231c      	movne	r3, #28
 80080c0:	231d      	moveq	r3, #29
 80080c2:	e7ab      	b.n	800801c <validate_structure+0x108>
 80080c4:	0800c410 	.word	0x0800c410

080080c8 <mktime>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	b089      	sub	sp, #36	; 0x24
 80080ce:	4606      	mov	r6, r0
 80080d0:	f002 fb1c 	bl	800a70c <__gettzinfo>
 80080d4:	4680      	mov	r8, r0
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff1c 	bl	8007f14 <validate_structure>
 80080dc:	e9d6 3000 	ldrd	r3, r0, [r6]
 80080e0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80080e4:	fb0a 3a00 	mla	sl, sl, r0, r3
 80080e8:	68b0      	ldr	r0, [r6, #8]
 80080ea:	4abe      	ldr	r2, [pc, #760]	; (80083e4 <mktime+0x31c>)
 80080ec:	6975      	ldr	r5, [r6, #20]
 80080ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80080f2:	fb03 aa00 	mla	sl, r3, r0, sl
 80080f6:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 80080fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080fe:	3c01      	subs	r4, #1
 8008100:	2b01      	cmp	r3, #1
 8008102:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8008106:	4414      	add	r4, r2
 8008108:	dd11      	ble.n	800812e <mktime+0x66>
 800810a:	07a9      	lsls	r1, r5, #30
 800810c:	d10f      	bne.n	800812e <mktime+0x66>
 800810e:	2264      	movs	r2, #100	; 0x64
 8008110:	fb95 f3f2 	sdiv	r3, r5, r2
 8008114:	fb02 5313 	mls	r3, r2, r3, r5
 8008118:	b943      	cbnz	r3, 800812c <mktime+0x64>
 800811a:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800811e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008122:	fb91 f3f2 	sdiv	r3, r1, r2
 8008126:	fb02 1313 	mls	r3, r2, r3, r1
 800812a:	b903      	cbnz	r3, 800812e <mktime+0x66>
 800812c:	3401      	adds	r4, #1
 800812e:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8008132:	3310      	adds	r3, #16
 8008134:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008138:	4293      	cmp	r3, r2
 800813a:	61f4      	str	r4, [r6, #28]
 800813c:	f200 8179 	bhi.w	8008432 <mktime+0x36a>
 8008140:	2d46      	cmp	r5, #70	; 0x46
 8008142:	f340 8084 	ble.w	800824e <mktime+0x186>
 8008146:	2346      	movs	r3, #70	; 0x46
 8008148:	f240 176d 	movw	r7, #365	; 0x16d
 800814c:	2164      	movs	r1, #100	; 0x64
 800814e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008152:	079a      	lsls	r2, r3, #30
 8008154:	d175      	bne.n	8008242 <mktime+0x17a>
 8008156:	fb93 f2f1 	sdiv	r2, r3, r1
 800815a:	fb01 3212 	mls	r2, r1, r2, r3
 800815e:	2a00      	cmp	r2, #0
 8008160:	d172      	bne.n	8008248 <mktime+0x180>
 8008162:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8008166:	fb9c f2f0 	sdiv	r2, ip, r0
 800816a:	fb00 c212 	mls	r2, r0, r2, ip
 800816e:	2a00      	cmp	r2, #0
 8008170:	bf14      	ite	ne
 8008172:	463a      	movne	r2, r7
 8008174:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008178:	3301      	adds	r3, #1
 800817a:	429d      	cmp	r5, r3
 800817c:	4414      	add	r4, r2
 800817e:	d1e8      	bne.n	8008152 <mktime+0x8a>
 8008180:	4b99      	ldr	r3, [pc, #612]	; (80083e8 <mktime+0x320>)
 8008182:	4363      	muls	r3, r4
 8008184:	eb1a 0103 	adds.w	r1, sl, r3
 8008188:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 800818c:	e9cd 1200 	strd	r1, r2, [sp]
 8008190:	f001 f860 	bl	8009254 <__tz_lock>
 8008194:	f001 f860 	bl	8009258 <_tzset_unlocked>
 8008198:	4b94      	ldr	r3, [pc, #592]	; (80083ec <mktime+0x324>)
 800819a:	f8d3 9000 	ldr.w	r9, [r3]
 800819e:	f1b9 0f00 	cmp.w	r9, #0
 80081a2:	d045      	beq.n	8008230 <mktime+0x168>
 80081a4:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80081a8:	6970      	ldr	r0, [r6, #20]
 80081aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081ae:	464f      	mov	r7, r9
 80081b0:	2f01      	cmp	r7, #1
 80081b2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80081b6:	bfa8      	it	ge
 80081b8:	2701      	movge	r7, #1
 80081ba:	4283      	cmp	r3, r0
 80081bc:	f040 8089 	bne.w	80082d2 <mktime+0x20a>
 80081c0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80081c4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80081c8:	460a      	mov	r2, r1
 80081ca:	17cb      	asrs	r3, r1, #31
 80081cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081d0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80081d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081d8:	1a12      	subs	r2, r2, r0
 80081da:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 80081de:	4692      	mov	sl, r2
 80081e0:	469b      	mov	fp, r3
 80081e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e6:	4552      	cmp	r2, sl
 80081e8:	eb73 0c0b 	sbcs.w	ip, r3, fp
 80081ec:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80081f0:	da76      	bge.n	80082e0 <mktime+0x218>
 80081f2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80081f6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081fa:	ebb2 0a0a 	subs.w	sl, r2, sl
 80081fe:	eb63 0b0b 	sbc.w	fp, r3, fp
 8008202:	f8d8 3000 	ldr.w	r3, [r8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d079      	beq.n	80082fe <mktime+0x236>
 800820a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800820e:	4552      	cmp	r2, sl
 8008210:	eb73 030b 	sbcs.w	r3, r3, fp
 8008214:	db07      	blt.n	8008226 <mktime+0x15e>
 8008216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800821a:	e9dd ab00 	ldrd	sl, fp, [sp]
 800821e:	4592      	cmp	sl, r2
 8008220:	eb7b 0303 	sbcs.w	r3, fp, r3
 8008224:	db71      	blt.n	800830a <mktime+0x242>
 8008226:	f1b9 0f00 	cmp.w	r9, #0
 800822a:	f04f 0900 	mov.w	r9, #0
 800822e:	da71      	bge.n	8008314 <mktime+0x24c>
 8008230:	e9dd ab00 	ldrd	sl, fp, [sp]
 8008234:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8008238:	eb1a 0a03 	adds.w	sl, sl, r3
 800823c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8008240:	e0b4      	b.n	80083ac <mktime+0x2e4>
 8008242:	f240 126d 	movw	r2, #365	; 0x16d
 8008246:	e797      	b.n	8008178 <mktime+0xb0>
 8008248:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800824c:	e794      	b.n	8008178 <mktime+0xb0>
 800824e:	d097      	beq.n	8008180 <mktime+0xb8>
 8008250:	2345      	movs	r3, #69	; 0x45
 8008252:	f240 176d 	movw	r7, #365	; 0x16d
 8008256:	2164      	movs	r1, #100	; 0x64
 8008258:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800825c:	e012      	b.n	8008284 <mktime+0x1bc>
 800825e:	bb62      	cbnz	r2, 80082ba <mktime+0x1f2>
 8008260:	fb93 f2f1 	sdiv	r2, r3, r1
 8008264:	fb01 3212 	mls	r2, r1, r2, r3
 8008268:	bb52      	cbnz	r2, 80082c0 <mktime+0x1f8>
 800826a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800826e:	fb9c f2f0 	sdiv	r2, ip, r0
 8008272:	fb00 c212 	mls	r2, r0, r2, ip
 8008276:	2a00      	cmp	r2, #0
 8008278:	bf14      	ite	ne
 800827a:	463a      	movne	r2, r7
 800827c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008280:	1aa4      	subs	r4, r4, r2
 8008282:	3b01      	subs	r3, #1
 8008284:	429d      	cmp	r5, r3
 8008286:	f003 0203 	and.w	r2, r3, #3
 800828a:	dbe8      	blt.n	800825e <mktime+0x196>
 800828c:	b9da      	cbnz	r2, 80082c6 <mktime+0x1fe>
 800828e:	2264      	movs	r2, #100	; 0x64
 8008290:	fb95 f3f2 	sdiv	r3, r5, r2
 8008294:	fb02 5313 	mls	r3, r2, r3, r5
 8008298:	b9c3      	cbnz	r3, 80082cc <mktime+0x204>
 800829a:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800829e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80082a2:	fb91 f3f2 	sdiv	r3, r1, r2
 80082a6:	fb02 1313 	mls	r3, r2, r3, r1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f240 136d 	movw	r3, #365	; 0x16d
 80082b0:	bf08      	it	eq
 80082b2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80082b6:	1ae4      	subs	r4, r4, r3
 80082b8:	e762      	b.n	8008180 <mktime+0xb8>
 80082ba:	f240 126d 	movw	r2, #365	; 0x16d
 80082be:	e7df      	b.n	8008280 <mktime+0x1b8>
 80082c0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80082c4:	e7dc      	b.n	8008280 <mktime+0x1b8>
 80082c6:	f240 136d 	movw	r3, #365	; 0x16d
 80082ca:	e7f4      	b.n	80082b6 <mktime+0x1ee>
 80082cc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80082d0:	e7f1      	b.n	80082b6 <mktime+0x1ee>
 80082d2:	f000 ff17 	bl	8009104 <__tzcalc_limits>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f47f af72 	bne.w	80081c0 <mktime+0xf8>
 80082dc:	46b9      	mov	r9, r7
 80082de:	e057      	b.n	8008390 <mktime+0x2c8>
 80082e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80082e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082e8:	ebb2 020a 	subs.w	r2, r2, sl
 80082ec:	eb63 030b 	sbc.w	r3, r3, fp
 80082f0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80082f4:	4592      	cmp	sl, r2
 80082f6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80082fa:	dbef      	blt.n	80082dc <mktime+0x214>
 80082fc:	e779      	b.n	80081f2 <mktime+0x12a>
 80082fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008302:	4552      	cmp	r2, sl
 8008304:	eb73 030b 	sbcs.w	r3, r3, fp
 8008308:	db85      	blt.n	8008216 <mktime+0x14e>
 800830a:	f1b9 0f00 	cmp.w	r9, #0
 800830e:	db43      	blt.n	8008398 <mktime+0x2d0>
 8008310:	f04f 0901 	mov.w	r9, #1
 8008314:	ea87 0709 	eor.w	r7, r7, r9
 8008318:	2f01      	cmp	r7, #1
 800831a:	d139      	bne.n	8008390 <mktime+0x2c8>
 800831c:	1a40      	subs	r0, r0, r1
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d100      	bne.n	8008326 <mktime+0x25e>
 8008324:	4240      	negs	r0, r0
 8008326:	6833      	ldr	r3, [r6, #0]
 8008328:	4403      	add	r3, r0
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008330:	1812      	adds	r2, r2, r0
 8008332:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8008336:	e9cd 2300 	strd	r2, r3, [sp]
 800833a:	4630      	mov	r0, r6
 800833c:	68f2      	ldr	r2, [r6, #12]
 800833e:	9202      	str	r2, [sp, #8]
 8008340:	f7ff fde8 	bl	8007f14 <validate_structure>
 8008344:	68f3      	ldr	r3, [r6, #12]
 8008346:	9a02      	ldr	r2, [sp, #8]
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	d021      	beq.n	8008390 <mktime+0x2c8>
 800834c:	2b01      	cmp	r3, #1
 800834e:	dc40      	bgt.n	80083d2 <mktime+0x30a>
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	bfa8      	it	ge
 8008356:	461f      	movge	r7, r3
 8008358:	69f3      	ldr	r3, [r6, #28]
 800835a:	443c      	add	r4, r7
 800835c:	18ff      	adds	r7, r7, r3
 800835e:	d547      	bpl.n	80083f0 <mktime+0x328>
 8008360:	1e6a      	subs	r2, r5, #1
 8008362:	0791      	lsls	r1, r2, #30
 8008364:	d138      	bne.n	80083d8 <mktime+0x310>
 8008366:	2164      	movs	r1, #100	; 0x64
 8008368:	fb92 f3f1 	sdiv	r3, r2, r1
 800836c:	fb01 2313 	mls	r3, r1, r3, r2
 8008370:	bbab      	cbnz	r3, 80083de <mktime+0x316>
 8008372:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8008376:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800837a:	fb95 f3f2 	sdiv	r3, r5, r2
 800837e:	fb02 5513 	mls	r5, r2, r3, r5
 8008382:	2d00      	cmp	r5, #0
 8008384:	f240 136d 	movw	r3, #365	; 0x16d
 8008388:	bf18      	it	ne
 800838a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800838e:	61f3      	str	r3, [r6, #28]
 8008390:	f1b9 0f01 	cmp.w	r9, #1
 8008394:	f47f af4c 	bne.w	8008230 <mktime+0x168>
 8008398:	e9dd ab00 	ldrd	sl, fp, [sp]
 800839c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80083a0:	eb1a 0a03 	adds.w	sl, sl, r3
 80083a4:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80083a8:	f04f 0901 	mov.w	r9, #1
 80083ac:	f000 ff53 	bl	8009256 <__tz_unlock>
 80083b0:	3404      	adds	r4, #4
 80083b2:	2307      	movs	r3, #7
 80083b4:	fb94 f3f3 	sdiv	r3, r4, r3
 80083b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80083bc:	1ae4      	subs	r4, r4, r3
 80083be:	bf48      	it	mi
 80083c0:	3407      	addmi	r4, #7
 80083c2:	f8c6 9020 	str.w	r9, [r6, #32]
 80083c6:	61b4      	str	r4, [r6, #24]
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	b009      	add	sp, #36	; 0x24
 80083ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d2:	f04f 37ff 	mov.w	r7, #4294967295
 80083d6:	e7bf      	b.n	8008358 <mktime+0x290>
 80083d8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80083dc:	e7d7      	b.n	800838e <mktime+0x2c6>
 80083de:	f240 136d 	movw	r3, #365	; 0x16d
 80083e2:	e7d4      	b.n	800838e <mktime+0x2c6>
 80083e4:	0800c440 	.word	0x0800c440
 80083e8:	00015180 	.word	0x00015180
 80083ec:	20007d54 	.word	0x20007d54
 80083f0:	07ab      	lsls	r3, r5, #30
 80083f2:	d118      	bne.n	8008426 <mktime+0x35e>
 80083f4:	2264      	movs	r2, #100	; 0x64
 80083f6:	fb95 f3f2 	sdiv	r3, r5, r2
 80083fa:	fb02 5313 	mls	r3, r2, r3, r5
 80083fe:	b9ab      	cbnz	r3, 800842c <mktime+0x364>
 8008400:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8008404:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008408:	fb95 f3f2 	sdiv	r3, r5, r2
 800840c:	fb02 5513 	mls	r5, r2, r3, r5
 8008410:	2d00      	cmp	r5, #0
 8008412:	f240 136d 	movw	r3, #365	; 0x16d
 8008416:	bf08      	it	eq
 8008418:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800841c:	429f      	cmp	r7, r3
 800841e:	bfa8      	it	ge
 8008420:	1aff      	subge	r7, r7, r3
 8008422:	61f7      	str	r7, [r6, #28]
 8008424:	e7b4      	b.n	8008390 <mktime+0x2c8>
 8008426:	f240 136d 	movw	r3, #365	; 0x16d
 800842a:	e7f7      	b.n	800841c <mktime+0x354>
 800842c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008430:	e7f4      	b.n	800841c <mktime+0x354>
 8008432:	f04f 3aff 	mov.w	sl, #4294967295
 8008436:	f04f 3bff 	mov.w	fp, #4294967295
 800843a:	e7c5      	b.n	80083c8 <mktime+0x300>

0800843c <__cvt>:
 800843c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	ec55 4b10 	vmov	r4, r5, d0
 8008444:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008446:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800844a:	2d00      	cmp	r5, #0
 800844c:	460e      	mov	r6, r1
 800844e:	4691      	mov	r9, r2
 8008450:	4619      	mov	r1, r3
 8008452:	bfb8      	it	lt
 8008454:	4622      	movlt	r2, r4
 8008456:	462b      	mov	r3, r5
 8008458:	f027 0720 	bic.w	r7, r7, #32
 800845c:	bfbb      	ittet	lt
 800845e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008462:	461d      	movlt	r5, r3
 8008464:	2300      	movge	r3, #0
 8008466:	232d      	movlt	r3, #45	; 0x2d
 8008468:	bfb8      	it	lt
 800846a:	4614      	movlt	r4, r2
 800846c:	2f46      	cmp	r7, #70	; 0x46
 800846e:	700b      	strb	r3, [r1, #0]
 8008470:	d004      	beq.n	800847c <__cvt+0x40>
 8008472:	2f45      	cmp	r7, #69	; 0x45
 8008474:	d100      	bne.n	8008478 <__cvt+0x3c>
 8008476:	3601      	adds	r6, #1
 8008478:	2102      	movs	r1, #2
 800847a:	e000      	b.n	800847e <__cvt+0x42>
 800847c:	2103      	movs	r1, #3
 800847e:	ab03      	add	r3, sp, #12
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	ab02      	add	r3, sp, #8
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4632      	mov	r2, r6
 8008488:	4653      	mov	r3, sl
 800848a:	ec45 4b10 	vmov	d0, r4, r5
 800848e:	f001 f9c7 	bl	8009820 <_dtoa_r>
 8008492:	2f47      	cmp	r7, #71	; 0x47
 8008494:	4680      	mov	r8, r0
 8008496:	d102      	bne.n	800849e <__cvt+0x62>
 8008498:	f019 0f01 	tst.w	r9, #1
 800849c:	d026      	beq.n	80084ec <__cvt+0xb0>
 800849e:	2f46      	cmp	r7, #70	; 0x46
 80084a0:	eb08 0906 	add.w	r9, r8, r6
 80084a4:	d111      	bne.n	80084ca <__cvt+0x8e>
 80084a6:	f898 3000 	ldrb.w	r3, [r8]
 80084aa:	2b30      	cmp	r3, #48	; 0x30
 80084ac:	d10a      	bne.n	80084c4 <__cvt+0x88>
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 fb39 	bl	8000b2c <__aeabi_dcmpeq>
 80084ba:	b918      	cbnz	r0, 80084c4 <__cvt+0x88>
 80084bc:	f1c6 0601 	rsb	r6, r6, #1
 80084c0:	f8ca 6000 	str.w	r6, [sl]
 80084c4:	f8da 3000 	ldr.w	r3, [sl]
 80084c8:	4499      	add	r9, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 fb2b 	bl	8000b2c <__aeabi_dcmpeq>
 80084d6:	b938      	cbnz	r0, 80084e8 <__cvt+0xac>
 80084d8:	2230      	movs	r2, #48	; 0x30
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	454b      	cmp	r3, r9
 80084de:	d205      	bcs.n	80084ec <__cvt+0xb0>
 80084e0:	1c59      	adds	r1, r3, #1
 80084e2:	9103      	str	r1, [sp, #12]
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	e7f8      	b.n	80084da <__cvt+0x9e>
 80084e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f0:	eba3 0308 	sub.w	r3, r3, r8
 80084f4:	4640      	mov	r0, r8
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	b004      	add	sp, #16
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084fe <__exponent>:
 80084fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008500:	2900      	cmp	r1, #0
 8008502:	4604      	mov	r4, r0
 8008504:	bfba      	itte	lt
 8008506:	4249      	neglt	r1, r1
 8008508:	232d      	movlt	r3, #45	; 0x2d
 800850a:	232b      	movge	r3, #43	; 0x2b
 800850c:	2909      	cmp	r1, #9
 800850e:	f804 2b02 	strb.w	r2, [r4], #2
 8008512:	7043      	strb	r3, [r0, #1]
 8008514:	dd20      	ble.n	8008558 <__exponent+0x5a>
 8008516:	f10d 0307 	add.w	r3, sp, #7
 800851a:	461f      	mov	r7, r3
 800851c:	260a      	movs	r6, #10
 800851e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008522:	fb06 1115 	mls	r1, r6, r5, r1
 8008526:	3130      	adds	r1, #48	; 0x30
 8008528:	2d09      	cmp	r5, #9
 800852a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800852e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008532:	4629      	mov	r1, r5
 8008534:	dc09      	bgt.n	800854a <__exponent+0x4c>
 8008536:	3130      	adds	r1, #48	; 0x30
 8008538:	3b02      	subs	r3, #2
 800853a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800853e:	42bb      	cmp	r3, r7
 8008540:	4622      	mov	r2, r4
 8008542:	d304      	bcc.n	800854e <__exponent+0x50>
 8008544:	1a10      	subs	r0, r2, r0
 8008546:	b003      	add	sp, #12
 8008548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854a:	4613      	mov	r3, r2
 800854c:	e7e7      	b.n	800851e <__exponent+0x20>
 800854e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008552:	f804 2b01 	strb.w	r2, [r4], #1
 8008556:	e7f2      	b.n	800853e <__exponent+0x40>
 8008558:	2330      	movs	r3, #48	; 0x30
 800855a:	4419      	add	r1, r3
 800855c:	7083      	strb	r3, [r0, #2]
 800855e:	1d02      	adds	r2, r0, #4
 8008560:	70c1      	strb	r1, [r0, #3]
 8008562:	e7ef      	b.n	8008544 <__exponent+0x46>

08008564 <_printf_float>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	b08d      	sub	sp, #52	; 0x34
 800856a:	460c      	mov	r4, r1
 800856c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008570:	4616      	mov	r6, r2
 8008572:	461f      	mov	r7, r3
 8008574:	4605      	mov	r5, r0
 8008576:	f002 f8df 	bl	800a738 <_localeconv_r>
 800857a:	6803      	ldr	r3, [r0, #0]
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	4618      	mov	r0, r3
 8008580:	f7f7 fe4e 	bl	8000220 <strlen>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	; 0x28
 8008588:	f8d8 3000 	ldr.w	r3, [r8]
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	3307      	adds	r3, #7
 8008590:	f023 0307 	bic.w	r3, r3, #7
 8008594:	f103 0208 	add.w	r2, r3, #8
 8008598:	f894 a018 	ldrb.w	sl, [r4, #24]
 800859c:	f8d4 b000 	ldr.w	fp, [r4]
 80085a0:	f8c8 2000 	str.w	r2, [r8]
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085b4:	9307      	str	r3, [sp, #28]
 80085b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	4ba7      	ldr	r3, [pc, #668]	; (800885c <_printf_float+0x2f8>)
 80085c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085c4:	f7f8 fae4 	bl	8000b90 <__aeabi_dcmpun>
 80085c8:	bb70      	cbnz	r0, 8008628 <_printf_float+0xc4>
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	4ba3      	ldr	r3, [pc, #652]	; (800885c <_printf_float+0x2f8>)
 80085d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d4:	f7f8 fabe 	bl	8000b54 <__aeabi_dcmple>
 80085d8:	bb30      	cbnz	r0, 8008628 <_printf_float+0xc4>
 80085da:	2200      	movs	r2, #0
 80085dc:	2300      	movs	r3, #0
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f8 faad 	bl	8000b40 <__aeabi_dcmplt>
 80085e6:	b110      	cbz	r0, 80085ee <_printf_float+0x8a>
 80085e8:	232d      	movs	r3, #45	; 0x2d
 80085ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ee:	4a9c      	ldr	r2, [pc, #624]	; (8008860 <_printf_float+0x2fc>)
 80085f0:	4b9c      	ldr	r3, [pc, #624]	; (8008864 <_printf_float+0x300>)
 80085f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80085f6:	bf8c      	ite	hi
 80085f8:	4690      	movhi	r8, r2
 80085fa:	4698      	movls	r8, r3
 80085fc:	2303      	movs	r3, #3
 80085fe:	f02b 0204 	bic.w	r2, fp, #4
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	f04f 0900 	mov.w	r9, #0
 800860a:	9700      	str	r7, [sp, #0]
 800860c:	4633      	mov	r3, r6
 800860e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f000 f9e6 	bl	80089e4 <_printf_common>
 8008618:	3001      	adds	r0, #1
 800861a:	f040 808d 	bne.w	8008738 <_printf_float+0x1d4>
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	b00d      	add	sp, #52	; 0x34
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	4642      	mov	r2, r8
 800862a:	464b      	mov	r3, r9
 800862c:	4640      	mov	r0, r8
 800862e:	4649      	mov	r1, r9
 8008630:	f7f8 faae 	bl	8000b90 <__aeabi_dcmpun>
 8008634:	b110      	cbz	r0, 800863c <_printf_float+0xd8>
 8008636:	4a8c      	ldr	r2, [pc, #560]	; (8008868 <_printf_float+0x304>)
 8008638:	4b8c      	ldr	r3, [pc, #560]	; (800886c <_printf_float+0x308>)
 800863a:	e7da      	b.n	80085f2 <_printf_float+0x8e>
 800863c:	6861      	ldr	r1, [r4, #4]
 800863e:	1c4b      	adds	r3, r1, #1
 8008640:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008644:	a80a      	add	r0, sp, #40	; 0x28
 8008646:	d13e      	bne.n	80086c6 <_printf_float+0x162>
 8008648:	2306      	movs	r3, #6
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	2300      	movs	r3, #0
 800864e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008652:	ab09      	add	r3, sp, #36	; 0x24
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	ec49 8b10 	vmov	d0, r8, r9
 800865a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	f8cd a004 	str.w	sl, [sp, #4]
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	4628      	mov	r0, r5
 8008668:	f7ff fee8 	bl	800843c <__cvt>
 800866c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008670:	2b47      	cmp	r3, #71	; 0x47
 8008672:	4680      	mov	r8, r0
 8008674:	d109      	bne.n	800868a <_printf_float+0x126>
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	1cd8      	adds	r0, r3, #3
 800867a:	db02      	blt.n	8008682 <_printf_float+0x11e>
 800867c:	6862      	ldr	r2, [r4, #4]
 800867e:	4293      	cmp	r3, r2
 8008680:	dd47      	ble.n	8008712 <_printf_float+0x1ae>
 8008682:	f1aa 0a02 	sub.w	sl, sl, #2
 8008686:	fa5f fa8a 	uxtb.w	sl, sl
 800868a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800868e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008690:	d824      	bhi.n	80086dc <_printf_float+0x178>
 8008692:	3901      	subs	r1, #1
 8008694:	4652      	mov	r2, sl
 8008696:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800869a:	9109      	str	r1, [sp, #36]	; 0x24
 800869c:	f7ff ff2f 	bl	80084fe <__exponent>
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	1813      	adds	r3, r2, r0
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	4681      	mov	r9, r0
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	dc02      	bgt.n	80086b2 <_printf_float+0x14e>
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	07d1      	lsls	r1, r2, #31
 80086b0:	d501      	bpl.n	80086b6 <_printf_float+0x152>
 80086b2:	3301      	adds	r3, #1
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0a5      	beq.n	800860a <_printf_float+0xa6>
 80086be:	232d      	movs	r3, #45	; 0x2d
 80086c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c4:	e7a1      	b.n	800860a <_printf_float+0xa6>
 80086c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80086ca:	f000 8177 	beq.w	80089bc <_printf_float+0x458>
 80086ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086d2:	d1bb      	bne.n	800864c <_printf_float+0xe8>
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d1b9      	bne.n	800864c <_printf_float+0xe8>
 80086d8:	2301      	movs	r3, #1
 80086da:	e7b6      	b.n	800864a <_printf_float+0xe6>
 80086dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80086e0:	d119      	bne.n	8008716 <_printf_float+0x1b2>
 80086e2:	2900      	cmp	r1, #0
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	dd0c      	ble.n	8008702 <_printf_float+0x19e>
 80086e8:	6121      	str	r1, [r4, #16]
 80086ea:	b913      	cbnz	r3, 80086f2 <_printf_float+0x18e>
 80086ec:	6822      	ldr	r2, [r4, #0]
 80086ee:	07d2      	lsls	r2, r2, #31
 80086f0:	d502      	bpl.n	80086f8 <_printf_float+0x194>
 80086f2:	3301      	adds	r3, #1
 80086f4:	440b      	add	r3, r1
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80086fc:	f04f 0900 	mov.w	r9, #0
 8008700:	e7d9      	b.n	80086b6 <_printf_float+0x152>
 8008702:	b913      	cbnz	r3, 800870a <_printf_float+0x1a6>
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	07d0      	lsls	r0, r2, #31
 8008708:	d501      	bpl.n	800870e <_printf_float+0x1aa>
 800870a:	3302      	adds	r3, #2
 800870c:	e7f3      	b.n	80086f6 <_printf_float+0x192>
 800870e:	2301      	movs	r3, #1
 8008710:	e7f1      	b.n	80086f6 <_printf_float+0x192>
 8008712:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008716:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800871a:	4293      	cmp	r3, r2
 800871c:	db05      	blt.n	800872a <_printf_float+0x1c6>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	07d1      	lsls	r1, r2, #31
 8008724:	d5e8      	bpl.n	80086f8 <_printf_float+0x194>
 8008726:	3301      	adds	r3, #1
 8008728:	e7e5      	b.n	80086f6 <_printf_float+0x192>
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfd4      	ite	le
 800872e:	f1c3 0302 	rsble	r3, r3, #2
 8008732:	2301      	movgt	r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	e7de      	b.n	80086f6 <_printf_float+0x192>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	055a      	lsls	r2, r3, #21
 800873c:	d407      	bmi.n	800874e <_printf_float+0x1ea>
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	4642      	mov	r2, r8
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	d12b      	bne.n	80087a4 <_printf_float+0x240>
 800874c:	e767      	b.n	800861e <_printf_float+0xba>
 800874e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008752:	f240 80dc 	bls.w	800890e <_printf_float+0x3aa>
 8008756:	2200      	movs	r2, #0
 8008758:	2300      	movs	r3, #0
 800875a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800875e:	f7f8 f9e5 	bl	8000b2c <__aeabi_dcmpeq>
 8008762:	2800      	cmp	r0, #0
 8008764:	d033      	beq.n	80087ce <_printf_float+0x26a>
 8008766:	2301      	movs	r3, #1
 8008768:	4a41      	ldr	r2, [pc, #260]	; (8008870 <_printf_float+0x30c>)
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f af54 	beq.w	800861e <_printf_float+0xba>
 8008776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800877a:	429a      	cmp	r2, r3
 800877c:	db02      	blt.n	8008784 <_printf_float+0x220>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	07d8      	lsls	r0, r3, #31
 8008782:	d50f      	bpl.n	80087a4 <_printf_float+0x240>
 8008784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	f43f af45 	beq.w	800861e <_printf_float+0xba>
 8008794:	f04f 0800 	mov.w	r8, #0
 8008798:	f104 091a 	add.w	r9, r4, #26
 800879c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879e:	3b01      	subs	r3, #1
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dc09      	bgt.n	80087b8 <_printf_float+0x254>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	079b      	lsls	r3, r3, #30
 80087a8:	f100 8103 	bmi.w	80089b2 <_printf_float+0x44e>
 80087ac:	68e0      	ldr	r0, [r4, #12]
 80087ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b0:	4298      	cmp	r0, r3
 80087b2:	bfb8      	it	lt
 80087b4:	4618      	movlt	r0, r3
 80087b6:	e734      	b.n	8008622 <_printf_float+0xbe>
 80087b8:	2301      	movs	r3, #1
 80087ba:	464a      	mov	r2, r9
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f af2b 	beq.w	800861e <_printf_float+0xba>
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	e7e6      	b.n	800879c <_printf_float+0x238>
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc2b      	bgt.n	800882c <_printf_float+0x2c8>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4a26      	ldr	r2, [pc, #152]	; (8008870 <_printf_float+0x30c>)
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af1d 	beq.w	800861e <_printf_float+0xba>
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	b923      	cbnz	r3, 80087f2 <_printf_float+0x28e>
 80087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ea:	b913      	cbnz	r3, 80087f2 <_printf_float+0x28e>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d5d8      	bpl.n	80087a4 <_printf_float+0x240>
 80087f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f af0e 	beq.w	800861e <_printf_float+0xba>
 8008802:	f04f 0900 	mov.w	r9, #0
 8008806:	f104 0a1a 	add.w	sl, r4, #26
 800880a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880c:	425b      	negs	r3, r3
 800880e:	454b      	cmp	r3, r9
 8008810:	dc01      	bgt.n	8008816 <_printf_float+0x2b2>
 8008812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008814:	e794      	b.n	8008740 <_printf_float+0x1dc>
 8008816:	2301      	movs	r3, #1
 8008818:	4652      	mov	r2, sl
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	f43f aefc 	beq.w	800861e <_printf_float+0xba>
 8008826:	f109 0901 	add.w	r9, r9, #1
 800882a:	e7ee      	b.n	800880a <_printf_float+0x2a6>
 800882c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008830:	429a      	cmp	r2, r3
 8008832:	bfa8      	it	ge
 8008834:	461a      	movge	r2, r3
 8008836:	2a00      	cmp	r2, #0
 8008838:	4691      	mov	r9, r2
 800883a:	dd07      	ble.n	800884c <_printf_float+0x2e8>
 800883c:	4613      	mov	r3, r2
 800883e:	4631      	mov	r1, r6
 8008840:	4642      	mov	r2, r8
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f aee9 	beq.w	800861e <_printf_float+0xba>
 800884c:	f104 031a 	add.w	r3, r4, #26
 8008850:	f04f 0b00 	mov.w	fp, #0
 8008854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008858:	9306      	str	r3, [sp, #24]
 800885a:	e015      	b.n	8008888 <_printf_float+0x324>
 800885c:	7fefffff 	.word	0x7fefffff
 8008860:	0800c474 	.word	0x0800c474
 8008864:	0800c470 	.word	0x0800c470
 8008868:	0800c47c 	.word	0x0800c47c
 800886c:	0800c478 	.word	0x0800c478
 8008870:	0800c7dc 	.word	0x0800c7dc
 8008874:	2301      	movs	r3, #1
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f aecd 	beq.w	800861e <_printf_float+0xba>
 8008884:	f10b 0b01 	add.w	fp, fp, #1
 8008888:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800888c:	ebaa 0309 	sub.w	r3, sl, r9
 8008890:	455b      	cmp	r3, fp
 8008892:	dcef      	bgt.n	8008874 <_printf_float+0x310>
 8008894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008898:	429a      	cmp	r2, r3
 800889a:	44d0      	add	r8, sl
 800889c:	db15      	blt.n	80088ca <_printf_float+0x366>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	07da      	lsls	r2, r3, #31
 80088a2:	d412      	bmi.n	80088ca <_printf_float+0x366>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a8:	eba3 020a 	sub.w	r2, r3, sl
 80088ac:	eba3 0a01 	sub.w	sl, r3, r1
 80088b0:	4592      	cmp	sl, r2
 80088b2:	bfa8      	it	ge
 80088b4:	4692      	movge	sl, r2
 80088b6:	f1ba 0f00 	cmp.w	sl, #0
 80088ba:	dc0e      	bgt.n	80088da <_printf_float+0x376>
 80088bc:	f04f 0800 	mov.w	r8, #0
 80088c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088c4:	f104 091a 	add.w	r9, r4, #26
 80088c8:	e019      	b.n	80088fe <_printf_float+0x39a>
 80088ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1e5      	bne.n	80088a4 <_printf_float+0x340>
 80088d8:	e6a1      	b.n	800861e <_printf_float+0xba>
 80088da:	4653      	mov	r3, sl
 80088dc:	4642      	mov	r2, r8
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1e9      	bne.n	80088bc <_printf_float+0x358>
 80088e8:	e699      	b.n	800861e <_printf_float+0xba>
 80088ea:	2301      	movs	r3, #1
 80088ec:	464a      	mov	r2, r9
 80088ee:	4631      	mov	r1, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b8      	blx	r7
 80088f4:	3001      	adds	r0, #1
 80088f6:	f43f ae92 	beq.w	800861e <_printf_float+0xba>
 80088fa:	f108 0801 	add.w	r8, r8, #1
 80088fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	eba3 030a 	sub.w	r3, r3, sl
 8008908:	4543      	cmp	r3, r8
 800890a:	dcee      	bgt.n	80088ea <_printf_float+0x386>
 800890c:	e74a      	b.n	80087a4 <_printf_float+0x240>
 800890e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008910:	2a01      	cmp	r2, #1
 8008912:	dc01      	bgt.n	8008918 <_printf_float+0x3b4>
 8008914:	07db      	lsls	r3, r3, #31
 8008916:	d53a      	bpl.n	800898e <_printf_float+0x42a>
 8008918:	2301      	movs	r3, #1
 800891a:	4642      	mov	r2, r8
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f ae7b 	beq.w	800861e <_printf_float+0xba>
 8008928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	f43f ae71 	beq.w	800861e <_printf_float+0xba>
 800893c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893e:	2200      	movs	r2, #0
 8008940:	f103 3aff 	add.w	sl, r3, #4294967295
 8008944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008948:	2300      	movs	r3, #0
 800894a:	f7f8 f8ef 	bl	8000b2c <__aeabi_dcmpeq>
 800894e:	b9c8      	cbnz	r0, 8008984 <_printf_float+0x420>
 8008950:	4653      	mov	r3, sl
 8008952:	4642      	mov	r2, r8
 8008954:	4631      	mov	r1, r6
 8008956:	4628      	mov	r0, r5
 8008958:	47b8      	blx	r7
 800895a:	3001      	adds	r0, #1
 800895c:	d10e      	bne.n	800897c <_printf_float+0x418>
 800895e:	e65e      	b.n	800861e <_printf_float+0xba>
 8008960:	2301      	movs	r3, #1
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f ae57 	beq.w	800861e <_printf_float+0xba>
 8008970:	f108 0801 	add.w	r8, r8, #1
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	3b01      	subs	r3, #1
 8008978:	4543      	cmp	r3, r8
 800897a:	dcf1      	bgt.n	8008960 <_printf_float+0x3fc>
 800897c:	464b      	mov	r3, r9
 800897e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008982:	e6de      	b.n	8008742 <_printf_float+0x1de>
 8008984:	f04f 0800 	mov.w	r8, #0
 8008988:	f104 0a1a 	add.w	sl, r4, #26
 800898c:	e7f2      	b.n	8008974 <_printf_float+0x410>
 800898e:	2301      	movs	r3, #1
 8008990:	e7df      	b.n	8008952 <_printf_float+0x3ee>
 8008992:	2301      	movs	r3, #1
 8008994:	464a      	mov	r2, r9
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	f43f ae3e 	beq.w	800861e <_printf_float+0xba>
 80089a2:	f108 0801 	add.w	r8, r8, #1
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	4543      	cmp	r3, r8
 80089ae:	dcf0      	bgt.n	8008992 <_printf_float+0x42e>
 80089b0:	e6fc      	b.n	80087ac <_printf_float+0x248>
 80089b2:	f04f 0800 	mov.w	r8, #0
 80089b6:	f104 0919 	add.w	r9, r4, #25
 80089ba:	e7f4      	b.n	80089a6 <_printf_float+0x442>
 80089bc:	2900      	cmp	r1, #0
 80089be:	f43f ae8b 	beq.w	80086d8 <_printf_float+0x174>
 80089c2:	2300      	movs	r3, #0
 80089c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089c8:	ab09      	add	r3, sp, #36	; 0x24
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	ec49 8b10 	vmov	d0, r8, r9
 80089d0:	6022      	str	r2, [r4, #0]
 80089d2:	f8cd a004 	str.w	sl, [sp, #4]
 80089d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089da:	4628      	mov	r0, r5
 80089dc:	f7ff fd2e 	bl	800843c <__cvt>
 80089e0:	4680      	mov	r8, r0
 80089e2:	e648      	b.n	8008676 <_printf_float+0x112>

080089e4 <_printf_common>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	4691      	mov	r9, r2
 80089ea:	461f      	mov	r7, r3
 80089ec:	688a      	ldr	r2, [r1, #8]
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bfb8      	it	lt
 80089f8:	4613      	movlt	r3, r2
 80089fa:	f8c9 3000 	str.w	r3, [r9]
 80089fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a02:	4606      	mov	r6, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	b112      	cbz	r2, 8008a0e <_printf_common+0x2a>
 8008a08:	3301      	adds	r3, #1
 8008a0a:	f8c9 3000 	str.w	r3, [r9]
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	0699      	lsls	r1, r3, #26
 8008a12:	bf42      	ittt	mi
 8008a14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a18:	3302      	addmi	r3, #2
 8008a1a:	f8c9 3000 	strmi.w	r3, [r9]
 8008a1e:	6825      	ldr	r5, [r4, #0]
 8008a20:	f015 0506 	ands.w	r5, r5, #6
 8008a24:	d107      	bne.n	8008a36 <_printf_common+0x52>
 8008a26:	f104 0a19 	add.w	sl, r4, #25
 8008a2a:	68e3      	ldr	r3, [r4, #12]
 8008a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	42ab      	cmp	r3, r5
 8008a34:	dc28      	bgt.n	8008a88 <_printf_common+0xa4>
 8008a36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	3300      	adds	r3, #0
 8008a3e:	bf18      	it	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	0692      	lsls	r2, r2, #26
 8008a44:	d42d      	bmi.n	8008aa2 <_printf_common+0xbe>
 8008a46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	47c0      	blx	r8
 8008a50:	3001      	adds	r0, #1
 8008a52:	d020      	beq.n	8008a96 <_printf_common+0xb2>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	68e5      	ldr	r5, [r4, #12]
 8008a58:	f8d9 2000 	ldr.w	r2, [r9]
 8008a5c:	f003 0306 	and.w	r3, r3, #6
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	bf08      	it	eq
 8008a64:	1aad      	subeq	r5, r5, r2
 8008a66:	68a3      	ldr	r3, [r4, #8]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	bf0c      	ite	eq
 8008a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a70:	2500      	movne	r5, #0
 8008a72:	4293      	cmp	r3, r2
 8008a74:	bfc4      	itt	gt
 8008a76:	1a9b      	subgt	r3, r3, r2
 8008a78:	18ed      	addgt	r5, r5, r3
 8008a7a:	f04f 0900 	mov.w	r9, #0
 8008a7e:	341a      	adds	r4, #26
 8008a80:	454d      	cmp	r5, r9
 8008a82:	d11a      	bne.n	8008aba <_printf_common+0xd6>
 8008a84:	2000      	movs	r0, #0
 8008a86:	e008      	b.n	8008a9a <_printf_common+0xb6>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4630      	mov	r0, r6
 8008a90:	47c0      	blx	r8
 8008a92:	3001      	adds	r0, #1
 8008a94:	d103      	bne.n	8008a9e <_printf_common+0xba>
 8008a96:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9e:	3501      	adds	r5, #1
 8008aa0:	e7c3      	b.n	8008a2a <_printf_common+0x46>
 8008aa2:	18e1      	adds	r1, r4, r3
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	2030      	movs	r0, #48	; 0x30
 8008aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aac:	4422      	add	r2, r4
 8008aae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ab2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ab6:	3302      	adds	r3, #2
 8008ab8:	e7c5      	b.n	8008a46 <_printf_common+0x62>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4622      	mov	r2, r4
 8008abe:	4639      	mov	r1, r7
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	47c0      	blx	r8
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d0e6      	beq.n	8008a96 <_printf_common+0xb2>
 8008ac8:	f109 0901 	add.w	r9, r9, #1
 8008acc:	e7d8      	b.n	8008a80 <_printf_common+0x9c>
	...

08008ad0 <_printf_i>:
 8008ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ad8:	460c      	mov	r4, r1
 8008ada:	7e09      	ldrb	r1, [r1, #24]
 8008adc:	b085      	sub	sp, #20
 8008ade:	296e      	cmp	r1, #110	; 0x6e
 8008ae0:	4617      	mov	r7, r2
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	4698      	mov	r8, r3
 8008ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae8:	f000 80b3 	beq.w	8008c52 <_printf_i+0x182>
 8008aec:	d822      	bhi.n	8008b34 <_printf_i+0x64>
 8008aee:	2963      	cmp	r1, #99	; 0x63
 8008af0:	d036      	beq.n	8008b60 <_printf_i+0x90>
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x3a>
 8008af4:	2900      	cmp	r1, #0
 8008af6:	f000 80b9 	beq.w	8008c6c <_printf_i+0x19c>
 8008afa:	2958      	cmp	r1, #88	; 0x58
 8008afc:	f000 8083 	beq.w	8008c06 <_printf_i+0x136>
 8008b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b08:	e032      	b.n	8008b70 <_printf_i+0xa0>
 8008b0a:	2964      	cmp	r1, #100	; 0x64
 8008b0c:	d001      	beq.n	8008b12 <_printf_i+0x42>
 8008b0e:	2969      	cmp	r1, #105	; 0x69
 8008b10:	d1f6      	bne.n	8008b00 <_printf_i+0x30>
 8008b12:	6820      	ldr	r0, [r4, #0]
 8008b14:	6813      	ldr	r3, [r2, #0]
 8008b16:	0605      	lsls	r5, r0, #24
 8008b18:	f103 0104 	add.w	r1, r3, #4
 8008b1c:	d52a      	bpl.n	8008b74 <_printf_i+0xa4>
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	da03      	bge.n	8008b2e <_printf_i+0x5e>
 8008b26:	222d      	movs	r2, #45	; 0x2d
 8008b28:	425b      	negs	r3, r3
 8008b2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b2e:	486f      	ldr	r0, [pc, #444]	; (8008cec <_printf_i+0x21c>)
 8008b30:	220a      	movs	r2, #10
 8008b32:	e039      	b.n	8008ba8 <_printf_i+0xd8>
 8008b34:	2973      	cmp	r1, #115	; 0x73
 8008b36:	f000 809d 	beq.w	8008c74 <_printf_i+0x1a4>
 8008b3a:	d808      	bhi.n	8008b4e <_printf_i+0x7e>
 8008b3c:	296f      	cmp	r1, #111	; 0x6f
 8008b3e:	d020      	beq.n	8008b82 <_printf_i+0xb2>
 8008b40:	2970      	cmp	r1, #112	; 0x70
 8008b42:	d1dd      	bne.n	8008b00 <_printf_i+0x30>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	f043 0320 	orr.w	r3, r3, #32
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	e003      	b.n	8008b56 <_printf_i+0x86>
 8008b4e:	2975      	cmp	r1, #117	; 0x75
 8008b50:	d017      	beq.n	8008b82 <_printf_i+0xb2>
 8008b52:	2978      	cmp	r1, #120	; 0x78
 8008b54:	d1d4      	bne.n	8008b00 <_printf_i+0x30>
 8008b56:	2378      	movs	r3, #120	; 0x78
 8008b58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b5c:	4864      	ldr	r0, [pc, #400]	; (8008cf0 <_printf_i+0x220>)
 8008b5e:	e055      	b.n	8008c0c <_printf_i+0x13c>
 8008b60:	6813      	ldr	r3, [r2, #0]
 8008b62:	1d19      	adds	r1, r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6011      	str	r1, [r2, #0]
 8008b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b70:	2301      	movs	r3, #1
 8008b72:	e08c      	b.n	8008c8e <_printf_i+0x1be>
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6011      	str	r1, [r2, #0]
 8008b78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b7c:	bf18      	it	ne
 8008b7e:	b21b      	sxthne	r3, r3
 8008b80:	e7cf      	b.n	8008b22 <_printf_i+0x52>
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1d18      	adds	r0, r3, #4
 8008b88:	6010      	str	r0, [r2, #0]
 8008b8a:	0628      	lsls	r0, r5, #24
 8008b8c:	d501      	bpl.n	8008b92 <_printf_i+0xc2>
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	e002      	b.n	8008b98 <_printf_i+0xc8>
 8008b92:	0668      	lsls	r0, r5, #25
 8008b94:	d5fb      	bpl.n	8008b8e <_printf_i+0xbe>
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	4854      	ldr	r0, [pc, #336]	; (8008cec <_printf_i+0x21c>)
 8008b9a:	296f      	cmp	r1, #111	; 0x6f
 8008b9c:	bf14      	ite	ne
 8008b9e:	220a      	movne	r2, #10
 8008ba0:	2208      	moveq	r2, #8
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ba8:	6865      	ldr	r5, [r4, #4]
 8008baa:	60a5      	str	r5, [r4, #8]
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	f2c0 8095 	blt.w	8008cdc <_printf_i+0x20c>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	f021 0104 	bic.w	r1, r1, #4
 8008bb8:	6021      	str	r1, [r4, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d13d      	bne.n	8008c3a <_printf_i+0x16a>
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	f040 808e 	bne.w	8008ce0 <_printf_i+0x210>
 8008bc4:	4665      	mov	r5, ip
 8008bc6:	2a08      	cmp	r2, #8
 8008bc8:	d10b      	bne.n	8008be2 <_printf_i+0x112>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	07db      	lsls	r3, r3, #31
 8008bce:	d508      	bpl.n	8008be2 <_printf_i+0x112>
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bfde      	ittt	le
 8008bd8:	2330      	movle	r3, #48	; 0x30
 8008bda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008be2:	ebac 0305 	sub.w	r3, ip, r5
 8008be6:	6123      	str	r3, [r4, #16]
 8008be8:	f8cd 8000 	str.w	r8, [sp]
 8008bec:	463b      	mov	r3, r7
 8008bee:	aa03      	add	r2, sp, #12
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff fef6 	bl	80089e4 <_printf_common>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d14d      	bne.n	8008c98 <_printf_i+0x1c8>
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	b005      	add	sp, #20
 8008c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c06:	4839      	ldr	r0, [pc, #228]	; (8008cec <_printf_i+0x21c>)
 8008c08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c0c:	6813      	ldr	r3, [r2, #0]
 8008c0e:	6821      	ldr	r1, [r4, #0]
 8008c10:	1d1d      	adds	r5, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6015      	str	r5, [r2, #0]
 8008c16:	060a      	lsls	r2, r1, #24
 8008c18:	d50b      	bpl.n	8008c32 <_printf_i+0x162>
 8008c1a:	07ca      	lsls	r2, r1, #31
 8008c1c:	bf44      	itt	mi
 8008c1e:	f041 0120 	orrmi.w	r1, r1, #32
 8008c22:	6021      	strmi	r1, [r4, #0]
 8008c24:	b91b      	cbnz	r3, 8008c2e <_printf_i+0x15e>
 8008c26:	6822      	ldr	r2, [r4, #0]
 8008c28:	f022 0220 	bic.w	r2, r2, #32
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	2210      	movs	r2, #16
 8008c30:	e7b7      	b.n	8008ba2 <_printf_i+0xd2>
 8008c32:	064d      	lsls	r5, r1, #25
 8008c34:	bf48      	it	mi
 8008c36:	b29b      	uxthmi	r3, r3
 8008c38:	e7ef      	b.n	8008c1a <_printf_i+0x14a>
 8008c3a:	4665      	mov	r5, ip
 8008c3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c40:	fb02 3311 	mls	r3, r2, r1, r3
 8008c44:	5cc3      	ldrb	r3, [r0, r3]
 8008c46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d1f5      	bne.n	8008c3c <_printf_i+0x16c>
 8008c50:	e7b9      	b.n	8008bc6 <_printf_i+0xf6>
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	6961      	ldr	r1, [r4, #20]
 8008c58:	1d18      	adds	r0, r3, #4
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	0628      	lsls	r0, r5, #24
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	d501      	bpl.n	8008c66 <_printf_i+0x196>
 8008c62:	6019      	str	r1, [r3, #0]
 8008c64:	e002      	b.n	8008c6c <_printf_i+0x19c>
 8008c66:	066a      	lsls	r2, r5, #25
 8008c68:	d5fb      	bpl.n	8008c62 <_printf_i+0x192>
 8008c6a:	8019      	strh	r1, [r3, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	4665      	mov	r5, ip
 8008c72:	e7b9      	b.n	8008be8 <_printf_i+0x118>
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	1d19      	adds	r1, r3, #4
 8008c78:	6011      	str	r1, [r2, #0]
 8008c7a:	681d      	ldr	r5, [r3, #0]
 8008c7c:	6862      	ldr	r2, [r4, #4]
 8008c7e:	2100      	movs	r1, #0
 8008c80:	4628      	mov	r0, r5
 8008c82:	f7f7 fad5 	bl	8000230 <memchr>
 8008c86:	b108      	cbz	r0, 8008c8c <_printf_i+0x1bc>
 8008c88:	1b40      	subs	r0, r0, r5
 8008c8a:	6060      	str	r0, [r4, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c96:	e7a7      	b.n	8008be8 <_printf_i+0x118>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	47c0      	blx	r8
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d0aa      	beq.n	8008bfc <_printf_i+0x12c>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	079b      	lsls	r3, r3, #30
 8008caa:	d413      	bmi.n	8008cd4 <_printf_i+0x204>
 8008cac:	68e0      	ldr	r0, [r4, #12]
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	bfb8      	it	lt
 8008cb4:	4618      	movlt	r0, r3
 8008cb6:	e7a3      	b.n	8008c00 <_printf_i+0x130>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	464a      	mov	r2, r9
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	47c0      	blx	r8
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d09a      	beq.n	8008bfc <_printf_i+0x12c>
 8008cc6:	3501      	adds	r5, #1
 8008cc8:	68e3      	ldr	r3, [r4, #12]
 8008cca:	9a03      	ldr	r2, [sp, #12]
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	dcf2      	bgt.n	8008cb8 <_printf_i+0x1e8>
 8008cd2:	e7eb      	b.n	8008cac <_printf_i+0x1dc>
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	f104 0919 	add.w	r9, r4, #25
 8008cda:	e7f5      	b.n	8008cc8 <_printf_i+0x1f8>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1ac      	bne.n	8008c3a <_printf_i+0x16a>
 8008ce0:	7803      	ldrb	r3, [r0, #0]
 8008ce2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cea:	e76c      	b.n	8008bc6 <_printf_i+0xf6>
 8008cec:	0800c480 	.word	0x0800c480
 8008cf0:	0800c491 	.word	0x0800c491

08008cf4 <iprintf>:
 8008cf4:	b40f      	push	{r0, r1, r2, r3}
 8008cf6:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <iprintf+0x2c>)
 8008cf8:	b513      	push	{r0, r1, r4, lr}
 8008cfa:	681c      	ldr	r4, [r3, #0]
 8008cfc:	b124      	cbz	r4, 8008d08 <iprintf+0x14>
 8008cfe:	69a3      	ldr	r3, [r4, #24]
 8008d00:	b913      	cbnz	r3, 8008d08 <iprintf+0x14>
 8008d02:	4620      	mov	r0, r4
 8008d04:	f001 fc34 	bl	800a570 <__sinit>
 8008d08:	ab05      	add	r3, sp, #20
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	68a1      	ldr	r1, [r4, #8]
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f002 fab3 	bl	800b27c <_vfiprintf_r>
 8008d16:	b002      	add	sp, #8
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	b004      	add	sp, #16
 8008d1e:	4770      	bx	lr
 8008d20:	2000000c 	.word	0x2000000c

08008d24 <_puts_r>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	460e      	mov	r6, r1
 8008d28:	4605      	mov	r5, r0
 8008d2a:	b118      	cbz	r0, 8008d34 <_puts_r+0x10>
 8008d2c:	6983      	ldr	r3, [r0, #24]
 8008d2e:	b90b      	cbnz	r3, 8008d34 <_puts_r+0x10>
 8008d30:	f001 fc1e 	bl	800a570 <__sinit>
 8008d34:	69ab      	ldr	r3, [r5, #24]
 8008d36:	68ac      	ldr	r4, [r5, #8]
 8008d38:	b913      	cbnz	r3, 8008d40 <_puts_r+0x1c>
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f001 fc18 	bl	800a570 <__sinit>
 8008d40:	4b23      	ldr	r3, [pc, #140]	; (8008dd0 <_puts_r+0xac>)
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d117      	bne.n	8008d76 <_puts_r+0x52>
 8008d46:	686c      	ldr	r4, [r5, #4]
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	071b      	lsls	r3, r3, #28
 8008d4c:	d51d      	bpl.n	8008d8a <_puts_r+0x66>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	b1db      	cbz	r3, 8008d8a <_puts_r+0x66>
 8008d52:	3e01      	subs	r6, #1
 8008d54:	68a3      	ldr	r3, [r4, #8]
 8008d56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	60a3      	str	r3, [r4, #8]
 8008d5e:	b9e9      	cbnz	r1, 8008d9c <_puts_r+0x78>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da2e      	bge.n	8008dc2 <_puts_r+0x9e>
 8008d64:	4622      	mov	r2, r4
 8008d66:	210a      	movs	r1, #10
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f000 fbf9 	bl	8009560 <__swbuf_r>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d011      	beq.n	8008d96 <_puts_r+0x72>
 8008d72:	200a      	movs	r0, #10
 8008d74:	e011      	b.n	8008d9a <_puts_r+0x76>
 8008d76:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <_puts_r+0xb0>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d101      	bne.n	8008d80 <_puts_r+0x5c>
 8008d7c:	68ac      	ldr	r4, [r5, #8]
 8008d7e:	e7e3      	b.n	8008d48 <_puts_r+0x24>
 8008d80:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <_puts_r+0xb4>)
 8008d82:	429c      	cmp	r4, r3
 8008d84:	bf08      	it	eq
 8008d86:	68ec      	ldreq	r4, [r5, #12]
 8008d88:	e7de      	b.n	8008d48 <_puts_r+0x24>
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 fc39 	bl	8009604 <__swsetup_r>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d0dd      	beq.n	8008d52 <_puts_r+0x2e>
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	da04      	bge.n	8008daa <_puts_r+0x86>
 8008da0:	69a2      	ldr	r2, [r4, #24]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	dc06      	bgt.n	8008db4 <_puts_r+0x90>
 8008da6:	290a      	cmp	r1, #10
 8008da8:	d004      	beq.n	8008db4 <_puts_r+0x90>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	6022      	str	r2, [r4, #0]
 8008db0:	7019      	strb	r1, [r3, #0]
 8008db2:	e7cf      	b.n	8008d54 <_puts_r+0x30>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 fbd2 	bl	8009560 <__swbuf_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d1c9      	bne.n	8008d54 <_puts_r+0x30>
 8008dc0:	e7e9      	b.n	8008d96 <_puts_r+0x72>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	7018      	strb	r0, [r3, #0]
 8008dcc:	e7e5      	b.n	8008d9a <_puts_r+0x76>
 8008dce:	bf00      	nop
 8008dd0:	0800c50c 	.word	0x0800c50c
 8008dd4:	0800c52c 	.word	0x0800c52c
 8008dd8:	0800c4ec 	.word	0x0800c4ec

08008ddc <puts>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <puts+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f7ff bf9f 	b.w	8008d24 <_puts_r>
 8008de6:	bf00      	nop
 8008de8:	2000000c 	.word	0x2000000c

08008dec <setvbuf>:
 8008dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	461d      	mov	r5, r3
 8008df2:	4b51      	ldr	r3, [pc, #324]	; (8008f38 <setvbuf+0x14c>)
 8008df4:	681e      	ldr	r6, [r3, #0]
 8008df6:	4604      	mov	r4, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	4690      	mov	r8, r2
 8008dfc:	b126      	cbz	r6, 8008e08 <setvbuf+0x1c>
 8008dfe:	69b3      	ldr	r3, [r6, #24]
 8008e00:	b913      	cbnz	r3, 8008e08 <setvbuf+0x1c>
 8008e02:	4630      	mov	r0, r6
 8008e04:	f001 fbb4 	bl	800a570 <__sinit>
 8008e08:	4b4c      	ldr	r3, [pc, #304]	; (8008f3c <setvbuf+0x150>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d152      	bne.n	8008eb4 <setvbuf+0xc8>
 8008e0e:	6874      	ldr	r4, [r6, #4]
 8008e10:	f1b8 0f02 	cmp.w	r8, #2
 8008e14:	d006      	beq.n	8008e24 <setvbuf+0x38>
 8008e16:	f1b8 0f01 	cmp.w	r8, #1
 8008e1a:	f200 8089 	bhi.w	8008f30 <setvbuf+0x144>
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	f2c0 8086 	blt.w	8008f30 <setvbuf+0x144>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4630      	mov	r0, r6
 8008e28:	f001 fb38 	bl	800a49c <_fflush_r>
 8008e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e2e:	b141      	cbz	r1, 8008e42 <setvbuf+0x56>
 8008e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e34:	4299      	cmp	r1, r3
 8008e36:	d002      	beq.n	8008e3e <setvbuf+0x52>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f001 fffb 	bl	800ae34 <_free_r>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6363      	str	r3, [r4, #52]	; 0x34
 8008e42:	2300      	movs	r3, #0
 8008e44:	61a3      	str	r3, [r4, #24]
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	061b      	lsls	r3, r3, #24
 8008e4c:	d503      	bpl.n	8008e56 <setvbuf+0x6a>
 8008e4e:	6921      	ldr	r1, [r4, #16]
 8008e50:	4630      	mov	r0, r6
 8008e52:	f001 ffef 	bl	800ae34 <_free_r>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	f1b8 0f02 	cmp.w	r8, #2
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	d05d      	beq.n	8008f24 <setvbuf+0x138>
 8008e68:	ab01      	add	r3, sp, #4
 8008e6a:	466a      	mov	r2, sp
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f001 fc70 	bl	800a754 <__swhatbuf_r>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	4318      	orrs	r0, r3
 8008e78:	81a0      	strh	r0, [r4, #12]
 8008e7a:	bb2d      	cbnz	r5, 8008ec8 <setvbuf+0xdc>
 8008e7c:	9d00      	ldr	r5, [sp, #0]
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f001 fccc 	bl	800a81c <malloc>
 8008e84:	4607      	mov	r7, r0
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d14e      	bne.n	8008f28 <setvbuf+0x13c>
 8008e8a:	f8dd 9000 	ldr.w	r9, [sp]
 8008e8e:	45a9      	cmp	r9, r5
 8008e90:	d13c      	bne.n	8008f0c <setvbuf+0x120>
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	f043 0302 	orr.w	r3, r3, #2
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	6163      	str	r3, [r4, #20]
 8008eae:	b003      	add	sp, #12
 8008eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb4:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <setvbuf+0x154>)
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d101      	bne.n	8008ebe <setvbuf+0xd2>
 8008eba:	68b4      	ldr	r4, [r6, #8]
 8008ebc:	e7a8      	b.n	8008e10 <setvbuf+0x24>
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <setvbuf+0x158>)
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	bf08      	it	eq
 8008ec4:	68f4      	ldreq	r4, [r6, #12]
 8008ec6:	e7a3      	b.n	8008e10 <setvbuf+0x24>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	d0d8      	beq.n	8008e7e <setvbuf+0x92>
 8008ecc:	69b3      	ldr	r3, [r6, #24]
 8008ece:	b913      	cbnz	r3, 8008ed6 <setvbuf+0xea>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f001 fb4d 	bl	800a570 <__sinit>
 8008ed6:	f1b8 0f01 	cmp.w	r8, #1
 8008eda:	bf08      	it	eq
 8008edc:	89a3      	ldrheq	r3, [r4, #12]
 8008ede:	6027      	str	r7, [r4, #0]
 8008ee0:	bf04      	itt	eq
 8008ee2:	f043 0301 	orreq.w	r3, r3, #1
 8008ee6:	81a3      	strheq	r3, [r4, #12]
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	f013 0008 	ands.w	r0, r3, #8
 8008eee:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008ef2:	d01b      	beq.n	8008f2c <setvbuf+0x140>
 8008ef4:	f013 0001 	ands.w	r0, r3, #1
 8008ef8:	bf18      	it	ne
 8008efa:	426d      	negne	r5, r5
 8008efc:	f04f 0300 	mov.w	r3, #0
 8008f00:	bf1d      	ittte	ne
 8008f02:	60a3      	strne	r3, [r4, #8]
 8008f04:	61a5      	strne	r5, [r4, #24]
 8008f06:	4618      	movne	r0, r3
 8008f08:	60a5      	streq	r5, [r4, #8]
 8008f0a:	e7d0      	b.n	8008eae <setvbuf+0xc2>
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f001 fc85 	bl	800a81c <malloc>
 8008f12:	4607      	mov	r7, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d0bc      	beq.n	8008e92 <setvbuf+0xa6>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	464d      	mov	r5, r9
 8008f22:	e7d3      	b.n	8008ecc <setvbuf+0xe0>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7b6      	b.n	8008e96 <setvbuf+0xaa>
 8008f28:	46a9      	mov	r9, r5
 8008f2a:	e7f5      	b.n	8008f18 <setvbuf+0x12c>
 8008f2c:	60a0      	str	r0, [r4, #8]
 8008f2e:	e7be      	b.n	8008eae <setvbuf+0xc2>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e7bb      	b.n	8008eae <setvbuf+0xc2>
 8008f36:	bf00      	nop
 8008f38:	2000000c 	.word	0x2000000c
 8008f3c:	0800c50c 	.word	0x0800c50c
 8008f40:	0800c52c 	.word	0x0800c52c
 8008f44:	0800c4ec 	.word	0x0800c4ec

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	b500      	push	{lr}
 8008f4c:	b09c      	sub	sp, #112	; 0x70
 8008f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f50:	9002      	str	r0, [sp, #8]
 8008f52:	9006      	str	r0, [sp, #24]
 8008f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f58:	4809      	ldr	r0, [pc, #36]	; (8008f80 <siprintf+0x38>)
 8008f5a:	9107      	str	r1, [sp, #28]
 8008f5c:	9104      	str	r1, [sp, #16]
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	a902      	add	r1, sp, #8
 8008f6c:	f002 f864 	bl	800b038 <_svfiprintf_r>
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	; 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	2000000c 	.word	0x2000000c
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <strstr>:
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	7803      	ldrb	r3, [r0, #0]
 8008f8c:	b17b      	cbz	r3, 8008fae <strstr+0x26>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	7823      	ldrb	r3, [r4, #0]
 8008f92:	4620      	mov	r0, r4
 8008f94:	1c66      	adds	r6, r4, #1
 8008f96:	b17b      	cbz	r3, 8008fb8 <strstr+0x30>
 8008f98:	1e4a      	subs	r2, r1, #1
 8008f9a:	1e63      	subs	r3, r4, #1
 8008f9c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008fa0:	b14d      	cbz	r5, 8008fb6 <strstr+0x2e>
 8008fa2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008fa6:	42af      	cmp	r7, r5
 8008fa8:	4634      	mov	r4, r6
 8008faa:	d0f7      	beq.n	8008f9c <strstr+0x14>
 8008fac:	e7f0      	b.n	8008f90 <strstr+0x8>
 8008fae:	780b      	ldrb	r3, [r1, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bf18      	it	ne
 8008fb4:	2000      	movne	r0, #0
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	e7fc      	b.n	8008fb6 <strstr+0x2e>

08008fbc <_strtol_l.isra.0>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	4692      	mov	sl, r2
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	460f      	mov	r7, r1
 8008fca:	463d      	mov	r5, r7
 8008fcc:	9808      	ldr	r0, [sp, #32]
 8008fce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd2:	f001 fb9f 	bl	800a714 <__locale_ctype_ptr_l>
 8008fd6:	4420      	add	r0, r4
 8008fd8:	7843      	ldrb	r3, [r0, #1]
 8008fda:	f013 0308 	ands.w	r3, r3, #8
 8008fde:	d132      	bne.n	8009046 <_strtol_l.isra.0+0x8a>
 8008fe0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fe2:	d132      	bne.n	800904a <_strtol_l.isra.0+0x8e>
 8008fe4:	787c      	ldrb	r4, [r7, #1]
 8008fe6:	1cbd      	adds	r5, r7, #2
 8008fe8:	2201      	movs	r2, #1
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d05d      	beq.n	80090aa <_strtol_l.isra.0+0xee>
 8008fee:	2e10      	cmp	r6, #16
 8008ff0:	d109      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 8008ff2:	2c30      	cmp	r4, #48	; 0x30
 8008ff4:	d107      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 8008ff6:	782b      	ldrb	r3, [r5, #0]
 8008ff8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ffc:	2b58      	cmp	r3, #88	; 0x58
 8008ffe:	d14f      	bne.n	80090a0 <_strtol_l.isra.0+0xe4>
 8009000:	786c      	ldrb	r4, [r5, #1]
 8009002:	2610      	movs	r6, #16
 8009004:	3502      	adds	r5, #2
 8009006:	2a00      	cmp	r2, #0
 8009008:	bf14      	ite	ne
 800900a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800900e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009012:	2700      	movs	r7, #0
 8009014:	fbb1 fcf6 	udiv	ip, r1, r6
 8009018:	4638      	mov	r0, r7
 800901a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800901e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009022:	2b09      	cmp	r3, #9
 8009024:	d817      	bhi.n	8009056 <_strtol_l.isra.0+0x9a>
 8009026:	461c      	mov	r4, r3
 8009028:	42a6      	cmp	r6, r4
 800902a:	dd23      	ble.n	8009074 <_strtol_l.isra.0+0xb8>
 800902c:	1c7b      	adds	r3, r7, #1
 800902e:	d007      	beq.n	8009040 <_strtol_l.isra.0+0x84>
 8009030:	4584      	cmp	ip, r0
 8009032:	d31c      	bcc.n	800906e <_strtol_l.isra.0+0xb2>
 8009034:	d101      	bne.n	800903a <_strtol_l.isra.0+0x7e>
 8009036:	45a6      	cmp	lr, r4
 8009038:	db19      	blt.n	800906e <_strtol_l.isra.0+0xb2>
 800903a:	fb00 4006 	mla	r0, r0, r6, r4
 800903e:	2701      	movs	r7, #1
 8009040:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009044:	e7eb      	b.n	800901e <_strtol_l.isra.0+0x62>
 8009046:	462f      	mov	r7, r5
 8009048:	e7bf      	b.n	8008fca <_strtol_l.isra.0+0xe>
 800904a:	2c2b      	cmp	r4, #43	; 0x2b
 800904c:	bf04      	itt	eq
 800904e:	1cbd      	addeq	r5, r7, #2
 8009050:	787c      	ldrbeq	r4, [r7, #1]
 8009052:	461a      	mov	r2, r3
 8009054:	e7c9      	b.n	8008fea <_strtol_l.isra.0+0x2e>
 8009056:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800905a:	2b19      	cmp	r3, #25
 800905c:	d801      	bhi.n	8009062 <_strtol_l.isra.0+0xa6>
 800905e:	3c37      	subs	r4, #55	; 0x37
 8009060:	e7e2      	b.n	8009028 <_strtol_l.isra.0+0x6c>
 8009062:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009066:	2b19      	cmp	r3, #25
 8009068:	d804      	bhi.n	8009074 <_strtol_l.isra.0+0xb8>
 800906a:	3c57      	subs	r4, #87	; 0x57
 800906c:	e7dc      	b.n	8009028 <_strtol_l.isra.0+0x6c>
 800906e:	f04f 37ff 	mov.w	r7, #4294967295
 8009072:	e7e5      	b.n	8009040 <_strtol_l.isra.0+0x84>
 8009074:	1c7b      	adds	r3, r7, #1
 8009076:	d108      	bne.n	800908a <_strtol_l.isra.0+0xce>
 8009078:	2322      	movs	r3, #34	; 0x22
 800907a:	f8c8 3000 	str.w	r3, [r8]
 800907e:	4608      	mov	r0, r1
 8009080:	f1ba 0f00 	cmp.w	sl, #0
 8009084:	d107      	bne.n	8009096 <_strtol_l.isra.0+0xda>
 8009086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908a:	b102      	cbz	r2, 800908e <_strtol_l.isra.0+0xd2>
 800908c:	4240      	negs	r0, r0
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	d0f8      	beq.n	8009086 <_strtol_l.isra.0+0xca>
 8009094:	b10f      	cbz	r7, 800909a <_strtol_l.isra.0+0xde>
 8009096:	f105 39ff 	add.w	r9, r5, #4294967295
 800909a:	f8ca 9000 	str.w	r9, [sl]
 800909e:	e7f2      	b.n	8009086 <_strtol_l.isra.0+0xca>
 80090a0:	2430      	movs	r4, #48	; 0x30
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d1af      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 80090a6:	2608      	movs	r6, #8
 80090a8:	e7ad      	b.n	8009006 <_strtol_l.isra.0+0x4a>
 80090aa:	2c30      	cmp	r4, #48	; 0x30
 80090ac:	d0a3      	beq.n	8008ff6 <_strtol_l.isra.0+0x3a>
 80090ae:	260a      	movs	r6, #10
 80090b0:	e7a9      	b.n	8009006 <_strtol_l.isra.0+0x4a>
	...

080090b4 <_strtol_r>:
 80090b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b6:	4c06      	ldr	r4, [pc, #24]	; (80090d0 <_strtol_r+0x1c>)
 80090b8:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_strtol_r+0x20>)
 80090ba:	6824      	ldr	r4, [r4, #0]
 80090bc:	6a24      	ldr	r4, [r4, #32]
 80090be:	2c00      	cmp	r4, #0
 80090c0:	bf08      	it	eq
 80090c2:	462c      	moveq	r4, r5
 80090c4:	9400      	str	r4, [sp, #0]
 80090c6:	f7ff ff79 	bl	8008fbc <_strtol_l.isra.0>
 80090ca:	b003      	add	sp, #12
 80090cc:	bd30      	pop	{r4, r5, pc}
 80090ce:	bf00      	nop
 80090d0:	2000000c 	.word	0x2000000c
 80090d4:	200000d0 	.word	0x200000d0

080090d8 <strtol>:
 80090d8:	4b08      	ldr	r3, [pc, #32]	; (80090fc <strtol+0x24>)
 80090da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	4d08      	ldr	r5, [pc, #32]	; (8009100 <strtol+0x28>)
 80090e0:	6a23      	ldr	r3, [r4, #32]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf08      	it	eq
 80090e6:	462b      	moveq	r3, r5
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4613      	mov	r3, r2
 80090ec:	460a      	mov	r2, r1
 80090ee:	4601      	mov	r1, r0
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff ff63 	bl	8008fbc <_strtol_l.isra.0>
 80090f6:	b003      	add	sp, #12
 80090f8:	bd30      	pop	{r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	2000000c 	.word	0x2000000c
 8009100:	200000d0 	.word	0x200000d0

08009104 <__tzcalc_limits>:
 8009104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4680      	mov	r8, r0
 800910a:	f001 faff 	bl	800a70c <__gettzinfo>
 800910e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009112:	4598      	cmp	r8, r3
 8009114:	f340 8098 	ble.w	8009248 <__tzcalc_limits+0x144>
 8009118:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800911c:	4443      	add	r3, r8
 800911e:	109b      	asrs	r3, r3, #2
 8009120:	f240 126d 	movw	r2, #365	; 0x16d
 8009124:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8009128:	fb02 3505 	mla	r5, r2, r5, r3
 800912c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009130:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8009134:	fb93 f3f2 	sdiv	r3, r3, r2
 8009138:	441d      	add	r5, r3
 800913a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800913e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009142:	fb98 f7f3 	sdiv	r7, r8, r3
 8009146:	fb03 8717 	mls	r7, r3, r7, r8
 800914a:	4442      	add	r2, r8
 800914c:	fab7 fc87 	clz	ip, r7
 8009150:	fb92 f2f3 	sdiv	r2, r2, r3
 8009154:	f008 0303 	and.w	r3, r8, #3
 8009158:	4415      	add	r5, r2
 800915a:	2264      	movs	r2, #100	; 0x64
 800915c:	f8c0 8004 	str.w	r8, [r0, #4]
 8009160:	fb98 f6f2 	sdiv	r6, r8, r2
 8009164:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009168:	fb02 8616 	mls	r6, r2, r6, r8
 800916c:	4604      	mov	r4, r0
 800916e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	f04f 0e07 	mov.w	lr, #7
 8009178:	7a22      	ldrb	r2, [r4, #8]
 800917a:	6963      	ldr	r3, [r4, #20]
 800917c:	2a4a      	cmp	r2, #74	; 0x4a
 800917e:	d128      	bne.n	80091d2 <__tzcalc_limits+0xce>
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	18ea      	adds	r2, r5, r3
 8009184:	b901      	cbnz	r1, 8009188 <__tzcalc_limits+0x84>
 8009186:	b906      	cbnz	r6, 800918a <__tzcalc_limits+0x86>
 8009188:	bb0f      	cbnz	r7, 80091ce <__tzcalc_limits+0xca>
 800918a:	2b3b      	cmp	r3, #59	; 0x3b
 800918c:	bfd4      	ite	le
 800918e:	2300      	movle	r3, #0
 8009190:	2301      	movgt	r3, #1
 8009192:	4413      	add	r3, r2
 8009194:	1e5a      	subs	r2, r3, #1
 8009196:	69a3      	ldr	r3, [r4, #24]
 8009198:	492c      	ldr	r1, [pc, #176]	; (800924c <__tzcalc_limits+0x148>)
 800919a:	fb01 3202 	mla	r2, r1, r2, r3
 800919e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091a0:	4413      	add	r3, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	17db      	asrs	r3, r3, #31
 80091a6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80091aa:	3428      	adds	r4, #40	; 0x28
 80091ac:	45a3      	cmp	fp, r4
 80091ae:	d1e3      	bne.n	8009178 <__tzcalc_limits+0x74>
 80091b0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80091b4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80091b8:	4294      	cmp	r4, r2
 80091ba:	eb75 0303 	sbcs.w	r3, r5, r3
 80091be:	bfb4      	ite	lt
 80091c0:	2301      	movlt	r3, #1
 80091c2:	2300      	movge	r3, #0
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	b003      	add	sp, #12
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	2300      	movs	r3, #0
 80091d0:	e7df      	b.n	8009192 <__tzcalc_limits+0x8e>
 80091d2:	2a44      	cmp	r2, #68	; 0x44
 80091d4:	d101      	bne.n	80091da <__tzcalc_limits+0xd6>
 80091d6:	18ea      	adds	r2, r5, r3
 80091d8:	e7dd      	b.n	8009196 <__tzcalc_limits+0x92>
 80091da:	9a00      	ldr	r2, [sp, #0]
 80091dc:	bb72      	cbnz	r2, 800923c <__tzcalc_limits+0x138>
 80091de:	2e00      	cmp	r6, #0
 80091e0:	bf0c      	ite	eq
 80091e2:	46e1      	moveq	r9, ip
 80091e4:	f04f 0901 	movne.w	r9, #1
 80091e8:	2230      	movs	r2, #48	; 0x30
 80091ea:	fb02 f909 	mul.w	r9, r2, r9
 80091ee:	68e2      	ldr	r2, [r4, #12]
 80091f0:	9201      	str	r2, [sp, #4]
 80091f2:	f04f 0800 	mov.w	r8, #0
 80091f6:	462a      	mov	r2, r5
 80091f8:	f108 0801 	add.w	r8, r8, #1
 80091fc:	4914      	ldr	r1, [pc, #80]	; (8009250 <__tzcalc_limits+0x14c>)
 80091fe:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8009202:	448a      	add	sl, r1
 8009204:	9901      	ldr	r1, [sp, #4]
 8009206:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800920a:	4541      	cmp	r1, r8
 800920c:	dc18      	bgt.n	8009240 <__tzcalc_limits+0x13c>
 800920e:	f102 0804 	add.w	r8, r2, #4
 8009212:	fb98 f9fe 	sdiv	r9, r8, lr
 8009216:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800921a:	eba8 0909 	sub.w	r9, r8, r9
 800921e:	ebb3 0909 	subs.w	r9, r3, r9
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	f103 33ff 	add.w	r3, r3, #4294967295
 8009228:	bf48      	it	mi
 800922a:	f109 0907 	addmi.w	r9, r9, #7
 800922e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009232:	444b      	add	r3, r9
 8009234:	4553      	cmp	r3, sl
 8009236:	da05      	bge.n	8009244 <__tzcalc_limits+0x140>
 8009238:	441a      	add	r2, r3
 800923a:	e7ac      	b.n	8009196 <__tzcalc_limits+0x92>
 800923c:	46e1      	mov	r9, ip
 800923e:	e7d3      	b.n	80091e8 <__tzcalc_limits+0xe4>
 8009240:	4452      	add	r2, sl
 8009242:	e7d9      	b.n	80091f8 <__tzcalc_limits+0xf4>
 8009244:	3b07      	subs	r3, #7
 8009246:	e7f5      	b.n	8009234 <__tzcalc_limits+0x130>
 8009248:	2000      	movs	r0, #0
 800924a:	e7bd      	b.n	80091c8 <__tzcalc_limits+0xc4>
 800924c:	00015180 	.word	0x00015180
 8009250:	0800c558 	.word	0x0800c558

08009254 <__tz_lock>:
 8009254:	4770      	bx	lr

08009256 <__tz_unlock>:
 8009256:	4770      	bx	lr

08009258 <_tzset_unlocked>:
 8009258:	4b01      	ldr	r3, [pc, #4]	; (8009260 <_tzset_unlocked+0x8>)
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	f000 b802 	b.w	8009264 <_tzset_unlocked_r>
 8009260:	2000000c 	.word	0x2000000c

08009264 <_tzset_unlocked_r>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	b08d      	sub	sp, #52	; 0x34
 800926a:	4607      	mov	r7, r0
 800926c:	f001 fa4e 	bl	800a70c <__gettzinfo>
 8009270:	49af      	ldr	r1, [pc, #700]	; (8009530 <_tzset_unlocked_r+0x2cc>)
 8009272:	4eb0      	ldr	r6, [pc, #704]	; (8009534 <_tzset_unlocked_r+0x2d0>)
 8009274:	4605      	mov	r5, r0
 8009276:	4638      	mov	r0, r7
 8009278:	f001 fa40 	bl	800a6fc <_getenv_r>
 800927c:	4604      	mov	r4, r0
 800927e:	b970      	cbnz	r0, 800929e <_tzset_unlocked_r+0x3a>
 8009280:	4bad      	ldr	r3, [pc, #692]	; (8009538 <_tzset_unlocked_r+0x2d4>)
 8009282:	4aae      	ldr	r2, [pc, #696]	; (800953c <_tzset_unlocked_r+0x2d8>)
 8009284:	6018      	str	r0, [r3, #0]
 8009286:	4bae      	ldr	r3, [pc, #696]	; (8009540 <_tzset_unlocked_r+0x2dc>)
 8009288:	6018      	str	r0, [r3, #0]
 800928a:	4bae      	ldr	r3, [pc, #696]	; (8009544 <_tzset_unlocked_r+0x2e0>)
 800928c:	6830      	ldr	r0, [r6, #0]
 800928e:	e9c3 2200 	strd	r2, r2, [r3]
 8009292:	f001 facb 	bl	800a82c <free>
 8009296:	6034      	str	r4, [r6, #0]
 8009298:	b00d      	add	sp, #52	; 0x34
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	6831      	ldr	r1, [r6, #0]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d15f      	bne.n	8009364 <_tzset_unlocked_r+0x100>
 80092a4:	6830      	ldr	r0, [r6, #0]
 80092a6:	f001 fac1 	bl	800a82c <free>
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7f6 ffb8 	bl	8000220 <strlen>
 80092b0:	1c41      	adds	r1, r0, #1
 80092b2:	4638      	mov	r0, r7
 80092b4:	f001 fe0c 	bl	800aed0 <_malloc_r>
 80092b8:	6030      	str	r0, [r6, #0]
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d157      	bne.n	800936e <_tzset_unlocked_r+0x10a>
 80092be:	7823      	ldrb	r3, [r4, #0]
 80092c0:	4aa1      	ldr	r2, [pc, #644]	; (8009548 <_tzset_unlocked_r+0x2e4>)
 80092c2:	49a2      	ldr	r1, [pc, #648]	; (800954c <_tzset_unlocked_r+0x2e8>)
 80092c4:	2b3a      	cmp	r3, #58	; 0x3a
 80092c6:	bf08      	it	eq
 80092c8:	3401      	addeq	r4, #1
 80092ca:	ae0a      	add	r6, sp, #40	; 0x28
 80092cc:	4633      	mov	r3, r6
 80092ce:	4620      	mov	r0, r4
 80092d0:	f002 f8fa 	bl	800b4c8 <siscanf>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dddf      	ble.n	8009298 <_tzset_unlocked_r+0x34>
 80092d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092da:	18e7      	adds	r7, r4, r3
 80092dc:	5ce3      	ldrb	r3, [r4, r3]
 80092de:	2b2d      	cmp	r3, #45	; 0x2d
 80092e0:	d149      	bne.n	8009376 <_tzset_unlocked_r+0x112>
 80092e2:	3701      	adds	r7, #1
 80092e4:	f04f 34ff 	mov.w	r4, #4294967295
 80092e8:	f10d 0a20 	add.w	sl, sp, #32
 80092ec:	f10d 0b1e 	add.w	fp, sp, #30
 80092f0:	f04f 0800 	mov.w	r8, #0
 80092f4:	9603      	str	r6, [sp, #12]
 80092f6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80092fa:	f8cd b000 	str.w	fp, [sp]
 80092fe:	4633      	mov	r3, r6
 8009300:	aa07      	add	r2, sp, #28
 8009302:	4993      	ldr	r1, [pc, #588]	; (8009550 <_tzset_unlocked_r+0x2ec>)
 8009304:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009308:	4638      	mov	r0, r7
 800930a:	f8ad 8020 	strh.w	r8, [sp, #32]
 800930e:	f002 f8db 	bl	800b4c8 <siscanf>
 8009312:	4540      	cmp	r0, r8
 8009314:	ddc0      	ble.n	8009298 <_tzset_unlocked_r+0x34>
 8009316:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800931a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800931e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800955c <_tzset_unlocked_r+0x2f8>
 8009322:	213c      	movs	r1, #60	; 0x3c
 8009324:	fb01 2203 	mla	r2, r1, r3, r2
 8009328:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800932c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009330:	fb01 2303 	mla	r3, r1, r3, r2
 8009334:	435c      	muls	r4, r3
 8009336:	62ac      	str	r4, [r5, #40]	; 0x28
 8009338:	4c82      	ldr	r4, [pc, #520]	; (8009544 <_tzset_unlocked_r+0x2e0>)
 800933a:	4b83      	ldr	r3, [pc, #524]	; (8009548 <_tzset_unlocked_r+0x2e4>)
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009340:	4982      	ldr	r1, [pc, #520]	; (800954c <_tzset_unlocked_r+0x2e8>)
 8009342:	441f      	add	r7, r3
 8009344:	464a      	mov	r2, r9
 8009346:	4633      	mov	r3, r6
 8009348:	4638      	mov	r0, r7
 800934a:	f002 f8bd 	bl	800b4c8 <siscanf>
 800934e:	4540      	cmp	r0, r8
 8009350:	dc16      	bgt.n	8009380 <_tzset_unlocked_r+0x11c>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	6063      	str	r3, [r4, #4]
 8009356:	4b78      	ldr	r3, [pc, #480]	; (8009538 <_tzset_unlocked_r+0x2d4>)
 8009358:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	4b78      	ldr	r3, [pc, #480]	; (8009540 <_tzset_unlocked_r+0x2dc>)
 800935e:	f8c3 8000 	str.w	r8, [r3]
 8009362:	e799      	b.n	8009298 <_tzset_unlocked_r+0x34>
 8009364:	f7f6 ffb4 	bl	80002d0 <strcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	d095      	beq.n	8009298 <_tzset_unlocked_r+0x34>
 800936c:	e79a      	b.n	80092a4 <_tzset_unlocked_r+0x40>
 800936e:	4621      	mov	r1, r4
 8009370:	f002 f919 	bl	800b5a6 <strcpy>
 8009374:	e7a3      	b.n	80092be <_tzset_unlocked_r+0x5a>
 8009376:	2b2b      	cmp	r3, #43	; 0x2b
 8009378:	bf08      	it	eq
 800937a:	3701      	addeq	r7, #1
 800937c:	2401      	movs	r4, #1
 800937e:	e7b3      	b.n	80092e8 <_tzset_unlocked_r+0x84>
 8009380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009382:	f8c4 9004 	str.w	r9, [r4, #4]
 8009386:	18fc      	adds	r4, r7, r3
 8009388:	5cfb      	ldrb	r3, [r7, r3]
 800938a:	2b2d      	cmp	r3, #45	; 0x2d
 800938c:	f040 808b 	bne.w	80094a6 <_tzset_unlocked_r+0x242>
 8009390:	3401      	adds	r4, #1
 8009392:	f04f 37ff 	mov.w	r7, #4294967295
 8009396:	2300      	movs	r3, #0
 8009398:	f8ad 301c 	strh.w	r3, [sp, #28]
 800939c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80093a4:	930a      	str	r3, [sp, #40]	; 0x28
 80093a6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80093aa:	e9cd b600 	strd	fp, r6, [sp]
 80093ae:	4633      	mov	r3, r6
 80093b0:	aa07      	add	r2, sp, #28
 80093b2:	4967      	ldr	r1, [pc, #412]	; (8009550 <_tzset_unlocked_r+0x2ec>)
 80093b4:	4620      	mov	r0, r4
 80093b6:	f002 f887 	bl	800b4c8 <siscanf>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	dc78      	bgt.n	80094b0 <_tzset_unlocked_r+0x24c>
 80093be:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80093c0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80093c4:	652b      	str	r3, [r5, #80]	; 0x50
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	462f      	mov	r7, r5
 80093ca:	441c      	add	r4, r3
 80093cc:	f04f 0900 	mov.w	r9, #0
 80093d0:	7823      	ldrb	r3, [r4, #0]
 80093d2:	2b2c      	cmp	r3, #44	; 0x2c
 80093d4:	bf08      	it	eq
 80093d6:	3401      	addeq	r4, #1
 80093d8:	f894 8000 	ldrb.w	r8, [r4]
 80093dc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80093e0:	d179      	bne.n	80094d6 <_tzset_unlocked_r+0x272>
 80093e2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80093e6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80093ea:	ab09      	add	r3, sp, #36	; 0x24
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	9603      	str	r6, [sp, #12]
 80093f0:	4633      	mov	r3, r6
 80093f2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80093f6:	4957      	ldr	r1, [pc, #348]	; (8009554 <_tzset_unlocked_r+0x2f0>)
 80093f8:	4620      	mov	r0, r4
 80093fa:	f002 f865 	bl	800b4c8 <siscanf>
 80093fe:	2803      	cmp	r0, #3
 8009400:	f47f af4a 	bne.w	8009298 <_tzset_unlocked_r+0x34>
 8009404:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009408:	1e4b      	subs	r3, r1, #1
 800940a:	2b0b      	cmp	r3, #11
 800940c:	f63f af44 	bhi.w	8009298 <_tzset_unlocked_r+0x34>
 8009410:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009414:	1e53      	subs	r3, r2, #1
 8009416:	2b04      	cmp	r3, #4
 8009418:	f63f af3e 	bhi.w	8009298 <_tzset_unlocked_r+0x34>
 800941c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009420:	2b06      	cmp	r3, #6
 8009422:	f63f af39 	bhi.w	8009298 <_tzset_unlocked_r+0x34>
 8009426:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800942a:	f887 8008 	strb.w	r8, [r7, #8]
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009432:	eb04 0803 	add.w	r8, r4, r3
 8009436:	2302      	movs	r3, #2
 8009438:	f8ad 301c 	strh.w	r3, [sp, #28]
 800943c:	2300      	movs	r3, #0
 800943e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009442:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009446:	930a      	str	r3, [sp, #40]	; 0x28
 8009448:	f898 3000 	ldrb.w	r3, [r8]
 800944c:	2b2f      	cmp	r3, #47	; 0x2f
 800944e:	d109      	bne.n	8009464 <_tzset_unlocked_r+0x200>
 8009450:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009454:	e9cd b600 	strd	fp, r6, [sp]
 8009458:	4633      	mov	r3, r6
 800945a:	aa07      	add	r2, sp, #28
 800945c:	493e      	ldr	r1, [pc, #248]	; (8009558 <_tzset_unlocked_r+0x2f4>)
 800945e:	4640      	mov	r0, r8
 8009460:	f002 f832 	bl	800b4c8 <siscanf>
 8009464:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009468:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800946c:	213c      	movs	r1, #60	; 0x3c
 800946e:	fb01 2203 	mla	r2, r1, r3, r2
 8009472:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009476:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800947a:	fb01 2303 	mla	r3, r1, r3, r2
 800947e:	61bb      	str	r3, [r7, #24]
 8009480:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009482:	3728      	adds	r7, #40	; 0x28
 8009484:	4444      	add	r4, r8
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	d021      	beq.n	80094d0 <_tzset_unlocked_r+0x26c>
 800948c:	6868      	ldr	r0, [r5, #4]
 800948e:	f7ff fe39 	bl	8009104 <__tzcalc_limits>
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <_tzset_unlocked_r+0x2d4>)
 8009494:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	4a28      	ldr	r2, [pc, #160]	; (8009540 <_tzset_unlocked_r+0x2dc>)
 800949e:	bf18      	it	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	e6f8      	b.n	8009298 <_tzset_unlocked_r+0x34>
 80094a6:	2b2b      	cmp	r3, #43	; 0x2b
 80094a8:	bf08      	it	eq
 80094aa:	3401      	addeq	r4, #1
 80094ac:	2701      	movs	r7, #1
 80094ae:	e772      	b.n	8009396 <_tzset_unlocked_r+0x132>
 80094b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80094b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80094b8:	213c      	movs	r1, #60	; 0x3c
 80094ba:	fb01 2203 	mla	r2, r1, r3, r2
 80094be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80094c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80094c6:	fb01 2303 	mla	r3, r1, r3, r2
 80094ca:	435f      	muls	r7, r3
 80094cc:	652f      	str	r7, [r5, #80]	; 0x50
 80094ce:	e77a      	b.n	80093c6 <_tzset_unlocked_r+0x162>
 80094d0:	f04f 0901 	mov.w	r9, #1
 80094d4:	e77c      	b.n	80093d0 <_tzset_unlocked_r+0x16c>
 80094d6:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80094da:	bf06      	itte	eq
 80094dc:	3401      	addeq	r4, #1
 80094de:	4643      	moveq	r3, r8
 80094e0:	2344      	movne	r3, #68	; 0x44
 80094e2:	220a      	movs	r2, #10
 80094e4:	a90b      	add	r1, sp, #44	; 0x2c
 80094e6:	4620      	mov	r0, r4
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f002 f903 	bl	800b6f4 <strtoul>
 80094ee:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80094f2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80094f6:	45a0      	cmp	r8, r4
 80094f8:	9b05      	ldr	r3, [sp, #20]
 80094fa:	d114      	bne.n	8009526 <_tzset_unlocked_r+0x2c2>
 80094fc:	234d      	movs	r3, #77	; 0x4d
 80094fe:	f1b9 0f00 	cmp.w	r9, #0
 8009502:	d107      	bne.n	8009514 <_tzset_unlocked_r+0x2b0>
 8009504:	722b      	strb	r3, [r5, #8]
 8009506:	2103      	movs	r1, #3
 8009508:	2302      	movs	r3, #2
 800950a:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800950e:	f8c5 9014 	str.w	r9, [r5, #20]
 8009512:	e790      	b.n	8009436 <_tzset_unlocked_r+0x1d2>
 8009514:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009518:	220b      	movs	r2, #11
 800951a:	2301      	movs	r3, #1
 800951c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009520:	2300      	movs	r3, #0
 8009522:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009524:	e787      	b.n	8009436 <_tzset_unlocked_r+0x1d2>
 8009526:	b280      	uxth	r0, r0
 8009528:	723b      	strb	r3, [r7, #8]
 800952a:	6178      	str	r0, [r7, #20]
 800952c:	e783      	b.n	8009436 <_tzset_unlocked_r+0x1d2>
 800952e:	bf00      	nop
 8009530:	0800c4a2 	.word	0x0800c4a2
 8009534:	20007d50 	.word	0x20007d50
 8009538:	20007d58 	.word	0x20007d58
 800953c:	0800c4a5 	.word	0x0800c4a5
 8009540:	20007d54 	.word	0x20007d54
 8009544:	20000070 	.word	0x20000070
 8009548:	20007d43 	.word	0x20007d43
 800954c:	0800c4a9 	.word	0x0800c4a9
 8009550:	0800c4cc 	.word	0x0800c4cc
 8009554:	0800c4b8 	.word	0x0800c4b8
 8009558:	0800c4cb 	.word	0x0800c4cb
 800955c:	20007d38 	.word	0x20007d38

08009560 <__swbuf_r>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	460e      	mov	r6, r1
 8009564:	4614      	mov	r4, r2
 8009566:	4605      	mov	r5, r0
 8009568:	b118      	cbz	r0, 8009572 <__swbuf_r+0x12>
 800956a:	6983      	ldr	r3, [r0, #24]
 800956c:	b90b      	cbnz	r3, 8009572 <__swbuf_r+0x12>
 800956e:	f000 ffff 	bl	800a570 <__sinit>
 8009572:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <__swbuf_r+0x98>)
 8009574:	429c      	cmp	r4, r3
 8009576:	d12a      	bne.n	80095ce <__swbuf_r+0x6e>
 8009578:	686c      	ldr	r4, [r5, #4]
 800957a:	69a3      	ldr	r3, [r4, #24]
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	071a      	lsls	r2, r3, #28
 8009582:	d52e      	bpl.n	80095e2 <__swbuf_r+0x82>
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	b363      	cbz	r3, 80095e2 <__swbuf_r+0x82>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	1ac0      	subs	r0, r0, r3
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	b2f6      	uxtb	r6, r6
 8009592:	4283      	cmp	r3, r0
 8009594:	4637      	mov	r7, r6
 8009596:	dc04      	bgt.n	80095a2 <__swbuf_r+0x42>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 ff7e 	bl	800a49c <_fflush_r>
 80095a0:	bb28      	cbnz	r0, 80095ee <__swbuf_r+0x8e>
 80095a2:	68a3      	ldr	r3, [r4, #8]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	60a3      	str	r3, [r4, #8]
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	6022      	str	r2, [r4, #0]
 80095ae:	701e      	strb	r6, [r3, #0]
 80095b0:	6963      	ldr	r3, [r4, #20]
 80095b2:	3001      	adds	r0, #1
 80095b4:	4283      	cmp	r3, r0
 80095b6:	d004      	beq.n	80095c2 <__swbuf_r+0x62>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	07db      	lsls	r3, r3, #31
 80095bc:	d519      	bpl.n	80095f2 <__swbuf_r+0x92>
 80095be:	2e0a      	cmp	r6, #10
 80095c0:	d117      	bne.n	80095f2 <__swbuf_r+0x92>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 ff69 	bl	800a49c <_fflush_r>
 80095ca:	b190      	cbz	r0, 80095f2 <__swbuf_r+0x92>
 80095cc:	e00f      	b.n	80095ee <__swbuf_r+0x8e>
 80095ce:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <__swbuf_r+0x9c>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	d101      	bne.n	80095d8 <__swbuf_r+0x78>
 80095d4:	68ac      	ldr	r4, [r5, #8]
 80095d6:	e7d0      	b.n	800957a <__swbuf_r+0x1a>
 80095d8:	4b09      	ldr	r3, [pc, #36]	; (8009600 <__swbuf_r+0xa0>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	bf08      	it	eq
 80095de:	68ec      	ldreq	r4, [r5, #12]
 80095e0:	e7cb      	b.n	800957a <__swbuf_r+0x1a>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 f80d 	bl	8009604 <__swsetup_r>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0cc      	beq.n	8009588 <__swbuf_r+0x28>
 80095ee:	f04f 37ff 	mov.w	r7, #4294967295
 80095f2:	4638      	mov	r0, r7
 80095f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f6:	bf00      	nop
 80095f8:	0800c50c 	.word	0x0800c50c
 80095fc:	0800c52c 	.word	0x0800c52c
 8009600:	0800c4ec 	.word	0x0800c4ec

08009604 <__swsetup_r>:
 8009604:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <__swsetup_r+0xcc>)
 8009606:	b570      	push	{r4, r5, r6, lr}
 8009608:	681d      	ldr	r5, [r3, #0]
 800960a:	4606      	mov	r6, r0
 800960c:	460c      	mov	r4, r1
 800960e:	b125      	cbz	r5, 800961a <__swsetup_r+0x16>
 8009610:	69ab      	ldr	r3, [r5, #24]
 8009612:	b913      	cbnz	r3, 800961a <__swsetup_r+0x16>
 8009614:	4628      	mov	r0, r5
 8009616:	f000 ffab 	bl	800a570 <__sinit>
 800961a:	4b2e      	ldr	r3, [pc, #184]	; (80096d4 <__swsetup_r+0xd0>)
 800961c:	429c      	cmp	r4, r3
 800961e:	d10f      	bne.n	8009640 <__swsetup_r+0x3c>
 8009620:	686c      	ldr	r4, [r5, #4]
 8009622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009626:	b29a      	uxth	r2, r3
 8009628:	0715      	lsls	r5, r2, #28
 800962a:	d42c      	bmi.n	8009686 <__swsetup_r+0x82>
 800962c:	06d0      	lsls	r0, r2, #27
 800962e:	d411      	bmi.n	8009654 <__swsetup_r+0x50>
 8009630:	2209      	movs	r2, #9
 8009632:	6032      	str	r2, [r6, #0]
 8009634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	e03e      	b.n	80096be <__swsetup_r+0xba>
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__swsetup_r+0xd4>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d101      	bne.n	800964a <__swsetup_r+0x46>
 8009646:	68ac      	ldr	r4, [r5, #8]
 8009648:	e7eb      	b.n	8009622 <__swsetup_r+0x1e>
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <__swsetup_r+0xd8>)
 800964c:	429c      	cmp	r4, r3
 800964e:	bf08      	it	eq
 8009650:	68ec      	ldreq	r4, [r5, #12]
 8009652:	e7e6      	b.n	8009622 <__swsetup_r+0x1e>
 8009654:	0751      	lsls	r1, r2, #29
 8009656:	d512      	bpl.n	800967e <__swsetup_r+0x7a>
 8009658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965a:	b141      	cbz	r1, 800966e <__swsetup_r+0x6a>
 800965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <__swsetup_r+0x66>
 8009664:	4630      	mov	r0, r6
 8009666:	f001 fbe5 	bl	800ae34 <_free_r>
 800966a:	2300      	movs	r3, #0
 800966c:	6363      	str	r3, [r4, #52]	; 0x34
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	2300      	movs	r3, #0
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f043 0308 	orr.w	r3, r3, #8
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	b94b      	cbnz	r3, 800969e <__swsetup_r+0x9a>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009694:	d003      	beq.n	800969e <__swsetup_r+0x9a>
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f001 f87f 	bl	800a79c <__smakebuf_r>
 800969e:	89a2      	ldrh	r2, [r4, #12]
 80096a0:	f012 0301 	ands.w	r3, r2, #1
 80096a4:	d00c      	beq.n	80096c0 <__swsetup_r+0xbc>
 80096a6:	2300      	movs	r3, #0
 80096a8:	60a3      	str	r3, [r4, #8]
 80096aa:	6963      	ldr	r3, [r4, #20]
 80096ac:	425b      	negs	r3, r3
 80096ae:	61a3      	str	r3, [r4, #24]
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	b953      	cbnz	r3, 80096ca <__swsetup_r+0xc6>
 80096b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80096bc:	d1ba      	bne.n	8009634 <__swsetup_r+0x30>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	0792      	lsls	r2, r2, #30
 80096c2:	bf58      	it	pl
 80096c4:	6963      	ldrpl	r3, [r4, #20]
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	e7f2      	b.n	80096b0 <__swsetup_r+0xac>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e7f7      	b.n	80096be <__swsetup_r+0xba>
 80096ce:	bf00      	nop
 80096d0:	2000000c 	.word	0x2000000c
 80096d4:	0800c50c 	.word	0x0800c50c
 80096d8:	0800c52c 	.word	0x0800c52c
 80096dc:	0800c4ec 	.word	0x0800c4ec

080096e0 <div>:
 80096e0:	2900      	cmp	r1, #0
 80096e2:	b510      	push	{r4, lr}
 80096e4:	fb91 f4f2 	sdiv	r4, r1, r2
 80096e8:	fb02 1314 	mls	r3, r2, r4, r1
 80096ec:	db06      	blt.n	80096fc <div+0x1c>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da01      	bge.n	80096f6 <div+0x16>
 80096f2:	3401      	adds	r4, #1
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	e9c0 4300 	strd	r4, r3, [r0]
 80096fa:	bd10      	pop	{r4, pc}
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfc4      	itt	gt
 8009700:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009704:	189b      	addgt	r3, r3, r2
 8009706:	e7f6      	b.n	80096f6 <div+0x16>

08009708 <quorem>:
 8009708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	6903      	ldr	r3, [r0, #16]
 800970e:	690c      	ldr	r4, [r1, #16]
 8009710:	42a3      	cmp	r3, r4
 8009712:	4680      	mov	r8, r0
 8009714:	f2c0 8082 	blt.w	800981c <quorem+0x114>
 8009718:	3c01      	subs	r4, #1
 800971a:	f101 0714 	add.w	r7, r1, #20
 800971e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009722:	f100 0614 	add.w	r6, r0, #20
 8009726:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800972a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800972e:	eb06 030c 	add.w	r3, r6, ip
 8009732:	3501      	adds	r5, #1
 8009734:	eb07 090c 	add.w	r9, r7, ip
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	fbb0 f5f5 	udiv	r5, r0, r5
 800973e:	b395      	cbz	r5, 80097a6 <quorem+0x9e>
 8009740:	f04f 0a00 	mov.w	sl, #0
 8009744:	4638      	mov	r0, r7
 8009746:	46b6      	mov	lr, r6
 8009748:	46d3      	mov	fp, sl
 800974a:	f850 2b04 	ldr.w	r2, [r0], #4
 800974e:	b293      	uxth	r3, r2
 8009750:	fb05 a303 	mla	r3, r5, r3, sl
 8009754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009758:	b29b      	uxth	r3, r3
 800975a:	ebab 0303 	sub.w	r3, fp, r3
 800975e:	0c12      	lsrs	r2, r2, #16
 8009760:	f8de b000 	ldr.w	fp, [lr]
 8009764:	fb05 a202 	mla	r2, r5, r2, sl
 8009768:	fa13 f38b 	uxtah	r3, r3, fp
 800976c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009770:	fa1f fb82 	uxth.w	fp, r2
 8009774:	f8de 2000 	ldr.w	r2, [lr]
 8009778:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800977c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009780:	b29b      	uxth	r3, r3
 8009782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009786:	4581      	cmp	r9, r0
 8009788:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800978c:	f84e 3b04 	str.w	r3, [lr], #4
 8009790:	d2db      	bcs.n	800974a <quorem+0x42>
 8009792:	f856 300c 	ldr.w	r3, [r6, ip]
 8009796:	b933      	cbnz	r3, 80097a6 <quorem+0x9e>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	3b04      	subs	r3, #4
 800979c:	429e      	cmp	r6, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	d330      	bcc.n	8009804 <quorem+0xfc>
 80097a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80097a6:	4640      	mov	r0, r8
 80097a8:	f001 fa70 	bl	800ac8c <__mcmp>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	db25      	blt.n	80097fc <quorem+0xf4>
 80097b0:	3501      	adds	r5, #1
 80097b2:	4630      	mov	r0, r6
 80097b4:	f04f 0c00 	mov.w	ip, #0
 80097b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80097bc:	f8d0 e000 	ldr.w	lr, [r0]
 80097c0:	b293      	uxth	r3, r2
 80097c2:	ebac 0303 	sub.w	r3, ip, r3
 80097c6:	0c12      	lsrs	r2, r2, #16
 80097c8:	fa13 f38e 	uxtah	r3, r3, lr
 80097cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097da:	45b9      	cmp	r9, r7
 80097dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097e0:	f840 3b04 	str.w	r3, [r0], #4
 80097e4:	d2e8      	bcs.n	80097b8 <quorem+0xb0>
 80097e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80097ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80097ee:	b92a      	cbnz	r2, 80097fc <quorem+0xf4>
 80097f0:	3b04      	subs	r3, #4
 80097f2:	429e      	cmp	r6, r3
 80097f4:	461a      	mov	r2, r3
 80097f6:	d30b      	bcc.n	8009810 <quorem+0x108>
 80097f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80097fc:	4628      	mov	r0, r5
 80097fe:	b003      	add	sp, #12
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	6812      	ldr	r2, [r2, #0]
 8009806:	3b04      	subs	r3, #4
 8009808:	2a00      	cmp	r2, #0
 800980a:	d1ca      	bne.n	80097a2 <quorem+0x9a>
 800980c:	3c01      	subs	r4, #1
 800980e:	e7c5      	b.n	800979c <quorem+0x94>
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	3b04      	subs	r3, #4
 8009814:	2a00      	cmp	r2, #0
 8009816:	d1ef      	bne.n	80097f8 <quorem+0xf0>
 8009818:	3c01      	subs	r4, #1
 800981a:	e7ea      	b.n	80097f2 <quorem+0xea>
 800981c:	2000      	movs	r0, #0
 800981e:	e7ee      	b.n	80097fe <quorem+0xf6>

08009820 <_dtoa_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	ec57 6b10 	vmov	r6, r7, d0
 8009828:	b097      	sub	sp, #92	; 0x5c
 800982a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800982c:	9106      	str	r1, [sp, #24]
 800982e:	4604      	mov	r4, r0
 8009830:	920b      	str	r2, [sp, #44]	; 0x2c
 8009832:	9312      	str	r3, [sp, #72]	; 0x48
 8009834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009838:	e9cd 6700 	strd	r6, r7, [sp]
 800983c:	b93d      	cbnz	r5, 800984e <_dtoa_r+0x2e>
 800983e:	2010      	movs	r0, #16
 8009840:	f000 ffec 	bl	800a81c <malloc>
 8009844:	6260      	str	r0, [r4, #36]	; 0x24
 8009846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800984a:	6005      	str	r5, [r0, #0]
 800984c:	60c5      	str	r5, [r0, #12]
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	b151      	cbz	r1, 800986a <_dtoa_r+0x4a>
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	604a      	str	r2, [r1, #4]
 8009858:	2301      	movs	r3, #1
 800985a:	4093      	lsls	r3, r2
 800985c:	608b      	str	r3, [r1, #8]
 800985e:	4620      	mov	r0, r4
 8009860:	f001 f832 	bl	800a8c8 <_Bfree>
 8009864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	1e3b      	subs	r3, r7, #0
 800986c:	bfbb      	ittet	lt
 800986e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009872:	9301      	strlt	r3, [sp, #4]
 8009874:	2300      	movge	r3, #0
 8009876:	2201      	movlt	r2, #1
 8009878:	bfac      	ite	ge
 800987a:	f8c8 3000 	strge.w	r3, [r8]
 800987e:	f8c8 2000 	strlt.w	r2, [r8]
 8009882:	4baf      	ldr	r3, [pc, #700]	; (8009b40 <_dtoa_r+0x320>)
 8009884:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009888:	ea33 0308 	bics.w	r3, r3, r8
 800988c:	d114      	bne.n	80098b8 <_dtoa_r+0x98>
 800988e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009890:	f242 730f 	movw	r3, #9999	; 0x270f
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	9b00      	ldr	r3, [sp, #0]
 8009898:	b923      	cbnz	r3, 80098a4 <_dtoa_r+0x84>
 800989a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800989e:	2800      	cmp	r0, #0
 80098a0:	f000 8542 	beq.w	800a328 <_dtoa_r+0xb08>
 80098a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009b54 <_dtoa_r+0x334>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 8544 	beq.w	800a338 <_dtoa_r+0xb18>
 80098b0:	f10b 0303 	add.w	r3, fp, #3
 80098b4:	f000 bd3e 	b.w	800a334 <_dtoa_r+0xb14>
 80098b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f7 f932 	bl	8000b2c <__aeabi_dcmpeq>
 80098c8:	4681      	mov	r9, r0
 80098ca:	b168      	cbz	r0, 80098e8 <_dtoa_r+0xc8>
 80098cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ce:	2301      	movs	r3, #1
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 8524 	beq.w	800a322 <_dtoa_r+0xb02>
 80098da:	4b9a      	ldr	r3, [pc, #616]	; (8009b44 <_dtoa_r+0x324>)
 80098dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098de:	f103 3bff 	add.w	fp, r3, #4294967295
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f000 bd28 	b.w	800a338 <_dtoa_r+0xb18>
 80098e8:	aa14      	add	r2, sp, #80	; 0x50
 80098ea:	a915      	add	r1, sp, #84	; 0x54
 80098ec:	ec47 6b10 	vmov	d0, r6, r7
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 fa42 	bl	800ad7a <__d2b>
 80098f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098fa:	9004      	str	r0, [sp, #16]
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	d07c      	beq.n	80099fa <_dtoa_r+0x1da>
 8009900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009904:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009908:	46b2      	mov	sl, r6
 800990a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800990e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009912:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009916:	2200      	movs	r2, #0
 8009918:	4b8b      	ldr	r3, [pc, #556]	; (8009b48 <_dtoa_r+0x328>)
 800991a:	4650      	mov	r0, sl
 800991c:	4659      	mov	r1, fp
 800991e:	f7f6 fce5 	bl	80002ec <__aeabi_dsub>
 8009922:	a381      	add	r3, pc, #516	; (adr r3, 8009b28 <_dtoa_r+0x308>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f7f6 fe98 	bl	800065c <__aeabi_dmul>
 800992c:	a380      	add	r3, pc, #512	; (adr r3, 8009b30 <_dtoa_r+0x310>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fcdd 	bl	80002f0 <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	4628      	mov	r0, r5
 800993a:	460f      	mov	r7, r1
 800993c:	f7f6 fe24 	bl	8000588 <__aeabi_i2d>
 8009940:	a37d      	add	r3, pc, #500	; (adr r3, 8009b38 <_dtoa_r+0x318>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fe89 	bl	800065c <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f6 fccd 	bl	80002f0 <__adddf3>
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	f7f7 f92f 	bl	8000bbc <__aeabi_d2iz>
 800995e:	2200      	movs	r2, #0
 8009960:	4682      	mov	sl, r0
 8009962:	2300      	movs	r3, #0
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	f7f7 f8ea 	bl	8000b40 <__aeabi_dcmplt>
 800996c:	b148      	cbz	r0, 8009982 <_dtoa_r+0x162>
 800996e:	4650      	mov	r0, sl
 8009970:	f7f6 fe0a 	bl	8000588 <__aeabi_i2d>
 8009974:	4632      	mov	r2, r6
 8009976:	463b      	mov	r3, r7
 8009978:	f7f7 f8d8 	bl	8000b2c <__aeabi_dcmpeq>
 800997c:	b908      	cbnz	r0, 8009982 <_dtoa_r+0x162>
 800997e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009982:	f1ba 0f16 	cmp.w	sl, #22
 8009986:	d859      	bhi.n	8009a3c <_dtoa_r+0x21c>
 8009988:	4970      	ldr	r1, [pc, #448]	; (8009b4c <_dtoa_r+0x32c>)
 800998a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800998e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009996:	f7f7 f8f1 	bl	8000b7c <__aeabi_dcmpgt>
 800999a:	2800      	cmp	r0, #0
 800999c:	d050      	beq.n	8009a40 <_dtoa_r+0x220>
 800999e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099a2:	2300      	movs	r3, #0
 80099a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099a8:	1b5d      	subs	r5, r3, r5
 80099aa:	f1b5 0801 	subs.w	r8, r5, #1
 80099ae:	bf49      	itett	mi
 80099b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80099b4:	2300      	movpl	r3, #0
 80099b6:	9305      	strmi	r3, [sp, #20]
 80099b8:	f04f 0800 	movmi.w	r8, #0
 80099bc:	bf58      	it	pl
 80099be:	9305      	strpl	r3, [sp, #20]
 80099c0:	f1ba 0f00 	cmp.w	sl, #0
 80099c4:	db3e      	blt.n	8009a44 <_dtoa_r+0x224>
 80099c6:	2300      	movs	r3, #0
 80099c8:	44d0      	add	r8, sl
 80099ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	9b06      	ldr	r3, [sp, #24]
 80099d2:	2b09      	cmp	r3, #9
 80099d4:	f200 8090 	bhi.w	8009af8 <_dtoa_r+0x2d8>
 80099d8:	2b05      	cmp	r3, #5
 80099da:	bfc4      	itt	gt
 80099dc:	3b04      	subgt	r3, #4
 80099de:	9306      	strgt	r3, [sp, #24]
 80099e0:	9b06      	ldr	r3, [sp, #24]
 80099e2:	f1a3 0302 	sub.w	r3, r3, #2
 80099e6:	bfcc      	ite	gt
 80099e8:	2500      	movgt	r5, #0
 80099ea:	2501      	movle	r5, #1
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	f200 808f 	bhi.w	8009b10 <_dtoa_r+0x2f0>
 80099f2:	e8df f003 	tbb	[pc, r3]
 80099f6:	7f7d      	.short	0x7f7d
 80099f8:	7131      	.short	0x7131
 80099fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80099fe:	441d      	add	r5, r3
 8009a00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009a04:	2820      	cmp	r0, #32
 8009a06:	dd13      	ble.n	8009a30 <_dtoa_r+0x210>
 8009a08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009a0c:	9b00      	ldr	r3, [sp, #0]
 8009a0e:	fa08 f800 	lsl.w	r8, r8, r0
 8009a12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009a16:	fa23 f000 	lsr.w	r0, r3, r0
 8009a1a:	ea48 0000 	orr.w	r0, r8, r0
 8009a1e:	f7f6 fda3 	bl	8000568 <__aeabi_ui2d>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4682      	mov	sl, r0
 8009a26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009a2a:	3d01      	subs	r5, #1
 8009a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a2e:	e772      	b.n	8009916 <_dtoa_r+0xf6>
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	f1c0 0020 	rsb	r0, r0, #32
 8009a36:	fa03 f000 	lsl.w	r0, r3, r0
 8009a3a:	e7f0      	b.n	8009a1e <_dtoa_r+0x1fe>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e7b1      	b.n	80099a4 <_dtoa_r+0x184>
 8009a40:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a42:	e7b0      	b.n	80099a6 <_dtoa_r+0x186>
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	eba3 030a 	sub.w	r3, r3, sl
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	f1ca 0300 	rsb	r3, sl, #0
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	2300      	movs	r3, #0
 8009a54:	930e      	str	r3, [sp, #56]	; 0x38
 8009a56:	e7bb      	b.n	80099d0 <_dtoa_r+0x1b0>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd59      	ble.n	8009b16 <_dtoa_r+0x2f6>
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	4699      	mov	r9, r3
 8009a66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a68:	2200      	movs	r2, #0
 8009a6a:	6072      	str	r2, [r6, #4]
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	f102 0014 	add.w	r0, r2, #20
 8009a72:	4298      	cmp	r0, r3
 8009a74:	6871      	ldr	r1, [r6, #4]
 8009a76:	d953      	bls.n	8009b20 <_dtoa_r+0x300>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 fef1 	bl	800a860 <_Balloc>
 8009a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a80:	6030      	str	r0, [r6, #0]
 8009a82:	f1b9 0f0e 	cmp.w	r9, #14
 8009a86:	f8d3 b000 	ldr.w	fp, [r3]
 8009a8a:	f200 80e6 	bhi.w	8009c5a <_dtoa_r+0x43a>
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	f000 80e3 	beq.w	8009c5a <_dtoa_r+0x43a>
 8009a94:	ed9d 7b00 	vldr	d7, [sp]
 8009a98:	f1ba 0f00 	cmp.w	sl, #0
 8009a9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009aa0:	dd74      	ble.n	8009b8c <_dtoa_r+0x36c>
 8009aa2:	4a2a      	ldr	r2, [pc, #168]	; (8009b4c <_dtoa_r+0x32c>)
 8009aa4:	f00a 030f 	and.w	r3, sl, #15
 8009aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009aac:	ed93 7b00 	vldr	d7, [r3]
 8009ab0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009ab4:	06f0      	lsls	r0, r6, #27
 8009ab6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009aba:	d565      	bpl.n	8009b88 <_dtoa_r+0x368>
 8009abc:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <_dtoa_r+0x330>)
 8009abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ac6:	f7f6 fef3 	bl	80008b0 <__aeabi_ddiv>
 8009aca:	e9cd 0100 	strd	r0, r1, [sp]
 8009ace:	f006 060f 	and.w	r6, r6, #15
 8009ad2:	2503      	movs	r5, #3
 8009ad4:	4f1e      	ldr	r7, [pc, #120]	; (8009b50 <_dtoa_r+0x330>)
 8009ad6:	e04c      	b.n	8009b72 <_dtoa_r+0x352>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	930a      	str	r3, [sp, #40]	; 0x28
 8009adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ade:	4453      	add	r3, sl
 8009ae0:	f103 0901 	add.w	r9, r3, #1
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	bfb8      	it	lt
 8009aec:	2301      	movlt	r3, #1
 8009aee:	e7ba      	b.n	8009a66 <_dtoa_r+0x246>
 8009af0:	2300      	movs	r3, #0
 8009af2:	e7b2      	b.n	8009a5a <_dtoa_r+0x23a>
 8009af4:	2300      	movs	r3, #0
 8009af6:	e7f0      	b.n	8009ada <_dtoa_r+0x2ba>
 8009af8:	2501      	movs	r5, #1
 8009afa:	2300      	movs	r3, #0
 8009afc:	9306      	str	r3, [sp, #24]
 8009afe:	950a      	str	r5, [sp, #40]	; 0x28
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	9302      	str	r3, [sp, #8]
 8009b06:	4699      	mov	r9, r3
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2312      	movs	r3, #18
 8009b0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b0e:	e7aa      	b.n	8009a66 <_dtoa_r+0x246>
 8009b10:	2301      	movs	r3, #1
 8009b12:	930a      	str	r3, [sp, #40]	; 0x28
 8009b14:	e7f4      	b.n	8009b00 <_dtoa_r+0x2e0>
 8009b16:	2301      	movs	r3, #1
 8009b18:	9302      	str	r3, [sp, #8]
 8009b1a:	4699      	mov	r9, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	e7f5      	b.n	8009b0c <_dtoa_r+0x2ec>
 8009b20:	3101      	adds	r1, #1
 8009b22:	6071      	str	r1, [r6, #4]
 8009b24:	0052      	lsls	r2, r2, #1
 8009b26:	e7a2      	b.n	8009a6e <_dtoa_r+0x24e>
 8009b28:	636f4361 	.word	0x636f4361
 8009b2c:	3fd287a7 	.word	0x3fd287a7
 8009b30:	8b60c8b3 	.word	0x8b60c8b3
 8009b34:	3fc68a28 	.word	0x3fc68a28
 8009b38:	509f79fb 	.word	0x509f79fb
 8009b3c:	3fd34413 	.word	0x3fd34413
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	0800c7dd 	.word	0x0800c7dd
 8009b48:	3ff80000 	.word	0x3ff80000
 8009b4c:	0800c5e0 	.word	0x0800c5e0
 8009b50:	0800c5b8 	.word	0x0800c5b8
 8009b54:	0800c4e7 	.word	0x0800c4e7
 8009b58:	07f1      	lsls	r1, r6, #31
 8009b5a:	d508      	bpl.n	8009b6e <_dtoa_r+0x34e>
 8009b5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b64:	f7f6 fd7a 	bl	800065c <__aeabi_dmul>
 8009b68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	1076      	asrs	r6, r6, #1
 8009b70:	3708      	adds	r7, #8
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d1f0      	bne.n	8009b58 <_dtoa_r+0x338>
 8009b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b7e:	f7f6 fe97 	bl	80008b0 <__aeabi_ddiv>
 8009b82:	e9cd 0100 	strd	r0, r1, [sp]
 8009b86:	e01a      	b.n	8009bbe <_dtoa_r+0x39e>
 8009b88:	2502      	movs	r5, #2
 8009b8a:	e7a3      	b.n	8009ad4 <_dtoa_r+0x2b4>
 8009b8c:	f000 80a0 	beq.w	8009cd0 <_dtoa_r+0x4b0>
 8009b90:	f1ca 0600 	rsb	r6, sl, #0
 8009b94:	4b9f      	ldr	r3, [pc, #636]	; (8009e14 <_dtoa_r+0x5f4>)
 8009b96:	4fa0      	ldr	r7, [pc, #640]	; (8009e18 <_dtoa_r+0x5f8>)
 8009b98:	f006 020f 	and.w	r2, r6, #15
 8009b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ba8:	f7f6 fd58 	bl	800065c <__aeabi_dmul>
 8009bac:	e9cd 0100 	strd	r0, r1, [sp]
 8009bb0:	1136      	asrs	r6, r6, #4
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2502      	movs	r5, #2
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d17f      	bne.n	8009cba <_dtoa_r+0x49a>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e1      	bne.n	8009b82 <_dtoa_r+0x362>
 8009bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8087 	beq.w	8009cd4 <_dtoa_r+0x4b4>
 8009bc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	4b93      	ldr	r3, [pc, #588]	; (8009e1c <_dtoa_r+0x5fc>)
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 ffb5 	bl	8000b40 <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d07c      	beq.n	8009cd4 <_dtoa_r+0x4b4>
 8009bda:	f1b9 0f00 	cmp.w	r9, #0
 8009bde:	d079      	beq.n	8009cd4 <_dtoa_r+0x4b4>
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dd35      	ble.n	8009c52 <_dtoa_r+0x432>
 8009be6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	4639      	mov	r1, r7
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b8b      	ldr	r3, [pc, #556]	; (8009e20 <_dtoa_r+0x600>)
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7f6 fd32 	bl	800065c <__aeabi_dmul>
 8009bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bfc:	9f02      	ldr	r7, [sp, #8]
 8009bfe:	3501      	adds	r5, #1
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7f6 fcc1 	bl	8000588 <__aeabi_i2d>
 8009c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c0a:	f7f6 fd27 	bl	800065c <__aeabi_dmul>
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4b84      	ldr	r3, [pc, #528]	; (8009e24 <_dtoa_r+0x604>)
 8009c12:	f7f6 fb6d 	bl	80002f0 <__adddf3>
 8009c16:	4605      	mov	r5, r0
 8009c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c1c:	2f00      	cmp	r7, #0
 8009c1e:	d15d      	bne.n	8009cdc <_dtoa_r+0x4bc>
 8009c20:	2200      	movs	r2, #0
 8009c22:	4b81      	ldr	r3, [pc, #516]	; (8009e28 <_dtoa_r+0x608>)
 8009c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c28:	f7f6 fb60 	bl	80002ec <__aeabi_dsub>
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4633      	mov	r3, r6
 8009c30:	e9cd 0100 	strd	r0, r1, [sp]
 8009c34:	f7f6 ffa2 	bl	8000b7c <__aeabi_dcmpgt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	f040 8288 	bne.w	800a14e <_dtoa_r+0x92e>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c48:	f7f6 ff7a 	bl	8000b40 <__aeabi_dcmplt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 827c 	bne.w	800a14a <_dtoa_r+0x92a>
 8009c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c56:	e9cd 2300 	strd	r2, r3, [sp]
 8009c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f2c0 8150 	blt.w	8009f02 <_dtoa_r+0x6e2>
 8009c62:	f1ba 0f0e 	cmp.w	sl, #14
 8009c66:	f300 814c 	bgt.w	8009f02 <_dtoa_r+0x6e2>
 8009c6a:	4b6a      	ldr	r3, [pc, #424]	; (8009e14 <_dtoa_r+0x5f4>)
 8009c6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c70:	ed93 7b00 	vldr	d7, [r3]
 8009c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c7c:	f280 80d8 	bge.w	8009e30 <_dtoa_r+0x610>
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	f300 80d4 	bgt.w	8009e30 <_dtoa_r+0x610>
 8009c88:	f040 825e 	bne.w	800a148 <_dtoa_r+0x928>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4b66      	ldr	r3, [pc, #408]	; (8009e28 <_dtoa_r+0x608>)
 8009c90:	ec51 0b17 	vmov	r0, r1, d7
 8009c94:	f7f6 fce2 	bl	800065c <__aeabi_dmul>
 8009c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9c:	f7f6 ff64 	bl	8000b68 <__aeabi_dcmpge>
 8009ca0:	464f      	mov	r7, r9
 8009ca2:	464e      	mov	r6, r9
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f040 8234 	bne.w	800a112 <_dtoa_r+0x8f2>
 8009caa:	2331      	movs	r3, #49	; 0x31
 8009cac:	f10b 0501 	add.w	r5, fp, #1
 8009cb0:	f88b 3000 	strb.w	r3, [fp]
 8009cb4:	f10a 0a01 	add.w	sl, sl, #1
 8009cb8:	e22f      	b.n	800a11a <_dtoa_r+0x8fa>
 8009cba:	07f2      	lsls	r2, r6, #31
 8009cbc:	d505      	bpl.n	8009cca <_dtoa_r+0x4aa>
 8009cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc2:	f7f6 fccb 	bl	800065c <__aeabi_dmul>
 8009cc6:	3501      	adds	r5, #1
 8009cc8:	2301      	movs	r3, #1
 8009cca:	1076      	asrs	r6, r6, #1
 8009ccc:	3708      	adds	r7, #8
 8009cce:	e772      	b.n	8009bb6 <_dtoa_r+0x396>
 8009cd0:	2502      	movs	r5, #2
 8009cd2:	e774      	b.n	8009bbe <_dtoa_r+0x39e>
 8009cd4:	f8cd a020 	str.w	sl, [sp, #32]
 8009cd8:	464f      	mov	r7, r9
 8009cda:	e791      	b.n	8009c00 <_dtoa_r+0x3e0>
 8009cdc:	4b4d      	ldr	r3, [pc, #308]	; (8009e14 <_dtoa_r+0x5f4>)
 8009cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ce2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d047      	beq.n	8009d7c <_dtoa_r+0x55c>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	494e      	ldr	r1, [pc, #312]	; (8009e2c <_dtoa_r+0x60c>)
 8009cf4:	f7f6 fddc 	bl	80008b0 <__aeabi_ddiv>
 8009cf8:	462a      	mov	r2, r5
 8009cfa:	4633      	mov	r3, r6
 8009cfc:	f7f6 faf6 	bl	80002ec <__aeabi_dsub>
 8009d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d04:	465d      	mov	r5, fp
 8009d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d0a:	f7f6 ff57 	bl	8000bbc <__aeabi_d2iz>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	f7f6 fc3a 	bl	8000588 <__aeabi_i2d>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d1c:	f7f6 fae6 	bl	80002ec <__aeabi_dsub>
 8009d20:	3630      	adds	r6, #48	; 0x30
 8009d22:	f805 6b01 	strb.w	r6, [r5], #1
 8009d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d2e:	f7f6 ff07 	bl	8000b40 <__aeabi_dcmplt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d163      	bne.n	8009dfe <_dtoa_r+0x5de>
 8009d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	4937      	ldr	r1, [pc, #220]	; (8009e1c <_dtoa_r+0x5fc>)
 8009d3e:	f7f6 fad5 	bl	80002ec <__aeabi_dsub>
 8009d42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d46:	f7f6 fefb 	bl	8000b40 <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f040 80b7 	bne.w	8009ebe <_dtoa_r+0x69e>
 8009d50:	eba5 030b 	sub.w	r3, r5, fp
 8009d54:	429f      	cmp	r7, r3
 8009d56:	f77f af7c 	ble.w	8009c52 <_dtoa_r+0x432>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4b30      	ldr	r3, [pc, #192]	; (8009e20 <_dtoa_r+0x600>)
 8009d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d62:	f7f6 fc7b 	bl	800065c <__aeabi_dmul>
 8009d66:	2200      	movs	r2, #0
 8009d68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d6c:	4b2c      	ldr	r3, [pc, #176]	; (8009e20 <_dtoa_r+0x600>)
 8009d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d72:	f7f6 fc73 	bl	800065c <__aeabi_dmul>
 8009d76:	e9cd 0100 	strd	r0, r1, [sp]
 8009d7a:	e7c4      	b.n	8009d06 <_dtoa_r+0x4e6>
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4633      	mov	r3, r6
 8009d80:	f7f6 fc6c 	bl	800065c <__aeabi_dmul>
 8009d84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d88:	eb0b 0507 	add.w	r5, fp, r7
 8009d8c:	465e      	mov	r6, fp
 8009d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d92:	f7f6 ff13 	bl	8000bbc <__aeabi_d2iz>
 8009d96:	4607      	mov	r7, r0
 8009d98:	f7f6 fbf6 	bl	8000588 <__aeabi_i2d>
 8009d9c:	3730      	adds	r7, #48	; 0x30
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009da6:	f7f6 faa1 	bl	80002ec <__aeabi_dsub>
 8009daa:	f806 7b01 	strb.w	r7, [r6], #1
 8009dae:	42ae      	cmp	r6, r5
 8009db0:	e9cd 0100 	strd	r0, r1, [sp]
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	d126      	bne.n	8009e08 <_dtoa_r+0x5e8>
 8009dba:	4b1c      	ldr	r3, [pc, #112]	; (8009e2c <_dtoa_r+0x60c>)
 8009dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dc0:	f7f6 fa96 	bl	80002f0 <__adddf3>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dcc:	f7f6 fed6 	bl	8000b7c <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d174      	bne.n	8009ebe <_dtoa_r+0x69e>
 8009dd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4914      	ldr	r1, [pc, #80]	; (8009e2c <_dtoa_r+0x60c>)
 8009ddc:	f7f6 fa86 	bl	80002ec <__aeabi_dsub>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009de8:	f7f6 feaa 	bl	8000b40 <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f af30 	beq.w	8009c52 <_dtoa_r+0x432>
 8009df2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009df6:	2b30      	cmp	r3, #48	; 0x30
 8009df8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009dfc:	d002      	beq.n	8009e04 <_dtoa_r+0x5e4>
 8009dfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e02:	e04a      	b.n	8009e9a <_dtoa_r+0x67a>
 8009e04:	4615      	mov	r5, r2
 8009e06:	e7f4      	b.n	8009df2 <_dtoa_r+0x5d2>
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <_dtoa_r+0x600>)
 8009e0a:	f7f6 fc27 	bl	800065c <__aeabi_dmul>
 8009e0e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e12:	e7bc      	b.n	8009d8e <_dtoa_r+0x56e>
 8009e14:	0800c5e0 	.word	0x0800c5e0
 8009e18:	0800c5b8 	.word	0x0800c5b8
 8009e1c:	3ff00000 	.word	0x3ff00000
 8009e20:	40240000 	.word	0x40240000
 8009e24:	401c0000 	.word	0x401c0000
 8009e28:	40140000 	.word	0x40140000
 8009e2c:	3fe00000 	.word	0x3fe00000
 8009e30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e34:	465d      	mov	r5, fp
 8009e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 fd37 	bl	80008b0 <__aeabi_ddiv>
 8009e42:	f7f6 febb 	bl	8000bbc <__aeabi_d2iz>
 8009e46:	4680      	mov	r8, r0
 8009e48:	f7f6 fb9e 	bl	8000588 <__aeabi_i2d>
 8009e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e50:	f7f6 fc04 	bl	800065c <__aeabi_dmul>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009e60:	f7f6 fa44 	bl	80002ec <__aeabi_dsub>
 8009e64:	f805 6b01 	strb.w	r6, [r5], #1
 8009e68:	eba5 060b 	sub.w	r6, r5, fp
 8009e6c:	45b1      	cmp	r9, r6
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	d139      	bne.n	8009ee8 <_dtoa_r+0x6c8>
 8009e74:	f7f6 fa3c 	bl	80002f0 <__adddf3>
 8009e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	f7f6 fe7c 	bl	8000b7c <__aeabi_dcmpgt>
 8009e84:	b9c8      	cbnz	r0, 8009eba <_dtoa_r+0x69a>
 8009e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	f7f6 fe4d 	bl	8000b2c <__aeabi_dcmpeq>
 8009e92:	b110      	cbz	r0, 8009e9a <_dtoa_r+0x67a>
 8009e94:	f018 0f01 	tst.w	r8, #1
 8009e98:	d10f      	bne.n	8009eba <_dtoa_r+0x69a>
 8009e9a:	9904      	ldr	r1, [sp, #16]
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fd13 	bl	800a8c8 <_Bfree>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ea6:	702b      	strb	r3, [r5, #0]
 8009ea8:	f10a 0301 	add.w	r3, sl, #1
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8241 	beq.w	800a338 <_dtoa_r+0xb18>
 8009eb6:	601d      	str	r5, [r3, #0]
 8009eb8:	e23e      	b.n	800a338 <_dtoa_r+0xb18>
 8009eba:	f8cd a020 	str.w	sl, [sp, #32]
 8009ebe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ec2:	2a39      	cmp	r2, #57	; 0x39
 8009ec4:	f105 33ff 	add.w	r3, r5, #4294967295
 8009ec8:	d108      	bne.n	8009edc <_dtoa_r+0x6bc>
 8009eca:	459b      	cmp	fp, r3
 8009ecc:	d10a      	bne.n	8009ee4 <_dtoa_r+0x6c4>
 8009ece:	9b08      	ldr	r3, [sp, #32]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	2330      	movs	r3, #48	; 0x30
 8009ed6:	f88b 3000 	strb.w	r3, [fp]
 8009eda:	465b      	mov	r3, fp
 8009edc:	781a      	ldrb	r2, [r3, #0]
 8009ede:	3201      	adds	r2, #1
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	e78c      	b.n	8009dfe <_dtoa_r+0x5de>
 8009ee4:	461d      	mov	r5, r3
 8009ee6:	e7ea      	b.n	8009ebe <_dtoa_r+0x69e>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4b9b      	ldr	r3, [pc, #620]	; (800a158 <_dtoa_r+0x938>)
 8009eec:	f7f6 fbb6 	bl	800065c <__aeabi_dmul>
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	f7f6 fe18 	bl	8000b2c <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d09a      	beq.n	8009e36 <_dtoa_r+0x616>
 8009f00:	e7cb      	b.n	8009e9a <_dtoa_r+0x67a>
 8009f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	f000 808b 	beq.w	800a020 <_dtoa_r+0x800>
 8009f0a:	9a06      	ldr	r2, [sp, #24]
 8009f0c:	2a01      	cmp	r2, #1
 8009f0e:	dc6e      	bgt.n	8009fee <_dtoa_r+0x7ce>
 8009f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d067      	beq.n	8009fe6 <_dtoa_r+0x7c6>
 8009f16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f1a:	9f07      	ldr	r7, [sp, #28]
 8009f1c:	9d05      	ldr	r5, [sp, #20]
 8009f1e:	9a05      	ldr	r2, [sp, #20]
 8009f20:	2101      	movs	r1, #1
 8009f22:	441a      	add	r2, r3
 8009f24:	4620      	mov	r0, r4
 8009f26:	9205      	str	r2, [sp, #20]
 8009f28:	4498      	add	r8, r3
 8009f2a:	f000 fd6d 	bl	800aa08 <__i2b>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	dd0c      	ble.n	8009f4e <_dtoa_r+0x72e>
 8009f34:	f1b8 0f00 	cmp.w	r8, #0
 8009f38:	dd09      	ble.n	8009f4e <_dtoa_r+0x72e>
 8009f3a:	4545      	cmp	r5, r8
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	462b      	mov	r3, r5
 8009f40:	bfa8      	it	ge
 8009f42:	4643      	movge	r3, r8
 8009f44:	1ad2      	subs	r2, r2, r3
 8009f46:	9205      	str	r2, [sp, #20]
 8009f48:	1aed      	subs	r5, r5, r3
 8009f4a:	eba8 0803 	sub.w	r8, r8, r3
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	b1eb      	cbz	r3, 8009f8e <_dtoa_r+0x76e>
 8009f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d067      	beq.n	800a028 <_dtoa_r+0x808>
 8009f58:	b18f      	cbz	r7, 8009f7e <_dtoa_r+0x75e>
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	463a      	mov	r2, r7
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fdf2 	bl	800ab48 <__pow5mult>
 8009f64:	9a04      	ldr	r2, [sp, #16]
 8009f66:	4601      	mov	r1, r0
 8009f68:	4606      	mov	r6, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fd55 	bl	800aa1a <__multiply>
 8009f70:	9904      	ldr	r1, [sp, #16]
 8009f72:	9008      	str	r0, [sp, #32]
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fca7 	bl	800a8c8 <_Bfree>
 8009f7a:	9b08      	ldr	r3, [sp, #32]
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	1bda      	subs	r2, r3, r7
 8009f82:	d004      	beq.n	8009f8e <_dtoa_r+0x76e>
 8009f84:	9904      	ldr	r1, [sp, #16]
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fdde 	bl	800ab48 <__pow5mult>
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fd39 	bl	800aa08 <__i2b>
 8009f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f98:	4607      	mov	r7, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 81d0 	beq.w	800a340 <_dtoa_r+0xb20>
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fdcf 	bl	800ab48 <__pow5mult>
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	4607      	mov	r7, r0
 8009fb0:	dc40      	bgt.n	800a034 <_dtoa_r+0x814>
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d139      	bne.n	800a02c <_dtoa_r+0x80c>
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d136      	bne.n	800a030 <_dtoa_r+0x810>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fc8:	0d1b      	lsrs	r3, r3, #20
 8009fca:	051b      	lsls	r3, r3, #20
 8009fcc:	b12b      	cbz	r3, 8009fda <_dtoa_r+0x7ba>
 8009fce:	9b05      	ldr	r3, [sp, #20]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	9305      	str	r3, [sp, #20]
 8009fd4:	f108 0801 	add.w	r8, r8, #1
 8009fd8:	2301      	movs	r3, #1
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d12a      	bne.n	800a038 <_dtoa_r+0x818>
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e030      	b.n	800a048 <_dtoa_r+0x828>
 8009fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fe8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fec:	e795      	b.n	8009f1a <_dtoa_r+0x6fa>
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	f109 37ff 	add.w	r7, r9, #4294967295
 8009ff4:	42bb      	cmp	r3, r7
 8009ff6:	bfbf      	itttt	lt
 8009ff8:	9b07      	ldrlt	r3, [sp, #28]
 8009ffa:	9707      	strlt	r7, [sp, #28]
 8009ffc:	1afa      	sublt	r2, r7, r3
 8009ffe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a000:	bfbb      	ittet	lt
 800a002:	189b      	addlt	r3, r3, r2
 800a004:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a006:	1bdf      	subge	r7, r3, r7
 800a008:	2700      	movlt	r7, #0
 800a00a:	f1b9 0f00 	cmp.w	r9, #0
 800a00e:	bfb5      	itete	lt
 800a010:	9b05      	ldrlt	r3, [sp, #20]
 800a012:	9d05      	ldrge	r5, [sp, #20]
 800a014:	eba3 0509 	sublt.w	r5, r3, r9
 800a018:	464b      	movge	r3, r9
 800a01a:	bfb8      	it	lt
 800a01c:	2300      	movlt	r3, #0
 800a01e:	e77e      	b.n	8009f1e <_dtoa_r+0x6fe>
 800a020:	9f07      	ldr	r7, [sp, #28]
 800a022:	9d05      	ldr	r5, [sp, #20]
 800a024:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a026:	e783      	b.n	8009f30 <_dtoa_r+0x710>
 800a028:	9a07      	ldr	r2, [sp, #28]
 800a02a:	e7ab      	b.n	8009f84 <_dtoa_r+0x764>
 800a02c:	2300      	movs	r3, #0
 800a02e:	e7d4      	b.n	8009fda <_dtoa_r+0x7ba>
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	e7d2      	b.n	8009fda <_dtoa_r+0x7ba>
 800a034:	2300      	movs	r3, #0
 800a036:	9307      	str	r3, [sp, #28]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a03e:	6918      	ldr	r0, [r3, #16]
 800a040:	f000 fc94 	bl	800a96c <__hi0bits>
 800a044:	f1c0 0020 	rsb	r0, r0, #32
 800a048:	4440      	add	r0, r8
 800a04a:	f010 001f 	ands.w	r0, r0, #31
 800a04e:	d047      	beq.n	800a0e0 <_dtoa_r+0x8c0>
 800a050:	f1c0 0320 	rsb	r3, r0, #32
 800a054:	2b04      	cmp	r3, #4
 800a056:	dd3b      	ble.n	800a0d0 <_dtoa_r+0x8b0>
 800a058:	9b05      	ldr	r3, [sp, #20]
 800a05a:	f1c0 001c 	rsb	r0, r0, #28
 800a05e:	4403      	add	r3, r0
 800a060:	9305      	str	r3, [sp, #20]
 800a062:	4405      	add	r5, r0
 800a064:	4480      	add	r8, r0
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dd05      	ble.n	800a078 <_dtoa_r+0x858>
 800a06c:	461a      	mov	r2, r3
 800a06e:	9904      	ldr	r1, [sp, #16]
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fdb7 	bl	800abe4 <__lshift>
 800a076:	9004      	str	r0, [sp, #16]
 800a078:	f1b8 0f00 	cmp.w	r8, #0
 800a07c:	dd05      	ble.n	800a08a <_dtoa_r+0x86a>
 800a07e:	4639      	mov	r1, r7
 800a080:	4642      	mov	r2, r8
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fdae 	bl	800abe4 <__lshift>
 800a088:	4607      	mov	r7, r0
 800a08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a08c:	b353      	cbz	r3, 800a0e4 <_dtoa_r+0x8c4>
 800a08e:	4639      	mov	r1, r7
 800a090:	9804      	ldr	r0, [sp, #16]
 800a092:	f000 fdfb 	bl	800ac8c <__mcmp>
 800a096:	2800      	cmp	r0, #0
 800a098:	da24      	bge.n	800a0e4 <_dtoa_r+0x8c4>
 800a09a:	2300      	movs	r3, #0
 800a09c:	220a      	movs	r2, #10
 800a09e:	9904      	ldr	r1, [sp, #16]
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fc28 	bl	800a8f6 <__multadd>
 800a0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a8:	9004      	str	r0, [sp, #16]
 800a0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 814d 	beq.w	800a34e <_dtoa_r+0xb2e>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fc1b 	bl	800a8f6 <__multadd>
 800a0c0:	9b02      	ldr	r3, [sp, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	dc4f      	bgt.n	800a168 <_dtoa_r+0x948>
 800a0c8:	9b06      	ldr	r3, [sp, #24]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	dd4c      	ble.n	800a168 <_dtoa_r+0x948>
 800a0ce:	e011      	b.n	800a0f4 <_dtoa_r+0x8d4>
 800a0d0:	d0c9      	beq.n	800a066 <_dtoa_r+0x846>
 800a0d2:	9a05      	ldr	r2, [sp, #20]
 800a0d4:	331c      	adds	r3, #28
 800a0d6:	441a      	add	r2, r3
 800a0d8:	9205      	str	r2, [sp, #20]
 800a0da:	441d      	add	r5, r3
 800a0dc:	4498      	add	r8, r3
 800a0de:	e7c2      	b.n	800a066 <_dtoa_r+0x846>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	e7f6      	b.n	800a0d2 <_dtoa_r+0x8b2>
 800a0e4:	f1b9 0f00 	cmp.w	r9, #0
 800a0e8:	dc38      	bgt.n	800a15c <_dtoa_r+0x93c>
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	dd35      	ble.n	800a15c <_dtoa_r+0x93c>
 800a0f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	b963      	cbnz	r3, 800a112 <_dtoa_r+0x8f2>
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fbfa 	bl	800a8f6 <__multadd>
 800a102:	4601      	mov	r1, r0
 800a104:	4607      	mov	r7, r0
 800a106:	9804      	ldr	r0, [sp, #16]
 800a108:	f000 fdc0 	bl	800ac8c <__mcmp>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f73f adcc 	bgt.w	8009caa <_dtoa_r+0x48a>
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	465d      	mov	r5, fp
 800a116:	ea6f 0a03 	mvn.w	sl, r3
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	4639      	mov	r1, r7
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fbd1 	bl	800a8c8 <_Bfree>
 800a126:	2e00      	cmp	r6, #0
 800a128:	f43f aeb7 	beq.w	8009e9a <_dtoa_r+0x67a>
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	d005      	beq.n	800a13e <_dtoa_r+0x91e>
 800a132:	45b1      	cmp	r9, r6
 800a134:	d003      	beq.n	800a13e <_dtoa_r+0x91e>
 800a136:	4649      	mov	r1, r9
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fbc5 	bl	800a8c8 <_Bfree>
 800a13e:	4631      	mov	r1, r6
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fbc1 	bl	800a8c8 <_Bfree>
 800a146:	e6a8      	b.n	8009e9a <_dtoa_r+0x67a>
 800a148:	2700      	movs	r7, #0
 800a14a:	463e      	mov	r6, r7
 800a14c:	e7e1      	b.n	800a112 <_dtoa_r+0x8f2>
 800a14e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a152:	463e      	mov	r6, r7
 800a154:	e5a9      	b.n	8009caa <_dtoa_r+0x48a>
 800a156:	bf00      	nop
 800a158:	40240000 	.word	0x40240000
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80fa 	beq.w	800a35c <_dtoa_r+0xb3c>
 800a168:	2d00      	cmp	r5, #0
 800a16a:	dd05      	ble.n	800a178 <_dtoa_r+0x958>
 800a16c:	4631      	mov	r1, r6
 800a16e:	462a      	mov	r2, r5
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fd37 	bl	800abe4 <__lshift>
 800a176:	4606      	mov	r6, r0
 800a178:	9b07      	ldr	r3, [sp, #28]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d04c      	beq.n	800a218 <_dtoa_r+0x9f8>
 800a17e:	6871      	ldr	r1, [r6, #4]
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fb6d 	bl	800a860 <_Balloc>
 800a186:	6932      	ldr	r2, [r6, #16]
 800a188:	3202      	adds	r2, #2
 800a18a:	4605      	mov	r5, r0
 800a18c:	0092      	lsls	r2, r2, #2
 800a18e:	f106 010c 	add.w	r1, r6, #12
 800a192:	300c      	adds	r0, #12
 800a194:	f7fd feaa 	bl	8007eec <memcpy>
 800a198:	2201      	movs	r2, #1
 800a19a:	4629      	mov	r1, r5
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fd21 	bl	800abe4 <__lshift>
 800a1a2:	9b00      	ldr	r3, [sp, #0]
 800a1a4:	f8cd b014 	str.w	fp, [sp, #20]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	46b1      	mov	r9, r6
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	9804      	ldr	r0, [sp, #16]
 800a1b6:	f7ff faa7 	bl	8009708 <quorem>
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4605      	mov	r5, r0
 800a1be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a1c2:	9804      	ldr	r0, [sp, #16]
 800a1c4:	f000 fd62 	bl	800ac8c <__mcmp>
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	9000      	str	r0, [sp, #0]
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fd76 	bl	800acc0 <__mdiff>
 800a1d4:	68c3      	ldr	r3, [r0, #12]
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	bb03      	cbnz	r3, 800a21c <_dtoa_r+0x9fc>
 800a1da:	4601      	mov	r1, r0
 800a1dc:	9008      	str	r0, [sp, #32]
 800a1de:	9804      	ldr	r0, [sp, #16]
 800a1e0:	f000 fd54 	bl	800ac8c <__mcmp>
 800a1e4:	9a08      	ldr	r2, [sp, #32]
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	9308      	str	r3, [sp, #32]
 800a1ee:	f000 fb6b 	bl	800a8c8 <_Bfree>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	b9a3      	cbnz	r3, 800a220 <_dtoa_r+0xa00>
 800a1f6:	9a06      	ldr	r2, [sp, #24]
 800a1f8:	b992      	cbnz	r2, 800a220 <_dtoa_r+0xa00>
 800a1fa:	9a07      	ldr	r2, [sp, #28]
 800a1fc:	b982      	cbnz	r2, 800a220 <_dtoa_r+0xa00>
 800a1fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a202:	d029      	beq.n	800a258 <_dtoa_r+0xa38>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	dd01      	ble.n	800a20e <_dtoa_r+0x9ee>
 800a20a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	1c5d      	adds	r5, r3, #1
 800a212:	f883 8000 	strb.w	r8, [r3]
 800a216:	e782      	b.n	800a11e <_dtoa_r+0x8fe>
 800a218:	4630      	mov	r0, r6
 800a21a:	e7c2      	b.n	800a1a2 <_dtoa_r+0x982>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e7e3      	b.n	800a1e8 <_dtoa_r+0x9c8>
 800a220:	9a00      	ldr	r2, [sp, #0]
 800a222:	2a00      	cmp	r2, #0
 800a224:	db04      	blt.n	800a230 <_dtoa_r+0xa10>
 800a226:	d125      	bne.n	800a274 <_dtoa_r+0xa54>
 800a228:	9a06      	ldr	r2, [sp, #24]
 800a22a:	bb1a      	cbnz	r2, 800a274 <_dtoa_r+0xa54>
 800a22c:	9a07      	ldr	r2, [sp, #28]
 800a22e:	bb0a      	cbnz	r2, 800a274 <_dtoa_r+0xa54>
 800a230:	2b00      	cmp	r3, #0
 800a232:	ddec      	ble.n	800a20e <_dtoa_r+0x9ee>
 800a234:	2201      	movs	r2, #1
 800a236:	9904      	ldr	r1, [sp, #16]
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fcd3 	bl	800abe4 <__lshift>
 800a23e:	4639      	mov	r1, r7
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	f000 fd23 	bl	800ac8c <__mcmp>
 800a246:	2800      	cmp	r0, #0
 800a248:	dc03      	bgt.n	800a252 <_dtoa_r+0xa32>
 800a24a:	d1e0      	bne.n	800a20e <_dtoa_r+0x9ee>
 800a24c:	f018 0f01 	tst.w	r8, #1
 800a250:	d0dd      	beq.n	800a20e <_dtoa_r+0x9ee>
 800a252:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a256:	d1d8      	bne.n	800a20a <_dtoa_r+0x9ea>
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	9a05      	ldr	r2, [sp, #20]
 800a25c:	1c5d      	adds	r5, r3, #1
 800a25e:	2339      	movs	r3, #57	; 0x39
 800a260:	7013      	strb	r3, [r2, #0]
 800a262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a266:	2b39      	cmp	r3, #57	; 0x39
 800a268:	f105 32ff 	add.w	r2, r5, #4294967295
 800a26c:	d04f      	beq.n	800a30e <_dtoa_r+0xaee>
 800a26e:	3301      	adds	r3, #1
 800a270:	7013      	strb	r3, [r2, #0]
 800a272:	e754      	b.n	800a11e <_dtoa_r+0x8fe>
 800a274:	9a05      	ldr	r2, [sp, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f102 0501 	add.w	r5, r2, #1
 800a27c:	dd06      	ble.n	800a28c <_dtoa_r+0xa6c>
 800a27e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a282:	d0e9      	beq.n	800a258 <_dtoa_r+0xa38>
 800a284:	f108 0801 	add.w	r8, r8, #1
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	e7c2      	b.n	800a212 <_dtoa_r+0x9f2>
 800a28c:	9a02      	ldr	r2, [sp, #8]
 800a28e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a292:	eba5 030b 	sub.w	r3, r5, fp
 800a296:	4293      	cmp	r3, r2
 800a298:	d021      	beq.n	800a2de <_dtoa_r+0xabe>
 800a29a:	2300      	movs	r3, #0
 800a29c:	220a      	movs	r2, #10
 800a29e:	9904      	ldr	r1, [sp, #16]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fb28 	bl	800a8f6 <__multadd>
 800a2a6:	45b1      	cmp	r9, r6
 800a2a8:	9004      	str	r0, [sp, #16]
 800a2aa:	f04f 0300 	mov.w	r3, #0
 800a2ae:	f04f 020a 	mov.w	r2, #10
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	d105      	bne.n	800a2c4 <_dtoa_r+0xaa4>
 800a2b8:	f000 fb1d 	bl	800a8f6 <__multadd>
 800a2bc:	4681      	mov	r9, r0
 800a2be:	4606      	mov	r6, r0
 800a2c0:	9505      	str	r5, [sp, #20]
 800a2c2:	e776      	b.n	800a1b2 <_dtoa_r+0x992>
 800a2c4:	f000 fb17 	bl	800a8f6 <__multadd>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4681      	mov	r9, r0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	220a      	movs	r2, #10
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fb10 	bl	800a8f6 <__multadd>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	e7f2      	b.n	800a2c0 <_dtoa_r+0xaa0>
 800a2da:	f04f 0900 	mov.w	r9, #0
 800a2de:	2201      	movs	r2, #1
 800a2e0:	9904      	ldr	r1, [sp, #16]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 fc7e 	bl	800abe4 <__lshift>
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	9004      	str	r0, [sp, #16]
 800a2ec:	f000 fcce 	bl	800ac8c <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dcb6      	bgt.n	800a262 <_dtoa_r+0xa42>
 800a2f4:	d102      	bne.n	800a2fc <_dtoa_r+0xadc>
 800a2f6:	f018 0f01 	tst.w	r8, #1
 800a2fa:	d1b2      	bne.n	800a262 <_dtoa_r+0xa42>
 800a2fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a300:	2b30      	cmp	r3, #48	; 0x30
 800a302:	f105 32ff 	add.w	r2, r5, #4294967295
 800a306:	f47f af0a 	bne.w	800a11e <_dtoa_r+0x8fe>
 800a30a:	4615      	mov	r5, r2
 800a30c:	e7f6      	b.n	800a2fc <_dtoa_r+0xadc>
 800a30e:	4593      	cmp	fp, r2
 800a310:	d105      	bne.n	800a31e <_dtoa_r+0xafe>
 800a312:	2331      	movs	r3, #49	; 0x31
 800a314:	f10a 0a01 	add.w	sl, sl, #1
 800a318:	f88b 3000 	strb.w	r3, [fp]
 800a31c:	e6ff      	b.n	800a11e <_dtoa_r+0x8fe>
 800a31e:	4615      	mov	r5, r2
 800a320:	e79f      	b.n	800a262 <_dtoa_r+0xa42>
 800a322:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a388 <_dtoa_r+0xb68>
 800a326:	e007      	b.n	800a338 <_dtoa_r+0xb18>
 800a328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a32a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a38c <_dtoa_r+0xb6c>
 800a32e:	b11b      	cbz	r3, 800a338 <_dtoa_r+0xb18>
 800a330:	f10b 0308 	add.w	r3, fp, #8
 800a334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	4658      	mov	r0, fp
 800a33a:	b017      	add	sp, #92	; 0x5c
 800a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	2b01      	cmp	r3, #1
 800a344:	f77f ae35 	ble.w	8009fb2 <_dtoa_r+0x792>
 800a348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a34a:	9307      	str	r3, [sp, #28]
 800a34c:	e649      	b.n	8009fe2 <_dtoa_r+0x7c2>
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	dc03      	bgt.n	800a35c <_dtoa_r+0xb3c>
 800a354:	9b06      	ldr	r3, [sp, #24]
 800a356:	2b02      	cmp	r3, #2
 800a358:	f73f aecc 	bgt.w	800a0f4 <_dtoa_r+0x8d4>
 800a35c:	465d      	mov	r5, fp
 800a35e:	4639      	mov	r1, r7
 800a360:	9804      	ldr	r0, [sp, #16]
 800a362:	f7ff f9d1 	bl	8009708 <quorem>
 800a366:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a36a:	f805 8b01 	strb.w	r8, [r5], #1
 800a36e:	9a02      	ldr	r2, [sp, #8]
 800a370:	eba5 030b 	sub.w	r3, r5, fp
 800a374:	429a      	cmp	r2, r3
 800a376:	ddb0      	ble.n	800a2da <_dtoa_r+0xaba>
 800a378:	2300      	movs	r3, #0
 800a37a:	220a      	movs	r2, #10
 800a37c:	9904      	ldr	r1, [sp, #16]
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 fab9 	bl	800a8f6 <__multadd>
 800a384:	9004      	str	r0, [sp, #16]
 800a386:	e7ea      	b.n	800a35e <_dtoa_r+0xb3e>
 800a388:	0800c7dc 	.word	0x0800c7dc
 800a38c:	0800c4de 	.word	0x0800c4de

0800a390 <__sflush_r>:
 800a390:	898a      	ldrh	r2, [r1, #12]
 800a392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a396:	4605      	mov	r5, r0
 800a398:	0710      	lsls	r0, r2, #28
 800a39a:	460c      	mov	r4, r1
 800a39c:	d458      	bmi.n	800a450 <__sflush_r+0xc0>
 800a39e:	684b      	ldr	r3, [r1, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dc05      	bgt.n	800a3b0 <__sflush_r+0x20>
 800a3a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dc02      	bgt.n	800a3b0 <__sflush_r+0x20>
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	d0f9      	beq.n	800a3aa <__sflush_r+0x1a>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3bc:	682f      	ldr	r7, [r5, #0]
 800a3be:	6a21      	ldr	r1, [r4, #32]
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	d032      	beq.n	800a42a <__sflush_r+0x9a>
 800a3c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	075a      	lsls	r2, r3, #29
 800a3ca:	d505      	bpl.n	800a3d8 <__sflush_r+0x48>
 800a3cc:	6863      	ldr	r3, [r4, #4]
 800a3ce:	1ac0      	subs	r0, r0, r3
 800a3d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3d2:	b10b      	cbz	r3, 800a3d8 <__sflush_r+0x48>
 800a3d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3d6:	1ac0      	subs	r0, r0, r3
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4602      	mov	r2, r0
 800a3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3de:	6a21      	ldr	r1, [r4, #32]
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	d106      	bne.n	800a3f8 <__sflush_r+0x68>
 800a3ea:	6829      	ldr	r1, [r5, #0]
 800a3ec:	291d      	cmp	r1, #29
 800a3ee:	d848      	bhi.n	800a482 <__sflush_r+0xf2>
 800a3f0:	4a29      	ldr	r2, [pc, #164]	; (800a498 <__sflush_r+0x108>)
 800a3f2:	40ca      	lsrs	r2, r1
 800a3f4:	07d6      	lsls	r6, r2, #31
 800a3f6:	d544      	bpl.n	800a482 <__sflush_r+0xf2>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	6062      	str	r2, [r4, #4]
 800a3fc:	04d9      	lsls	r1, r3, #19
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	d504      	bpl.n	800a40e <__sflush_r+0x7e>
 800a404:	1c42      	adds	r2, r0, #1
 800a406:	d101      	bne.n	800a40c <__sflush_r+0x7c>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b903      	cbnz	r3, 800a40e <__sflush_r+0x7e>
 800a40c:	6560      	str	r0, [r4, #84]	; 0x54
 800a40e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a410:	602f      	str	r7, [r5, #0]
 800a412:	2900      	cmp	r1, #0
 800a414:	d0c9      	beq.n	800a3aa <__sflush_r+0x1a>
 800a416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a41a:	4299      	cmp	r1, r3
 800a41c:	d002      	beq.n	800a424 <__sflush_r+0x94>
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 fd08 	bl	800ae34 <_free_r>
 800a424:	2000      	movs	r0, #0
 800a426:	6360      	str	r0, [r4, #52]	; 0x34
 800a428:	e7c0      	b.n	800a3ac <__sflush_r+0x1c>
 800a42a:	2301      	movs	r3, #1
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	1c41      	adds	r1, r0, #1
 800a432:	d1c8      	bne.n	800a3c6 <__sflush_r+0x36>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0c5      	beq.n	800a3c6 <__sflush_r+0x36>
 800a43a:	2b1d      	cmp	r3, #29
 800a43c:	d001      	beq.n	800a442 <__sflush_r+0xb2>
 800a43e:	2b16      	cmp	r3, #22
 800a440:	d101      	bne.n	800a446 <__sflush_r+0xb6>
 800a442:	602f      	str	r7, [r5, #0]
 800a444:	e7b1      	b.n	800a3aa <__sflush_r+0x1a>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e7ad      	b.n	800a3ac <__sflush_r+0x1c>
 800a450:	690f      	ldr	r7, [r1, #16]
 800a452:	2f00      	cmp	r7, #0
 800a454:	d0a9      	beq.n	800a3aa <__sflush_r+0x1a>
 800a456:	0793      	lsls	r3, r2, #30
 800a458:	680e      	ldr	r6, [r1, #0]
 800a45a:	bf08      	it	eq
 800a45c:	694b      	ldreq	r3, [r1, #20]
 800a45e:	600f      	str	r7, [r1, #0]
 800a460:	bf18      	it	ne
 800a462:	2300      	movne	r3, #0
 800a464:	eba6 0807 	sub.w	r8, r6, r7
 800a468:	608b      	str	r3, [r1, #8]
 800a46a:	f1b8 0f00 	cmp.w	r8, #0
 800a46e:	dd9c      	ble.n	800a3aa <__sflush_r+0x1a>
 800a470:	4643      	mov	r3, r8
 800a472:	463a      	mov	r2, r7
 800a474:	6a21      	ldr	r1, [r4, #32]
 800a476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a478:	4628      	mov	r0, r5
 800a47a:	47b0      	blx	r6
 800a47c:	2800      	cmp	r0, #0
 800a47e:	dc06      	bgt.n	800a48e <__sflush_r+0xfe>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	e78e      	b.n	800a3ac <__sflush_r+0x1c>
 800a48e:	4407      	add	r7, r0
 800a490:	eba8 0800 	sub.w	r8, r8, r0
 800a494:	e7e9      	b.n	800a46a <__sflush_r+0xda>
 800a496:	bf00      	nop
 800a498:	20400001 	.word	0x20400001

0800a49c <_fflush_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	690b      	ldr	r3, [r1, #16]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	b1db      	cbz	r3, 800a4de <_fflush_r+0x42>
 800a4a6:	b118      	cbz	r0, 800a4b0 <_fflush_r+0x14>
 800a4a8:	6983      	ldr	r3, [r0, #24]
 800a4aa:	b90b      	cbnz	r3, 800a4b0 <_fflush_r+0x14>
 800a4ac:	f000 f860 	bl	800a570 <__sinit>
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	; (800a4e4 <_fflush_r+0x48>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d109      	bne.n	800a4ca <_fflush_r+0x2e>
 800a4b6:	686c      	ldr	r4, [r5, #4]
 800a4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4bc:	b17b      	cbz	r3, 800a4de <_fflush_r+0x42>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c6:	f7ff bf63 	b.w	800a390 <__sflush_r>
 800a4ca:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <_fflush_r+0x4c>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d101      	bne.n	800a4d4 <_fflush_r+0x38>
 800a4d0:	68ac      	ldr	r4, [r5, #8]
 800a4d2:	e7f1      	b.n	800a4b8 <_fflush_r+0x1c>
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <_fflush_r+0x50>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	bf08      	it	eq
 800a4da:	68ec      	ldreq	r4, [r5, #12]
 800a4dc:	e7ec      	b.n	800a4b8 <_fflush_r+0x1c>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0800c50c 	.word	0x0800c50c
 800a4e8:	0800c52c 	.word	0x0800c52c
 800a4ec:	0800c4ec 	.word	0x0800c4ec

0800a4f0 <std>:
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4fa:	6083      	str	r3, [r0, #8]
 800a4fc:	8181      	strh	r1, [r0, #12]
 800a4fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a500:	81c2      	strh	r2, [r0, #14]
 800a502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a506:	6183      	str	r3, [r0, #24]
 800a508:	4619      	mov	r1, r3
 800a50a:	2208      	movs	r2, #8
 800a50c:	305c      	adds	r0, #92	; 0x5c
 800a50e:	f7fd fcf8 	bl	8007f02 <memset>
 800a512:	4b05      	ldr	r3, [pc, #20]	; (800a528 <std+0x38>)
 800a514:	6263      	str	r3, [r4, #36]	; 0x24
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <std+0x3c>)
 800a518:	62a3      	str	r3, [r4, #40]	; 0x28
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <std+0x40>)
 800a51c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x44>)
 800a520:	6224      	str	r4, [r4, #32]
 800a522:	6323      	str	r3, [r4, #48]	; 0x30
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800b51d 	.word	0x0800b51d
 800a52c:	0800b543 	.word	0x0800b543
 800a530:	0800b57b 	.word	0x0800b57b
 800a534:	0800b59f 	.word	0x0800b59f

0800a538 <_cleanup_r>:
 800a538:	4901      	ldr	r1, [pc, #4]	; (800a540 <_cleanup_r+0x8>)
 800a53a:	f000 b885 	b.w	800a648 <_fwalk_reent>
 800a53e:	bf00      	nop
 800a540:	0800a49d 	.word	0x0800a49d

0800a544 <__sfmoreglue>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	1e4a      	subs	r2, r1, #1
 800a548:	2568      	movs	r5, #104	; 0x68
 800a54a:	4355      	muls	r5, r2
 800a54c:	460e      	mov	r6, r1
 800a54e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a552:	f000 fcbd 	bl	800aed0 <_malloc_r>
 800a556:	4604      	mov	r4, r0
 800a558:	b140      	cbz	r0, 800a56c <__sfmoreglue+0x28>
 800a55a:	2100      	movs	r1, #0
 800a55c:	e9c0 1600 	strd	r1, r6, [r0]
 800a560:	300c      	adds	r0, #12
 800a562:	60a0      	str	r0, [r4, #8]
 800a564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a568:	f7fd fccb 	bl	8007f02 <memset>
 800a56c:	4620      	mov	r0, r4
 800a56e:	bd70      	pop	{r4, r5, r6, pc}

0800a570 <__sinit>:
 800a570:	6983      	ldr	r3, [r0, #24]
 800a572:	b510      	push	{r4, lr}
 800a574:	4604      	mov	r4, r0
 800a576:	bb33      	cbnz	r3, 800a5c6 <__sinit+0x56>
 800a578:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a57c:	6503      	str	r3, [r0, #80]	; 0x50
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <__sinit+0x58>)
 800a580:	4a12      	ldr	r2, [pc, #72]	; (800a5cc <__sinit+0x5c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6282      	str	r2, [r0, #40]	; 0x28
 800a586:	4298      	cmp	r0, r3
 800a588:	bf04      	itt	eq
 800a58a:	2301      	moveq	r3, #1
 800a58c:	6183      	streq	r3, [r0, #24]
 800a58e:	f000 f81f 	bl	800a5d0 <__sfp>
 800a592:	6060      	str	r0, [r4, #4]
 800a594:	4620      	mov	r0, r4
 800a596:	f000 f81b 	bl	800a5d0 <__sfp>
 800a59a:	60a0      	str	r0, [r4, #8]
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 f817 	bl	800a5d0 <__sfp>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	60e0      	str	r0, [r4, #12]
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	6860      	ldr	r0, [r4, #4]
 800a5aa:	f7ff ffa1 	bl	800a4f0 <std>
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	2109      	movs	r1, #9
 800a5b2:	68a0      	ldr	r0, [r4, #8]
 800a5b4:	f7ff ff9c 	bl	800a4f0 <std>
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	2112      	movs	r1, #18
 800a5bc:	68e0      	ldr	r0, [r4, #12]
 800a5be:	f7ff ff97 	bl	800a4f0 <std>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	61a3      	str	r3, [r4, #24]
 800a5c6:	bd10      	pop	{r4, pc}
 800a5c8:	0800c40c 	.word	0x0800c40c
 800a5cc:	0800a539 	.word	0x0800a539

0800a5d0 <__sfp>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <__sfp+0x70>)
 800a5d4:	681e      	ldr	r6, [r3, #0]
 800a5d6:	69b3      	ldr	r3, [r6, #24]
 800a5d8:	4607      	mov	r7, r0
 800a5da:	b913      	cbnz	r3, 800a5e2 <__sfp+0x12>
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ffc7 	bl	800a570 <__sinit>
 800a5e2:	3648      	adds	r6, #72	; 0x48
 800a5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	d503      	bpl.n	800a5f4 <__sfp+0x24>
 800a5ec:	6833      	ldr	r3, [r6, #0]
 800a5ee:	b133      	cbz	r3, 800a5fe <__sfp+0x2e>
 800a5f0:	6836      	ldr	r6, [r6, #0]
 800a5f2:	e7f7      	b.n	800a5e4 <__sfp+0x14>
 800a5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5f8:	b16d      	cbz	r5, 800a616 <__sfp+0x46>
 800a5fa:	3468      	adds	r4, #104	; 0x68
 800a5fc:	e7f4      	b.n	800a5e8 <__sfp+0x18>
 800a5fe:	2104      	movs	r1, #4
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ff9f 	bl	800a544 <__sfmoreglue>
 800a606:	6030      	str	r0, [r6, #0]
 800a608:	2800      	cmp	r0, #0
 800a60a:	d1f1      	bne.n	800a5f0 <__sfp+0x20>
 800a60c:	230c      	movs	r3, #12
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4604      	mov	r4, r0
 800a612:	4620      	mov	r0, r4
 800a614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a616:	4b0b      	ldr	r3, [pc, #44]	; (800a644 <__sfp+0x74>)
 800a618:	6665      	str	r5, [r4, #100]	; 0x64
 800a61a:	e9c4 5500 	strd	r5, r5, [r4]
 800a61e:	60a5      	str	r5, [r4, #8]
 800a620:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a624:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a628:	2208      	movs	r2, #8
 800a62a:	4629      	mov	r1, r5
 800a62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a630:	f7fd fc67 	bl	8007f02 <memset>
 800a634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a63c:	e7e9      	b.n	800a612 <__sfp+0x42>
 800a63e:	bf00      	nop
 800a640:	0800c40c 	.word	0x0800c40c
 800a644:	ffff0001 	.word	0xffff0001

0800a648 <_fwalk_reent>:
 800a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64c:	4680      	mov	r8, r0
 800a64e:	4689      	mov	r9, r1
 800a650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a654:	2600      	movs	r6, #0
 800a656:	b914      	cbnz	r4, 800a65e <_fwalk_reent+0x16>
 800a658:	4630      	mov	r0, r6
 800a65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a662:	3f01      	subs	r7, #1
 800a664:	d501      	bpl.n	800a66a <_fwalk_reent+0x22>
 800a666:	6824      	ldr	r4, [r4, #0]
 800a668:	e7f5      	b.n	800a656 <_fwalk_reent+0xe>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d907      	bls.n	800a680 <_fwalk_reent+0x38>
 800a670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a674:	3301      	adds	r3, #1
 800a676:	d003      	beq.n	800a680 <_fwalk_reent+0x38>
 800a678:	4629      	mov	r1, r5
 800a67a:	4640      	mov	r0, r8
 800a67c:	47c8      	blx	r9
 800a67e:	4306      	orrs	r6, r0
 800a680:	3568      	adds	r5, #104	; 0x68
 800a682:	e7ee      	b.n	800a662 <_fwalk_reent+0x1a>

0800a684 <_findenv_r>:
 800a684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	4607      	mov	r7, r0
 800a68a:	468b      	mov	fp, r1
 800a68c:	4690      	mov	r8, r2
 800a68e:	f001 f877 	bl	800b780 <__env_lock>
 800a692:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <_findenv_r+0x74>)
 800a694:	681d      	ldr	r5, [r3, #0]
 800a696:	469a      	mov	sl, r3
 800a698:	b13d      	cbz	r5, 800a6aa <_findenv_r+0x26>
 800a69a:	465c      	mov	r4, fp
 800a69c:	4623      	mov	r3, r4
 800a69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6a2:	b32a      	cbz	r2, 800a6f0 <_findenv_r+0x6c>
 800a6a4:	2a3d      	cmp	r2, #61	; 0x3d
 800a6a6:	461c      	mov	r4, r3
 800a6a8:	d1f8      	bne.n	800a69c <_findenv_r+0x18>
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	f001 f869 	bl	800b782 <__env_unlock>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	464d      	mov	r5, r9
 800a6b8:	46a9      	mov	r9, r5
 800a6ba:	f859 0b04 	ldr.w	r0, [r9], #4
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0f3      	beq.n	800a6aa <_findenv_r+0x26>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	f000 ff76 	bl	800b5b6 <strncmp>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d1f3      	bne.n	800a6b6 <_findenv_r+0x32>
 800a6ce:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a6d2:	191e      	adds	r6, r3, r4
 800a6d4:	5d1b      	ldrb	r3, [r3, r4]
 800a6d6:	2b3d      	cmp	r3, #61	; 0x3d
 800a6d8:	d1ed      	bne.n	800a6b6 <_findenv_r+0x32>
 800a6da:	f8da 3000 	ldr.w	r3, [sl]
 800a6de:	1aed      	subs	r5, r5, r3
 800a6e0:	10ad      	asrs	r5, r5, #2
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f8c8 5000 	str.w	r5, [r8]
 800a6e8:	f001 f84b 	bl	800b782 <__env_unlock>
 800a6ec:	1c70      	adds	r0, r6, #1
 800a6ee:	e7e0      	b.n	800a6b2 <_findenv_r+0x2e>
 800a6f0:	eba4 040b 	sub.w	r4, r4, fp
 800a6f4:	e7e0      	b.n	800a6b8 <_findenv_r+0x34>
 800a6f6:	bf00      	nop
 800a6f8:	2000023c 	.word	0x2000023c

0800a6fc <_getenv_r>:
 800a6fc:	b507      	push	{r0, r1, r2, lr}
 800a6fe:	aa01      	add	r2, sp, #4
 800a700:	f7ff ffc0 	bl	800a684 <_findenv_r>
 800a704:	b003      	add	sp, #12
 800a706:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a70c <__gettzinfo>:
 800a70c:	4800      	ldr	r0, [pc, #0]	; (800a710 <__gettzinfo+0x4>)
 800a70e:	4770      	bx	lr
 800a710:	20000078 	.word	0x20000078

0800a714 <__locale_ctype_ptr_l>:
 800a714:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a718:	4770      	bx	lr
	...

0800a71c <__locale_ctype_ptr>:
 800a71c:	4b04      	ldr	r3, [pc, #16]	; (800a730 <__locale_ctype_ptr+0x14>)
 800a71e:	4a05      	ldr	r2, [pc, #20]	; (800a734 <__locale_ctype_ptr+0x18>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	2b00      	cmp	r3, #0
 800a726:	bf08      	it	eq
 800a728:	4613      	moveq	r3, r2
 800a72a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a72e:	4770      	bx	lr
 800a730:	2000000c 	.word	0x2000000c
 800a734:	200000d0 	.word	0x200000d0

0800a738 <_localeconv_r>:
 800a738:	4b04      	ldr	r3, [pc, #16]	; (800a74c <_localeconv_r+0x14>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a18      	ldr	r0, [r3, #32]
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <_localeconv_r+0x18>)
 800a740:	2800      	cmp	r0, #0
 800a742:	bf08      	it	eq
 800a744:	4618      	moveq	r0, r3
 800a746:	30f0      	adds	r0, #240	; 0xf0
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	2000000c 	.word	0x2000000c
 800a750:	200000d0 	.word	0x200000d0

0800a754 <__swhatbuf_r>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	460e      	mov	r6, r1
 800a758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75c:	2900      	cmp	r1, #0
 800a75e:	b096      	sub	sp, #88	; 0x58
 800a760:	4614      	mov	r4, r2
 800a762:	461d      	mov	r5, r3
 800a764:	da07      	bge.n	800a776 <__swhatbuf_r+0x22>
 800a766:	2300      	movs	r3, #0
 800a768:	602b      	str	r3, [r5, #0]
 800a76a:	89b3      	ldrh	r3, [r6, #12]
 800a76c:	061a      	lsls	r2, r3, #24
 800a76e:	d410      	bmi.n	800a792 <__swhatbuf_r+0x3e>
 800a770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a774:	e00e      	b.n	800a794 <__swhatbuf_r+0x40>
 800a776:	466a      	mov	r2, sp
 800a778:	f001 f804 	bl	800b784 <_fstat_r>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	dbf2      	blt.n	800a766 <__swhatbuf_r+0x12>
 800a780:	9a01      	ldr	r2, [sp, #4]
 800a782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a78a:	425a      	negs	r2, r3
 800a78c:	415a      	adcs	r2, r3
 800a78e:	602a      	str	r2, [r5, #0]
 800a790:	e7ee      	b.n	800a770 <__swhatbuf_r+0x1c>
 800a792:	2340      	movs	r3, #64	; 0x40
 800a794:	2000      	movs	r0, #0
 800a796:	6023      	str	r3, [r4, #0]
 800a798:	b016      	add	sp, #88	; 0x58
 800a79a:	bd70      	pop	{r4, r5, r6, pc}

0800a79c <__smakebuf_r>:
 800a79c:	898b      	ldrh	r3, [r1, #12]
 800a79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7a0:	079d      	lsls	r5, r3, #30
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	d507      	bpl.n	800a7b8 <__smakebuf_r+0x1c>
 800a7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	6123      	str	r3, [r4, #16]
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	6163      	str	r3, [r4, #20]
 800a7b4:	b002      	add	sp, #8
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	ab01      	add	r3, sp, #4
 800a7ba:	466a      	mov	r2, sp
 800a7bc:	f7ff ffca 	bl	800a754 <__swhatbuf_r>
 800a7c0:	9900      	ldr	r1, [sp, #0]
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f000 fb83 	bl	800aed0 <_malloc_r>
 800a7ca:	b948      	cbnz	r0, 800a7e0 <__smakebuf_r+0x44>
 800a7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d4ef      	bmi.n	800a7b4 <__smakebuf_r+0x18>
 800a7d4:	f023 0303 	bic.w	r3, r3, #3
 800a7d8:	f043 0302 	orr.w	r3, r3, #2
 800a7dc:	81a3      	strh	r3, [r4, #12]
 800a7de:	e7e3      	b.n	800a7a8 <__smakebuf_r+0xc>
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <__smakebuf_r+0x7c>)
 800a7e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	6020      	str	r0, [r4, #0]
 800a7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	6163      	str	r3, [r4, #20]
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	6120      	str	r0, [r4, #16]
 800a7f6:	b15b      	cbz	r3, 800a810 <__smakebuf_r+0x74>
 800a7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f000 ffd3 	bl	800b7a8 <_isatty_r>
 800a802:	b128      	cbz	r0, 800a810 <__smakebuf_r+0x74>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f023 0303 	bic.w	r3, r3, #3
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	431d      	orrs	r5, r3
 800a814:	81a5      	strh	r5, [r4, #12]
 800a816:	e7cd      	b.n	800a7b4 <__smakebuf_r+0x18>
 800a818:	0800a539 	.word	0x0800a539

0800a81c <malloc>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <malloc+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f000 bb55 	b.w	800aed0 <_malloc_r>
 800a826:	bf00      	nop
 800a828:	2000000c 	.word	0x2000000c

0800a82c <free>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <free+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 baff 	b.w	800ae34 <_free_r>
 800a836:	bf00      	nop
 800a838:	2000000c 	.word	0x2000000c

0800a83c <__ascii_mbtowc>:
 800a83c:	b082      	sub	sp, #8
 800a83e:	b901      	cbnz	r1, 800a842 <__ascii_mbtowc+0x6>
 800a840:	a901      	add	r1, sp, #4
 800a842:	b142      	cbz	r2, 800a856 <__ascii_mbtowc+0x1a>
 800a844:	b14b      	cbz	r3, 800a85a <__ascii_mbtowc+0x1e>
 800a846:	7813      	ldrb	r3, [r2, #0]
 800a848:	600b      	str	r3, [r1, #0]
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	1c10      	adds	r0, r2, #0
 800a84e:	bf18      	it	ne
 800a850:	2001      	movne	r0, #1
 800a852:	b002      	add	sp, #8
 800a854:	4770      	bx	lr
 800a856:	4610      	mov	r0, r2
 800a858:	e7fb      	b.n	800a852 <__ascii_mbtowc+0x16>
 800a85a:	f06f 0001 	mvn.w	r0, #1
 800a85e:	e7f8      	b.n	800a852 <__ascii_mbtowc+0x16>

0800a860 <_Balloc>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a864:	4604      	mov	r4, r0
 800a866:	460e      	mov	r6, r1
 800a868:	b93d      	cbnz	r5, 800a87a <_Balloc+0x1a>
 800a86a:	2010      	movs	r0, #16
 800a86c:	f7ff ffd6 	bl	800a81c <malloc>
 800a870:	6260      	str	r0, [r4, #36]	; 0x24
 800a872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a876:	6005      	str	r5, [r0, #0]
 800a878:	60c5      	str	r5, [r0, #12]
 800a87a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a87c:	68eb      	ldr	r3, [r5, #12]
 800a87e:	b183      	cbz	r3, 800a8a2 <_Balloc+0x42>
 800a880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a888:	b9b8      	cbnz	r0, 800a8ba <_Balloc+0x5a>
 800a88a:	2101      	movs	r1, #1
 800a88c:	fa01 f506 	lsl.w	r5, r1, r6
 800a890:	1d6a      	adds	r2, r5, #5
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fabf 	bl	800ae18 <_calloc_r>
 800a89a:	b160      	cbz	r0, 800a8b6 <_Balloc+0x56>
 800a89c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a8a0:	e00e      	b.n	800a8c0 <_Balloc+0x60>
 800a8a2:	2221      	movs	r2, #33	; 0x21
 800a8a4:	2104      	movs	r1, #4
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fab6 	bl	800ae18 <_calloc_r>
 800a8ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ae:	60e8      	str	r0, [r5, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e4      	bne.n	800a880 <_Balloc+0x20>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ba:	6802      	ldr	r2, [r0, #0]
 800a8bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8c6:	e7f7      	b.n	800a8b8 <_Balloc+0x58>

0800a8c8 <_Bfree>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	b93c      	cbnz	r4, 800a8e2 <_Bfree+0x1a>
 800a8d2:	2010      	movs	r0, #16
 800a8d4:	f7ff ffa2 	bl	800a81c <malloc>
 800a8d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a8da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8de:	6004      	str	r4, [r0, #0]
 800a8e0:	60c4      	str	r4, [r0, #12]
 800a8e2:	b13d      	cbz	r5, 800a8f4 <_Bfree+0x2c>
 800a8e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8e6:	686a      	ldr	r2, [r5, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8ee:	6029      	str	r1, [r5, #0]
 800a8f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a8f4:	bd70      	pop	{r4, r5, r6, pc}

0800a8f6 <__multadd>:
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	690d      	ldr	r5, [r1, #16]
 800a8fc:	461f      	mov	r7, r3
 800a8fe:	4606      	mov	r6, r0
 800a900:	460c      	mov	r4, r1
 800a902:	f101 0c14 	add.w	ip, r1, #20
 800a906:	2300      	movs	r3, #0
 800a908:	f8dc 0000 	ldr.w	r0, [ip]
 800a90c:	b281      	uxth	r1, r0
 800a90e:	fb02 7101 	mla	r1, r2, r1, r7
 800a912:	0c0f      	lsrs	r7, r1, #16
 800a914:	0c00      	lsrs	r0, r0, #16
 800a916:	fb02 7000 	mla	r0, r2, r0, r7
 800a91a:	b289      	uxth	r1, r1
 800a91c:	3301      	adds	r3, #1
 800a91e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a922:	429d      	cmp	r5, r3
 800a924:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a928:	f84c 1b04 	str.w	r1, [ip], #4
 800a92c:	dcec      	bgt.n	800a908 <__multadd+0x12>
 800a92e:	b1d7      	cbz	r7, 800a966 <__multadd+0x70>
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	42ab      	cmp	r3, r5
 800a934:	dc12      	bgt.n	800a95c <__multadd+0x66>
 800a936:	6861      	ldr	r1, [r4, #4]
 800a938:	4630      	mov	r0, r6
 800a93a:	3101      	adds	r1, #1
 800a93c:	f7ff ff90 	bl	800a860 <_Balloc>
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	3202      	adds	r2, #2
 800a944:	f104 010c 	add.w	r1, r4, #12
 800a948:	4680      	mov	r8, r0
 800a94a:	0092      	lsls	r2, r2, #2
 800a94c:	300c      	adds	r0, #12
 800a94e:	f7fd facd 	bl	8007eec <memcpy>
 800a952:	4621      	mov	r1, r4
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff ffb7 	bl	800a8c8 <_Bfree>
 800a95a:	4644      	mov	r4, r8
 800a95c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a960:	3501      	adds	r5, #1
 800a962:	615f      	str	r7, [r3, #20]
 800a964:	6125      	str	r5, [r4, #16]
 800a966:	4620      	mov	r0, r4
 800a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a96c <__hi0bits>:
 800a96c:	0c02      	lsrs	r2, r0, #16
 800a96e:	0412      	lsls	r2, r2, #16
 800a970:	4603      	mov	r3, r0
 800a972:	b9b2      	cbnz	r2, 800a9a2 <__hi0bits+0x36>
 800a974:	0403      	lsls	r3, r0, #16
 800a976:	2010      	movs	r0, #16
 800a978:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a97c:	bf04      	itt	eq
 800a97e:	021b      	lsleq	r3, r3, #8
 800a980:	3008      	addeq	r0, #8
 800a982:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a986:	bf04      	itt	eq
 800a988:	011b      	lsleq	r3, r3, #4
 800a98a:	3004      	addeq	r0, #4
 800a98c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a990:	bf04      	itt	eq
 800a992:	009b      	lsleq	r3, r3, #2
 800a994:	3002      	addeq	r0, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	db06      	blt.n	800a9a8 <__hi0bits+0x3c>
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	d503      	bpl.n	800a9a6 <__hi0bits+0x3a>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	4770      	bx	lr
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	e7e8      	b.n	800a978 <__hi0bits+0xc>
 800a9a6:	2020      	movs	r0, #32
 800a9a8:	4770      	bx	lr

0800a9aa <__lo0bits>:
 800a9aa:	6803      	ldr	r3, [r0, #0]
 800a9ac:	f013 0207 	ands.w	r2, r3, #7
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	d00b      	beq.n	800a9cc <__lo0bits+0x22>
 800a9b4:	07da      	lsls	r2, r3, #31
 800a9b6:	d423      	bmi.n	800aa00 <__lo0bits+0x56>
 800a9b8:	0798      	lsls	r0, r3, #30
 800a9ba:	bf49      	itett	mi
 800a9bc:	085b      	lsrmi	r3, r3, #1
 800a9be:	089b      	lsrpl	r3, r3, #2
 800a9c0:	2001      	movmi	r0, #1
 800a9c2:	600b      	strmi	r3, [r1, #0]
 800a9c4:	bf5c      	itt	pl
 800a9c6:	600b      	strpl	r3, [r1, #0]
 800a9c8:	2002      	movpl	r0, #2
 800a9ca:	4770      	bx	lr
 800a9cc:	b298      	uxth	r0, r3
 800a9ce:	b9a8      	cbnz	r0, 800a9fc <__lo0bits+0x52>
 800a9d0:	0c1b      	lsrs	r3, r3, #16
 800a9d2:	2010      	movs	r0, #16
 800a9d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9d8:	bf04      	itt	eq
 800a9da:	0a1b      	lsreq	r3, r3, #8
 800a9dc:	3008      	addeq	r0, #8
 800a9de:	071a      	lsls	r2, r3, #28
 800a9e0:	bf04      	itt	eq
 800a9e2:	091b      	lsreq	r3, r3, #4
 800a9e4:	3004      	addeq	r0, #4
 800a9e6:	079a      	lsls	r2, r3, #30
 800a9e8:	bf04      	itt	eq
 800a9ea:	089b      	lsreq	r3, r3, #2
 800a9ec:	3002      	addeq	r0, #2
 800a9ee:	07da      	lsls	r2, r3, #31
 800a9f0:	d402      	bmi.n	800a9f8 <__lo0bits+0x4e>
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	d006      	beq.n	800aa04 <__lo0bits+0x5a>
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	600b      	str	r3, [r1, #0]
 800a9fa:	4770      	bx	lr
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	e7e9      	b.n	800a9d4 <__lo0bits+0x2a>
 800aa00:	2000      	movs	r0, #0
 800aa02:	4770      	bx	lr
 800aa04:	2020      	movs	r0, #32
 800aa06:	4770      	bx	lr

0800aa08 <__i2b>:
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	f7ff ff27 	bl	800a860 <_Balloc>
 800aa12:	2201      	movs	r2, #1
 800aa14:	6144      	str	r4, [r0, #20]
 800aa16:	6102      	str	r2, [r0, #16]
 800aa18:	bd10      	pop	{r4, pc}

0800aa1a <__multiply>:
 800aa1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1e:	4614      	mov	r4, r2
 800aa20:	690a      	ldr	r2, [r1, #16]
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bfb8      	it	lt
 800aa28:	460b      	movlt	r3, r1
 800aa2a:	4688      	mov	r8, r1
 800aa2c:	bfbc      	itt	lt
 800aa2e:	46a0      	movlt	r8, r4
 800aa30:	461c      	movlt	r4, r3
 800aa32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa42:	eb07 0609 	add.w	r6, r7, r9
 800aa46:	42b3      	cmp	r3, r6
 800aa48:	bfb8      	it	lt
 800aa4a:	3101      	addlt	r1, #1
 800aa4c:	f7ff ff08 	bl	800a860 <_Balloc>
 800aa50:	f100 0514 	add.w	r5, r0, #20
 800aa54:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa58:	462b      	mov	r3, r5
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4573      	cmp	r3, lr
 800aa5e:	d316      	bcc.n	800aa8e <__multiply+0x74>
 800aa60:	f104 0214 	add.w	r2, r4, #20
 800aa64:	f108 0114 	add.w	r1, r8, #20
 800aa68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	9201      	str	r2, [sp, #4]
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d80c      	bhi.n	800aa94 <__multiply+0x7a>
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	dd03      	ble.n	800aa86 <__multiply+0x6c>
 800aa7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d05d      	beq.n	800ab42 <__multiply+0x128>
 800aa86:	6106      	str	r6, [r0, #16]
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	f843 2b04 	str.w	r2, [r3], #4
 800aa92:	e7e3      	b.n	800aa5c <__multiply+0x42>
 800aa94:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa98:	f1bb 0f00 	cmp.w	fp, #0
 800aa9c:	d023      	beq.n	800aae6 <__multiply+0xcc>
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	46ac      	mov	ip, r5
 800aaa2:	f04f 0800 	mov.w	r8, #0
 800aaa6:	f859 4b04 	ldr.w	r4, [r9], #4
 800aaaa:	f8dc a000 	ldr.w	sl, [ip]
 800aaae:	b2a3      	uxth	r3, r4
 800aab0:	fa1f fa8a 	uxth.w	sl, sl
 800aab4:	fb0b a303 	mla	r3, fp, r3, sl
 800aab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aabc:	f8dc 4000 	ldr.w	r4, [ip]
 800aac0:	4443      	add	r3, r8
 800aac2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aac6:	fb0b 840a 	mla	r4, fp, sl, r8
 800aaca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aace:	46e2      	mov	sl, ip
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aad6:	454f      	cmp	r7, r9
 800aad8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aadc:	f84a 3b04 	str.w	r3, [sl], #4
 800aae0:	d82b      	bhi.n	800ab3a <__multiply+0x120>
 800aae2:	f8cc 8004 	str.w	r8, [ip, #4]
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aaec:	3204      	adds	r2, #4
 800aaee:	f1ba 0f00 	cmp.w	sl, #0
 800aaf2:	d020      	beq.n	800ab36 <__multiply+0x11c>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	46a8      	mov	r8, r5
 800aafa:	f04f 0b00 	mov.w	fp, #0
 800aafe:	f8b9 c000 	ldrh.w	ip, [r9]
 800ab02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ab06:	fb0a 440c 	mla	r4, sl, ip, r4
 800ab0a:	445c      	add	r4, fp
 800ab0c:	46c4      	mov	ip, r8
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ab14:	f84c 3b04 	str.w	r3, [ip], #4
 800ab18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	fb0a b303 	mla	r3, sl, r3, fp
 800ab26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ab2a:	454f      	cmp	r7, r9
 800ab2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ab30:	d805      	bhi.n	800ab3e <__multiply+0x124>
 800ab32:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab36:	3504      	adds	r5, #4
 800ab38:	e79b      	b.n	800aa72 <__multiply+0x58>
 800ab3a:	46d4      	mov	ip, sl
 800ab3c:	e7b3      	b.n	800aaa6 <__multiply+0x8c>
 800ab3e:	46e0      	mov	r8, ip
 800ab40:	e7dd      	b.n	800aafe <__multiply+0xe4>
 800ab42:	3e01      	subs	r6, #1
 800ab44:	e799      	b.n	800aa7a <__multiply+0x60>
	...

0800ab48 <__pow5mult>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	4615      	mov	r5, r2
 800ab4e:	f012 0203 	ands.w	r2, r2, #3
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	d007      	beq.n	800ab68 <__pow5mult+0x20>
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	4c21      	ldr	r4, [pc, #132]	; (800abe0 <__pow5mult+0x98>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab62:	f7ff fec8 	bl	800a8f6 <__multadd>
 800ab66:	4607      	mov	r7, r0
 800ab68:	10ad      	asrs	r5, r5, #2
 800ab6a:	d035      	beq.n	800abd8 <__pow5mult+0x90>
 800ab6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab6e:	b93c      	cbnz	r4, 800ab80 <__pow5mult+0x38>
 800ab70:	2010      	movs	r0, #16
 800ab72:	f7ff fe53 	bl	800a81c <malloc>
 800ab76:	6270      	str	r0, [r6, #36]	; 0x24
 800ab78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab7c:	6004      	str	r4, [r0, #0]
 800ab7e:	60c4      	str	r4, [r0, #12]
 800ab80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab88:	b94c      	cbnz	r4, 800ab9e <__pow5mult+0x56>
 800ab8a:	f240 2171 	movw	r1, #625	; 0x271
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7ff ff3a 	bl	800aa08 <__i2b>
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	6003      	str	r3, [r0, #0]
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	07eb      	lsls	r3, r5, #31
 800aba4:	d50a      	bpl.n	800abbc <__pow5mult+0x74>
 800aba6:	4639      	mov	r1, r7
 800aba8:	4622      	mov	r2, r4
 800abaa:	4630      	mov	r0, r6
 800abac:	f7ff ff35 	bl	800aa1a <__multiply>
 800abb0:	4639      	mov	r1, r7
 800abb2:	4681      	mov	r9, r0
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7ff fe87 	bl	800a8c8 <_Bfree>
 800abba:	464f      	mov	r7, r9
 800abbc:	106d      	asrs	r5, r5, #1
 800abbe:	d00b      	beq.n	800abd8 <__pow5mult+0x90>
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	b938      	cbnz	r0, 800abd4 <__pow5mult+0x8c>
 800abc4:	4622      	mov	r2, r4
 800abc6:	4621      	mov	r1, r4
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff ff26 	bl	800aa1a <__multiply>
 800abce:	6020      	str	r0, [r4, #0]
 800abd0:	f8c0 8000 	str.w	r8, [r0]
 800abd4:	4604      	mov	r4, r0
 800abd6:	e7e4      	b.n	800aba2 <__pow5mult+0x5a>
 800abd8:	4638      	mov	r0, r7
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	bf00      	nop
 800abe0:	0800c6a8 	.word	0x0800c6a8

0800abe4 <__lshift>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	460c      	mov	r4, r1
 800abea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	6849      	ldr	r1, [r1, #4]
 800abf2:	eb0a 0903 	add.w	r9, sl, r3
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	4607      	mov	r7, r0
 800abfa:	4616      	mov	r6, r2
 800abfc:	f109 0501 	add.w	r5, r9, #1
 800ac00:	42ab      	cmp	r3, r5
 800ac02:	db32      	blt.n	800ac6a <__lshift+0x86>
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff fe2b 	bl	800a860 <_Balloc>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	f100 0114 	add.w	r1, r0, #20
 800ac12:	461a      	mov	r2, r3
 800ac14:	4553      	cmp	r3, sl
 800ac16:	db2b      	blt.n	800ac70 <__lshift+0x8c>
 800ac18:	6920      	ldr	r0, [r4, #16]
 800ac1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac1e:	f104 0314 	add.w	r3, r4, #20
 800ac22:	f016 021f 	ands.w	r2, r6, #31
 800ac26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac2e:	d025      	beq.n	800ac7c <__lshift+0x98>
 800ac30:	f1c2 0e20 	rsb	lr, r2, #32
 800ac34:	2000      	movs	r0, #0
 800ac36:	681e      	ldr	r6, [r3, #0]
 800ac38:	468a      	mov	sl, r1
 800ac3a:	4096      	lsls	r6, r2
 800ac3c:	4330      	orrs	r0, r6
 800ac3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac42:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac46:	459c      	cmp	ip, r3
 800ac48:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac4c:	d814      	bhi.n	800ac78 <__lshift+0x94>
 800ac4e:	6048      	str	r0, [r1, #4]
 800ac50:	b108      	cbz	r0, 800ac56 <__lshift+0x72>
 800ac52:	f109 0502 	add.w	r5, r9, #2
 800ac56:	3d01      	subs	r5, #1
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac5e:	4621      	mov	r1, r4
 800ac60:	f7ff fe32 	bl	800a8c8 <_Bfree>
 800ac64:	4640      	mov	r0, r8
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	e7c7      	b.n	800ac00 <__lshift+0x1c>
 800ac70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac74:	3301      	adds	r3, #1
 800ac76:	e7cd      	b.n	800ac14 <__lshift+0x30>
 800ac78:	4651      	mov	r1, sl
 800ac7a:	e7dc      	b.n	800ac36 <__lshift+0x52>
 800ac7c:	3904      	subs	r1, #4
 800ac7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac82:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac86:	459c      	cmp	ip, r3
 800ac88:	d8f9      	bhi.n	800ac7e <__lshift+0x9a>
 800ac8a:	e7e4      	b.n	800ac56 <__lshift+0x72>

0800ac8c <__mcmp>:
 800ac8c:	6903      	ldr	r3, [r0, #16]
 800ac8e:	690a      	ldr	r2, [r1, #16]
 800ac90:	1a9b      	subs	r3, r3, r2
 800ac92:	b530      	push	{r4, r5, lr}
 800ac94:	d10c      	bne.n	800acb0 <__mcmp+0x24>
 800ac96:	0092      	lsls	r2, r2, #2
 800ac98:	3014      	adds	r0, #20
 800ac9a:	3114      	adds	r1, #20
 800ac9c:	1884      	adds	r4, r0, r2
 800ac9e:	4411      	add	r1, r2
 800aca0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aca4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aca8:	4295      	cmp	r5, r2
 800acaa:	d003      	beq.n	800acb4 <__mcmp+0x28>
 800acac:	d305      	bcc.n	800acba <__mcmp+0x2e>
 800acae:	2301      	movs	r3, #1
 800acb0:	4618      	mov	r0, r3
 800acb2:	bd30      	pop	{r4, r5, pc}
 800acb4:	42a0      	cmp	r0, r4
 800acb6:	d3f3      	bcc.n	800aca0 <__mcmp+0x14>
 800acb8:	e7fa      	b.n	800acb0 <__mcmp+0x24>
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e7f7      	b.n	800acb0 <__mcmp+0x24>

0800acc0 <__mdiff>:
 800acc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	460d      	mov	r5, r1
 800acc6:	4607      	mov	r7, r0
 800acc8:	4611      	mov	r1, r2
 800acca:	4628      	mov	r0, r5
 800accc:	4614      	mov	r4, r2
 800acce:	f7ff ffdd 	bl	800ac8c <__mcmp>
 800acd2:	1e06      	subs	r6, r0, #0
 800acd4:	d108      	bne.n	800ace8 <__mdiff+0x28>
 800acd6:	4631      	mov	r1, r6
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff fdc1 	bl	800a860 <_Balloc>
 800acde:	2301      	movs	r3, #1
 800ace0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	bfa4      	itt	ge
 800acea:	4623      	movge	r3, r4
 800acec:	462c      	movge	r4, r5
 800acee:	4638      	mov	r0, r7
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	bfa6      	itte	ge
 800acf4:	461d      	movge	r5, r3
 800acf6:	2600      	movge	r6, #0
 800acf8:	2601      	movlt	r6, #1
 800acfa:	f7ff fdb1 	bl	800a860 <_Balloc>
 800acfe:	692b      	ldr	r3, [r5, #16]
 800ad00:	60c6      	str	r6, [r0, #12]
 800ad02:	6926      	ldr	r6, [r4, #16]
 800ad04:	f105 0914 	add.w	r9, r5, #20
 800ad08:	f104 0214 	add.w	r2, r4, #20
 800ad0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ad10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ad14:	f100 0514 	add.w	r5, r0, #20
 800ad18:	f04f 0e00 	mov.w	lr, #0
 800ad1c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ad20:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad24:	fa1e f18a 	uxtah	r1, lr, sl
 800ad28:	b2a3      	uxth	r3, r4
 800ad2a:	1ac9      	subs	r1, r1, r3
 800ad2c:	0c23      	lsrs	r3, r4, #16
 800ad2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ad32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ad36:	b289      	uxth	r1, r1
 800ad38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ad3c:	45c8      	cmp	r8, r9
 800ad3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ad42:	4694      	mov	ip, r2
 800ad44:	f845 3b04 	str.w	r3, [r5], #4
 800ad48:	d8e8      	bhi.n	800ad1c <__mdiff+0x5c>
 800ad4a:	45bc      	cmp	ip, r7
 800ad4c:	d304      	bcc.n	800ad58 <__mdiff+0x98>
 800ad4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad52:	b183      	cbz	r3, 800ad76 <__mdiff+0xb6>
 800ad54:	6106      	str	r6, [r0, #16]
 800ad56:	e7c5      	b.n	800ace4 <__mdiff+0x24>
 800ad58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad5c:	fa1e f381 	uxtah	r3, lr, r1
 800ad60:	141a      	asrs	r2, r3, #16
 800ad62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ad70:	f845 3b04 	str.w	r3, [r5], #4
 800ad74:	e7e9      	b.n	800ad4a <__mdiff+0x8a>
 800ad76:	3e01      	subs	r6, #1
 800ad78:	e7e9      	b.n	800ad4e <__mdiff+0x8e>

0800ad7a <__d2b>:
 800ad7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad7e:	460e      	mov	r6, r1
 800ad80:	2101      	movs	r1, #1
 800ad82:	ec59 8b10 	vmov	r8, r9, d0
 800ad86:	4615      	mov	r5, r2
 800ad88:	f7ff fd6a 	bl	800a860 <_Balloc>
 800ad8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad90:	4607      	mov	r7, r0
 800ad92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad96:	bb34      	cbnz	r4, 800ade6 <__d2b+0x6c>
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	f1b8 0300 	subs.w	r3, r8, #0
 800ad9e:	d027      	beq.n	800adf0 <__d2b+0x76>
 800ada0:	a802      	add	r0, sp, #8
 800ada2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ada6:	f7ff fe00 	bl	800a9aa <__lo0bits>
 800adaa:	9900      	ldr	r1, [sp, #0]
 800adac:	b1f0      	cbz	r0, 800adec <__d2b+0x72>
 800adae:	9a01      	ldr	r2, [sp, #4]
 800adb0:	f1c0 0320 	rsb	r3, r0, #32
 800adb4:	fa02 f303 	lsl.w	r3, r2, r3
 800adb8:	430b      	orrs	r3, r1
 800adba:	40c2      	lsrs	r2, r0
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	9201      	str	r2, [sp, #4]
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	61bb      	str	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bf14      	ite	ne
 800adc8:	2102      	movne	r1, #2
 800adca:	2101      	moveq	r1, #1
 800adcc:	6139      	str	r1, [r7, #16]
 800adce:	b1c4      	cbz	r4, 800ae02 <__d2b+0x88>
 800add0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800add4:	4404      	add	r4, r0
 800add6:	6034      	str	r4, [r6, #0]
 800add8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800addc:	6028      	str	r0, [r5, #0]
 800adde:	4638      	mov	r0, r7
 800ade0:	b003      	add	sp, #12
 800ade2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ade6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adea:	e7d5      	b.n	800ad98 <__d2b+0x1e>
 800adec:	6179      	str	r1, [r7, #20]
 800adee:	e7e7      	b.n	800adc0 <__d2b+0x46>
 800adf0:	a801      	add	r0, sp, #4
 800adf2:	f7ff fdda 	bl	800a9aa <__lo0bits>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	617b      	str	r3, [r7, #20]
 800adfa:	2101      	movs	r1, #1
 800adfc:	6139      	str	r1, [r7, #16]
 800adfe:	3020      	adds	r0, #32
 800ae00:	e7e5      	b.n	800adce <__d2b+0x54>
 800ae02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ae06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae0a:	6030      	str	r0, [r6, #0]
 800ae0c:	6918      	ldr	r0, [r3, #16]
 800ae0e:	f7ff fdad 	bl	800a96c <__hi0bits>
 800ae12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ae16:	e7e1      	b.n	800addc <__d2b+0x62>

0800ae18 <_calloc_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	fb02 f401 	mul.w	r4, r2, r1
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f000 f856 	bl	800aed0 <_malloc_r>
 800ae24:	4605      	mov	r5, r0
 800ae26:	b118      	cbz	r0, 800ae30 <_calloc_r+0x18>
 800ae28:	4622      	mov	r2, r4
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f7fd f869 	bl	8007f02 <memset>
 800ae30:	4628      	mov	r0, r5
 800ae32:	bd38      	pop	{r3, r4, r5, pc}

0800ae34 <_free_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	d045      	beq.n	800aec8 <_free_r+0x94>
 800ae3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae40:	1f0c      	subs	r4, r1, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfb8      	it	lt
 800ae46:	18e4      	addlt	r4, r4, r3
 800ae48:	f000 fce9 	bl	800b81e <__malloc_lock>
 800ae4c:	4a1f      	ldr	r2, [pc, #124]	; (800aecc <_free_r+0x98>)
 800ae4e:	6813      	ldr	r3, [r2, #0]
 800ae50:	4610      	mov	r0, r2
 800ae52:	b933      	cbnz	r3, 800ae62 <_free_r+0x2e>
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6014      	str	r4, [r2, #0]
 800ae58:	4628      	mov	r0, r5
 800ae5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae5e:	f000 bcdf 	b.w	800b820 <__malloc_unlock>
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	d90c      	bls.n	800ae80 <_free_r+0x4c>
 800ae66:	6821      	ldr	r1, [r4, #0]
 800ae68:	1862      	adds	r2, r4, r1
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	bf04      	itt	eq
 800ae6e:	681a      	ldreq	r2, [r3, #0]
 800ae70:	685b      	ldreq	r3, [r3, #4]
 800ae72:	6063      	str	r3, [r4, #4]
 800ae74:	bf04      	itt	eq
 800ae76:	1852      	addeq	r2, r2, r1
 800ae78:	6022      	streq	r2, [r4, #0]
 800ae7a:	6004      	str	r4, [r0, #0]
 800ae7c:	e7ec      	b.n	800ae58 <_free_r+0x24>
 800ae7e:	4613      	mov	r3, r2
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	b10a      	cbz	r2, 800ae88 <_free_r+0x54>
 800ae84:	42a2      	cmp	r2, r4
 800ae86:	d9fa      	bls.n	800ae7e <_free_r+0x4a>
 800ae88:	6819      	ldr	r1, [r3, #0]
 800ae8a:	1858      	adds	r0, r3, r1
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	d10b      	bne.n	800aea8 <_free_r+0x74>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	4401      	add	r1, r0
 800ae94:	1858      	adds	r0, r3, r1
 800ae96:	4282      	cmp	r2, r0
 800ae98:	6019      	str	r1, [r3, #0]
 800ae9a:	d1dd      	bne.n	800ae58 <_free_r+0x24>
 800ae9c:	6810      	ldr	r0, [r2, #0]
 800ae9e:	6852      	ldr	r2, [r2, #4]
 800aea0:	605a      	str	r2, [r3, #4]
 800aea2:	4401      	add	r1, r0
 800aea4:	6019      	str	r1, [r3, #0]
 800aea6:	e7d7      	b.n	800ae58 <_free_r+0x24>
 800aea8:	d902      	bls.n	800aeb0 <_free_r+0x7c>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	e7d3      	b.n	800ae58 <_free_r+0x24>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	1821      	adds	r1, r4, r0
 800aeb4:	428a      	cmp	r2, r1
 800aeb6:	bf04      	itt	eq
 800aeb8:	6811      	ldreq	r1, [r2, #0]
 800aeba:	6852      	ldreq	r2, [r2, #4]
 800aebc:	6062      	str	r2, [r4, #4]
 800aebe:	bf04      	itt	eq
 800aec0:	1809      	addeq	r1, r1, r0
 800aec2:	6021      	streq	r1, [r4, #0]
 800aec4:	605c      	str	r4, [r3, #4]
 800aec6:	e7c7      	b.n	800ae58 <_free_r+0x24>
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	20007d5c 	.word	0x20007d5c

0800aed0 <_malloc_r>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	1ccd      	adds	r5, r1, #3
 800aed4:	f025 0503 	bic.w	r5, r5, #3
 800aed8:	3508      	adds	r5, #8
 800aeda:	2d0c      	cmp	r5, #12
 800aedc:	bf38      	it	cc
 800aede:	250c      	movcc	r5, #12
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	4606      	mov	r6, r0
 800aee4:	db01      	blt.n	800aeea <_malloc_r+0x1a>
 800aee6:	42a9      	cmp	r1, r5
 800aee8:	d903      	bls.n	800aef2 <_malloc_r+0x22>
 800aeea:	230c      	movs	r3, #12
 800aeec:	6033      	str	r3, [r6, #0]
 800aeee:	2000      	movs	r0, #0
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	f000 fc94 	bl	800b81e <__malloc_lock>
 800aef6:	4a21      	ldr	r2, [pc, #132]	; (800af7c <_malloc_r+0xac>)
 800aef8:	6814      	ldr	r4, [r2, #0]
 800aefa:	4621      	mov	r1, r4
 800aefc:	b991      	cbnz	r1, 800af24 <_malloc_r+0x54>
 800aefe:	4c20      	ldr	r4, [pc, #128]	; (800af80 <_malloc_r+0xb0>)
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	b91b      	cbnz	r3, 800af0c <_malloc_r+0x3c>
 800af04:	4630      	mov	r0, r6
 800af06:	f000 facf 	bl	800b4a8 <_sbrk_r>
 800af0a:	6020      	str	r0, [r4, #0]
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 faca 	bl	800b4a8 <_sbrk_r>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d124      	bne.n	800af62 <_malloc_r+0x92>
 800af18:	230c      	movs	r3, #12
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 fc7f 	bl	800b820 <__malloc_unlock>
 800af22:	e7e4      	b.n	800aeee <_malloc_r+0x1e>
 800af24:	680b      	ldr	r3, [r1, #0]
 800af26:	1b5b      	subs	r3, r3, r5
 800af28:	d418      	bmi.n	800af5c <_malloc_r+0x8c>
 800af2a:	2b0b      	cmp	r3, #11
 800af2c:	d90f      	bls.n	800af4e <_malloc_r+0x7e>
 800af2e:	600b      	str	r3, [r1, #0]
 800af30:	50cd      	str	r5, [r1, r3]
 800af32:	18cc      	adds	r4, r1, r3
 800af34:	4630      	mov	r0, r6
 800af36:	f000 fc73 	bl	800b820 <__malloc_unlock>
 800af3a:	f104 000b 	add.w	r0, r4, #11
 800af3e:	1d23      	adds	r3, r4, #4
 800af40:	f020 0007 	bic.w	r0, r0, #7
 800af44:	1ac3      	subs	r3, r0, r3
 800af46:	d0d3      	beq.n	800aef0 <_malloc_r+0x20>
 800af48:	425a      	negs	r2, r3
 800af4a:	50e2      	str	r2, [r4, r3]
 800af4c:	e7d0      	b.n	800aef0 <_malloc_r+0x20>
 800af4e:	428c      	cmp	r4, r1
 800af50:	684b      	ldr	r3, [r1, #4]
 800af52:	bf16      	itet	ne
 800af54:	6063      	strne	r3, [r4, #4]
 800af56:	6013      	streq	r3, [r2, #0]
 800af58:	460c      	movne	r4, r1
 800af5a:	e7eb      	b.n	800af34 <_malloc_r+0x64>
 800af5c:	460c      	mov	r4, r1
 800af5e:	6849      	ldr	r1, [r1, #4]
 800af60:	e7cc      	b.n	800aefc <_malloc_r+0x2c>
 800af62:	1cc4      	adds	r4, r0, #3
 800af64:	f024 0403 	bic.w	r4, r4, #3
 800af68:	42a0      	cmp	r0, r4
 800af6a:	d005      	beq.n	800af78 <_malloc_r+0xa8>
 800af6c:	1a21      	subs	r1, r4, r0
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 fa9a 	bl	800b4a8 <_sbrk_r>
 800af74:	3001      	adds	r0, #1
 800af76:	d0cf      	beq.n	800af18 <_malloc_r+0x48>
 800af78:	6025      	str	r5, [r4, #0]
 800af7a:	e7db      	b.n	800af34 <_malloc_r+0x64>
 800af7c:	20007d5c 	.word	0x20007d5c
 800af80:	20007d60 	.word	0x20007d60

0800af84 <__ssputs_r>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	688e      	ldr	r6, [r1, #8]
 800af8a:	429e      	cmp	r6, r3
 800af8c:	4682      	mov	sl, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	4690      	mov	r8, r2
 800af92:	4699      	mov	r9, r3
 800af94:	d837      	bhi.n	800b006 <__ssputs_r+0x82>
 800af96:	898a      	ldrh	r2, [r1, #12]
 800af98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af9c:	d031      	beq.n	800b002 <__ssputs_r+0x7e>
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	6909      	ldr	r1, [r1, #16]
 800afa2:	1a6f      	subs	r7, r5, r1
 800afa4:	6965      	ldr	r5, [r4, #20]
 800afa6:	2302      	movs	r3, #2
 800afa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afac:	fb95 f5f3 	sdiv	r5, r5, r3
 800afb0:	f109 0301 	add.w	r3, r9, #1
 800afb4:	443b      	add	r3, r7
 800afb6:	429d      	cmp	r5, r3
 800afb8:	bf38      	it	cc
 800afba:	461d      	movcc	r5, r3
 800afbc:	0553      	lsls	r3, r2, #21
 800afbe:	d530      	bpl.n	800b022 <__ssputs_r+0x9e>
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7ff ff85 	bl	800aed0 <_malloc_r>
 800afc6:	4606      	mov	r6, r0
 800afc8:	b950      	cbnz	r0, 800afe0 <__ssputs_r+0x5c>
 800afca:	230c      	movs	r3, #12
 800afcc:	f8ca 3000 	str.w	r3, [sl]
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	463a      	mov	r2, r7
 800afe2:	6921      	ldr	r1, [r4, #16]
 800afe4:	f7fc ff82 	bl	8007eec <memcpy>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	6126      	str	r6, [r4, #16]
 800aff6:	6165      	str	r5, [r4, #20]
 800aff8:	443e      	add	r6, r7
 800affa:	1bed      	subs	r5, r5, r7
 800affc:	6026      	str	r6, [r4, #0]
 800affe:	60a5      	str	r5, [r4, #8]
 800b000:	464e      	mov	r6, r9
 800b002:	454e      	cmp	r6, r9
 800b004:	d900      	bls.n	800b008 <__ssputs_r+0x84>
 800b006:	464e      	mov	r6, r9
 800b008:	4632      	mov	r2, r6
 800b00a:	4641      	mov	r1, r8
 800b00c:	6820      	ldr	r0, [r4, #0]
 800b00e:	f000 fbed 	bl	800b7ec <memmove>
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	1b9b      	subs	r3, r3, r6
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	441e      	add	r6, r3
 800b01c:	6026      	str	r6, [r4, #0]
 800b01e:	2000      	movs	r0, #0
 800b020:	e7dc      	b.n	800afdc <__ssputs_r+0x58>
 800b022:	462a      	mov	r2, r5
 800b024:	f000 fbfd 	bl	800b822 <_realloc_r>
 800b028:	4606      	mov	r6, r0
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1e2      	bne.n	800aff4 <__ssputs_r+0x70>
 800b02e:	6921      	ldr	r1, [r4, #16]
 800b030:	4650      	mov	r0, sl
 800b032:	f7ff feff 	bl	800ae34 <_free_r>
 800b036:	e7c8      	b.n	800afca <__ssputs_r+0x46>

0800b038 <_svfiprintf_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	461d      	mov	r5, r3
 800b03e:	898b      	ldrh	r3, [r1, #12]
 800b040:	061f      	lsls	r7, r3, #24
 800b042:	b09d      	sub	sp, #116	; 0x74
 800b044:	4680      	mov	r8, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d50f      	bpl.n	800b06c <_svfiprintf_r+0x34>
 800b04c:	690b      	ldr	r3, [r1, #16]
 800b04e:	b96b      	cbnz	r3, 800b06c <_svfiprintf_r+0x34>
 800b050:	2140      	movs	r1, #64	; 0x40
 800b052:	f7ff ff3d 	bl	800aed0 <_malloc_r>
 800b056:	6020      	str	r0, [r4, #0]
 800b058:	6120      	str	r0, [r4, #16]
 800b05a:	b928      	cbnz	r0, 800b068 <_svfiprintf_r+0x30>
 800b05c:	230c      	movs	r3, #12
 800b05e:	f8c8 3000 	str.w	r3, [r8]
 800b062:	f04f 30ff 	mov.w	r0, #4294967295
 800b066:	e0c8      	b.n	800b1fa <_svfiprintf_r+0x1c2>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	6163      	str	r3, [r4, #20]
 800b06c:	2300      	movs	r3, #0
 800b06e:	9309      	str	r3, [sp, #36]	; 0x24
 800b070:	2320      	movs	r3, #32
 800b072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b076:	2330      	movs	r3, #48	; 0x30
 800b078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b07c:	9503      	str	r5, [sp, #12]
 800b07e:	f04f 0b01 	mov.w	fp, #1
 800b082:	4637      	mov	r7, r6
 800b084:	463d      	mov	r5, r7
 800b086:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b08a:	b10b      	cbz	r3, 800b090 <_svfiprintf_r+0x58>
 800b08c:	2b25      	cmp	r3, #37	; 0x25
 800b08e:	d13e      	bne.n	800b10e <_svfiprintf_r+0xd6>
 800b090:	ebb7 0a06 	subs.w	sl, r7, r6
 800b094:	d00b      	beq.n	800b0ae <_svfiprintf_r+0x76>
 800b096:	4653      	mov	r3, sl
 800b098:	4632      	mov	r2, r6
 800b09a:	4621      	mov	r1, r4
 800b09c:	4640      	mov	r0, r8
 800b09e:	f7ff ff71 	bl	800af84 <__ssputs_r>
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f000 80a4 	beq.w	800b1f0 <_svfiprintf_r+0x1b8>
 800b0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0aa:	4453      	add	r3, sl
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	783b      	ldrb	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 809d 	beq.w	800b1f0 <_svfiprintf_r+0x1b8>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c0:	9304      	str	r3, [sp, #16]
 800b0c2:	9307      	str	r3, [sp, #28]
 800b0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0ca:	462f      	mov	r7, r5
 800b0cc:	2205      	movs	r2, #5
 800b0ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b0d2:	4850      	ldr	r0, [pc, #320]	; (800b214 <_svfiprintf_r+0x1dc>)
 800b0d4:	f7f5 f8ac 	bl	8000230 <memchr>
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	b9d0      	cbnz	r0, 800b112 <_svfiprintf_r+0xda>
 800b0dc:	06d9      	lsls	r1, r3, #27
 800b0de:	bf44      	itt	mi
 800b0e0:	2220      	movmi	r2, #32
 800b0e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0e6:	071a      	lsls	r2, r3, #28
 800b0e8:	bf44      	itt	mi
 800b0ea:	222b      	movmi	r2, #43	; 0x2b
 800b0ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0f0:	782a      	ldrb	r2, [r5, #0]
 800b0f2:	2a2a      	cmp	r2, #42	; 0x2a
 800b0f4:	d015      	beq.n	800b122 <_svfiprintf_r+0xea>
 800b0f6:	9a07      	ldr	r2, [sp, #28]
 800b0f8:	462f      	mov	r7, r5
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	250a      	movs	r5, #10
 800b0fe:	4639      	mov	r1, r7
 800b100:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b104:	3b30      	subs	r3, #48	; 0x30
 800b106:	2b09      	cmp	r3, #9
 800b108:	d94d      	bls.n	800b1a6 <_svfiprintf_r+0x16e>
 800b10a:	b1b8      	cbz	r0, 800b13c <_svfiprintf_r+0x104>
 800b10c:	e00f      	b.n	800b12e <_svfiprintf_r+0xf6>
 800b10e:	462f      	mov	r7, r5
 800b110:	e7b8      	b.n	800b084 <_svfiprintf_r+0x4c>
 800b112:	4a40      	ldr	r2, [pc, #256]	; (800b214 <_svfiprintf_r+0x1dc>)
 800b114:	1a80      	subs	r0, r0, r2
 800b116:	fa0b f000 	lsl.w	r0, fp, r0
 800b11a:	4318      	orrs	r0, r3
 800b11c:	9004      	str	r0, [sp, #16]
 800b11e:	463d      	mov	r5, r7
 800b120:	e7d3      	b.n	800b0ca <_svfiprintf_r+0x92>
 800b122:	9a03      	ldr	r2, [sp, #12]
 800b124:	1d11      	adds	r1, r2, #4
 800b126:	6812      	ldr	r2, [r2, #0]
 800b128:	9103      	str	r1, [sp, #12]
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	db01      	blt.n	800b132 <_svfiprintf_r+0xfa>
 800b12e:	9207      	str	r2, [sp, #28]
 800b130:	e004      	b.n	800b13c <_svfiprintf_r+0x104>
 800b132:	4252      	negs	r2, r2
 800b134:	f043 0302 	orr.w	r3, r3, #2
 800b138:	9207      	str	r2, [sp, #28]
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	783b      	ldrb	r3, [r7, #0]
 800b13e:	2b2e      	cmp	r3, #46	; 0x2e
 800b140:	d10c      	bne.n	800b15c <_svfiprintf_r+0x124>
 800b142:	787b      	ldrb	r3, [r7, #1]
 800b144:	2b2a      	cmp	r3, #42	; 0x2a
 800b146:	d133      	bne.n	800b1b0 <_svfiprintf_r+0x178>
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	1d1a      	adds	r2, r3, #4
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	9203      	str	r2, [sp, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	bfb8      	it	lt
 800b154:	f04f 33ff 	movlt.w	r3, #4294967295
 800b158:	3702      	adds	r7, #2
 800b15a:	9305      	str	r3, [sp, #20]
 800b15c:	4d2e      	ldr	r5, [pc, #184]	; (800b218 <_svfiprintf_r+0x1e0>)
 800b15e:	7839      	ldrb	r1, [r7, #0]
 800b160:	2203      	movs	r2, #3
 800b162:	4628      	mov	r0, r5
 800b164:	f7f5 f864 	bl	8000230 <memchr>
 800b168:	b138      	cbz	r0, 800b17a <_svfiprintf_r+0x142>
 800b16a:	2340      	movs	r3, #64	; 0x40
 800b16c:	1b40      	subs	r0, r0, r5
 800b16e:	fa03 f000 	lsl.w	r0, r3, r0
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	4303      	orrs	r3, r0
 800b176:	3701      	adds	r7, #1
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	7839      	ldrb	r1, [r7, #0]
 800b17c:	4827      	ldr	r0, [pc, #156]	; (800b21c <_svfiprintf_r+0x1e4>)
 800b17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b182:	2206      	movs	r2, #6
 800b184:	1c7e      	adds	r6, r7, #1
 800b186:	f7f5 f853 	bl	8000230 <memchr>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d038      	beq.n	800b200 <_svfiprintf_r+0x1c8>
 800b18e:	4b24      	ldr	r3, [pc, #144]	; (800b220 <_svfiprintf_r+0x1e8>)
 800b190:	bb13      	cbnz	r3, 800b1d8 <_svfiprintf_r+0x1a0>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	3307      	adds	r3, #7
 800b196:	f023 0307 	bic.w	r3, r3, #7
 800b19a:	3308      	adds	r3, #8
 800b19c:	9303      	str	r3, [sp, #12]
 800b19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a0:	444b      	add	r3, r9
 800b1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a4:	e76d      	b.n	800b082 <_svfiprintf_r+0x4a>
 800b1a6:	fb05 3202 	mla	r2, r5, r2, r3
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	e7a6      	b.n	800b0fe <_svfiprintf_r+0xc6>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	3701      	adds	r7, #1
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	250a      	movs	r5, #10
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1c0:	3a30      	subs	r2, #48	; 0x30
 800b1c2:	2a09      	cmp	r2, #9
 800b1c4:	d903      	bls.n	800b1ce <_svfiprintf_r+0x196>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0c8      	beq.n	800b15c <_svfiprintf_r+0x124>
 800b1ca:	9105      	str	r1, [sp, #20]
 800b1cc:	e7c6      	b.n	800b15c <_svfiprintf_r+0x124>
 800b1ce:	fb05 2101 	mla	r1, r5, r1, r2
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	e7f0      	b.n	800b1ba <_svfiprintf_r+0x182>
 800b1d8:	ab03      	add	r3, sp, #12
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4b11      	ldr	r3, [pc, #68]	; (800b224 <_svfiprintf_r+0x1ec>)
 800b1e0:	a904      	add	r1, sp, #16
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	f7fd f9be 	bl	8008564 <_printf_float>
 800b1e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1ec:	4681      	mov	r9, r0
 800b1ee:	d1d6      	bne.n	800b19e <_svfiprintf_r+0x166>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	065b      	lsls	r3, r3, #25
 800b1f4:	f53f af35 	bmi.w	800b062 <_svfiprintf_r+0x2a>
 800b1f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1fa:	b01d      	add	sp, #116	; 0x74
 800b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b200:	ab03      	add	r3, sp, #12
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	4622      	mov	r2, r4
 800b206:	4b07      	ldr	r3, [pc, #28]	; (800b224 <_svfiprintf_r+0x1ec>)
 800b208:	a904      	add	r1, sp, #16
 800b20a:	4640      	mov	r0, r8
 800b20c:	f7fd fc60 	bl	8008ad0 <_printf_i>
 800b210:	e7ea      	b.n	800b1e8 <_svfiprintf_r+0x1b0>
 800b212:	bf00      	nop
 800b214:	0800c6b4 	.word	0x0800c6b4
 800b218:	0800c6ba 	.word	0x0800c6ba
 800b21c:	0800c6be 	.word	0x0800c6be
 800b220:	08008565 	.word	0x08008565
 800b224:	0800af85 	.word	0x0800af85

0800b228 <__sfputc_r>:
 800b228:	6893      	ldr	r3, [r2, #8]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	b410      	push	{r4}
 800b230:	6093      	str	r3, [r2, #8]
 800b232:	da08      	bge.n	800b246 <__sfputc_r+0x1e>
 800b234:	6994      	ldr	r4, [r2, #24]
 800b236:	42a3      	cmp	r3, r4
 800b238:	db01      	blt.n	800b23e <__sfputc_r+0x16>
 800b23a:	290a      	cmp	r1, #10
 800b23c:	d103      	bne.n	800b246 <__sfputc_r+0x1e>
 800b23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b242:	f7fe b98d 	b.w	8009560 <__swbuf_r>
 800b246:	6813      	ldr	r3, [r2, #0]
 800b248:	1c58      	adds	r0, r3, #1
 800b24a:	6010      	str	r0, [r2, #0]
 800b24c:	7019      	strb	r1, [r3, #0]
 800b24e:	4608      	mov	r0, r1
 800b250:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <__sfputs_r>:
 800b256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b258:	4606      	mov	r6, r0
 800b25a:	460f      	mov	r7, r1
 800b25c:	4614      	mov	r4, r2
 800b25e:	18d5      	adds	r5, r2, r3
 800b260:	42ac      	cmp	r4, r5
 800b262:	d101      	bne.n	800b268 <__sfputs_r+0x12>
 800b264:	2000      	movs	r0, #0
 800b266:	e007      	b.n	800b278 <__sfputs_r+0x22>
 800b268:	463a      	mov	r2, r7
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff ffda 	bl	800b228 <__sfputc_r>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d1f3      	bne.n	800b260 <__sfputs_r+0xa>
 800b278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b27c <_vfiprintf_r>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	460c      	mov	r4, r1
 800b282:	b09d      	sub	sp, #116	; 0x74
 800b284:	4617      	mov	r7, r2
 800b286:	461d      	mov	r5, r3
 800b288:	4606      	mov	r6, r0
 800b28a:	b118      	cbz	r0, 800b294 <_vfiprintf_r+0x18>
 800b28c:	6983      	ldr	r3, [r0, #24]
 800b28e:	b90b      	cbnz	r3, 800b294 <_vfiprintf_r+0x18>
 800b290:	f7ff f96e 	bl	800a570 <__sinit>
 800b294:	4b7c      	ldr	r3, [pc, #496]	; (800b488 <_vfiprintf_r+0x20c>)
 800b296:	429c      	cmp	r4, r3
 800b298:	d158      	bne.n	800b34c <_vfiprintf_r+0xd0>
 800b29a:	6874      	ldr	r4, [r6, #4]
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	0718      	lsls	r0, r3, #28
 800b2a0:	d55e      	bpl.n	800b360 <_vfiprintf_r+0xe4>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d05b      	beq.n	800b360 <_vfiprintf_r+0xe4>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ac:	2320      	movs	r3, #32
 800b2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b2:	2330      	movs	r3, #48	; 0x30
 800b2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2b8:	9503      	str	r5, [sp, #12]
 800b2ba:	f04f 0b01 	mov.w	fp, #1
 800b2be:	46b8      	mov	r8, r7
 800b2c0:	4645      	mov	r5, r8
 800b2c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2c6:	b10b      	cbz	r3, 800b2cc <_vfiprintf_r+0x50>
 800b2c8:	2b25      	cmp	r3, #37	; 0x25
 800b2ca:	d154      	bne.n	800b376 <_vfiprintf_r+0xfa>
 800b2cc:	ebb8 0a07 	subs.w	sl, r8, r7
 800b2d0:	d00b      	beq.n	800b2ea <_vfiprintf_r+0x6e>
 800b2d2:	4653      	mov	r3, sl
 800b2d4:	463a      	mov	r2, r7
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7ff ffbc 	bl	800b256 <__sfputs_r>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	f000 80c2 	beq.w	800b468 <_vfiprintf_r+0x1ec>
 800b2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e6:	4453      	add	r3, sl
 800b2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ea:	f898 3000 	ldrb.w	r3, [r8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80ba 	beq.w	800b468 <_vfiprintf_r+0x1ec>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2fe:	9304      	str	r3, [sp, #16]
 800b300:	9307      	str	r3, [sp, #28]
 800b302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b306:	931a      	str	r3, [sp, #104]	; 0x68
 800b308:	46a8      	mov	r8, r5
 800b30a:	2205      	movs	r2, #5
 800b30c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b310:	485e      	ldr	r0, [pc, #376]	; (800b48c <_vfiprintf_r+0x210>)
 800b312:	f7f4 ff8d 	bl	8000230 <memchr>
 800b316:	9b04      	ldr	r3, [sp, #16]
 800b318:	bb78      	cbnz	r0, 800b37a <_vfiprintf_r+0xfe>
 800b31a:	06d9      	lsls	r1, r3, #27
 800b31c:	bf44      	itt	mi
 800b31e:	2220      	movmi	r2, #32
 800b320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b324:	071a      	lsls	r2, r3, #28
 800b326:	bf44      	itt	mi
 800b328:	222b      	movmi	r2, #43	; 0x2b
 800b32a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b32e:	782a      	ldrb	r2, [r5, #0]
 800b330:	2a2a      	cmp	r2, #42	; 0x2a
 800b332:	d02a      	beq.n	800b38a <_vfiprintf_r+0x10e>
 800b334:	9a07      	ldr	r2, [sp, #28]
 800b336:	46a8      	mov	r8, r5
 800b338:	2000      	movs	r0, #0
 800b33a:	250a      	movs	r5, #10
 800b33c:	4641      	mov	r1, r8
 800b33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b342:	3b30      	subs	r3, #48	; 0x30
 800b344:	2b09      	cmp	r3, #9
 800b346:	d969      	bls.n	800b41c <_vfiprintf_r+0x1a0>
 800b348:	b360      	cbz	r0, 800b3a4 <_vfiprintf_r+0x128>
 800b34a:	e024      	b.n	800b396 <_vfiprintf_r+0x11a>
 800b34c:	4b50      	ldr	r3, [pc, #320]	; (800b490 <_vfiprintf_r+0x214>)
 800b34e:	429c      	cmp	r4, r3
 800b350:	d101      	bne.n	800b356 <_vfiprintf_r+0xda>
 800b352:	68b4      	ldr	r4, [r6, #8]
 800b354:	e7a2      	b.n	800b29c <_vfiprintf_r+0x20>
 800b356:	4b4f      	ldr	r3, [pc, #316]	; (800b494 <_vfiprintf_r+0x218>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	bf08      	it	eq
 800b35c:	68f4      	ldreq	r4, [r6, #12]
 800b35e:	e79d      	b.n	800b29c <_vfiprintf_r+0x20>
 800b360:	4621      	mov	r1, r4
 800b362:	4630      	mov	r0, r6
 800b364:	f7fe f94e 	bl	8009604 <__swsetup_r>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d09d      	beq.n	800b2a8 <_vfiprintf_r+0x2c>
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	b01d      	add	sp, #116	; 0x74
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b376:	46a8      	mov	r8, r5
 800b378:	e7a2      	b.n	800b2c0 <_vfiprintf_r+0x44>
 800b37a:	4a44      	ldr	r2, [pc, #272]	; (800b48c <_vfiprintf_r+0x210>)
 800b37c:	1a80      	subs	r0, r0, r2
 800b37e:	fa0b f000 	lsl.w	r0, fp, r0
 800b382:	4318      	orrs	r0, r3
 800b384:	9004      	str	r0, [sp, #16]
 800b386:	4645      	mov	r5, r8
 800b388:	e7be      	b.n	800b308 <_vfiprintf_r+0x8c>
 800b38a:	9a03      	ldr	r2, [sp, #12]
 800b38c:	1d11      	adds	r1, r2, #4
 800b38e:	6812      	ldr	r2, [r2, #0]
 800b390:	9103      	str	r1, [sp, #12]
 800b392:	2a00      	cmp	r2, #0
 800b394:	db01      	blt.n	800b39a <_vfiprintf_r+0x11e>
 800b396:	9207      	str	r2, [sp, #28]
 800b398:	e004      	b.n	800b3a4 <_vfiprintf_r+0x128>
 800b39a:	4252      	negs	r2, r2
 800b39c:	f043 0302 	orr.w	r3, r3, #2
 800b3a0:	9207      	str	r2, [sp, #28]
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	f898 3000 	ldrb.w	r3, [r8]
 800b3a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b3aa:	d10e      	bne.n	800b3ca <_vfiprintf_r+0x14e>
 800b3ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b2:	d138      	bne.n	800b426 <_vfiprintf_r+0x1aa>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	1d1a      	adds	r2, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	9203      	str	r2, [sp, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bfb8      	it	lt
 800b3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c4:	f108 0802 	add.w	r8, r8, #2
 800b3c8:	9305      	str	r3, [sp, #20]
 800b3ca:	4d33      	ldr	r5, [pc, #204]	; (800b498 <_vfiprintf_r+0x21c>)
 800b3cc:	f898 1000 	ldrb.w	r1, [r8]
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7f4 ff2c 	bl	8000230 <memchr>
 800b3d8:	b140      	cbz	r0, 800b3ec <_vfiprintf_r+0x170>
 800b3da:	2340      	movs	r3, #64	; 0x40
 800b3dc:	1b40      	subs	r0, r0, r5
 800b3de:	fa03 f000 	lsl.w	r0, r3, r0
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	4303      	orrs	r3, r0
 800b3e6:	f108 0801 	add.w	r8, r8, #1
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	f898 1000 	ldrb.w	r1, [r8]
 800b3f0:	482a      	ldr	r0, [pc, #168]	; (800b49c <_vfiprintf_r+0x220>)
 800b3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f6:	2206      	movs	r2, #6
 800b3f8:	f108 0701 	add.w	r7, r8, #1
 800b3fc:	f7f4 ff18 	bl	8000230 <memchr>
 800b400:	2800      	cmp	r0, #0
 800b402:	d037      	beq.n	800b474 <_vfiprintf_r+0x1f8>
 800b404:	4b26      	ldr	r3, [pc, #152]	; (800b4a0 <_vfiprintf_r+0x224>)
 800b406:	bb1b      	cbnz	r3, 800b450 <_vfiprintf_r+0x1d4>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	3307      	adds	r3, #7
 800b40c:	f023 0307 	bic.w	r3, r3, #7
 800b410:	3308      	adds	r3, #8
 800b412:	9303      	str	r3, [sp, #12]
 800b414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b416:	444b      	add	r3, r9
 800b418:	9309      	str	r3, [sp, #36]	; 0x24
 800b41a:	e750      	b.n	800b2be <_vfiprintf_r+0x42>
 800b41c:	fb05 3202 	mla	r2, r5, r2, r3
 800b420:	2001      	movs	r0, #1
 800b422:	4688      	mov	r8, r1
 800b424:	e78a      	b.n	800b33c <_vfiprintf_r+0xc0>
 800b426:	2300      	movs	r3, #0
 800b428:	f108 0801 	add.w	r8, r8, #1
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	4619      	mov	r1, r3
 800b430:	250a      	movs	r5, #10
 800b432:	4640      	mov	r0, r8
 800b434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b438:	3a30      	subs	r2, #48	; 0x30
 800b43a:	2a09      	cmp	r2, #9
 800b43c:	d903      	bls.n	800b446 <_vfiprintf_r+0x1ca>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0c3      	beq.n	800b3ca <_vfiprintf_r+0x14e>
 800b442:	9105      	str	r1, [sp, #20]
 800b444:	e7c1      	b.n	800b3ca <_vfiprintf_r+0x14e>
 800b446:	fb05 2101 	mla	r1, r5, r1, r2
 800b44a:	2301      	movs	r3, #1
 800b44c:	4680      	mov	r8, r0
 800b44e:	e7f0      	b.n	800b432 <_vfiprintf_r+0x1b6>
 800b450:	ab03      	add	r3, sp, #12
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	4622      	mov	r2, r4
 800b456:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <_vfiprintf_r+0x228>)
 800b458:	a904      	add	r1, sp, #16
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7fd f882 	bl	8008564 <_printf_float>
 800b460:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b464:	4681      	mov	r9, r0
 800b466:	d1d5      	bne.n	800b414 <_vfiprintf_r+0x198>
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	065b      	lsls	r3, r3, #25
 800b46c:	f53f af7e 	bmi.w	800b36c <_vfiprintf_r+0xf0>
 800b470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b472:	e77d      	b.n	800b370 <_vfiprintf_r+0xf4>
 800b474:	ab03      	add	r3, sp, #12
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	4622      	mov	r2, r4
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <_vfiprintf_r+0x228>)
 800b47c:	a904      	add	r1, sp, #16
 800b47e:	4630      	mov	r0, r6
 800b480:	f7fd fb26 	bl	8008ad0 <_printf_i>
 800b484:	e7ec      	b.n	800b460 <_vfiprintf_r+0x1e4>
 800b486:	bf00      	nop
 800b488:	0800c50c 	.word	0x0800c50c
 800b48c:	0800c6b4 	.word	0x0800c6b4
 800b490:	0800c52c 	.word	0x0800c52c
 800b494:	0800c4ec 	.word	0x0800c4ec
 800b498:	0800c6ba 	.word	0x0800c6ba
 800b49c:	0800c6be 	.word	0x0800c6be
 800b4a0:	08008565 	.word	0x08008565
 800b4a4:	0800b257 	.word	0x0800b257

0800b4a8 <_sbrk_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4c06      	ldr	r4, [pc, #24]	; (800b4c4 <_sbrk_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	f7f6 ff60 	bl	8002378 <_sbrk>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_sbrk_r+0x1a>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_sbrk_r+0x1a>
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20008044 	.word	0x20008044

0800b4c8 <siscanf>:
 800b4c8:	b40e      	push	{r1, r2, r3}
 800b4ca:	b530      	push	{r4, r5, lr}
 800b4cc:	b09c      	sub	sp, #112	; 0x70
 800b4ce:	ac1f      	add	r4, sp, #124	; 0x7c
 800b4d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b4d4:	f854 5b04 	ldr.w	r5, [r4], #4
 800b4d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b4dc:	9002      	str	r0, [sp, #8]
 800b4de:	9006      	str	r0, [sp, #24]
 800b4e0:	f7f4 fe9e 	bl	8000220 <strlen>
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <siscanf+0x4c>)
 800b4e6:	9003      	str	r0, [sp, #12]
 800b4e8:	9007      	str	r0, [sp, #28]
 800b4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ec:	480a      	ldr	r0, [pc, #40]	; (800b518 <siscanf+0x50>)
 800b4ee:	9401      	str	r4, [sp, #4]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4f4:	9314      	str	r3, [sp, #80]	; 0x50
 800b4f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4fe:	462a      	mov	r2, r5
 800b500:	4623      	mov	r3, r4
 800b502:	a902      	add	r1, sp, #8
 800b504:	6800      	ldr	r0, [r0, #0]
 800b506:	f000 fa0d 	bl	800b924 <__ssvfiscanf_r>
 800b50a:	b01c      	add	sp, #112	; 0x70
 800b50c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b510:	b003      	add	sp, #12
 800b512:	4770      	bx	lr
 800b514:	0800b53f 	.word	0x0800b53f
 800b518:	2000000c 	.word	0x2000000c

0800b51c <__sread>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	460c      	mov	r4, r1
 800b520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b524:	f000 fca6 	bl	800be74 <_read_r>
 800b528:	2800      	cmp	r0, #0
 800b52a:	bfab      	itete	ge
 800b52c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b52e:	89a3      	ldrhlt	r3, [r4, #12]
 800b530:	181b      	addge	r3, r3, r0
 800b532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b536:	bfac      	ite	ge
 800b538:	6563      	strge	r3, [r4, #84]	; 0x54
 800b53a:	81a3      	strhlt	r3, [r4, #12]
 800b53c:	bd10      	pop	{r4, pc}

0800b53e <__seofread>:
 800b53e:	2000      	movs	r0, #0
 800b540:	4770      	bx	lr

0800b542 <__swrite>:
 800b542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b546:	461f      	mov	r7, r3
 800b548:	898b      	ldrh	r3, [r1, #12]
 800b54a:	05db      	lsls	r3, r3, #23
 800b54c:	4605      	mov	r5, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	4616      	mov	r6, r2
 800b552:	d505      	bpl.n	800b560 <__swrite+0x1e>
 800b554:	2302      	movs	r3, #2
 800b556:	2200      	movs	r2, #0
 800b558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55c:	f000 f934 	bl	800b7c8 <_lseek_r>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	4628      	mov	r0, r5
 800b572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	f000 b8e1 	b.w	800b73c <_write_r>

0800b57a <__sseek>:
 800b57a:	b510      	push	{r4, lr}
 800b57c:	460c      	mov	r4, r1
 800b57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b582:	f000 f921 	bl	800b7c8 <_lseek_r>
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	bf15      	itete	ne
 800b58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b596:	81a3      	strheq	r3, [r4, #12]
 800b598:	bf18      	it	ne
 800b59a:	81a3      	strhne	r3, [r4, #12]
 800b59c:	bd10      	pop	{r4, pc}

0800b59e <__sclose>:
 800b59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a2:	f000 b8dd 	b.w	800b760 <_close_r>

0800b5a6 <strcpy>:
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ac:	f803 2b01 	strb.w	r2, [r3], #1
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	d1f9      	bne.n	800b5a8 <strcpy+0x2>
 800b5b4:	4770      	bx	lr

0800b5b6 <strncmp>:
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	b16a      	cbz	r2, 800b5d6 <strncmp+0x20>
 800b5ba:	3901      	subs	r1, #1
 800b5bc:	1884      	adds	r4, r0, r2
 800b5be:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b5c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d103      	bne.n	800b5d2 <strncmp+0x1c>
 800b5ca:	42a0      	cmp	r0, r4
 800b5cc:	d001      	beq.n	800b5d2 <strncmp+0x1c>
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1f5      	bne.n	800b5be <strncmp+0x8>
 800b5d2:	1a98      	subs	r0, r3, r2
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	e7fc      	b.n	800b5d4 <strncmp+0x1e>

0800b5da <_strtoul_l.isra.0>:
 800b5da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	4692      	mov	sl, r2
 800b5e4:	461e      	mov	r6, r3
 800b5e6:	460f      	mov	r7, r1
 800b5e8:	463d      	mov	r5, r7
 800b5ea:	9808      	ldr	r0, [sp, #32]
 800b5ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5f0:	f7ff f890 	bl	800a714 <__locale_ctype_ptr_l>
 800b5f4:	4420      	add	r0, r4
 800b5f6:	7843      	ldrb	r3, [r0, #1]
 800b5f8:	f013 0308 	ands.w	r3, r3, #8
 800b5fc:	d130      	bne.n	800b660 <_strtoul_l.isra.0+0x86>
 800b5fe:	2c2d      	cmp	r4, #45	; 0x2d
 800b600:	d130      	bne.n	800b664 <_strtoul_l.isra.0+0x8a>
 800b602:	787c      	ldrb	r4, [r7, #1]
 800b604:	1cbd      	adds	r5, r7, #2
 800b606:	2101      	movs	r1, #1
 800b608:	2e00      	cmp	r6, #0
 800b60a:	d05c      	beq.n	800b6c6 <_strtoul_l.isra.0+0xec>
 800b60c:	2e10      	cmp	r6, #16
 800b60e:	d109      	bne.n	800b624 <_strtoul_l.isra.0+0x4a>
 800b610:	2c30      	cmp	r4, #48	; 0x30
 800b612:	d107      	bne.n	800b624 <_strtoul_l.isra.0+0x4a>
 800b614:	782b      	ldrb	r3, [r5, #0]
 800b616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b61a:	2b58      	cmp	r3, #88	; 0x58
 800b61c:	d14e      	bne.n	800b6bc <_strtoul_l.isra.0+0xe2>
 800b61e:	786c      	ldrb	r4, [r5, #1]
 800b620:	2610      	movs	r6, #16
 800b622:	3502      	adds	r5, #2
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	2300      	movs	r3, #0
 800b62a:	fbb2 f2f6 	udiv	r2, r2, r6
 800b62e:	fb06 fc02 	mul.w	ip, r6, r2
 800b632:	ea6f 0c0c 	mvn.w	ip, ip
 800b636:	4618      	mov	r0, r3
 800b638:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b63c:	2f09      	cmp	r7, #9
 800b63e:	d817      	bhi.n	800b670 <_strtoul_l.isra.0+0x96>
 800b640:	463c      	mov	r4, r7
 800b642:	42a6      	cmp	r6, r4
 800b644:	dd23      	ble.n	800b68e <_strtoul_l.isra.0+0xb4>
 800b646:	2b00      	cmp	r3, #0
 800b648:	db1e      	blt.n	800b688 <_strtoul_l.isra.0+0xae>
 800b64a:	4282      	cmp	r2, r0
 800b64c:	d31c      	bcc.n	800b688 <_strtoul_l.isra.0+0xae>
 800b64e:	d101      	bne.n	800b654 <_strtoul_l.isra.0+0x7a>
 800b650:	45a4      	cmp	ip, r4
 800b652:	db19      	blt.n	800b688 <_strtoul_l.isra.0+0xae>
 800b654:	fb00 4006 	mla	r0, r0, r6, r4
 800b658:	2301      	movs	r3, #1
 800b65a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b65e:	e7eb      	b.n	800b638 <_strtoul_l.isra.0+0x5e>
 800b660:	462f      	mov	r7, r5
 800b662:	e7c1      	b.n	800b5e8 <_strtoul_l.isra.0+0xe>
 800b664:	2c2b      	cmp	r4, #43	; 0x2b
 800b666:	bf04      	itt	eq
 800b668:	1cbd      	addeq	r5, r7, #2
 800b66a:	787c      	ldrbeq	r4, [r7, #1]
 800b66c:	4619      	mov	r1, r3
 800b66e:	e7cb      	b.n	800b608 <_strtoul_l.isra.0+0x2e>
 800b670:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b674:	2f19      	cmp	r7, #25
 800b676:	d801      	bhi.n	800b67c <_strtoul_l.isra.0+0xa2>
 800b678:	3c37      	subs	r4, #55	; 0x37
 800b67a:	e7e2      	b.n	800b642 <_strtoul_l.isra.0+0x68>
 800b67c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b680:	2f19      	cmp	r7, #25
 800b682:	d804      	bhi.n	800b68e <_strtoul_l.isra.0+0xb4>
 800b684:	3c57      	subs	r4, #87	; 0x57
 800b686:	e7dc      	b.n	800b642 <_strtoul_l.isra.0+0x68>
 800b688:	f04f 33ff 	mov.w	r3, #4294967295
 800b68c:	e7e5      	b.n	800b65a <_strtoul_l.isra.0+0x80>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	da09      	bge.n	800b6a6 <_strtoul_l.isra.0+0xcc>
 800b692:	2322      	movs	r3, #34	; 0x22
 800b694:	f8c8 3000 	str.w	r3, [r8]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	f1ba 0f00 	cmp.w	sl, #0
 800b6a0:	d107      	bne.n	800b6b2 <_strtoul_l.isra.0+0xd8>
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	b101      	cbz	r1, 800b6aa <_strtoul_l.isra.0+0xd0>
 800b6a8:	4240      	negs	r0, r0
 800b6aa:	f1ba 0f00 	cmp.w	sl, #0
 800b6ae:	d0f8      	beq.n	800b6a2 <_strtoul_l.isra.0+0xc8>
 800b6b0:	b10b      	cbz	r3, 800b6b6 <_strtoul_l.isra.0+0xdc>
 800b6b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b6b6:	f8ca 9000 	str.w	r9, [sl]
 800b6ba:	e7f2      	b.n	800b6a2 <_strtoul_l.isra.0+0xc8>
 800b6bc:	2430      	movs	r4, #48	; 0x30
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d1b0      	bne.n	800b624 <_strtoul_l.isra.0+0x4a>
 800b6c2:	2608      	movs	r6, #8
 800b6c4:	e7ae      	b.n	800b624 <_strtoul_l.isra.0+0x4a>
 800b6c6:	2c30      	cmp	r4, #48	; 0x30
 800b6c8:	d0a4      	beq.n	800b614 <_strtoul_l.isra.0+0x3a>
 800b6ca:	260a      	movs	r6, #10
 800b6cc:	e7aa      	b.n	800b624 <_strtoul_l.isra.0+0x4a>
	...

0800b6d0 <_strtoul_r>:
 800b6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d2:	4c06      	ldr	r4, [pc, #24]	; (800b6ec <_strtoul_r+0x1c>)
 800b6d4:	4d06      	ldr	r5, [pc, #24]	; (800b6f0 <_strtoul_r+0x20>)
 800b6d6:	6824      	ldr	r4, [r4, #0]
 800b6d8:	6a24      	ldr	r4, [r4, #32]
 800b6da:	2c00      	cmp	r4, #0
 800b6dc:	bf08      	it	eq
 800b6de:	462c      	moveq	r4, r5
 800b6e0:	9400      	str	r4, [sp, #0]
 800b6e2:	f7ff ff7a 	bl	800b5da <_strtoul_l.isra.0>
 800b6e6:	b003      	add	sp, #12
 800b6e8:	bd30      	pop	{r4, r5, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2000000c 	.word	0x2000000c
 800b6f0:	200000d0 	.word	0x200000d0

0800b6f4 <strtoul>:
 800b6f4:	4b08      	ldr	r3, [pc, #32]	; (800b718 <strtoul+0x24>)
 800b6f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6f8:	681c      	ldr	r4, [r3, #0]
 800b6fa:	4d08      	ldr	r5, [pc, #32]	; (800b71c <strtoul+0x28>)
 800b6fc:	6a23      	ldr	r3, [r4, #32]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	bf08      	it	eq
 800b702:	462b      	moveq	r3, r5
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4613      	mov	r3, r2
 800b708:	460a      	mov	r2, r1
 800b70a:	4601      	mov	r1, r0
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff ff64 	bl	800b5da <_strtoul_l.isra.0>
 800b712:	b003      	add	sp, #12
 800b714:	bd30      	pop	{r4, r5, pc}
 800b716:	bf00      	nop
 800b718:	2000000c 	.word	0x2000000c
 800b71c:	200000d0 	.word	0x200000d0

0800b720 <__ascii_wctomb>:
 800b720:	b149      	cbz	r1, 800b736 <__ascii_wctomb+0x16>
 800b722:	2aff      	cmp	r2, #255	; 0xff
 800b724:	bf85      	ittet	hi
 800b726:	238a      	movhi	r3, #138	; 0x8a
 800b728:	6003      	strhi	r3, [r0, #0]
 800b72a:	700a      	strbls	r2, [r1, #0]
 800b72c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b730:	bf98      	it	ls
 800b732:	2001      	movls	r0, #1
 800b734:	4770      	bx	lr
 800b736:	4608      	mov	r0, r1
 800b738:	4770      	bx	lr
	...

0800b73c <_write_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4c07      	ldr	r4, [pc, #28]	; (800b75c <_write_r+0x20>)
 800b740:	4605      	mov	r5, r0
 800b742:	4608      	mov	r0, r1
 800b744:	4611      	mov	r1, r2
 800b746:	2200      	movs	r2, #0
 800b748:	6022      	str	r2, [r4, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	f7f7 fca4 	bl	8003098 <_write>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_write_r+0x1e>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	b103      	cbz	r3, 800b75a <_write_r+0x1e>
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	20008044 	.word	0x20008044

0800b760 <_close_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4c06      	ldr	r4, [pc, #24]	; (800b77c <_close_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4605      	mov	r5, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	f7f7 fcc0 	bl	80030f0 <_close>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_close_r+0x1a>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	b103      	cbz	r3, 800b77a <_close_r+0x1a>
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20008044 	.word	0x20008044

0800b780 <__env_lock>:
 800b780:	4770      	bx	lr

0800b782 <__env_unlock>:
 800b782:	4770      	bx	lr

0800b784 <_fstat_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4c07      	ldr	r4, [pc, #28]	; (800b7a4 <_fstat_r+0x20>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4605      	mov	r5, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	f7f7 fcfd 	bl	8003190 <_fstat>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d102      	bne.n	800b7a0 <_fstat_r+0x1c>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	b103      	cbz	r3, 800b7a0 <_fstat_r+0x1c>
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20008044 	.word	0x20008044

0800b7a8 <_isatty_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4c06      	ldr	r4, [pc, #24]	; (800b7c4 <_isatty_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	f7f7 fc5a 	bl	800306c <_isatty>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_isatty_r+0x1a>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_isatty_r+0x1a>
 800b7c0:	602b      	str	r3, [r5, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20008044 	.word	0x20008044

0800b7c8 <_lseek_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4c07      	ldr	r4, [pc, #28]	; (800b7e8 <_lseek_r+0x20>)
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	6022      	str	r2, [r4, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f7 fca1 	bl	800311e <_lseek>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_lseek_r+0x1e>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_lseek_r+0x1e>
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20008044 	.word	0x20008044

0800b7ec <memmove>:
 800b7ec:	4288      	cmp	r0, r1
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	eb01 0302 	add.w	r3, r1, r2
 800b7f4:	d807      	bhi.n	800b806 <memmove+0x1a>
 800b7f6:	1e42      	subs	r2, r0, #1
 800b7f8:	4299      	cmp	r1, r3
 800b7fa:	d00a      	beq.n	800b812 <memmove+0x26>
 800b7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b800:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b804:	e7f8      	b.n	800b7f8 <memmove+0xc>
 800b806:	4283      	cmp	r3, r0
 800b808:	d9f5      	bls.n	800b7f6 <memmove+0xa>
 800b80a:	1881      	adds	r1, r0, r2
 800b80c:	1ad2      	subs	r2, r2, r3
 800b80e:	42d3      	cmn	r3, r2
 800b810:	d100      	bne.n	800b814 <memmove+0x28>
 800b812:	bd10      	pop	{r4, pc}
 800b814:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b818:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b81c:	e7f7      	b.n	800b80e <memmove+0x22>

0800b81e <__malloc_lock>:
 800b81e:	4770      	bx	lr

0800b820 <__malloc_unlock>:
 800b820:	4770      	bx	lr

0800b822 <_realloc_r>:
 800b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b824:	4607      	mov	r7, r0
 800b826:	4614      	mov	r4, r2
 800b828:	460e      	mov	r6, r1
 800b82a:	b921      	cbnz	r1, 800b836 <_realloc_r+0x14>
 800b82c:	4611      	mov	r1, r2
 800b82e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b832:	f7ff bb4d 	b.w	800aed0 <_malloc_r>
 800b836:	b922      	cbnz	r2, 800b842 <_realloc_r+0x20>
 800b838:	f7ff fafc 	bl	800ae34 <_free_r>
 800b83c:	4625      	mov	r5, r4
 800b83e:	4628      	mov	r0, r5
 800b840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b842:	f000 fb95 	bl	800bf70 <_malloc_usable_size_r>
 800b846:	42a0      	cmp	r0, r4
 800b848:	d20f      	bcs.n	800b86a <_realloc_r+0x48>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff fb3f 	bl	800aed0 <_malloc_r>
 800b852:	4605      	mov	r5, r0
 800b854:	2800      	cmp	r0, #0
 800b856:	d0f2      	beq.n	800b83e <_realloc_r+0x1c>
 800b858:	4631      	mov	r1, r6
 800b85a:	4622      	mov	r2, r4
 800b85c:	f7fc fb46 	bl	8007eec <memcpy>
 800b860:	4631      	mov	r1, r6
 800b862:	4638      	mov	r0, r7
 800b864:	f7ff fae6 	bl	800ae34 <_free_r>
 800b868:	e7e9      	b.n	800b83e <_realloc_r+0x1c>
 800b86a:	4635      	mov	r5, r6
 800b86c:	e7e7      	b.n	800b83e <_realloc_r+0x1c>

0800b86e <_sungetc_r>:
 800b86e:	b538      	push	{r3, r4, r5, lr}
 800b870:	1c4b      	adds	r3, r1, #1
 800b872:	4614      	mov	r4, r2
 800b874:	d103      	bne.n	800b87e <_sungetc_r+0x10>
 800b876:	f04f 35ff 	mov.w	r5, #4294967295
 800b87a:	4628      	mov	r0, r5
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	8993      	ldrh	r3, [r2, #12]
 800b880:	f023 0320 	bic.w	r3, r3, #32
 800b884:	8193      	strh	r3, [r2, #12]
 800b886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b888:	6852      	ldr	r2, [r2, #4]
 800b88a:	b2cd      	uxtb	r5, r1
 800b88c:	b18b      	cbz	r3, 800b8b2 <_sungetc_r+0x44>
 800b88e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b890:	4293      	cmp	r3, r2
 800b892:	dd08      	ble.n	800b8a6 <_sungetc_r+0x38>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	1e5a      	subs	r2, r3, #1
 800b898:	6022      	str	r2, [r4, #0]
 800b89a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b89e:	6863      	ldr	r3, [r4, #4]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	6063      	str	r3, [r4, #4]
 800b8a4:	e7e9      	b.n	800b87a <_sungetc_r+0xc>
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f000 fb28 	bl	800befc <__submore>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d0f1      	beq.n	800b894 <_sungetc_r+0x26>
 800b8b0:	e7e1      	b.n	800b876 <_sungetc_r+0x8>
 800b8b2:	6921      	ldr	r1, [r4, #16]
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	b151      	cbz	r1, 800b8ce <_sungetc_r+0x60>
 800b8b8:	4299      	cmp	r1, r3
 800b8ba:	d208      	bcs.n	800b8ce <_sungetc_r+0x60>
 800b8bc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b8c0:	42a9      	cmp	r1, r5
 800b8c2:	d104      	bne.n	800b8ce <_sungetc_r+0x60>
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	3201      	adds	r2, #1
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	6062      	str	r2, [r4, #4]
 800b8cc:	e7d5      	b.n	800b87a <_sungetc_r+0xc>
 800b8ce:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b8d8:	2303      	movs	r3, #3
 800b8da:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8dc:	4623      	mov	r3, r4
 800b8de:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e7dc      	b.n	800b8a2 <_sungetc_r+0x34>

0800b8e8 <__ssrefill_r>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8ee:	b169      	cbz	r1, 800b90c <__ssrefill_r+0x24>
 800b8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f4:	4299      	cmp	r1, r3
 800b8f6:	d001      	beq.n	800b8fc <__ssrefill_r+0x14>
 800b8f8:	f7ff fa9c 	bl	800ae34 <_free_r>
 800b8fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8fe:	6063      	str	r3, [r4, #4]
 800b900:	2000      	movs	r0, #0
 800b902:	6360      	str	r0, [r4, #52]	; 0x34
 800b904:	b113      	cbz	r3, 800b90c <__ssrefill_r+0x24>
 800b906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	2300      	movs	r3, #0
 800b912:	6063      	str	r3, [r4, #4]
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f043 0320 	orr.w	r3, r3, #32
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e7f3      	b.n	800b90a <__ssrefill_r+0x22>
	...

0800b924 <__ssvfiscanf_r>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b92c:	460c      	mov	r4, r1
 800b92e:	2100      	movs	r1, #0
 800b930:	9144      	str	r1, [sp, #272]	; 0x110
 800b932:	9145      	str	r1, [sp, #276]	; 0x114
 800b934:	499f      	ldr	r1, [pc, #636]	; (800bbb4 <__ssvfiscanf_r+0x290>)
 800b936:	91a0      	str	r1, [sp, #640]	; 0x280
 800b938:	f10d 0804 	add.w	r8, sp, #4
 800b93c:	499e      	ldr	r1, [pc, #632]	; (800bbb8 <__ssvfiscanf_r+0x294>)
 800b93e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800bbbc <__ssvfiscanf_r+0x298>
 800b942:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b946:	4606      	mov	r6, r0
 800b948:	4692      	mov	sl, r2
 800b94a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	270a      	movs	r7, #10
 800b950:	f89a 3000 	ldrb.w	r3, [sl]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 812a 	beq.w	800bbae <__ssvfiscanf_r+0x28a>
 800b95a:	4655      	mov	r5, sl
 800b95c:	f7fe fede 	bl	800a71c <__locale_ctype_ptr>
 800b960:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b964:	4458      	add	r0, fp
 800b966:	7843      	ldrb	r3, [r0, #1]
 800b968:	f013 0308 	ands.w	r3, r3, #8
 800b96c:	d01c      	beq.n	800b9a8 <__ssvfiscanf_r+0x84>
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dd12      	ble.n	800b99a <__ssvfiscanf_r+0x76>
 800b974:	f7fe fed2 	bl	800a71c <__locale_ctype_ptr>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	4410      	add	r0, r2
 800b97e:	7842      	ldrb	r2, [r0, #1]
 800b980:	0712      	lsls	r2, r2, #28
 800b982:	d401      	bmi.n	800b988 <__ssvfiscanf_r+0x64>
 800b984:	46aa      	mov	sl, r5
 800b986:	e7e3      	b.n	800b950 <__ssvfiscanf_r+0x2c>
 800b988:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b98a:	3201      	adds	r2, #1
 800b98c:	9245      	str	r2, [sp, #276]	; 0x114
 800b98e:	6862      	ldr	r2, [r4, #4]
 800b990:	3301      	adds	r3, #1
 800b992:	3a01      	subs	r2, #1
 800b994:	6062      	str	r2, [r4, #4]
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	e7e9      	b.n	800b96e <__ssvfiscanf_r+0x4a>
 800b99a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b99c:	4621      	mov	r1, r4
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4798      	blx	r3
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d0e6      	beq.n	800b974 <__ssvfiscanf_r+0x50>
 800b9a6:	e7ed      	b.n	800b984 <__ssvfiscanf_r+0x60>
 800b9a8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b9ac:	f040 8082 	bne.w	800bab4 <__ssvfiscanf_r+0x190>
 800b9b0:	9343      	str	r3, [sp, #268]	; 0x10c
 800b9b2:	9341      	str	r3, [sp, #260]	; 0x104
 800b9b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ba:	d103      	bne.n	800b9c4 <__ssvfiscanf_r+0xa0>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	9341      	str	r3, [sp, #260]	; 0x104
 800b9c0:	f10a 0502 	add.w	r5, sl, #2
 800b9c4:	46aa      	mov	sl, r5
 800b9c6:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b9ca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b9ce:	2a09      	cmp	r2, #9
 800b9d0:	d922      	bls.n	800ba18 <__ssvfiscanf_r+0xf4>
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	4879      	ldr	r0, [pc, #484]	; (800bbbc <__ssvfiscanf_r+0x298>)
 800b9d6:	f7f4 fc2b 	bl	8000230 <memchr>
 800b9da:	b138      	cbz	r0, 800b9ec <__ssvfiscanf_r+0xc8>
 800b9dc:	eba0 0309 	sub.w	r3, r0, r9
 800b9e0:	2001      	movs	r0, #1
 800b9e2:	4098      	lsls	r0, r3
 800b9e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9e6:	4318      	orrs	r0, r3
 800b9e8:	9041      	str	r0, [sp, #260]	; 0x104
 800b9ea:	46aa      	mov	sl, r5
 800b9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f0:	2b67      	cmp	r3, #103	; 0x67
 800b9f2:	f10a 0501 	add.w	r5, sl, #1
 800b9f6:	d82b      	bhi.n	800ba50 <__ssvfiscanf_r+0x12c>
 800b9f8:	2b65      	cmp	r3, #101	; 0x65
 800b9fa:	f080 809f 	bcs.w	800bb3c <__ssvfiscanf_r+0x218>
 800b9fe:	2b47      	cmp	r3, #71	; 0x47
 800ba00:	d810      	bhi.n	800ba24 <__ssvfiscanf_r+0x100>
 800ba02:	2b45      	cmp	r3, #69	; 0x45
 800ba04:	f080 809a 	bcs.w	800bb3c <__ssvfiscanf_r+0x218>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d06c      	beq.n	800bae6 <__ssvfiscanf_r+0x1c2>
 800ba0c:	2b25      	cmp	r3, #37	; 0x25
 800ba0e:	d051      	beq.n	800bab4 <__ssvfiscanf_r+0x190>
 800ba10:	2303      	movs	r3, #3
 800ba12:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba14:	9742      	str	r7, [sp, #264]	; 0x108
 800ba16:	e027      	b.n	800ba68 <__ssvfiscanf_r+0x144>
 800ba18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba1a:	fb07 1303 	mla	r3, r7, r3, r1
 800ba1e:	3b30      	subs	r3, #48	; 0x30
 800ba20:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba22:	e7cf      	b.n	800b9c4 <__ssvfiscanf_r+0xa0>
 800ba24:	2b5b      	cmp	r3, #91	; 0x5b
 800ba26:	d06a      	beq.n	800bafe <__ssvfiscanf_r+0x1da>
 800ba28:	d80c      	bhi.n	800ba44 <__ssvfiscanf_r+0x120>
 800ba2a:	2b58      	cmp	r3, #88	; 0x58
 800ba2c:	d1f0      	bne.n	800ba10 <__ssvfiscanf_r+0xec>
 800ba2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ba30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba34:	9241      	str	r2, [sp, #260]	; 0x104
 800ba36:	2210      	movs	r2, #16
 800ba38:	9242      	str	r2, [sp, #264]	; 0x108
 800ba3a:	2b6e      	cmp	r3, #110	; 0x6e
 800ba3c:	bf8c      	ite	hi
 800ba3e:	2304      	movhi	r3, #4
 800ba40:	2303      	movls	r3, #3
 800ba42:	e010      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800ba44:	2b63      	cmp	r3, #99	; 0x63
 800ba46:	d065      	beq.n	800bb14 <__ssvfiscanf_r+0x1f0>
 800ba48:	2b64      	cmp	r3, #100	; 0x64
 800ba4a:	d1e1      	bne.n	800ba10 <__ssvfiscanf_r+0xec>
 800ba4c:	9742      	str	r7, [sp, #264]	; 0x108
 800ba4e:	e7f4      	b.n	800ba3a <__ssvfiscanf_r+0x116>
 800ba50:	2b70      	cmp	r3, #112	; 0x70
 800ba52:	d04b      	beq.n	800baec <__ssvfiscanf_r+0x1c8>
 800ba54:	d826      	bhi.n	800baa4 <__ssvfiscanf_r+0x180>
 800ba56:	2b6e      	cmp	r3, #110	; 0x6e
 800ba58:	d062      	beq.n	800bb20 <__ssvfiscanf_r+0x1fc>
 800ba5a:	d84c      	bhi.n	800baf6 <__ssvfiscanf_r+0x1d2>
 800ba5c:	2b69      	cmp	r3, #105	; 0x69
 800ba5e:	d1d7      	bne.n	800ba10 <__ssvfiscanf_r+0xec>
 800ba60:	2300      	movs	r3, #0
 800ba62:	9342      	str	r3, [sp, #264]	; 0x108
 800ba64:	2303      	movs	r3, #3
 800ba66:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba68:	6863      	ldr	r3, [r4, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dd68      	ble.n	800bb40 <__ssvfiscanf_r+0x21c>
 800ba6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba70:	0659      	lsls	r1, r3, #25
 800ba72:	d407      	bmi.n	800ba84 <__ssvfiscanf_r+0x160>
 800ba74:	f7fe fe52 	bl	800a71c <__locale_ctype_ptr>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	4410      	add	r0, r2
 800ba7e:	7842      	ldrb	r2, [r0, #1]
 800ba80:	0712      	lsls	r2, r2, #28
 800ba82:	d464      	bmi.n	800bb4e <__ssvfiscanf_r+0x22a>
 800ba84:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	dc73      	bgt.n	800bb72 <__ssvfiscanf_r+0x24e>
 800ba8a:	466b      	mov	r3, sp
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	a941      	add	r1, sp, #260	; 0x104
 800ba90:	4630      	mov	r0, r6
 800ba92:	f000 f897 	bl	800bbc4 <_scanf_chars>
 800ba96:	2801      	cmp	r0, #1
 800ba98:	f000 8089 	beq.w	800bbae <__ssvfiscanf_r+0x28a>
 800ba9c:	2802      	cmp	r0, #2
 800ba9e:	f47f af71 	bne.w	800b984 <__ssvfiscanf_r+0x60>
 800baa2:	e01d      	b.n	800bae0 <__ssvfiscanf_r+0x1bc>
 800baa4:	2b75      	cmp	r3, #117	; 0x75
 800baa6:	d0d1      	beq.n	800ba4c <__ssvfiscanf_r+0x128>
 800baa8:	2b78      	cmp	r3, #120	; 0x78
 800baaa:	d0c0      	beq.n	800ba2e <__ssvfiscanf_r+0x10a>
 800baac:	2b73      	cmp	r3, #115	; 0x73
 800baae:	d1af      	bne.n	800ba10 <__ssvfiscanf_r+0xec>
 800bab0:	2302      	movs	r3, #2
 800bab2:	e7d8      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800bab4:	6863      	ldr	r3, [r4, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd0c      	ble.n	800bad4 <__ssvfiscanf_r+0x1b0>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	781a      	ldrb	r2, [r3, #0]
 800babe:	455a      	cmp	r2, fp
 800bac0:	d175      	bne.n	800bbae <__ssvfiscanf_r+0x28a>
 800bac2:	3301      	adds	r3, #1
 800bac4:	6862      	ldr	r2, [r4, #4]
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800baca:	3a01      	subs	r2, #1
 800bacc:	3301      	adds	r3, #1
 800bace:	6062      	str	r2, [r4, #4]
 800bad0:	9345      	str	r3, [sp, #276]	; 0x114
 800bad2:	e757      	b.n	800b984 <__ssvfiscanf_r+0x60>
 800bad4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bad6:	4621      	mov	r1, r4
 800bad8:	4630      	mov	r0, r6
 800bada:	4798      	blx	r3
 800badc:	2800      	cmp	r0, #0
 800bade:	d0ec      	beq.n	800baba <__ssvfiscanf_r+0x196>
 800bae0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d159      	bne.n	800bb9a <__ssvfiscanf_r+0x276>
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	e05c      	b.n	800bba6 <__ssvfiscanf_r+0x282>
 800baec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800baee:	f042 0220 	orr.w	r2, r2, #32
 800baf2:	9241      	str	r2, [sp, #260]	; 0x104
 800baf4:	e79b      	b.n	800ba2e <__ssvfiscanf_r+0x10a>
 800baf6:	2308      	movs	r3, #8
 800baf8:	9342      	str	r3, [sp, #264]	; 0x108
 800bafa:	2304      	movs	r3, #4
 800bafc:	e7b3      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800bafe:	4629      	mov	r1, r5
 800bb00:	4640      	mov	r0, r8
 800bb02:	f000 f9c9 	bl	800be98 <__sccl>
 800bb06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0c:	9341      	str	r3, [sp, #260]	; 0x104
 800bb0e:	4605      	mov	r5, r0
 800bb10:	2301      	movs	r3, #1
 800bb12:	e7a8      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800bb14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1a:	9341      	str	r3, [sp, #260]	; 0x104
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e7a2      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800bb20:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bb22:	06c3      	lsls	r3, r0, #27
 800bb24:	f53f af2e 	bmi.w	800b984 <__ssvfiscanf_r+0x60>
 800bb28:	9b00      	ldr	r3, [sp, #0]
 800bb2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb2c:	1d19      	adds	r1, r3, #4
 800bb2e:	9100      	str	r1, [sp, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	07c0      	lsls	r0, r0, #31
 800bb34:	bf4c      	ite	mi
 800bb36:	801a      	strhmi	r2, [r3, #0]
 800bb38:	601a      	strpl	r2, [r3, #0]
 800bb3a:	e723      	b.n	800b984 <__ssvfiscanf_r+0x60>
 800bb3c:	2305      	movs	r3, #5
 800bb3e:	e792      	b.n	800ba66 <__ssvfiscanf_r+0x142>
 800bb40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb42:	4621      	mov	r1, r4
 800bb44:	4630      	mov	r0, r6
 800bb46:	4798      	blx	r3
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d090      	beq.n	800ba6e <__ssvfiscanf_r+0x14a>
 800bb4c:	e7c8      	b.n	800bae0 <__ssvfiscanf_r+0x1bc>
 800bb4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb50:	3201      	adds	r2, #1
 800bb52:	9245      	str	r2, [sp, #276]	; 0x114
 800bb54:	6862      	ldr	r2, [r4, #4]
 800bb56:	3a01      	subs	r2, #1
 800bb58:	2a00      	cmp	r2, #0
 800bb5a:	6062      	str	r2, [r4, #4]
 800bb5c:	dd02      	ble.n	800bb64 <__ssvfiscanf_r+0x240>
 800bb5e:	3301      	adds	r3, #1
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	e787      	b.n	800ba74 <__ssvfiscanf_r+0x150>
 800bb64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4798      	blx	r3
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d081      	beq.n	800ba74 <__ssvfiscanf_r+0x150>
 800bb70:	e7b6      	b.n	800bae0 <__ssvfiscanf_r+0x1bc>
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	dc06      	bgt.n	800bb84 <__ssvfiscanf_r+0x260>
 800bb76:	466b      	mov	r3, sp
 800bb78:	4622      	mov	r2, r4
 800bb7a:	a941      	add	r1, sp, #260	; 0x104
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f000 f885 	bl	800bc8c <_scanf_i>
 800bb82:	e788      	b.n	800ba96 <__ssvfiscanf_r+0x172>
 800bb84:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <__ssvfiscanf_r+0x29c>)
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f43f aefc 	beq.w	800b984 <__ssvfiscanf_r+0x60>
 800bb8c:	466b      	mov	r3, sp
 800bb8e:	4622      	mov	r2, r4
 800bb90:	a941      	add	r1, sp, #260	; 0x104
 800bb92:	4630      	mov	r0, r6
 800bb94:	f3af 8000 	nop.w
 800bb98:	e77d      	b.n	800ba96 <__ssvfiscanf_r+0x172>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bba0:	bf18      	it	ne
 800bba2:	f04f 30ff 	movne.w	r0, #4294967295
 800bba6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbb0:	e7f9      	b.n	800bba6 <__ssvfiscanf_r+0x282>
 800bbb2:	bf00      	nop
 800bbb4:	0800b86f 	.word	0x0800b86f
 800bbb8:	0800b8e9 	.word	0x0800b8e9
 800bbbc:	0800c6ba 	.word	0x0800c6ba
 800bbc0:	00000000 	.word	0x00000000

0800bbc4 <_scanf_chars>:
 800bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc8:	4615      	mov	r5, r2
 800bbca:	688a      	ldr	r2, [r1, #8]
 800bbcc:	4680      	mov	r8, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	b932      	cbnz	r2, 800bbe0 <_scanf_chars+0x1c>
 800bbd2:	698a      	ldr	r2, [r1, #24]
 800bbd4:	2a00      	cmp	r2, #0
 800bbd6:	bf14      	ite	ne
 800bbd8:	f04f 32ff 	movne.w	r2, #4294967295
 800bbdc:	2201      	moveq	r2, #1
 800bbde:	608a      	str	r2, [r1, #8]
 800bbe0:	6822      	ldr	r2, [r4, #0]
 800bbe2:	06d1      	lsls	r1, r2, #27
 800bbe4:	bf5f      	itttt	pl
 800bbe6:	681a      	ldrpl	r2, [r3, #0]
 800bbe8:	1d11      	addpl	r1, r2, #4
 800bbea:	6019      	strpl	r1, [r3, #0]
 800bbec:	6817      	ldrpl	r7, [r2, #0]
 800bbee:	2600      	movs	r6, #0
 800bbf0:	69a3      	ldr	r3, [r4, #24]
 800bbf2:	b1db      	cbz	r3, 800bc2c <_scanf_chars+0x68>
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d107      	bne.n	800bc08 <_scanf_chars+0x44>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	6962      	ldr	r2, [r4, #20]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	5cd3      	ldrb	r3, [r2, r3]
 800bc00:	b9a3      	cbnz	r3, 800bc2c <_scanf_chars+0x68>
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	d132      	bne.n	800bc6c <_scanf_chars+0xa8>
 800bc06:	e006      	b.n	800bc16 <_scanf_chars+0x52>
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d007      	beq.n	800bc1c <_scanf_chars+0x58>
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	d12d      	bne.n	800bc6c <_scanf_chars+0xa8>
 800bc10:	69a3      	ldr	r3, [r4, #24]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d12a      	bne.n	800bc6c <_scanf_chars+0xa8>
 800bc16:	2001      	movs	r0, #1
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	f7fe fd7e 	bl	800a71c <__locale_ctype_ptr>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4418      	add	r0, r3
 800bc26:	7843      	ldrb	r3, [r0, #1]
 800bc28:	071b      	lsls	r3, r3, #28
 800bc2a:	d4ef      	bmi.n	800bc0c <_scanf_chars+0x48>
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	06da      	lsls	r2, r3, #27
 800bc30:	bf5e      	ittt	pl
 800bc32:	682b      	ldrpl	r3, [r5, #0]
 800bc34:	781b      	ldrbpl	r3, [r3, #0]
 800bc36:	703b      	strbpl	r3, [r7, #0]
 800bc38:	682a      	ldr	r2, [r5, #0]
 800bc3a:	686b      	ldr	r3, [r5, #4]
 800bc3c:	f102 0201 	add.w	r2, r2, #1
 800bc40:	602a      	str	r2, [r5, #0]
 800bc42:	68a2      	ldr	r2, [r4, #8]
 800bc44:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc48:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc4c:	606b      	str	r3, [r5, #4]
 800bc4e:	f106 0601 	add.w	r6, r6, #1
 800bc52:	bf58      	it	pl
 800bc54:	3701      	addpl	r7, #1
 800bc56:	60a2      	str	r2, [r4, #8]
 800bc58:	b142      	cbz	r2, 800bc6c <_scanf_chars+0xa8>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dcc8      	bgt.n	800bbf0 <_scanf_chars+0x2c>
 800bc5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc62:	4629      	mov	r1, r5
 800bc64:	4640      	mov	r0, r8
 800bc66:	4798      	blx	r3
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d0c1      	beq.n	800bbf0 <_scanf_chars+0x2c>
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	f013 0310 	ands.w	r3, r3, #16
 800bc72:	d105      	bne.n	800bc80 <_scanf_chars+0xbc>
 800bc74:	68e2      	ldr	r2, [r4, #12]
 800bc76:	3201      	adds	r2, #1
 800bc78:	60e2      	str	r2, [r4, #12]
 800bc7a:	69a2      	ldr	r2, [r4, #24]
 800bc7c:	b102      	cbz	r2, 800bc80 <_scanf_chars+0xbc>
 800bc7e:	703b      	strb	r3, [r7, #0]
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	441e      	add	r6, r3
 800bc84:	6126      	str	r6, [r4, #16]
 800bc86:	2000      	movs	r0, #0
 800bc88:	e7c6      	b.n	800bc18 <_scanf_chars+0x54>
	...

0800bc8c <_scanf_i>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	469a      	mov	sl, r3
 800bc92:	4b74      	ldr	r3, [pc, #464]	; (800be64 <_scanf_i+0x1d8>)
 800bc94:	460c      	mov	r4, r1
 800bc96:	4683      	mov	fp, r0
 800bc98:	4616      	mov	r6, r2
 800bc9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	ab03      	add	r3, sp, #12
 800bca2:	68a7      	ldr	r7, [r4, #8]
 800bca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bca8:	4b6f      	ldr	r3, [pc, #444]	; (800be68 <_scanf_i+0x1dc>)
 800bcaa:	69a1      	ldr	r1, [r4, #24]
 800bcac:	4a6f      	ldr	r2, [pc, #444]	; (800be6c <_scanf_i+0x1e0>)
 800bcae:	2903      	cmp	r1, #3
 800bcb0:	bf08      	it	eq
 800bcb2:	461a      	moveq	r2, r3
 800bcb4:	1e7b      	subs	r3, r7, #1
 800bcb6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bcba:	bf84      	itt	hi
 800bcbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bcc0:	60a3      	strhi	r3, [r4, #8]
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	9200      	str	r2, [sp, #0]
 800bcc6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bcca:	bf88      	it	hi
 800bccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bcd0:	f104 091c 	add.w	r9, r4, #28
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bf8c      	ite	hi
 800bcd8:	197f      	addhi	r7, r7, r5
 800bcda:	2700      	movls	r7, #0
 800bcdc:	464b      	mov	r3, r9
 800bcde:	f04f 0800 	mov.w	r8, #0
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	6831      	ldr	r1, [r6, #0]
 800bce6:	ab03      	add	r3, sp, #12
 800bce8:	2202      	movs	r2, #2
 800bcea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bcee:	7809      	ldrb	r1, [r1, #0]
 800bcf0:	f7f4 fa9e 	bl	8000230 <memchr>
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	b330      	cbz	r0, 800bd46 <_scanf_i+0xba>
 800bcf8:	f1b8 0f01 	cmp.w	r8, #1
 800bcfc:	d15a      	bne.n	800bdb4 <_scanf_i+0x128>
 800bcfe:	6862      	ldr	r2, [r4, #4]
 800bd00:	b92a      	cbnz	r2, 800bd0e <_scanf_i+0x82>
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	2108      	movs	r1, #8
 800bd06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd0a:	6061      	str	r1, [r4, #4]
 800bd0c:	6022      	str	r2, [r4, #0]
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bd14:	6022      	str	r2, [r4, #0]
 800bd16:	68a2      	ldr	r2, [r4, #8]
 800bd18:	1e51      	subs	r1, r2, #1
 800bd1a:	60a1      	str	r1, [r4, #8]
 800bd1c:	b19a      	cbz	r2, 800bd46 <_scanf_i+0xba>
 800bd1e:	6832      	ldr	r2, [r6, #0]
 800bd20:	1c51      	adds	r1, r2, #1
 800bd22:	6031      	str	r1, [r6, #0]
 800bd24:	7812      	ldrb	r2, [r2, #0]
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	1c5d      	adds	r5, r3, #1
 800bd2a:	6873      	ldr	r3, [r6, #4]
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	6073      	str	r3, [r6, #4]
 800bd32:	dc07      	bgt.n	800bd44 <_scanf_i+0xb8>
 800bd34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4658      	mov	r0, fp
 800bd3c:	4798      	blx	r3
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f040 8086 	bne.w	800be50 <_scanf_i+0x1c4>
 800bd44:	462b      	mov	r3, r5
 800bd46:	f108 0801 	add.w	r8, r8, #1
 800bd4a:	f1b8 0f03 	cmp.w	r8, #3
 800bd4e:	d1c8      	bne.n	800bce2 <_scanf_i+0x56>
 800bd50:	6862      	ldr	r2, [r4, #4]
 800bd52:	b90a      	cbnz	r2, 800bd58 <_scanf_i+0xcc>
 800bd54:	220a      	movs	r2, #10
 800bd56:	6062      	str	r2, [r4, #4]
 800bd58:	6862      	ldr	r2, [r4, #4]
 800bd5a:	4945      	ldr	r1, [pc, #276]	; (800be70 <_scanf_i+0x1e4>)
 800bd5c:	6960      	ldr	r0, [r4, #20]
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	1a89      	subs	r1, r1, r2
 800bd62:	f000 f899 	bl	800be98 <__sccl>
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	f04f 0800 	mov.w	r8, #0
 800bd6c:	461d      	mov	r5, r3
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d03a      	beq.n	800bdec <_scanf_i+0x160>
 800bd76:	6831      	ldr	r1, [r6, #0]
 800bd78:	6960      	ldr	r0, [r4, #20]
 800bd7a:	f891 c000 	ldrb.w	ip, [r1]
 800bd7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d032      	beq.n	800bdec <_scanf_i+0x160>
 800bd86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bd8a:	d121      	bne.n	800bdd0 <_scanf_i+0x144>
 800bd8c:	0510      	lsls	r0, r2, #20
 800bd8e:	d51f      	bpl.n	800bdd0 <_scanf_i+0x144>
 800bd90:	f108 0801 	add.w	r8, r8, #1
 800bd94:	b117      	cbz	r7, 800bd9c <_scanf_i+0x110>
 800bd96:	3301      	adds	r3, #1
 800bd98:	3f01      	subs	r7, #1
 800bd9a:	60a3      	str	r3, [r4, #8]
 800bd9c:	6873      	ldr	r3, [r6, #4]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	6073      	str	r3, [r6, #4]
 800bda4:	dd1b      	ble.n	800bdde <_scanf_i+0x152>
 800bda6:	6833      	ldr	r3, [r6, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	6033      	str	r3, [r6, #0]
 800bdac:	68a3      	ldr	r3, [r4, #8]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	60a3      	str	r3, [r4, #8]
 800bdb2:	e7dc      	b.n	800bd6e <_scanf_i+0xe2>
 800bdb4:	f1b8 0f02 	cmp.w	r8, #2
 800bdb8:	d1ad      	bne.n	800bd16 <_scanf_i+0x8a>
 800bdba:	6822      	ldr	r2, [r4, #0]
 800bdbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bdc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bdc4:	d1bf      	bne.n	800bd46 <_scanf_i+0xba>
 800bdc6:	2110      	movs	r1, #16
 800bdc8:	6061      	str	r1, [r4, #4]
 800bdca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdce:	e7a1      	b.n	800bd14 <_scanf_i+0x88>
 800bdd0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bdd4:	6022      	str	r2, [r4, #0]
 800bdd6:	780b      	ldrb	r3, [r1, #0]
 800bdd8:	702b      	strb	r3, [r5, #0]
 800bdda:	3501      	adds	r5, #1
 800bddc:	e7de      	b.n	800bd9c <_scanf_i+0x110>
 800bdde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bde2:	4631      	mov	r1, r6
 800bde4:	4658      	mov	r0, fp
 800bde6:	4798      	blx	r3
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d0df      	beq.n	800bdac <_scanf_i+0x120>
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	05d9      	lsls	r1, r3, #23
 800bdf0:	d50c      	bpl.n	800be0c <_scanf_i+0x180>
 800bdf2:	454d      	cmp	r5, r9
 800bdf4:	d908      	bls.n	800be08 <_scanf_i+0x17c>
 800bdf6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bdfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdfe:	4632      	mov	r2, r6
 800be00:	4658      	mov	r0, fp
 800be02:	4798      	blx	r3
 800be04:	1e6f      	subs	r7, r5, #1
 800be06:	463d      	mov	r5, r7
 800be08:	454d      	cmp	r5, r9
 800be0a:	d029      	beq.n	800be60 <_scanf_i+0x1d4>
 800be0c:	6822      	ldr	r2, [r4, #0]
 800be0e:	f012 0210 	ands.w	r2, r2, #16
 800be12:	d113      	bne.n	800be3c <_scanf_i+0x1b0>
 800be14:	702a      	strb	r2, [r5, #0]
 800be16:	6863      	ldr	r3, [r4, #4]
 800be18:	9e00      	ldr	r6, [sp, #0]
 800be1a:	4649      	mov	r1, r9
 800be1c:	4658      	mov	r0, fp
 800be1e:	47b0      	blx	r6
 800be20:	f8da 3000 	ldr.w	r3, [sl]
 800be24:	6821      	ldr	r1, [r4, #0]
 800be26:	1d1a      	adds	r2, r3, #4
 800be28:	f8ca 2000 	str.w	r2, [sl]
 800be2c:	f011 0f20 	tst.w	r1, #32
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	d010      	beq.n	800be56 <_scanf_i+0x1ca>
 800be34:	6018      	str	r0, [r3, #0]
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	60e3      	str	r3, [r4, #12]
 800be3c:	eba5 0509 	sub.w	r5, r5, r9
 800be40:	44a8      	add	r8, r5
 800be42:	6925      	ldr	r5, [r4, #16]
 800be44:	4445      	add	r5, r8
 800be46:	6125      	str	r5, [r4, #16]
 800be48:	2000      	movs	r0, #0
 800be4a:	b007      	add	sp, #28
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be50:	f04f 0800 	mov.w	r8, #0
 800be54:	e7ca      	b.n	800bdec <_scanf_i+0x160>
 800be56:	07ca      	lsls	r2, r1, #31
 800be58:	bf4c      	ite	mi
 800be5a:	8018      	strhmi	r0, [r3, #0]
 800be5c:	6018      	strpl	r0, [r3, #0]
 800be5e:	e7ea      	b.n	800be36 <_scanf_i+0x1aa>
 800be60:	2001      	movs	r0, #1
 800be62:	e7f2      	b.n	800be4a <_scanf_i+0x1be>
 800be64:	0800c3e0 	.word	0x0800c3e0
 800be68:	080090b5 	.word	0x080090b5
 800be6c:	0800b6d1 	.word	0x0800b6d1
 800be70:	0800c7d6 	.word	0x0800c7d6

0800be74 <_read_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4c07      	ldr	r4, [pc, #28]	; (800be94 <_read_r+0x20>)
 800be78:	4605      	mov	r5, r0
 800be7a:	4608      	mov	r0, r1
 800be7c:	4611      	mov	r1, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	f7f7 f95c 	bl	8003140 <_read>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_read_r+0x1e>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_read_r+0x1e>
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	20008044 	.word	0x20008044

0800be98 <__sccl>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	780b      	ldrb	r3, [r1, #0]
 800be9c:	2b5e      	cmp	r3, #94	; 0x5e
 800be9e:	bf13      	iteet	ne
 800bea0:	1c4a      	addne	r2, r1, #1
 800bea2:	1c8a      	addeq	r2, r1, #2
 800bea4:	784b      	ldrbeq	r3, [r1, #1]
 800bea6:	2100      	movne	r1, #0
 800bea8:	bf08      	it	eq
 800beaa:	2101      	moveq	r1, #1
 800beac:	1e44      	subs	r4, r0, #1
 800beae:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800beb2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800beb6:	42ac      	cmp	r4, r5
 800beb8:	d1fb      	bne.n	800beb2 <__sccl+0x1a>
 800beba:	b913      	cbnz	r3, 800bec2 <__sccl+0x2a>
 800bebc:	3a01      	subs	r2, #1
 800bebe:	4610      	mov	r0, r2
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	f081 0401 	eor.w	r4, r1, #1
 800bec6:	54c4      	strb	r4, [r0, r3]
 800bec8:	1c51      	adds	r1, r2, #1
 800beca:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bece:	2d2d      	cmp	r5, #45	; 0x2d
 800bed0:	f101 36ff 	add.w	r6, r1, #4294967295
 800bed4:	460a      	mov	r2, r1
 800bed6:	d006      	beq.n	800bee6 <__sccl+0x4e>
 800bed8:	2d5d      	cmp	r5, #93	; 0x5d
 800beda:	d0f0      	beq.n	800bebe <__sccl+0x26>
 800bedc:	b90d      	cbnz	r5, 800bee2 <__sccl+0x4a>
 800bede:	4632      	mov	r2, r6
 800bee0:	e7ed      	b.n	800bebe <__sccl+0x26>
 800bee2:	462b      	mov	r3, r5
 800bee4:	e7ef      	b.n	800bec6 <__sccl+0x2e>
 800bee6:	780e      	ldrb	r6, [r1, #0]
 800bee8:	2e5d      	cmp	r6, #93	; 0x5d
 800beea:	d0fa      	beq.n	800bee2 <__sccl+0x4a>
 800beec:	42b3      	cmp	r3, r6
 800beee:	dcf8      	bgt.n	800bee2 <__sccl+0x4a>
 800bef0:	3301      	adds	r3, #1
 800bef2:	429e      	cmp	r6, r3
 800bef4:	54c4      	strb	r4, [r0, r3]
 800bef6:	dcfb      	bgt.n	800bef0 <__sccl+0x58>
 800bef8:	3102      	adds	r1, #2
 800befa:	e7e6      	b.n	800beca <__sccl+0x32>

0800befc <__submore>:
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d11d      	bne.n	800bf48 <__submore+0x4c>
 800bf0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bf10:	f7fe ffde 	bl	800aed0 <_malloc_r>
 800bf14:	b918      	cbnz	r0, 800bf1e <__submore+0x22>
 800bf16:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf22:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bf28:	6360      	str	r0, [r4, #52]	; 0x34
 800bf2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bf2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bf32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bf36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bf3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bf3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bf42:	6020      	str	r0, [r4, #0]
 800bf44:	2000      	movs	r0, #0
 800bf46:	e7e8      	b.n	800bf1a <__submore+0x1e>
 800bf48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bf4a:	0077      	lsls	r7, r6, #1
 800bf4c:	463a      	mov	r2, r7
 800bf4e:	f7ff fc68 	bl	800b822 <_realloc_r>
 800bf52:	4605      	mov	r5, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0de      	beq.n	800bf16 <__submore+0x1a>
 800bf58:	eb00 0806 	add.w	r8, r0, r6
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	4632      	mov	r2, r6
 800bf60:	4640      	mov	r0, r8
 800bf62:	f7fb ffc3 	bl	8007eec <memcpy>
 800bf66:	f8c4 8000 	str.w	r8, [r4]
 800bf6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bf6e:	e7e9      	b.n	800bf44 <__submore+0x48>

0800bf70 <_malloc_usable_size_r>:
 800bf70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf74:	1f18      	subs	r0, r3, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfbc      	itt	lt
 800bf7a:	580b      	ldrlt	r3, [r1, r0]
 800bf7c:	18c0      	addlt	r0, r0, r3
 800bf7e:	4770      	bx	lr

0800bf80 <_init>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_fini>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr
